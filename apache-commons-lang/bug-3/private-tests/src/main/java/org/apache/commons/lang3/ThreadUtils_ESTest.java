/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 03:45:57 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.Year;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.chrono.IsoEra;
import java.time.chrono.JapaneseDate;
import java.time.chrono.JapaneseEra;
import java.time.chrono.MinguoDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.Collection;
import java.util.Locale;
import java.util.function.Predicate;
import org.apache.commons.lang3.ThreadUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockYear;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThreadUtils_ESTest extends ThreadUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThreadUtils.sleepQuietly((Duration) null);
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadsByName("", ">=");
      Object object0 = new Object();
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual(object0);
      ThreadUtils.findThreadGroups(threadGroup0, false, predicate0);
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "r]23|-^d*MC51?", (-1L));
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      duration0.getSeconds();
      // Undeclared exception!
      try { 
        ThreadUtils.join(mockThread0, duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "org.junitpioneer.jupiter.json.AbstractJsonArgumentsProvider";
      ThreadUtils.findThreadsByName("org.junitpioneer.jupiter.json.AbstractJsonArgumentsProvider", "org.junitpioneer.jupiter.json.AbstractJsonArgumentsProvider");
      // Undeclared exception!
      try { 
        ThreadUtils.findThreads((Predicate<Thread>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-1427L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreadUtils threadUtils0 = new ThreadUtils();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      ChronoLocalDate chronoLocalDate0 = japaneseDate0.plus((-401L), (TemporalUnit) chronoUnit0);
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual((Object) chronoLocalDate0);
      chronoLocalDate0.getChronology();
      ChronoLocalDate.from(chronoLocalDate0);
      predicate0.negate();
      ThreadUtils.findThreadGroups(predicate0);
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-401L), threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      assertEquals("system", threadGroup0.getName());
      
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L);
      duration0.toMillis();
      duration0.plusHours(0L);
      duration0.plusNanos(0L);
      // Undeclared exception!
      try { 
        duration0.plus((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadUtils.getAllThreads();
      ThreadUtils threadUtils0 = new ThreadUtils();
      ThreadUtils.getSystemThreadGroup();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MockClock.tickMinutes((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreadUtils.findThreadsByName("");
      String string0 = null;
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadGroupsByName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      ThreadUtils.findThreadsByName("");
      ThreadUtils.getSystemThreadGroup();
      String string1 = null;
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadsByName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 1L;
      ThreadGroup threadGroup0 = null;
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(1L, (ThreadGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // threadGroup
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadsByName("F\">_F`{WHmV46qG^*", threadGroup0);
      ThreadUtils.getAllThreadGroups();
      Object object0 = new Object();
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual(object0);
      ThreadUtils.findThreadGroups(predicate0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.ofNanos(566L);
      duration0.toNanos();
      Object object0 = new Object();
      duration0.equals(object0);
      Duration duration1 = duration0.plusNanos(566L);
      ThreadUtils.sleep(duration0);
      ThreadUtils.sleep(duration0);
      Predicate<Thread> predicate0 = Predicate.isEqual((Object) duration1);
      ThreadUtils.findThreads(predicate0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThreadUtils threadUtils0 = new ThreadUtils();
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadsByName(",z,H1i<5O5vFlMzKFW", threadGroup0);
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "qQ\"=BQ6";
      ThreadUtils.findThreadGroupsByName("qQ\"=BQ6");
      long long0 = 0L;
      String string1 = "NU)EbjHpT1|*E{<yLh";
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, "NU)EbjHpT1|*E{<yLh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ThreadUtils.findThreadById(871L);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThreadUtils.getAllThreadGroups();
      ThreadUtils threadUtils0 = new ThreadUtils();
      ThreadUtils.getSystemThreadGroup();
      boolean boolean0 = false;
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      Duration duration0 = chronoUnit0.getDuration();
      ThreadUtils.sleepQuietly(duration0);
      Predicate.isEqual((Object) threadUtils0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        ZoneId.ofOffset((String) null, zoneOffset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = 2689L;
      ThreadUtils.findThreadById(2689L);
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadById(2689L, threadGroup0);
      long long1 = (-5379L);
      Duration duration0 = Duration.ofMillis((-5379L));
      // Undeclared exception!
      try { 
        ThreadUtils.sleep(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "name";
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadsByName((String) null, "name");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // threadName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThreadUtils.getSystemThreadGroup();
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "name";
      ThreadUtils.findThreadsByName("name");
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, "predicate");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThreadUtils threadUtils0 = new ThreadUtils();
      ThreadUtils.getAllThreads();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThreadUtils.findThreadById(2051L);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1300), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = (-1192L);
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-1192L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.ThreadUtils$NamePredicate";
      ThreadUtils.findThreadsByName("org.apache.commons.lang3.ThreadUtils$NamePredicate");
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutesSeconds(0, 0, (-1424));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset seconds not in valid range: value -1424 is not in the range -59 to 59
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThreadUtils.getSystemThreadGroup();
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual((Object) null);
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      predicate0.test(threadGroup0);
      Predicate.isEqual((Object) predicate0);
      ThreadUtils.findThreadGroups(predicate0);
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = 0L;
      Duration duration0 = Duration.ofNanos(0L);
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      // Undeclared exception!
      try { 
        duration0.get(chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported unit: Years
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = 0L;
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThreadGroup threadGroup0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-1L), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      boolean boolean0 = true;
      Predicate.isEqual((Object) threadGroup0);
      Predicate.isEqual((Object) threadGroup0);
      LocalDate localDate0 = MockLocalDate.now();
      Period period0 = Period.between(localDate0, localDate0);
      Period period1 = period0.withDays(0);
      IsoChronology isoChronology0 = period1.getChronology();
      // Undeclared exception!
      try { 
        isoChronology0.dateYearDay(0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Duration duration0 = Duration.ofMillis(0L);
      Duration.ofSeconds(0L, 0L);
      ThreadUtils.sleep(duration0);
      ThreadUtils.getSystemThreadGroup();
      StringWriter stringWriter0 = new StringWriter(3733);
      CharBuffer charBuffer0 = CharBuffer.allocate(3733);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 3733, 3733);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        Duration.parse(stringBuffer0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text cannot be parsed to a Duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-133L), "A blank string is not a valid number");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockThread.currentThread();
      // Undeclared exception!
      try { 
        Duration.of(0L, (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // unit
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = Duration.from(duration0);
      ThreadUtils.sleepQuietly(duration1);
      ThreadUtils.getAllThreadGroups();
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadsByName("LY/r,G!", threadGroup0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Object object0 = new Object();
      Predicate<Thread> predicate0 = Predicate.isEqual(object0);
      ThreadUtils.findThreads(threadGroup0, true, predicate0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = (-1584L);
      Duration duration0 = Duration.ofSeconds((-1584L), (-1584L));
      // Undeclared exception!
      try { 
        ThreadUtils.sleep(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      Duration duration0 = chronoUnit0.getDuration();
      duration0.getUnits();
      duration0.multipliedBy(2147483647L);
      ThreadUtils.sleepQuietly(duration0);
      Thread thread0 = MockThread.currentThread();
      Predicate<Thread> predicate0 = Predicate.isEqual((Object) thread0);
      ThreadUtils.findThreads(predicate0);
      ThreadUtils.findThreadById(2147483647L, "T");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.ofMillis(1L);
      ThreadUtils.sleepQuietly(duration0);
      ThreadUtils.findThreadsByName("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-1057L), threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Object object0 = new Object();
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      predicate0.or(predicate1);
      ThreadUtils.findThreadGroups(threadGroup0, true, predicate0);
      String string0 = null;
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-781L), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ThreadUtils.getAllThreads();
      ThreadUtils.findThreadsByName("i}{u+789sg^vH7", "i}{u+789sg^vH7");
      ThreadUtils.findThreadGroupsByName("");
      Thread thread0 = ThreadUtils.findThreadById(1L);
      ThreadUtils.findThreadsByName("", "");
      ThreadUtils.join(thread0, (Duration) null);
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      MockThread mockThread0 = new MockThread("");
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual((Object) mockThread0);
      ThreadUtils.findThreadGroups(threadGroup0, false, predicate0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Collection<Thread> collection0 = ThreadUtils.findThreadsByName("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].", "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].");
      Duration duration0 = Duration.ofSeconds(1L, 1L);
      duration0.equals(collection0);
      duration0.negated();
      ThreadUtils.sleep(duration0);
      ThreadUtils.findThreadsByName("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].");
      Predicate<Thread> predicate0 = null;
      // Undeclared exception!
      try { 
        ThreadUtils.findThreads((ThreadGroup) null, true, (Predicate<Thread>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The group must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadGroupsByName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ThreadUtils.getAllThreads();
      Predicate<ThreadGroup> predicate0 = null;
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadGroups((Predicate<ThreadGroup>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ThreadUtils threadUtils0 = new ThreadUtils();
      Predicate<Thread> predicate0 = Predicate.isEqual((Object) null);
      ThreadUtils.findThreads(predicate0);
      ThreadUtils.getAllThreads();
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Predicate<Thread> predicate1 = Predicate.isEqual((Object) null);
      ThreadUtils.findThreads(threadGroup0, false, predicate1);
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, "Test method must declare at least one parameter: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ThreadUtils.findThreadsByName("su+$:(1{IcB:nKHg");
      Collection<ThreadGroup> collection0 = ThreadUtils.getAllThreadGroups();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long long0 = (-1635L);
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-1635L), threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long long0 = (-2147483648L);
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-2147483648L), threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test47()  throws Throwable  {
  //     ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
  //     boolean boolean0 = true;
  //     Predicate<ThreadGroup> predicate0 = Predicate.isEqual((Object) null);
  //     Predicate<Object> predicate1 = Predicate.isEqual((Object) threadGroup0);
  //     predicate0.and(predicate1);
  //     predicate0.test(threadGroup0);
  //     Predicate<Object> predicate2 = Predicate.isEqual((Object) null);
  //     predicate0.and(predicate2);
  //     ThreadUtils.findThreadGroups(threadGroup0, true, predicate0);
  //     String string0 = "";
  //     String string1 = "rW@RDezTo^2 iAKg1R";
  //     ThreadUtils.findThreadsByName("", "rW@RDezTo^2 iAKg1R");
  //     long long0 = 1L;
  //     String string2 = "org.apache.commons.lang3.ThreadUtils$1";
  //     ThreadUtils.findThreadById(1L, "org.apache.commons.lang3.ThreadUtils$1");
  //     ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
  //     Duration duration0 = chronoUnit0.getDuration();
  //     // Undeclared exception!
  //     try { 
  //       ThreadUtils.join((Thread) null, duration0);
  //       fail("Expecting exception: NullPointerException");
  //     
  //     } catch(NullPointerException e) {
  //        //
  //        // no message in exception (getMessage() returned null)
  //        //
  //        verifyException("org.apache.commons.lang3.ThreadUtils", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ThreadUtils.getAllThreadGroups();
      ThreadUtils.findThreadsByName("", "");
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Chronology.ofLocale(locale0);
      // Undeclared exception!
      try { 
        IsoEra.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      boolean boolean0 = false;
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual((Object) threadGroup0);
      predicate0.negate();
      MockThread mockThread0 = new MockThread(threadGroup0, "File does not exist: ");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate1);
      predicate1.and(predicate2);
      predicate0.and(predicate1);
      predicate0.test(threadGroup0);
      MockThread.getAllStackTraces();
      // Undeclared exception!
      try { 
        MockThread.enumerate((Thread[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Thread> predicate0 = Predicate.isEqual(object0);
      Thread thread0 = MockThread.currentThread();
      Predicate<Thread> predicate1 = Predicate.isEqual((Object) thread0);
      predicate0.and(predicate1);
      MockThread mockThread0 = new MockThread(thread0);
      predicate0.test(mockThread0);
      Predicate.isEqual((Object) null);
      ThreadUtils.findThreads(predicate0);
      ThreadUtils threadUtils0 = new ThreadUtils();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadsByName("", (ThreadGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The group must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ThreadUtils.findThreadById(406L);
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow();
      Locale locale0 = Locale.FRENCH;
      Chronology chronology0 = Chronology.ofLocale(locale0);
      // Undeclared exception!
      try { 
        chronology0.localDateTime(chronoLocalDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDateTime from TemporalAccessor: 2023-11-25 of type java.time.LocalDate
         //
         verifyException("java.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ThreadUtils.findThreadGroupsByName("9lO%'$");
      ThreadUtils.findThreadsByName("threadName");
      Duration duration0 = Duration.ofSeconds(0L);
      Duration.ofMinutes(0L);
      Duration.ofNanos(1L);
      ThreadUtils.sleep(duration0);
      Predicate<Thread> predicate0 = Predicate.isEqual((Object) null);
      Clock clock0 = MockClock.systemUTC();
      Object object0 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      predicate0.and(predicate1);
      MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
      Predicate.isEqual((Object) minguoDate0);
      ThreadUtils.findThreads(predicate0);
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, (ThreadGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // threadGroup
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Predicate<Thread> predicate0 = Predicate.isEqual((Object) threadGroup0);
      ThreadUtils.findThreads(threadGroup0, false, predicate0);
      ThreadUtils.findThreads(predicate0);
      ThreadUtils.findThreadsByName("p4", "p4");
      // Undeclared exception!
      try { 
        JapaneseEra.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // japaneseEra is invalid
         //
         verifyException("java.time.chrono.JapaneseEra", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ThreadUtils threadUtils0 = new ThreadUtils();
      String string0 = null;
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadsByName((String) null, threadGroup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ThreadUtils.getSystemThreadGroup();
      String string0 = null;
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // threadGroupName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Predicate<Thread> predicate0 = Predicate.isEqual((Object) threadGroup0);
      ThreadUtils.findThreads(threadGroup0, true, predicate0);
      assertEquals("system", threadGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      boolean boolean0 = true;
      Predicate.isEqual((Object) threadGroup0);
      // Undeclared exception!
      try { 
        MockHijrahDate.of((-1351), 35, (-1351));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid Hijrah month: 35
         //
         verifyException("java.time.chrono.HijrahChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Collection<Thread> collection0 = ThreadUtils.findThreadsByName("The thread id must be greater than zero", threadGroup0);
      Predicate<Thread> predicate0 = Predicate.isEqual((Object) collection0);
      ThreadUtils.findThreads(predicate0);
      Object object0 = new Object();
      Predicate<ThreadGroup> predicate1 = Predicate.isEqual(object0);
      predicate1.test(threadGroup0);
      ThreadUtils.findThreadGroups(predicate1);
      Duration duration0 = Duration.ofHours((-1717L));
      ChronoUnit chronoUnit0 = ChronoUnit.CENTURIES;
      Duration duration1 = chronoUnit0.getDuration();
      duration1.isZero();
      duration0.plus(duration1);
      // Undeclared exception!
      try { 
        ThreadUtils.sleepQuietly(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ThreadUtils.findThreadGroupsByName("kYIMVl3JE[4~e0A");
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Thread thread0 = ThreadUtils.findThreadById(1L, threadGroup0);
      assertNull(thread0);
      
      ThreadUtils.getAllThreads();
      ThreadUtils.findThreadsByName(")QK");
      ThreadUtils.findThreadsByName(")QK", threadGroup0);
      assertEquals("system", threadGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      duration0.minusMinutes(912L);
      Duration duration1 = duration0.withNanos(0);
      duration0.toMillis();
      ThreadUtils.sleep(duration0);
      assertSame(duration0, duration1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Duration duration0 = null;
      ThreadUtils.sleepQuietly((Duration) null);
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      boolean boolean0 = true;
      Predicate<Thread> predicate0 = Predicate.isEqual((Object) null);
      Thread thread0 = null;
      predicate0.test((Thread) null);
      ThreadUtils.findThreads(threadGroup0, true, predicate0);
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, "threadGroup");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long long0 = (-1L);
      Duration duration0 = Duration.ofDays((-1L));
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      duration0.plusMillis((-2147483648L));
      // Undeclared exception!
      try { 
        Duration.of((-1L), chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unit must not have an estimated duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadsByName("k[U}A!fHTLwjwa2#c", threadGroup0);
      ThreadUtils threadUtils0 = new ThreadUtils();
      Duration duration0 = Duration.ofNanos(2038L);
      ThreadUtils.sleepQuietly(duration0);
      ThreadUtils.findThreadsByName("k[U}A!fHTLwjwa2#c", "");
      ThreadUtils.findThreadById(1223L, "^ Ot8");
      ThreadUtils.getAllThreadGroups();
      ThreadUtils.getAllThreadGroups();
      Thread thread0 = ThreadUtils.findThreadById(1223L, "^ Ot8");
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long long0 = 82L;
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadById(82L, threadGroup0);
      Predicate.isEqual((Object) threadGroup0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      charBuffer0.flip();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_TIME;
      // Undeclared exception!
      try { 
        MockLocalDate.parse((CharSequence) charBuffer0, dateTimeFormatter0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Object object0 = new Object();
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Thread> predicate2 = Predicate.isEqual((Object) predicate1);
      Predicate.isEqual((Object) predicate1);
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadById(4179L, threadGroup0);
      Predicate<Thread> predicate3 = Predicate.isEqual((Object) null);
      predicate1.test(object0);
      predicate0.and(predicate1);
      ThreadUtils.findThreadGroups(predicate0);
      ThreadUtils.getAllThreadGroups();
      ThreadGroup threadGroup1 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadById(3242L, threadGroup1);
      predicate3.and(predicate2);
      Duration duration0 = Duration.ofSeconds((-2777L), 158L);
      duration0.negated();
      // Undeclared exception!
      try { 
        ThreadUtils.sleep(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, (ThreadGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // threadGroup
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      boolean boolean0 = false;
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual((Object) threadGroup0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate<ThreadGroup> predicate2 = predicate0.and(predicate1);
      Predicate<ThreadGroup> predicate3 = predicate0.negate();
      predicate0.or(predicate3);
      ThreadUtils.findThreadGroups(threadGroup0, false, predicate0);
      ThreadUtils.findThreadGroups(predicate0);
      ThreadUtils.getAllThreadGroups();
      predicate0.and(predicate2);
      long long0 = (-1L);
      String string0 = "The predicate must not be null";
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-1L), "The predicate must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ThreadUtils.findThreadGroupsByName(" does not have data element at ");
      ThreadUtils threadUtils0 = new ThreadUtils();
      ThreadUtils.sleep((Duration) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Collection<Thread> collection0 = ThreadUtils.findThreadsByName("e62\"\"Ch=YMl%_\"XRh", threadGroup0);
      Predicate<Thread> predicate0 = Predicate.isEqual((Object) collection0);
      ThreadUtils.findThreads(threadGroup0, true, predicate0);
      Predicate.isEqual((Object) "e62\"\"Ch=YMl%_\"XRh");
      Object object0 = new Object();
      Predicate.isEqual(object0);
      // Undeclared exception!
      try { 
        MockHijrahDate.now((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ThreadGroup threadGroup0 = null;
      boolean boolean0 = false;
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual((Object) null);
      Predicate<ThreadGroup> predicate1 = predicate0.negate();
      Predicate<ThreadGroup> predicate2 = predicate1.and(predicate0);
      predicate0.and(predicate2);
      predicate0.and(predicate1);
      Predicate.isEqual((Object) predicate0);
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadGroups((ThreadGroup) null, false, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // threadGroup
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Object object0 = new Object();
      Predicate.isEqual(object0);
      long long0 = (-1L);
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-1L), threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JapaneseEra japaneseEra0 = JapaneseEra.HEISEI;
      // Undeclared exception!
      try { 
        MockJapaneseDate.of(japaneseEra0, (-2116), (-2116), 5);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // year, month, and day not valid for Era
         //
         verifyException("java.time.chrono.JapaneseDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ThreadUtils.findThreadsByName("\r( %h53{.i", "7vb~>fsUIxEJt*&");
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      chronoUnit0.isTimeBased();
      Duration duration0 = Duration.of(0L, chronoUnit0);
      duration0.abs();
      ThreadUtils.sleepQuietly(duration0);
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Predicate<ThreadGroup> predicate0 = null;
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadGroups(threadGroup0, true, (Predicate<ThreadGroup>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      boolean boolean0 = true;
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual((Object) threadGroup0);
      predicate0.test(threadGroup0);
      predicate0.negate();
      ThreadUtils.findThreadGroups(threadGroup0, true, predicate0);
      ThreadUtils.getSystemThreadGroup();
      Duration duration0 = Duration.ofDays((-1638L));
      // Undeclared exception!
      try { 
        ThreadUtils.sleepQuietly(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ThreadUtils.getAllThreadGroups();
      ThreadUtils threadUtils0 = new ThreadUtils();
      // Undeclared exception!
      try { 
        MockJapaneseDate.of(0, 0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadById(858L, threadGroup0);
      ThreadUtils.findThreadsByName("_f[hV+I%Jsd");
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual((Object) null);
      ThreadUtils.findThreadGroups(predicate0);
      ThreadUtils threadUtils0 = new ThreadUtils();
      String string0 = "Node ";
      MockThread mockThread0 = new MockThread(threadGroup0, "Node ");
      mockThread0.getContextClassLoader();
      MockThread.reset();
      Predicate<Thread> predicate1 = Predicate.isEqual((Object) mockThread0);
      Predicate<Thread> predicate2 = Predicate.isEqual((Object) predicate0);
      predicate2.or(predicate1);
      ThreadUtils.findThreads(predicate1);
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-2831L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      long long0 = 0L;
      Duration duration0 = Duration.ofHours(0L);
      Object object0 = new Object();
      duration0.plusMinutes(0L);
      duration0.minusDays(0L);
      duration0.equals(object0);
      duration0.minusSeconds((-1966L));
      duration0.minusSeconds((-497));
      // Undeclared exception!
      try { 
        duration0.withNanos((-497));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for NanoOfSecond (valid values 0 - 999999999): -497
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadById(345L, threadGroup0);
      Collection<ThreadGroup> collection0 = ThreadUtils.findThreadGroupsByName("1*F}9V0");
      assertFalse(collection0.contains(threadGroup0));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Duration duration0 = Duration.ofDays((-1L));
      // Undeclared exception!
      try { 
        ThreadUtils.sleep(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Object object0 = new Object();
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) null);
      predicate2.and(predicate1);
      predicate1.and(predicate2);
      predicate1.and(predicate2);
      predicate0.and(predicate1);
      ThreadUtils.findThreadGroups(threadGroup0, false, predicate0);
      ThreadUtils.findThreadById(1424L, threadGroup0);
      Thread thread0 = ThreadUtils.findThreadById(826L, threadGroup0);
      assertNull(thread0);
      
      ThreadUtils.findThreadGroups(threadGroup0, false, predicate0);
      assertEquals("system", threadGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ThreadUtils.getAllThreadGroups();
      String string0 = "TMnCy6)[";
      ThreadUtils.findThreadGroupsByName("TMnCy6)[");
      ThreadUtils.getSystemThreadGroup();
      boolean boolean0 = true;
      Object object0 = new Object();
      Predicate<Thread> predicate0 = Predicate.isEqual(object0);
      MockThread mockThread0 = new MockThread("TMnCy6)[");
      predicate0.test(mockThread0);
      // Undeclared exception!
      try { 
        predicate0.and((Predicate<? super Thread>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ThreadUtils.findThreadsByName("b4NOI*1H", "b4NOI*1H");
      ThreadUtils.findThreadGroupsByName("b4NOI*1H");
      ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-181L), "b4NOI*1H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ThreadUtils.getAllThreadGroups();
      ThreadUtils.findThreadById(888L);
      Object object0 = new Object();
      Predicate<Thread> predicate0 = Predicate.isEqual(object0);
      Collection<Thread> collection0 = ThreadUtils.findThreads(predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = "d`GR:9jV4-RZ";
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-2283L), "d`GR:9jV4-RZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Object object0 = new Object();
      Predicate<Thread> predicate0 = Predicate.isEqual(object0);
      ThreadUtils.findThreads(threadGroup0, false, predicate0);
      assertEquals("system", threadGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Month month0 = Month.SEPTEMBER;
      Year year0 = MockYear.now();
      // Undeclared exception!
      try { 
        month0.adjustInto(year0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: MonthOfYear
         //
         verifyException("java.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadsByName("+qD6jreR", threadGroup0);
      Duration.ofSeconds(1012L);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MockLocalTime.of((-2512), 0, 0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for HourOfDay (valid values 0 - 23): -2512
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ThreadUtils threadUtils0 = new ThreadUtils();
      ThreadUtils.findThreadsByName("$");
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      MockThread mockThread0 = new MockThread(threadGroup0, "ky7");
      Predicate<Thread> predicate0 = Predicate.isEqual((Object) mockThread0);
      ThreadUtils.findThreads(threadGroup0, true, predicate0);
      long long0 = 0L;
      ThreadGroup threadGroup1 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, threadGroup1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ThreadUtils.getAllThreads();
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadGroups(threadGroup0, true, (Predicate<ThreadGroup>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      long long0 = 0L;
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      long long0 = (-2371L);
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-2371L), threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadsByName((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // threadName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Predicate<Thread> predicate0 = Predicate.isEqual((Object) threadGroup0);
      ThreadUtils.findThreads(threadGroup0, false, predicate0);
      ThreadUtils.getSystemThreadGroup();
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Collection<ThreadGroup> collection0 = ThreadUtils.getAllThreadGroups();
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual((Object) collection0);
      ThreadUtils.findThreadGroups(threadGroup0, true, predicate0);
      ThreadUtils.findThreadsByName("CXsa51n}vQ`\"IQC", threadGroup0);
      ThreadUtils.getAllThreadGroups();
      ThreadGroup threadGroup1 = ThreadUtils.getSystemThreadGroup();
      MockThread mockThread0 = new MockThread("CXsa51n}vQ`\"IQC");
      MockThread mockThread1 = new MockThread(mockThread0, "CXsa51n}vQ`\"IQC");
      Duration duration0 = Duration.ofMillis(0L);
      ThreadUtils.join(mockThread1, duration0);
      ThreadUtils.findThreadsByName("CXsa51n}vQ`\"IQC", "org.apache.commons.lang3.ThreadUtils$NamePredicate");
      ThreadUtils.getAllThreadGroups();
      Thread thread0 = ThreadUtils.findThreadById(3183L, threadGroup1);
      assertEquals("system", threadGroup1.getName());
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Predicate<Thread> predicate0 = Predicate.isEqual((Object) threadGroup0);
      String string0 = "]$ygf<@i";
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      MockThread.dumpStack();
      Predicate.isEqual((Object) mockThread0);
      ThreadUtils.findThreadById(3130L, "]$ygf<@i");
      predicate0.negate();
      predicate0.test((Thread) null);
      ThreadUtils.findThreads(threadGroup0, false, predicate0);
      ThreadUtils.findThreadById(3130L, threadGroup0);
      long long0 = (-403L);
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-403L), "]$ygf<@i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Duration.ofNanos((-2147483648L));
      long long0 = 1315L;
      // Undeclared exception!
      try { 
        MockClock.tickMinutes((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }
}
