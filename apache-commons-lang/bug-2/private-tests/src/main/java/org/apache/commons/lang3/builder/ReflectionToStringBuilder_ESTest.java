/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 03:43:13 GMT 2023
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Field;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle;
import org.apache.commons.lang3.builder.RecursiveToStringStyle;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.apache.commons.lang3.builder.StandardToStringStyle;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectionToStringBuilder_ESTest extends ReflectionToStringBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2SGMf;am+2LS ?";
      stringArray0[1] = "";
      stringArray0[2] = "fw FOz'ODB*y";
      stringArray0[3] = "anu)t_qN#vS3X#;Jx";
      stringArray0[4] = "";
      stringArray0[5] = "6OZZqzi)?T?";
      stringArray0[6] = "lY>Mq#+s#'\"ByGW@?";
      stringArray0[7] = "";
      ReflectionToStringBuilder.toStringInclude(object0, stringArray0);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      StringBuffer stringBuffer0 = new StringBuffer("java.lang.Object@1[]]");
      Class<String> class0 = String.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("LQ~.>2r7iJFw6oUJc:", (ToStringStyle) multilineRecursiveToStringStyle0, stringBuffer0, (Class<? super String>) class0, true, true, true);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray("fw FOz'ODB*y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer("=/Iwx(nh@[tNm");
      Class<String> class0 = String.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("=/Iwx(nh@[tNm", toStringStyle0, stringBuffer0, (Class<? super String>) class0, true, true);
      String[] stringArray0 = new String[1];
      ToStringBuilder.setDefaultStyle(toStringStyle0);
      stringArray0[0] = "=/Iwx(nh@[tNm";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      reflectionToStringBuilder0.setAppendStatics(true);
      reflectionToStringBuilder0.isAppendStatics();
      ReflectionToStringBuilder.toNoNullStringArray(stringArray0);
      reflectionToStringBuilder0.setExcludeNullValues(true);
      ReflectionToStringBuilder.toString("Q>kls7iC=lWr>(&u", toStringStyle0, true, true, (Class<? super String>) class0);
      reflectionToStringBuilder1.isAppendStatics();
      ReflectionToStringBuilder.toStringInclude((Object) "java.lang.String$CaseInsensitiveComparator@2e4f73f6,1205774223,{},-6849794470754667710,{Q,>,k,l,s,7,i,C,=,l,W,r,>,(,&,u}", stringArray0);
      Class<Field> class1 = Field.class;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Field) null, toStringStyle0, true, false, (Class<? super Field>) class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      ReflectionToStringBuilder.toString(object0, toStringStyle0, true);
      Object object1 = new Object();
      ReflectionToStringBuilder.toString(object1, toStringStyle0);
      ToStringStyle toStringStyle1 = ToStringStyle.SIMPLE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object1, toStringStyle1);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      multilineRecursiveToStringStyle0.setFieldSeparatorAtStart(true);
      ReflectionToStringBuilder.toString(object1, (ToStringStyle) multilineRecursiveToStringStyle0, true, true);
      reflectionToStringBuilder0.toString();
      reflectionToStringBuilder0.toString();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      ReflectionToStringBuilder.toStringExclude((Object) "java.lang.Object@3[]", stringArray0);
      ReflectionToStringBuilder.toString((Object) "", toStringStyle1, true);
      ReflectionToStringBuilder.toStringInclude((Object) "java.lang.Object@3[]", (Collection<String>) linkedList0);
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder1.appendFieldsIn(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", toStringStyle0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      stringArray0[2] = "qbnT";
      stringArray0[3] = "";
      stringArray0[4] = "";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      Class<String> class0 = String.class;
      ReflectionToStringBuilder.toString("Ks4Br FhO+", toStringStyle0, false, false, (Class<? super String>) class0);
      ToStringBuilder toStringBuilder0 = reflectionToStringBuilder1.append((String) null, (short)0);
      ReflectionToStringBuilder.toString((Object) "");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) reflectionToStringBuilder0;
      objectArray0[1] = (Object) "java.lang.String@3[\n  hash=-1379455326\n  value={K,s,4,B,r, ,F,h,O,+}\n]";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) toStringStyle0;
      objectArray0[4] = (Object) toStringBuilder0;
      objectArray0[5] = (Object) toStringStyle0;
      objectArray0[6] = (Object) "qbnT";
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // includeFieldNames and excludeFieldNames must not intersect
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      
      linkedList0.clear();
      Stream<String> stream0 = linkedList0.parallelStream();
      ReflectionToStringBuilder.toStringExclude((Object) "org.apache.commons.lang3.builder.ReflectionToStringBuilder", (Collection<String>) linkedList0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stream0;
      objectArray0[1] = (Object) "java.lang.String@1[hash=239648044,value={o,r,g,.,a,p,a,c,h,e,.,c,o,m,m,o,n,s,.,l,a,n,g,3,.,b,u,i,l,d,e,r,.,R,e,f,l,e,c,t,i,o,n,T,o,S,t,r,i,n,g,B,u,i,l,d,e,r}]hash=239648044,value={o,r,g,.,a,p,a,c,h,e,.,c,o,m,m,o,n,s,.,l,a,n,g,3,.,b,u,i,l,d,e,r,.,R,e,f,l,e,c,t,i,o,n,T,o,S,t,r,i,n,g,B,u,i,l,d,e,r}]";
      objectArray0[2] = (Object) "java.lang.String@1[hash=239648044,value={o,r,g,.,a,p,a,c,h,e,.,c,o,m,m,o,n,s,.,l,a,n,g,3,.,b,u,i,l,d,e,r,.,R,e,f,l,e,c,t,i,o,n,T,o,S,t,r,i,n,g,B,u,i,l,d,e,r}]hash=239648044,value={o,r,g,.,a,p,a,c,h,e,.,c,o,m,m,o,n,s,.,l,a,n,g,3,.,b,u,i,l,d,e,r,.,R,e,f,l,e,c,t,i,o,n,T,o,S,t,r,i,n,g,B,u,i,l,d,e,r}]";
      objectArray0[3] = (Object) "org.apache.commons.lang3.builder.ReflectionToStringBuilder";
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) stream0;
      objectArray0[6] = (Object) stream0;
      objectArray0[7] = (Object) stream0;
      ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      String string0 = ReflectionToStringBuilder.toStringExclude(objectArray0[6], (Collection<String>) linkedList0);
      Predicate<String> predicate0 = Predicate.isEqual(objectArray0[5]);
      linkedList0.removeIf(predicate0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(objectArray0[6]);
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      reflectionToStringBuilder0.append("", (Object) "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].", false);
      ReflectionToStringBuilder.toString((Object) "-z#m zRL.aqHCN:?;g", toStringStyle0, true, true);
      reflectionToStringBuilder0.isAppendStatics();
      reflectionToStringBuilder0.setAppendStatics(true);
      String string1 = ReflectionToStringBuilder.toString(objectArray0[0], toStringStyle0);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)36;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)36;
      intArray0[1] = (int) (short)36;
      intArray0[2] = (int) (short)36;
      intArray0[3] = (int) (short)36;
      reflectionToStringBuilder0.append("org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle", intArray0, false);
      shortArray0[1] = (short)737;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (-2413);
      shortArray0[4] = (short) (-2977);
      shortArray0[5] = (short)1;
      reflectionToStringBuilder0.append(shortArray0);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      ReflectionToStringBuilder.toString(object0, toStringStyle0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ReflectionToStringBuilder.toStringExclude(object0, (Collection<String>) linkedList0);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.setUpToClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified class is not a superclass of the object
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)40;
      reflectionToStringBuilder0.append("[3&|gZ fGg^{bHr_{a", byteArray0, true);
      reflectionToStringBuilder0.setAppendStatics(true);
      boolean boolean0 = reflectionToStringBuilder0.isAppendStatics();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "t`3RcADgS$";
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("t`3RcADgS$");
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      boolean boolean0 = false;
      ReflectionToStringBuilder.toString((Object) "t`3RcADgS$", toStringStyle0, false);
      reflectionToStringBuilder0.getUpToClass();
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.appendFieldsIn((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray((Collection<String>) null);
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", toStringStyle0);
      ReflectionToStringBuilder.toStringExclude((Object) "s3Ztq_+!LHg7+%3g", (Collection<String>) null);
      reflectionToStringBuilder0.isExcludeNullValues();
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      ReflectionToStringBuilder reflectionToStringBuilder2 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      reflectionToStringBuilder2.append(0L);
      reflectionToStringBuilder0.toString();
      reflectionToStringBuilder0.setAppendStatics(false);
      ReflectionToStringBuilder.toNoNullStringArray(stringArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 4404;
      intArray0[1] = 0;
      intArray0[2] = (-1472);
      intArray0[3] = 1;
      reflectionToStringBuilder2.append("java.lang.String@3[hash=-327312136,value={s,3,Z,t,q,_,+,!,L,H,g,7,+,%,3,g}]hash=-327312136,value={s,3,Z,t,q,_,+,!,L,H,g,7,+,%,3,g}]", intArray0, false);
      reflectionToStringBuilder2.toString();
      reflectionToStringBuilder2.isAppendStatics();
      Object object0 = new Object();
      ReflectionToStringBuilder.toStringInclude(object0, stringArray0);
      reflectionToStringBuilder1.toString();
      reflectionToStringBuilder0.getUpToClass();
      reflectionToStringBuilder1.setUpToClass((Class<?>) null);
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      StringBuffer stringBuffer0 = new StringBuffer();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", multilineRecursiveToStringStyle0, stringBuffer0);
      multilineRecursiveToStringStyle0.append(stringBuffer0, "", false);
      int[] intArray0 = new int[5];
      intArray0[0] = (-227);
      intArray0[1] = 5;
      intArray0[2] = (-992);
      intArray0[3] = 376;
      intArray0[4] = 0;
      multilineRecursiveToStringStyle0.appendSummary(stringBuffer0, "X}|%NiWx><iqP2RVk", intArray0);
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames((String[]) null);
      reflectionToStringBuilder1.setAppendTransients(true);
      reflectionToStringBuilder0.setExcludeNullValues(false);
      assertTrue(reflectionToStringBuilder0.isAppendTransients());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      boolean boolean0 = true;
      ReflectionToStringBuilder.toString(object0, (ToStringStyle) recursiveToStringStyle0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      Class<String> class0 = String.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("java.lang.Object@2[]", (ToStringStyle) recursiveToStringStyle0, stringBuffer0, (Class<? super String>) class0, true, true);
      stringBuffer0.chars();
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1251;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-3029);
      shortArray0[3] = (short)10;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)1505;
      shortArray0[6] = (short)64;
      recursiveToStringStyle0.appendDetail(stringBuffer0, "java.lang.Object@2[]", shortArray0);
      reflectionToStringBuilder0.setUpToClass(class0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getIncludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Collection<String> collection0 = null;
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray((Collection<String>) null);
      ReflectionToStringBuilder.toNoNullStringArray((Collection<String>) null);
      String string0 = "/0Z4OYv(1{9.C4FtF";
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer("/0Z4OYv(1{9.C4FtF");
      Class<String> class0 = String.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("/0Z4OYv(1{9.C4FtF", toStringStyle0, stringBuffer0, (Class<? super String>) class0, false, true, true);
      reflectionToStringBuilder0.getUpToClass();
      ReflectionToStringBuilder.toStringInclude((Object) "/0Z4OYv(1{9.C4FtF", stringArray0);
      reflectionToStringBuilder0.isExcludeNullValues();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1683);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 10;
      intArray0[4] = 0;
      intArray0[5] = (-715);
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      reflectionToStringBuilder0.append("", intArray0);
      ReflectionToStringBuilder.toString((Object) "java.lang.String@1[hash=178522193,value={/,0,Z,4,O,Y,v,(,1,{,9,.,C,4,F,t,F}]hash=178522193,value={/,0,Z,4,O,Y,v,(,1,{,9,.,C,4,F,t,F}]", toStringStyle0, true);
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      Class<Field> class1 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder1.appendFieldsIn(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(")A/^");
      reflectionToStringBuilder0.toString();
      reflectionToStringBuilder0.append(")A/^", 372L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5355.877885193;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3599.684889294854);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-22.658777145962);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      reflectionToStringBuilder0.append("java.lang.String@1[hash=1285447,value={),A,/,^}]", doubleArray0, true);
      reflectionToStringBuilder0.setAppendTransients(true);
      reflectionToStringBuilder0.isAppendTransients();
      reflectionToStringBuilder0.setAppendStatics(true);
      assertTrue(reflectionToStringBuilder0.isAppendTransients());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      Object object1 = new Object();
      reflectionToStringBuilder0.appendAsObjectToString(object1);
      reflectionToStringBuilder0.toString();
      Object object2 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      ReflectionToStringBuilder.toString(object2, toStringStyle0);
      Class<String> class0 = String.class;
      ReflectionToStringBuilder.toString("java.lang.Object@4[]", toStringStyle0, true, false, false, (Class<? super String>) class0);
      reflectionToStringBuilder0.isAppendStatics();
      Class<Field> class1 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.appendFieldsIn(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toStringExclude((Object) null, (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      ReflectionToStringBuilder.toString(object0, toStringStyle0);
      ToStringStyle toStringStyle1 = ToStringStyle.SHORT_PREFIX_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer(1325);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle1, stringBuffer0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Object@1[]";
      stringArray0[1] = "java.lang.Object@1[]";
      stringArray0[2] = "java.lang.Object@1[]";
      stringArray0[3] = "java.lang.Object@1[]";
      stringArray0[4] = "java.lang.Object@1[]";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1325;
      reflectionToStringBuilder1.append("java.lang.Object@1[]", floatArray0);
      reflectionToStringBuilder1.setAppendStatics(true);
      reflectionToStringBuilder1.getExcludeFieldNames();
      ReflectionToStringBuilder.toNoNullStringArray(stringArray0);
      ReflectionToStringBuilder.toStringInclude((Object) "java.lang.Object@1[]", stringArray0);
      ReflectionToStringBuilder.toString((Object) "java.lang.Object@1[]", toStringStyle0, true);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Field) null, toStringStyle1, true, true, false, (Class<? super Field>) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, (ToStringStyle) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "?I{xRJfm}t@6m`il";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      String[] stringArray1 = reflectionToStringBuilder1.getExcludeFieldNames();
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "S:";
      stringArray0[1] = "j<*FQ9HHWJ";
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = '\"';
      charArray0[2] = ':';
      charArray0[3] = 'H';
      charArray0[4] = 'R';
      reflectionToStringBuilder0.append("$", charArray0);
      stringArray0[2] = ")t8a";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      String[] stringArray1 = reflectionToStringBuilder1.getIncludeFieldNames();
      ReflectionToStringBuilder.toStringExclude((Object) ")t8a", stringArray1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ReflectionToStringBuilder.toStringExclude((Object) "S:", (Collection<String>) linkedList0);
      String[] stringArray2 = ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      assertNotSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "bI]:s3K/J~";
      stringArray0[2] = "k/CI6( a9*Yf ";
      stringArray0[3] = "D\"0}1C*a3l4Ym]7FW";
      stringArray0[4] = ",@q#eRK~sk2Rt>G_Ja";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "includeFieldNames and excludeFieldNames must not intersect";
      ReflectionToStringBuilder.toStringInclude(object0, stringArray0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.insert(0, (long) 0);
      Class<String> class0 = String.class;
      stringBuffer0.append((CharSequence) "", 0, 0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(",@q#eRK~sk2Rt>G_Ja", toStringStyle0, stringBuffer0, (Class<? super String>) class0, true, false, false);
      assertTrue(reflectionToStringBuilder0.isAppendTransients());
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
      assertFalse(reflectionToStringBuilder0.isExcludeNullValues());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Field) null, toStringStyle0, false, true, (Class<? super Field>) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'q';
      charArray0[2] = 'y';
      charArray0[3] = '2';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      Class<Field> class0 = Field.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Field) null, toStringStyle0, stringBuffer0, (Class<? super Field>) class0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      Class<Field> class0 = Field.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Field) null, toStringStyle0, (StringBuffer) null, (Class<? super Field>) class0, true, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      Class<String> class0 = String.class;
      ReflectionToStringBuilder.toString("", toStringStyle0, false, false, false, (Class<? super String>) class0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("java.lang.String@1[hash=0,value={}]");
      reflectionToStringBuilder0.append("", false);
      reflectionToStringBuilder0.toString();
      reflectionToStringBuilder0.isExcludeNullValues();
      reflectionToStringBuilder0.isExcludeNullValues();
      String string0 = "jen";
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      reflectionToStringBuilder0.append("jen", booleanArray0, false);
      Object object0 = new Object();
      ReflectionToStringBuilder.toString(object0, toStringStyle0, true);
      reflectionToStringBuilder0.isAppendStatics();
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, toStringStyle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toStringExclude((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.clear();
      ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      ReflectionToStringBuilder.toString((Object) "Specified class is not a superclass of the object", toStringStyle0, false, false);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("Specified class is not a superclass of the object", toStringStyle0);
      reflectionToStringBuilder0.getUpToClass();
      Object object0 = null;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toStringInclude((Object) null, (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ReflectionToStringBuilder.toNoNullStringArray((Object[]) null);
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      String string0 = "4tStnj#4cQ";
      // Undeclared exception!
      try { 
        ToStringBuilder.reflectionToString((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      reflectionToStringBuilder0.append("includeFieldNames and excludeFieldNames must not intersect", (byte) (-3));
      String string0 = reflectionToStringBuilder0.toString();
      reflectionToStringBuilder0.getUpToClass();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Object@1[includeFieldNames and excludeFieldNames must not intersect=-3]";
      stringArray0[1] = "java.lang.Object@1[includeFieldNames and excludeFieldNames must not intersect=-3]";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      ReflectionToStringBuilder.toNoNullStringArray(stringArray0);
      ReflectionToStringBuilder.toNoNullStringArray(stringArray0);
      float[] floatArray0 = new float[0];
      reflectionToStringBuilder1.append("~cRZniI", floatArray0);
      Class<Field> class0 = Field.class;
      reflectionToStringBuilder1.appendFieldsIn(class0);
      String string1 = ReflectionToStringBuilder.toString(object0, toStringStyle0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Ffz#W;/8P=&_";
      stringArray0[1] = "F/w'`*\"T%0vx!";
      stringArray0[2] = "ML%9P9^<9>";
      stringArray0[3] = "FoG$-:~' F2I#";
      stringArray0[4] = "";
      stringArray0[5] = "[";
      stringArray0[6] = "";
      ReflectionToStringBuilder.toStringInclude(object0, stringArray0);
      Object object1 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerFirst(" e97y/llsGVAR3]}!");
      linkedList0.pop();
      ReflectionToStringBuilder.toStringExclude(object1, (Collection<String>) linkedList0);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      ReflectionToStringBuilder.toString(object0, toStringStyle0, true);
      Object object2 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object2);
      ReflectionToStringBuilder.toString(object2, toStringStyle0);
      Object object3 = new Object();
      ReflectionToStringBuilder.toString(object3, toStringStyle0, true);
      String string0 = ReflectionToStringBuilder.toString(object1, toStringStyle0, true, true);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      reflectionToStringBuilder0.getUpToClass();
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-15);
      reflectionToStringBuilder0.append("org.apache.commons.lang3.builder.ReflectionToStringBuilder", byteArray0, false);
      ReflectionToStringBuilder.toString(object0, (ToStringStyle) multilineRecursiveToStringStyle0, false);
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-88L);
      longArray0[2] = (-93L);
      longArray0[3] = 0L;
      longArray0[4] = 1593L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      reflectionToStringBuilder0.append("java.lang.Object@1[\n  \n]", longArray0);
      reflectionToStringBuilder0.setAppendStatics(false);
      reflectionToStringBuilder0.isExcludeNullValues();
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "&xPO''");
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2031;
      shortArray0[1] = (short) (-624);
      shortArray0[2] = (short)163;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-965);
      shortArray0[6] = (short)2064;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short) (-290);
      Boolean boolean0 = Boolean.FALSE;
      multilineRecursiveToStringStyle0.append(stringBuffer0, "", shortArray0, boolean0);
      StringBuffer stringBuffer1 = new StringBuffer();
      Class<String> class0 = String.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("&xPO''", (ToStringStyle) multilineRecursiveToStringStyle0, stringBuffer1, (Class<? super String>) class0, true, true, true);
      multilineRecursiveToStringStyle0.append(stringBuffer1, "&xPO''", 1.5);
      String[] stringArray0 = new String[0];
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      ReflectionToStringBuilder reflectionToStringBuilder2 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      reflectionToStringBuilder0.excludeFieldNames = stringArray0;
      booleanArray0[1] = true;
      reflectionToStringBuilder1.append(booleanArray0);
      reflectionToStringBuilder2.getExcludeFieldNames();
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short)1;
      shortArray1[1] = (short)0;
      reflectionToStringBuilder0.append("org.apache.commons.lang3.builder.ReflectionToStringBuilder", shortArray1);
      reflectionToStringBuilder1.getIncludeFieldNames();
      reflectionToStringBuilder0.getExcludeFieldNames();
      String string0 = ReflectionToStringBuilder.toString((Object) "org.apache.commons.lang3.builder.ReflectionToStringBuilder");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      ReflectionToStringBuilder.toStringExclude((Object) "V,mRUN?LZK,E", (Collection<String>) linkedList0);
      Object[] objectArray0 = new Object[0];
      linkedList0.add("java.lang.String@1[hash=-1264506642,value={V,,,,m,R,U,N,?,L,Z,,K,,,E}]hash=-1264506642,value={V,,,,m,R,U,N,?,L,Z,,K,,,E}]");
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Class<String> class0 = String.class;
      ReflectionToStringBuilder.toString("java.lang.String@1[hash=-1264506642,value={V,,,,m,R,U,N,?,L,Z,,K,,,E}]hash=-1264506642,value={V,,,,m,R,U,N,?,L,Z,,K,,,E}]", toStringStyle0, false, false, true, (Class<? super String>) class0);
      ReflectionToStringBuilder.toStringExclude((Object) "V,mRUN?LZK,E", stringArray0);
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      reflectionToStringBuilder1.toString();
      reflectionToStringBuilder1.setExcludeNullValues(false);
      ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder1.appendFieldsIn(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = null;
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, toStringStyle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder.toStringExclude(object0, (Collection<String>) null);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer();
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, toStringStyle0, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      StringBuffer stringBuffer0 = new StringBuffer("");
      multilineRecursiveToStringStyle0.appendNullText(stringBuffer0, "");
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, multilineRecursiveToStringStyle0, stringBuffer0);
      String[] stringArray0 = new String[0];
      Object object1 = new Object();
      ReflectionToStringBuilder.toString(object1, (ToStringStyle) multilineRecursiveToStringStyle0, true, true);
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      stringBuffer0.insert(0, 0);
      reflectionToStringBuilder1.includeFieldNames = stringArray0;
      stringBuffer0.delete(0, 0);
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      reflectionToStringBuilder1.append(booleanArray0);
      stringBuffer0.codePoints();
      reflectionToStringBuilder1.append("", 0);
      multilineRecursiveToStringStyle0.appendIdentityHashCode(stringBuffer0, object1);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder1.accept((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'{2?j";
      stringArray0[1] = "?p]";
      stringArray0[2] = "org.apache.commons.lang3.builder.ReflectionToStringBuilder";
      stringArray0[3] = "JVd.@QZb O#n";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " or any enclosing class.";
      stringArray0[7] = ";6~e%J~T{Y";
      ReflectionToStringBuilder.toStringInclude(object0, stringArray0);
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.setUpToClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified class is not a superclass of the object
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = null;
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, (ToStringStyle) null);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.appendFieldsIn(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, (ToStringStyle) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.junitpioneer.jupiter.CartesianEnumArgumentsProvider";
      stringArray0[1] = "ok8~n*0ID\"cv7Nc";
      stringArray0[2] = "m:";
      stringArray0[3] = "'FI)omq ";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = 1833L;
      longArray0[1] = 1683L;
      reflectionToStringBuilder1.append((String) null, longArray0, false);
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, (ToStringStyle) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("OY");
      ReflectionToStringBuilder.toStringInclude(object0, (Collection<String>) linkedList0);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      StringBuffer stringBuffer0 = new StringBuffer();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, standardToStringStyle0, stringBuffer0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1265);
      reflectionToStringBuilder0.append(intArray0);
      ToStringBuilder.reflectionToString(object0);
      reflectionToStringBuilder0.append((-1265));
      reflectionToStringBuilder0.setAppendTransients(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Object@1[]]";
      stringArray0[1] = "includeFieldNames and excludeFieldNames must not intersect";
      stringArray0[2] = "OY";
      stringArray0[3] = "OY";
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toStringInclude((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder.toString(object0, (ToStringStyle) null, false, false);
      Object object1 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Object@1[]";
      ReflectionToStringBuilder.toStringExclude(object1, stringArray0);
      Object object2 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object2, (ToStringStyle) null);
      reflectionToStringBuilder0.append((int[]) null);
      reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      String string0 = ReflectionToStringBuilder.toString((Object) "The Array must not be null", toStringStyle0);
      Object object0 = new Object();
      ReflectionToStringBuilder.toStringExclude(object0, (String[]) null);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("java.lang.Object@3[]]", toStringStyle0);
      ReflectionToStringBuilder.toNoNullStringArray((Object[]) null);
      reflectionToStringBuilder0.isAppendStatics();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)861;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)8;
      reflectionToStringBuilder0.append("The Array must not be null", shortArray0, true);
      reflectionToStringBuilder0.setAppendStatics(false);
      ReflectionToStringBuilder.toStringExclude((Object) "java.lang.Object@3[]]", (String[]) null);
      String string1 = ReflectionToStringBuilder.toString((Object) "java.lang.String@5[hash=1930492597,value={j,a,v,a,.,l,a,n,g,.,O,b,j,e,c,t,@,3,[,],]}]hash=1930492597,value={j,a,v,a,.,l,a,n,g,.,O,b,j,e,c,t,@,3,[,],]}]", toStringStyle0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ReflectionToStringBuilder.toString(object0);
      assertNotNull(string0);
      
      ReflectionToStringBuilder.toString((Object) "java.lang.Object@1[]");
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      ReflectionToStringBuilder.toString(object0, toStringStyle0, false, false);
      ToStringStyle toStringStyle1 = ToStringStyle.MULTI_LINE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("java.lang.String@3[hash=339366694,value={j,a,v,a,.,l,a,n,g,.,O,b,j,e,c,t,@,1,[,]}]", toStringStyle1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.lang.Object@1[]";
      stringArray0[1] = "java.lang.String@3[hash=339366694,value={j,a,v,a,.,l,a,n,g,.,O,b,j,e,c,t,@,1,[,]}]";
      stringArray0[2] = "java.lang.Object@1[]";
      stringArray0[3] = "java.lang.Object@1[]";
      stringArray0[4] = "//oD&NVZ=`!@KJgFeTJ";
      stringArray0[5] = "";
      stringArray0[6] = "java.lang.String@3[hash=339366694,value={j,a,v,a,.,l,a,n,g,.,O,b,j,e,c,t,@,1,[,]}]";
      stringArray0[7] = "java.lang.Object@1[]";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      String[] stringArray1 = new String[0];
      ReflectionToStringBuilder reflectionToStringBuilder2 = reflectionToStringBuilder1.setIncludeFieldNames(stringArray1);
      assertSame(reflectionToStringBuilder2, reflectionToStringBuilder0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      Class<String> class0 = String.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", toStringStyle0, (StringBuffer) null, (Class<? super String>) class0, true, false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-310);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)36;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-255);
      shortArray0[5] = (short)0;
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray((Object[]) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = null;
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, toStringStyle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "';7";
      // Undeclared exception!
      try { 
        linkedList0.set(867, "';7");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 867, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "&M#)R5";
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      Class<String> class0 = String.class;
      ReflectionToStringBuilder.toString("&M#)R5", toStringStyle0, true, true, true, (Class<? super String>) class0);
      boolean boolean0 = false;
      ReflectionToStringBuilder.toString((Object) "java.lang.String@1[CASE_INSENSITIVE_ORDER=java.lang.String$CaseInsensitiveComparator@2e4f73f6,hash=1160103536,serialPersistentFields={},serialVersionUID=-6849794470754667710,value={&,M,#,),R,5}]", toStringStyle0, false);
      String string1 = null;
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, toStringStyle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      reflectionToStringBuilder0.append("QlxRb%AzbsZl{**,S", booleanArray0, true);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.setUpToClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified class is not a superclass of the object
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      ReflectionToStringBuilder.toString((Object) "null", toStringStyle0, false, false);
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ReflectionToStringBuilder.toStringInclude(object0, (Collection<String>) linkedList0);
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, toStringStyle0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      Object object0 = new Object();
      String string0 = ReflectionToStringBuilder.toStringExclude(object0, (String[]) null);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("java.lang.Object@1[]]", toStringStyle0);
      ReflectionToStringBuilder.toNoNullStringArray((Object[]) null);
      reflectionToStringBuilder0.isAppendStatics();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)861;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)8;
      reflectionToStringBuilder0.setAppendStatics(false);
      ReflectionToStringBuilder.toStringExclude((Object) "java.lang.Object@1[]]", (String[]) null);
      String string1 = ReflectionToStringBuilder.toString((Object) "java.lang.String@3[hash=1930433015,value={j,a,v,a,.,l,a,n,g,.,O,b,j,e,c,t,@,1,[,],]}]hash=1930433015,value={j,a,v,a,.,l,a,n,g,.,O,b,j,e,c,t,@,1,[,],]}]", toStringStyle0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("Z_");
      String string0 = ToStringBuilder.reflectionToString((Object) "Z_");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ReflectionToStringBuilder.toStringExclude((Object) "Z_", (Collection<String>) linkedList0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.String@1[hash=2885,value={Z,_}]hash=2885,value={Z,_}]";
      stringArray0[1] = "java.lang.String@1[hash=2885,value={Z,_}]hash=2885,value={Z,_}]";
      stringArray0[2] = "java.lang.String@1[hash=2885,value={Z,_}]";
      stringArray0[3] = "Z_";
      stringArray0[4] = "java.lang.String@1[hash=2885,value={Z,_}]";
      stringArray0[5] = "";
      String string1 = ReflectionToStringBuilder.toStringExclude((Object) "java.lang.String@1[hash=2885,value={Z,_}]", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "includeFieldNames and excludeFieldNames must not intersect";
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("includeFieldNames and excludeFieldNames must not intersect", toStringStyle0, stringBuffer0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray("includeFieldNames and excludeFieldNames must not intersect");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      ReflectionToStringBuilder.toString((Object) "+{0{kLN", toStringStyle0, true, true);
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ffWqlv`^rD^?C+T=";
      stringArray0[1] = "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider";
      stringArray0[2] = "<null>";
      stringArray0[3] = "4q>T6";
      stringArray0[4] = "KxBmeRhUe*Myb";
      stringArray0[5] = "B#I+ylL?";
      stringArray0[6] = "b";
      stringArray0[7] = "', has a length less than 2";
      ReflectionToStringBuilder.toStringExclude(object0, stringArray0);
      Object object1 = new Object();
      ReflectionToStringBuilder.toStringExclude(object1, stringArray0);
      Object object2 = new Object();
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      ReflectionToStringBuilder.toString(object2, toStringStyle0);
      Class<String> class0 = String.class;
      ReflectionToStringBuilder.toString("java.lang.Object@5[]", toStringStyle0, false, true, (Class<? super String>) class0);
      ReflectionToStringBuilder.toStringExclude((Object) "java.lang.Object@3[]]", stringArray0);
      ReflectionToStringBuilder.toString(object2);
      StringBuffer stringBuffer0 = new StringBuffer();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("KxBmeRhUe*Myb", toStringStyle0, stringBuffer0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray("g9of[ u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      String string0 = ReflectionToStringBuilder.toString((Object) "", (ToStringStyle) recursiveToStringStyle0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("xM }t@aN9hn", toStringStyle0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*";
      stringArray0[1] = "xM }t@aN9hn";
      stringArray0[2] = "xM }t@aN9hn";
      stringArray0[3] = "xM }t@aN9hn";
      stringArray0[4] = "xM }t@aN9hn";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      reflectionToStringBuilder1.setExcludeFieldNames(stringArray0);
      float[] floatArray0 = new float[2];
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      reflectionToStringBuilder1.append("%", charArray0, true);
      floatArray0[0] = 1222.2571F;
      floatArray0[1] = 4413.933F;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)337;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1051);
      shortArray0[5] = (short)1869;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.append((String) null, shortArray0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field names are mandatory when using JsonToStringStyle
         //
         verifyException("org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Specified class is not a superclass of the object";
      stringArray0[1] = "Specified class is not a superclass of the object";
      stringArray0[2] = "Specified class is not a superclass of the object";
      stringArray0[3] = "Specified class is not a superclass of the object";
      stringArray0[4] = "Specified class is not a superclass of the object";
      stringArray0[5] = "Specified class is not a superclass of the object";
      stringArray0[6] = "Specified class is not a superclass of the object";
      stringArray0[7] = "Specified class is not a superclass of the object";
      ReflectionToStringBuilder.toStringExclude((Object) "Specified class is not a superclass of the object", stringArray0);
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("Specified class is not a superclass of the object", toStringStyle0);
      ReflectionToStringBuilder.toStringInclude((Object) "Specified class is not a superclass of the object", stringArray0);
      reflectionToStringBuilder0.setAppendStatics(true);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.appendFieldsIn(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      reflectionToStringBuilder0.append(object0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "^ow/V4!o!*C{t3";
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      ToStringBuilder.setDefaultStyle(toStringStyle0);
      reflectionToStringBuilder0.append("^ow/V4!o!*C{t3", objectArray0, true);
      boolean boolean0 = reflectionToStringBuilder0.isExcludeNullValues();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("includeFieldNames and excludeFieldNames must not intersect", recursiveToStringStyle0);
      ToStringBuilder.setDefaultStyle(recursiveToStringStyle0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "includeFieldNames and excludeFieldNames must not intersect";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      reflectionToStringBuilder0.excludeFieldNames = stringArray0;
      Class<Field> class0 = Field.class;
      reflectionToStringBuilder1.appendFieldsIn(class0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder1.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // includeFieldNames and excludeFieldNames must not intersect
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Field> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<String, Field> function0 = (Function<String, Field>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Field> function1 = (Function<String, Field>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Field> function2 = unaryOperator1.compose((Function<? super String, ? extends Field>) function1);
      unaryOperator0.andThen((Function<? super String, ? extends Field>) function2);
      Function<String, Field> function3 = unaryOperator1.compose((Function<? super String, ? extends Field>) function0);
      unaryOperator0.andThen((Function<? super String, ? extends Field>) function3);
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.pollFirst();
      String string0 = ReflectionToStringBuilder.toStringExclude((Object) "", (Collection<String>) linkedList0);
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "obj";
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("obj", standardToStringStyle0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "obj";
      stringArray0[1] = "obj";
      stringArray0[2] = "obj";
      stringArray0[3] = "obj";
      stringArray0[4] = "obj";
      reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ReflectionToStringBuilder.toStringExclude((Object) "", (Collection<String>) linkedList0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.lang.String@2[hash=0,value={}]hash=0,value={}]");
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-224);
      intArray0[1] = 0;
      intArray0[2] = 2261;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      Boolean boolean0 = new Boolean(false);
      recursiveToStringStyle0.append(stringBuffer0, "", intArray0, boolean0);
      recursiveToStringStyle0.setNullText("<");
      ReflectionToStringBuilder.toString(object0, (ToStringStyle) recursiveToStringStyle0, false, true);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      reflectionToStringBuilder0.setExcludeNullValues(true);
      reflectionToStringBuilder0.setAppendTransients(false);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getIncludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      reflectionToStringBuilder0.append(booleanArray0);
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      ReflectionToStringBuilder.toString((Object) "");
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "";
      stringArray1[1] = "";
      ReflectionToStringBuilder reflectionToStringBuilder2 = reflectionToStringBuilder1.setExcludeFieldNames(stringArray1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        reflectionToStringBuilder2.reflectionAppendArray(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("File does not exist: ", toStringStyle0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "File does not exist: ";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      ReflectionToStringBuilder reflectionToStringBuilder2 = reflectionToStringBuilder1.setIncludeFieldNames(stringArray0);
      reflectionToStringBuilder2.setExcludeNullValues(true);
      assertTrue(reflectionToStringBuilder2.isExcludeNullValues());
      
      reflectionToStringBuilder2.setExcludeFieldNames(stringArray0);
      String string0 = ReflectionToStringBuilder.toStringExclude((Object) "File does not exist: ", stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", toStringStyle0);
      reflectionToStringBuilder0.toString();
      reflectionToStringBuilder0.setAppendTransients(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0,{}";
      stringArray0[1] = "O8/p[/?l_|Dx";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      double[] doubleArray0 = new double[3];
      boolean[] booleanArray0 = new boolean[0];
      reflectionToStringBuilder0.append("Skt@T8Ac", booleanArray0, false);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 783.928912;
      reflectionToStringBuilder0.append("0,{}", doubleArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ReflectionToStringBuilder.toStringExclude((Object) "0,{}", (Collection<String>) linkedList0);
      Class<Field> class0 = Field.class;
      reflectionToStringBuilder0.appendFieldsIn(class0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "java.lang.String@2[hash=1476190,value={0,,,{,}}]hash=1476190,value={0,,,{,}}]";
      stringArray1[1] = "O8/p[/?l_|Dx";
      stringArray1[2] = "";
      stringArray1[3] = "O8/p[/?l_|Dx";
      stringArray1[4] = "java.lang.String@2[hash=1476190,value={0,,,{,}}]hash=1476190,value={0,,,{,}}]";
      reflectionToStringBuilder1.setExcludeFieldNames(stringArray1);
      assertTrue(reflectionToStringBuilder0.isAppendTransients());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(" does not have data element at ", toStringStyle0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "R}!4+FL[$EA";
      stringArray0[1] = "oJ2!flY?H";
      stringArray0[2] = " does not have data element at ";
      stringArray0[3] = " does not have data element at ";
      stringArray0[4] = " does not have data element at ";
      stringArray0[5] = "R}!4+FL[$EA";
      stringArray0[6] = "R}!4+FL[$EA";
      String string0 = ReflectionToStringBuilder.toStringInclude((Object) "R}!4+FL[$EA", stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-3855));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "A%J;\"r)";
      stringArray0[2] = "G2xXyAo%l";
      stringArray0[3] = "2$>TP";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[6] = "";
      ReflectionToStringBuilder.toStringInclude(object0, stringArray0);
      ReflectionToStringBuilder.toStringInclude((Object) "", stringArray0);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      StringBuffer stringBuffer0 = new StringBuffer("'V!:4{d 2Jd");
      stringBuffer0.replace(0, 0, "'V!:4{d 2Jd");
      stringBuffer0.insert(0, (-5347.9653F));
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("G2xXyAo%l", standardToStringStyle0, stringBuffer0);
      assertFalse(reflectionToStringBuilder0.isExcludeNullValues());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer();
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      
      Class<String> class0 = String.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("<!u`>ulP{B])Me|!6K", toStringStyle0, stringBuffer0, (Class<? super String>) class0, true, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<!u`>ulP{B])Me|!6K";
      stringArray0[1] = "<!u`>ulP{B])Me|!6K";
      stringArray0[2] = "<!u`>ulP{B])Me|!6K";
      stringArray0[3] = "<!u`>ulP{B])Me|!6K";
      stringArray0[4] = "<!u`>ulP{B])Me|!6K";
      stringArray0[5] = "<!u`>ulP{B])Me|!6K";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      reflectionToStringBuilder1.toString();
      //  // Unstable assertion: assertEquals(21, stringBuffer0.length());
      //  // Unstable assertion: assertTrue(reflectionToStringBuilder0.isAppendTransients());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      long[] longArray0 = new long[3];
      longArray0[0] = 1638L;
      longArray0[1] = 0L;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)289;
      shortArray0[1] = (short)4343;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1006);
      shortArray0[4] = (short)0;
      reflectionToStringBuilder0.append("]+~%TQ f\"bq^l", shortArray0);
      longArray0[2] = 0L;
      reflectionToStringBuilder0.append("]+~%TQ f\"bq^l", longArray0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getExcludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test073()  throws Throwable  {
  //     Collection<String> collection0 = null;
  //     ReflectionToStringBuilder.toStringInclude((Object) "DL@<,7 o8&d1]OdU", (Collection<String>) null);
  //     Object object0 = new Object();
  //     String[] stringArray0 = new String[6];
  //     stringArray0[0] = "i:9d-h)]|z";
  //     stringArray0[1] = "DL@<,7 o8&d1]OdU";
  //     stringArray0[2] = "DL@<,7 o8&d1]OdU";
  //     stringArray0[3] = "java.lang.String@1[hash=1501607772,value={D,L,@,<,,,7, ,o,8,&,d,1,],O,d,U}]hash=1501607772,value={D,L,@,<,,,7, ,o,8,&,d,1,],O,d,U}]";
  //     stringArray0[4] = "DL@<,7 o8&d1]OdU";
  //     stringArray0[5] = "java.lang.String@1[hash=1501607772,value={D,L,@,<,,,7, ,o,8,&,d,1,],O,d,U}]hash=1501607772,value={D,L,@,<,,,7, ,o,8,&,d,1,],O,d,U}]";
  //     ReflectionToStringBuilder.toStringInclude(object0, stringArray0);
  //     MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
  //     StringBuffer stringBuffer0 = new StringBuffer("Specified class is not a superclass of the object");
  //     ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("DL@<,7 o8&d1]OdU", multilineRecursiveToStringStyle0, stringBuffer0);
  //     Class<Field> class0 = Field.class;
  //     multilineRecursiveToStringStyle0.getShortClassName(class0);
  //     // Undeclared exception!
  //     try { 
  //       stringBuffer0.insert((-1155), "DL@<,7 o8&d1]OdU");
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: -1155
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".r5VNgeY'mL";
      stringArray0[1] = "org.apache.commons.lang3.builder.ReflectionToStringBuilder";
      stringArray0[2] = "k[]TJ9=F'g";
      stringArray0[3] = "k[]TJ9=F'g";
      stringArray0[4] = "nnw,GON]!7U^s4<q;b";
      stringArray0[5] = "";
      stringArray0[6] = "3p+|9P V";
      stringArray0[7] = "I";
      String string0 = ReflectionToStringBuilder.toStringInclude(object0, stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = ">";
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(">", toStringStyle0);
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames((String[]) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        reflectionToStringBuilder1.reflectionAppendArray(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      reflectionToStringBuilder0.append("tO|P'Eg-9pxF5gO5k", true);
      reflectionToStringBuilder0.append(0);
      String string0 = "y&<t@:mH1sV1";
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray("y&<t@:mH1sV1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer(1505);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0, stringBuffer0);
      reflectionToStringBuilder0.setAppendTransients(false);
      Object object1 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      ReflectionToStringBuilder.toStringInclude(object1, (Collection<String>) linkedList0);
      reflectionToStringBuilder0.toString();
      reflectionToStringBuilder0.append(false);
      reflectionToStringBuilder0.toString();
      reflectionToStringBuilder0.setAppendStatics(false);
      reflectionToStringBuilder0.isExcludeNullValues();
      assertEquals("[]false]", stringBuffer0.toString());
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = ReflectionToStringBuilder.toString((Object) "4Z8");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      Class<?> class0 = reflectionToStringBuilder0.getUpToClass();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string0 = ReflectionToStringBuilder.toStringInclude(object0, stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "78KCbY([";
      stringArray0[2] = "G)v 18*WE-?!VS[&M";
      stringArray0[3] = "";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      ReflectionToStringBuilder reflectionToStringBuilder2 = reflectionToStringBuilder1.setExcludeFieldNames(stringArray0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder2.reflectionAppendArray("G)v 18*WE-?!VS[&M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "ZEd~7OW";
      stringArray0[3] = "obj";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      assertFalse(reflectionToStringBuilder1.isAppendStatics());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "  ";
      Object object1 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      ReflectionToStringBuilder.toStringExclude(object1, (Collection<String>) linkedList0);
      ReflectionToStringBuilder.toStringExclude((Object) "java.lang.Object@1[]]", stringArray0);
      String[] stringArray1 = ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      assertEquals(0, stringArray1.length);
  }

  // @Test(timeout = 4000)
  // public void test084()  throws Throwable  {
  //     String string0 = "xlA{0X";
  //     ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
  //     StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "xlA{0X");
  //     Class<String> class0 = String.class;
  //     boolean boolean0 = false;
  //     boolean boolean1 = false;
  //     // Undeclared exception!
  //     try { 
  //       stringBuffer0.insert((-2090), (CharSequence) "xlA{0X");
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: -2090
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  // @Test(timeout = 4000)
  // public void test085()  throws Throwable  {
  //     ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
  //     StringBuffer stringBuffer0 = new StringBuffer(4024);
  //     Class<String> class0 = String.class;
  //     ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("3A%[*?M^.r`lU V#1", toStringStyle0, stringBuffer0, (Class<? super String>) class0, false, false);
  //     reflectionToStringBuilder0.toString();
  //     assertEquals(84, stringBuffer0.length());
  // }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "<kUph=EhNs+#am;bGm";
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("<kUph=EhNs+#am;bGm", toStringStyle0);
      reflectionToStringBuilder0.append("<kUph=EhNs+#am;bGm", (-2521.387F));
      reflectionToStringBuilder0.toString();
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getExcludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "((al\\\\n7oV";
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      standardToStringStyle0.setContentStart("&");
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("((al\\n7oV", standardToStringStyle0);
      reflectionToStringBuilder0.setExcludeNullValues(false);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getExcludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = null;
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", (ToStringStyle) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) reflectionToStringBuilder0;
      objectArray0[1] = (Object) "org.apache.commons.lang3.builder.ReflectionToStringBuilder";
      Object object0 = new Object();
      objectArray0[2] = object0;
      reflectionToStringBuilder0.append("org.apache.commons.lang3.builder.ReflectionToStringBuilder", objectArray0, true);
      reflectionToStringBuilder0.getUpToClass();
      String string0 = ReflectionToStringBuilder.toString((Object) "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[2];
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
  }

  // @Test(timeout = 4000)
  // public void test092()  throws Throwable  {
  //     String string0 = null;
  //     ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
  //     StringBuffer stringBuffer0 = new StringBuffer();
  //     Class<String> class0 = String.class;
  //     boolean boolean0 = false;
  //     // Undeclared exception!
  //     try { 
  //       stringBuffer0.insert(1505, '7');
  //       fail("Expecting exception: ArrayIndexOutOfBoundsException");
  //     
  //     } catch(ArrayIndexOutOfBoundsException e) {
  //     }
  // }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("W<t^ay)YUD_lf3", (ToStringStyle) null);
      reflectionToStringBuilder0.append("W<t^ay)YUD_lf3", objectArray0);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.appendFieldsIn(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      Object object1 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      reflectionToStringBuilder0.append("m", byteArray0);
      reflectionToStringBuilder0.append("", (short[]) null, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.removeFirstOccurrence(object0);
      String string0 = "#wG3z,|##)u^f{";
      linkedList0.addLast("#wG3z,|##)u^f{");
      reflectionToStringBuilder0.append('`');
      // Undeclared exception!
      try { 
        linkedList0.set(2099, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2099, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("6q", toStringStyle0);
      reflectionToStringBuilder0.setAppendTransients(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = ReflectionToStringBuilder.toStringExclude((Object) "6q", (Collection<String>) linkedList0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(")>2/%BJWZ^^7')QL");
      String string0 = "";
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Class<String> class0 = String.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle", toStringStyle0, (StringBuffer) null, (Class<? super String>) class0, false, false, true);
      Class<Field> class1 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.appendFieldsIn(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[7];
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      ToStringBuilder.setDefaultStyle(standardToStringStyle0);
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object1 = new Object();
      linkedList0.remove(object1);
      ReflectionToStringBuilder.toNoNullStringArray(stringArray0);
      String[] stringArray1 = ReflectionToStringBuilder.toNoNullStringArray(stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getExcludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "kd";
      stringArray0[1] = "a";
      stringArray0[2] = "nPGKF}5M=nFoj||dy9";
      stringArray0[3] = "org.apache.commons.lang3.builder.ReflectionToStringBuilder";
      ReflectionToStringBuilder.toStringInclude(object0, stringArray0);
      Object object1 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle");
      ReflectionToStringBuilder.toStringExclude(object1, (Collection<String>) linkedList0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray("java.lang.Object@1[]]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      reflectionToStringBuilder0.append(0.0F);
      ReflectionToStringBuilder.toString(object0, (ToStringStyle) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.Object@1[]";
      stringArray0[1] = "%&-&Tw3Z xHpEk";
      stringArray0[2] = "java.lang.Object@1[]";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      assertSame(reflectionToStringBuilder0, reflectionToStringBuilder1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("style");
      ReflectionToStringBuilder.toStringInclude(object0, (Collection<String>) linkedList0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, (ToStringStyle) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "style";
      stringArray0[1] = "java.lang.Object@1[]]";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      assertFalse(reflectionToStringBuilder1.isAppendStatics());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      ReflectionToStringBuilder.toString(object0, toStringStyle0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("java.lang.Object@1[]");
      ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0, (StringBuffer) null);
      assertFalse(reflectionToStringBuilder0.isExcludeNullValues());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      ReflectionToStringBuilder.toString(object0, toStringStyle0);
      Object object1 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object1);
      ReflectionToStringBuilder.toNoNullStringArray((Object[]) null);
      reflectionToStringBuilder0.excludeFieldNames = null;
      Object object2 = new Object();
      ReflectionToStringBuilder.toString(object2);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, toStringStyle0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder.toString(object0, (ToStringStyle) null, true);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, (ToStringStyle) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Object@1[]";
      stringArray0[1] = "java.lang.Object@1[]";
      stringArray0[2] = "java.lang.Object@1[]";
      stringArray0[3] = "java.lang.Object@1[]";
      stringArray0[4] = "java.lang.Object@1[]";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      reflectionToStringBuilder1.setExcludeNullValues(true);
      reflectionToStringBuilder1.isAppendTransients();
      reflectionToStringBuilder1.isAppendTransients();
      reflectionToStringBuilder0.isAppendTransients();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray1 = ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      String string0 = reflectionToStringBuilder0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = new Object();
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      ToStringStyle.unregister(object0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, multilineRecursiveToStringStyle0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      reflectionToStringBuilder0.append(booleanArray0);
      ReflectionToStringBuilder.toString(object0, (ToStringStyle) multilineRecursiveToStringStyle0, true);
      ToStringStyle.register(object0);
      StringBuffer stringBuffer0 = new StringBuffer();
      multilineRecursiveToStringStyle0.appendInternal(stringBuffer0, "CEXuBz<wvJn", object0, true);
      reflectionToStringBuilder0.append("java.lang.Object@2[\n  \n]", 0);
      reflectionToStringBuilder0.appendSuper("");
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getExcludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("2");
      String string0 = linkedList0.pollLast();
      linkedList0.add("O]Whh");
      ReflectionToStringBuilder.toStringExclude(object0, (Collection<String>) linkedList0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "O]Whh";
      stringArray0[1] = "2";
      stringArray0[2] = "2";
      stringArray0[3] = "2";
      String string1 = ReflectionToStringBuilder.toStringInclude(object0, stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  // @Test(timeout = 4000)
  // public void test109()  throws Throwable  {
  //     Object object0 = new Object();
  //     ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
  //     StringBuffer stringBuffer0 = new StringBuffer("-9rePEyTb:/n|vKt");
  //     char[] charArray0 = new char[4];
  //     charArray0[2] = 'I';
  //     charArray0[3] = 'b';
  //     // Undeclared exception!
  //     try { 
  //       stringBuffer0.append(charArray0, (int) 'I', (int) 'I');
  //       fail("Expecting exception: ArrayIndexOutOfBoundsException");
  //     
  //     } catch(ArrayIndexOutOfBoundsException e) {
  //        //
  //        // no message in exception (getMessage() returned null)
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      Object object1 = new Object();
      boolean[] booleanArray0 = new boolean[0];
      reflectionToStringBuilder0.append(booleanArray0);
      ReflectionToStringBuilder.toString(object1, toStringStyle0, false);
      reflectionToStringBuilder0.isAppendTransients();
      Object object2 = new Object();
      ReflectionToStringBuilder.toStringExclude(object2, (Collection<String>) linkedList0);
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      reflectionToStringBuilder1.append(byteArray0);
      ReflectionToStringBuilder.toStringExclude(object1, stringArray0);
      String[] stringArray1 = reflectionToStringBuilder1.getIncludeFieldNames();
      Object object3 = new Object();
      ReflectionToStringBuilder.toStringExclude(object3, stringArray0);
      ReflectionToStringBuilder reflectionToStringBuilder2 = reflectionToStringBuilder1.setExcludeFieldNames(stringArray1);
      boolean boolean0 = reflectionToStringBuilder2.isAppendTransients();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      Object object1 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object1, toStringStyle0);
      String[] stringArray0 = new String[6];
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "2;qEi";
      ReflectionToStringBuilder reflectionToStringBuilder2 = new ReflectionToStringBuilder(reflectionToStringBuilder1, toStringStyle0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder2.reflectionAppendArray(object1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{_X=";
      stringArray0[1] = "U*Pi(KhJs$n.bcsp%";
      stringArray0[2] = "n _ty/K";
      stringArray0[3] = "iVJ9?hV-NK^";
      stringArray0[4] = "4M$ ^&mIV";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder1.getExcludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      ReflectionToStringBuilder.toString(object0, toStringStyle0, false);
      ReflectionToStringBuilder.toString(object0, toStringStyle0, true, true);
      Object object1 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer(36);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object1, toStringStyle0, stringBuffer0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      ReflectionToStringBuilder.toNoNullStringArray(stringArray0);
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      reflectionToStringBuilder1.setAppendTransients(false);
      Object object2 = new Object();
      reflectionToStringBuilder1.append("", object2);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder1.setUpToClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified class is not a superclass of the object
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      reflectionToStringBuilder0.appendToString("j5(7y");
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.appendFieldsIn(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray((Collection<String>) null);
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, (ToStringStyle) null);
      reflectionToStringBuilder0.append("", '7');
      reflectionToStringBuilder0.append("", object0);
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      Object object1 = new Object();
      ToStringBuilder.reflectionToString(object1);
      reflectionToStringBuilder1.setExcludeNullValues(false);
      reflectionToStringBuilder1.setAppendTransients(false);
      reflectionToStringBuilder0.isAppendTransients();
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder1.setUpToClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified class is not a superclass of the object
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      String[] stringArray0 = new String[0];
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      reflectionToStringBuilder1.toString();
      Object object1 = new Object();
      boolean boolean0 = false;
      Object object2 = new Object();
      ToStringBuilder.setDefaultStyle(toStringStyle0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("java.lang.Object@1[]]");
      linkedList0.clone();
      ReflectionToStringBuilder.toStringExclude(object2, (Collection<String>) linkedList0);
      ReflectionToStringBuilder.toString(object1, toStringStyle0, false, false);
      ReflectionToStringBuilder.toString(object1, toStringStyle0, false, false);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.setUpToClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified class is not a superclass of the object
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("includeFieldNames and excludeFieldNames must not intersect");
      ReflectionToStringBuilder.toStringExclude(object0, (Collection<String>) linkedList0);
      Object object1 = new Object();
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object1, toStringStyle0, stringBuffer0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ReflectionToStringBuilder.toStringExclude(object0, (Collection<String>) linkedList1);
      reflectionToStringBuilder0.isExcludeNullValues();
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getValue((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder.toString(object0);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      ReflectionToStringBuilder.toString(object0, toStringStyle0, false, true);
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, toStringStyle0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-563);
      shortArray0[3] = (short) (-91);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      reflectionToStringBuilder0.append(shortArray0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getExcludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "', has a length less than 2";
      stringArray0[1] = "4{5Lyo!ncI";
      stringArray0[4] = "";
      stringArray0[5] = "D8b@$f^j1~]u%?&%";
      stringArray0[6] = "";
      String string0 = ReflectionToStringBuilder.toStringInclude(object0, stringArray0);
      String string1 = ReflectionToStringBuilder.toStringExclude((Object) "Method `", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray(object1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Specified class is not a superclass of the object";
      stringArray0[1] = "<null>";
      stringArray0[2] = "q*Z_(:%&Gi^|t";
      stringArray0[3] = "&5Cpkw5}tRluG4h1~";
      stringArray0[4] = "~Ua\"+y";
      stringArray0[5] = "Aq2q+UY";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1354);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-210);
      shortArray0[4] = (short)1269;
      shortArray0[5] = (short)9;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-1724);
      shortArray0[8] = (short) (-1048);
      reflectionToStringBuilder1.append(shortArray0);
      Class<Field> class0 = Field.class;
      reflectionToStringBuilder0.appendFieldsIn(class0);
      assertSame(reflectionToStringBuilder0, reflectionToStringBuilder1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      reflectionToStringBuilder0.append("", object0);
      objectArray0[1] = (Object) reflectionToStringBuilder0;
      Object object1 = new Object();
      reflectionToStringBuilder0.appendSuper("");
      objectArray0[2] = object1;
      objectArray0[3] = (Object) reflectionToStringBuilder0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "";
      Object object2 = new Object();
      objectArray0[7] = object2;
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      ToStringBuilder.reflectionToString(objectArray0[3], toStringStyle0, false);
      reflectionToStringBuilder0.append("", objectArray0, false);
      reflectionToStringBuilder0.isAppendTransients();
      Object object3 = new Object();
      ReflectionToStringBuilder.toString(object3);
      reflectionToStringBuilder0.isAppendTransients();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      reflectionToStringBuilder0.append(floatArray0);
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      String[] stringArray0 = new String[0];
      Object object1 = new Object();
      ReflectionToStringBuilder.toString(object1, (ToStringStyle) multilineRecursiveToStringStyle0, true, true);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0, stringBuffer0);
      reflectionToStringBuilder0.isAppendStatics();
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.append("", booleanArray0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FullDetail must be true when using JsonToStringStyle
         //
         verifyException("org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      ReflectionToStringBuilder.toStringExclude(object0, stringArray0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-876));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ReflectionToStringBuilder.toNoNullStringArray((Object[]) null);
      // Undeclared exception!
      try { 
        ToStringBuilder.reflectionToString((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "2My[P[]/lfAsY";
      stringArray0[3] = "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "K5##/0";
      stringArray0[7] = "xBpA";
      stringArray0[8] = "";
      String string0 = ReflectionToStringBuilder.toStringExclude(object0, stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "G{kyXI";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "org.junitpioneer.jupiter.CartesianEnumArgumentsProvider";
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setIncludeFieldNames(stringArray0);
      String string0 = reflectionToStringBuilder1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0);
      reflectionToStringBuilder0.build();
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getExcludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      String string0 = ReflectionToStringBuilder.toString(object0, toStringStyle0, true);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", toStringStyle0);
      reflectionToStringBuilder0.appendAsObjectToString("");
      reflectionToStringBuilder0.setExcludeNullValues(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      ReflectionToStringBuilder.toStringExclude((Object) "", (Collection<String>) linkedList0);
      reflectionToStringBuilder0.isAppendStatics();
      Object object1 = new Object();
      String string1 = ReflectionToStringBuilder.toStringInclude(object1, (Collection<String>) linkedList0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toStringInclude((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "##8oeYm-G";
      String string0 = ReflectionToStringBuilder.toStringInclude((Object) "##8oeYm-G", stringArray0);
      Object object0 = new Object();
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      String string1 = ReflectionToStringBuilder.toString(object0, (ToStringStyle) multilineRecursiveToStringStyle0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      Object object2 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object2);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      reflectionToStringBuilder0.append(booleanArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'T';
      charArray0[2] = 'x';
      charArray0[3] = '(';
      charArray0[4] = 'Q';
      reflectionToStringBuilder0.append((String) null, charArray0);
      linkedList0.toArray();
      ReflectionToStringBuilder.toStringInclude(object1, (Collection<String>) linkedList0);
      reflectionToStringBuilder0.setExcludeNullValues(false);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.appendFieldsIn(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("xVgWK<\"a*@");
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      ToStringBuilder.setDefaultStyle(standardToStringStyle0);
      boolean boolean0 = false;
      reflectionToStringBuilder0.setAppendStatics(false);
      reflectionToStringBuilder0.setAppendTransients(false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "xVgWK<\"a*@";
      objectArray0[2] = (Object) "xVgWK<\"a*@";
      objectArray0[3] = (Object) "xVgWK<\"a*@";
      objectArray0[4] = (Object) reflectionToStringBuilder0;
      objectArray0[5] = (Object) reflectionToStringBuilder0;
      ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      ToStringBuilder.reflectionToString(objectArray0[5], (ToStringStyle) standardToStringStyle0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList0.add(36, "ZY(9:{?J8xC");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      ReflectionToStringBuilder.toString((Object) "->P?61tKT", toStringStyle0, false, true);
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("->P?61tKT");
      long[] longArray0 = new long[3];
      longArray0[0] = 1668L;
      longArray0[1] = 1812L;
      longArray0[2] = 0L;
      reflectionToStringBuilder0.append(longArray0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray("->P?61tKT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", (ToStringStyle) null, stringBuffer0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 5546.98845842;
      doubleArray0[1] = (-3228.21);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      reflectionToStringBuilder0.append((String) null, doubleArray0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getIncludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0, stringBuffer0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.setUpToClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified class is not a superclass of the object
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("w/D", standardToStringStyle0);
      StringBuffer stringBuffer0 = new StringBuffer("w/D");
      standardToStringStyle0.append(stringBuffer0, "Arguments cannot both be null", 85.13F);
      reflectionToStringBuilder0.setAppendStatics(true);
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, (ToStringStyle) standardToStringStyle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // obj
         //
         verifyException("java.util.Objects", e);
      }
  }
}
