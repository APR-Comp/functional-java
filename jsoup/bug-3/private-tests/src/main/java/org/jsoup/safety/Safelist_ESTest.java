/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 03:52:53 GMT 2023
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.safety.Safelist;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Safelist_ESTest extends Safelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      Safelist safelist1 = new Safelist(safelist0);
      String string0 = ">2JJY5&&";
      String[] stringArray0 = new String[5];
      Safelist.basicWithImages();
      stringArray0[0] = ">2JJY5&&";
      stringArray0[1] = ">2JJY5&&";
      stringArray0[2] = "sup";
      stringArray0[3] = "sup";
      stringArray0[4] = "sup";
      safelist1.addProtocols("sup", ">2JJY5&&", stringArray0);
      Safelist.simpleText();
      String string1 = "handleKey? {} {} {}";
      // Undeclared exception!
      try { 
        safelist1.removeProtocols("sup", "handleKey? {} {} {}", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "th";
      stringArray0[1] = "th";
      stringArray0[2] = "th";
      Safelist safelist1 = safelist0.removeAttributes("th", stringArray0);
      assertSame(safelist0, safelist1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Safelist.AttributeValue safelist_AttributeValue0 = Safelist.AttributeValue.valueOf("XlL7u#]P=vam_:41iNP");
      Safelist safelist0 = new Safelist();
      String[] stringArray0 = new String[0];
      Safelist safelist1 = safelist0.addProtocols("XlL7u#]P=vam_:41iNP", "XlL7u#]P=vam_:41iNP", stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "XlL7u#]P=vam_:41iNP";
      stringArray1[1] = "XlL7u#]P=vam_:41iNP";
      stringArray1[2] = "XlL7u#]P=vam_:41iNP";
      Safelist.relaxed();
      Safelist.relaxed();
      stringArray1[3] = "r\"ym|YF@Q";
      stringArray1[4] = "XlL7u#]P=vam_:41iNP";
      stringArray1[5] = "XlL7u#]P=vam_:41iNP";
      Safelist safelist2 = safelist0.removeAttributes("XlL7u#]P=vam_:41iNP", stringArray1);
      Safelist safelist3 = Safelist.relaxed();
      safelist1.getEnforcedAttributes("");
      safelist_AttributeValue0.equals("XlL7u#]P=vam_:41iNP");
      safelist2.addEnforcedAttribute("5~*EKun~ynPE|N>UxIr", "XlL7u#]P=vam_:41iNP", "href");
      safelist0.removeProtocols("XlL7u#]P=vam_:41iNP", "XlL7u#]P=vam_:41iNP", stringArray0);
      Safelist safelist4 = Safelist.relaxed();
      assertNotSame(safelist4, safelist3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":contains(%s)";
      stringArray0[1] = ":contains(%s)";
      Safelist safelist1 = safelist0.addAttributes(":contains(%s)", stringArray0);
      Safelist safelist2 = safelist0.addEnforcedAttribute(":contains(%s)", ":contains(%s)", "XfqF'/w{0td[h4e[\"");
      Safelist safelist3 = Safelist.basicWithImages();
      safelist2.isSafeTag("dHj:cn)UiTar{HT");
      safelist0.removeEnforcedAttribute("Unexpected token type: ", "SP%BFp]$d");
      safelist3.removeEnforcedAttribute(":contains(%s)", "lTY6");
      safelist2.getEnforcedAttributes("XfqF'/w{0td[h4e[\"");
      Safelist safelist4 = safelist0.removeEnforcedAttribute(":contains(%s)", ":contains(%s)");
      Safelist.AttributeKey.valueOf("");
      Safelist.Protocol.valueOf(":contains(%s)");
      Safelist.AttributeValue.valueOf("{W(");
      safelist4.preserveRelativeLinks(true);
      Safelist safelist5 = Safelist.relaxed();
      assertNotSame(safelist5, safelist1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#";
      stringArray0[1] = "#";
      stringArray0[2] = "#";
      stringArray0[3] = "#";
      stringArray0[4] = "#";
      stringArray0[5] = "#";
      stringArray0[6] = "#";
      Safelist safelist1 = safelist0.removeAttributes("#", stringArray0);
      safelist1.getEnforcedAttributes("&P/*5byCg.o0!");
      Safelist safelist2 = safelist1.removeTags(stringArray0);
      safelist2.preserveRelativeLinks(true);
      Safelist safelist3 = safelist2.addEnforcedAttribute("#", "#", "#");
      Safelist.none();
      Safelist safelist4 = safelist3.removeEnforcedAttribute("#", "=PB$b");
      safelist4.getEnforcedAttributes("");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "=PB$b";
      stringArray1[2] = "";
      stringArray1[3] = "'ul2ft)8qttj|?>O";
      stringArray1[4] = "";
      // Undeclared exception!
      try { 
        safelist1.removeAttributes("'ul2ft)8qttj|?>O", stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "h6";
      stringArray0[1] = "h6";
      stringArray0[2] = "h6";
      stringArray0[3] = "h6";
      stringArray0[4] = "h6";
      Safelist safelist1 = safelist0.addAttributes("h6", stringArray0);
      Safelist.basicWithImages();
      Attribute attribute0 = new Attribute("h6", (String) null);
      safelist1.isSafeAttribute("h6", (Element) null, attribute0);
      Safelist.TagName.valueOf("7");
      Safelist.relaxed();
      boolean boolean0 = safelist0.isSafeTag("h6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "a";
      Safelist.TagName.valueOf("a");
      Safelist.simpleText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "a";
      stringArray0[3] = "a";
      stringArray0[4] = "a";
      stringArray0[5] = "a";
      Safelist safelist0 = Safelist.basicWithImages();
      Safelist.basic();
      safelist0.removeEnforcedAttribute("a", "a");
      // Undeclared exception!
      try { 
        safelist0.removeAttributes("a", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      safelist0.isSafeTag("STdZw,FH!%68");
      Attributes attributes0 = safelist0.getEnforcedAttributes("STdZw,FH!%68");
      Safelist safelist1 = safelist0.addEnforcedAttribute("#cdata", "#cdata", "STdZw,FH!%68");
      Element element0 = new Element("STdZw,FH!%68");
      attributes0.normalize();
      Attribute attribute0 = new Attribute("STdZw,FH!%68", "7", attributes0);
      Attribute attribute1 = attribute0.clone();
      safelist1.isSafeAttribute("#cdata", element0, attribute1);
      Safelist.AttributeKey safelist_AttributeKey0 = Safelist.AttributeKey.valueOf("strike");
      assertEquals("strike", safelist_AttributeKey0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.jsoup.safety.Safelist$AttributeValue";
      stringArray0[1] = "org.jsoup.safety.Safelist$AttributeValue";
      Safelist safelist1 = safelist0.addAttributes("org.jsoup.safety.Safelist$AttributeValue", stringArray0);
      safelist1.addAttributes("org.jsoup.safety.Safelist$AttributeValue", stringArray0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("", "", stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h5";
      stringArray0[1] = "*~3,SY{YA,L*nhR!n\"T";
      stringArray0[2] = "h5";
      Safelist safelist1 = safelist0.addAttributes("h5", stringArray0);
      Safelist.none();
      safelist1.isSafeTag("");
      safelist0.removeAttributes("h5", stringArray0);
      Safelist safelist2 = Safelist.relaxed();
      Safelist safelist3 = safelist2.removeAttributes("h5", stringArray0);
      // Undeclared exception!
      try { 
        safelist3.addProtocols("", "h5", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Document document0 = Parser.parse("", "org.jsoup.select.Collector");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      // Undeclared exception!
      try { 
        safelist0.isSafeAttribute("", document0, (Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Safelist", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "i<Eg#:C,'m$W\\";
      Safelist.AttributeValue safelist_AttributeValue0 = new Safelist.AttributeValue("i<Eg#:C,'m$W");
      Safelist.AttributeValue.valueOf("i<Eg#:C,'m$W");
      Safelist.AttributeValue.valueOf("i<Eg#:C,'m$W");
      safelist_AttributeValue0.equals((Object) null);
      Safelist.AttributeValue.valueOf("i<Eg#:C,'m$W");
      Safelist safelist0 = Safelist.none();
      String string1 = null;
      // Undeclared exception!
      try { 
        safelist0.removeEnforcedAttribute("i<Eg#:C,'m$W", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[0];
      Safelist safelist1 = safelist0.addTags(stringArray0);
      // Undeclared exception!
      try { 
        safelist1.removeAttributes("org.eclipse.jetty.io.SelectChannelEndPoint", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "colspan";
      Safelist.AttributeKey safelist_AttributeKey0 = new Safelist.AttributeKey("colspan");
      Safelist safelist0 = Safelist.basicWithImages();
      Safelist safelist1 = new Safelist(safelist0);
      safelist0.removeEnforcedAttribute("colspan", "colspan");
      String[] stringArray0 = new String[3];
      String string1 = "<YKgy-?&1b$?wZ2";
      stringArray0[0] = "<YKgy-?&1b$?wZ2";
      stringArray0[1] = "colspan";
      stringArray0[2] = "colspan";
      Safelist safelist2 = Safelist.basic();
      Safelist safelist3 = safelist0.removeTags(stringArray0);
      Safelist safelist4 = safelist3.addProtocols("org.jsoup.select.Evaluator$Id", "colspan", stringArray0);
      safelist4.addProtocols("org.jsoup.select.Evaluator$Id", "colspan", stringArray0);
      Safelist.none();
      safelist2.removeEnforcedAttribute("<YKgy-?&1b$?wZ2", "U\"i");
      Safelist safelist5 = safelist3.removeAttributes("colspan", stringArray0);
      String string2 = "";
      safelist5.isSafeTag("");
      // Undeclared exception!
      try { 
        safelist1.removeProtocols("<YKgy-?&1b$?wZ2", "<YKgy-?&1b$?wZ2", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Safelist safelist0 = null;
      try {
        safelist0 = new Safelist((Safelist) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Safelist", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "h3";
      Safelist.AttributeValue.valueOf("h3");
      Safelist.basic();
      Safelist safelist0 = Safelist.none();
      // Undeclared exception!
      try { 
        safelist0.isSafeTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      safelist0.isSafeTag("'gZJ#");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'gZJ#";
      stringArray0[1] = "'gZJ#";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "'gZJ#";
      stringArray1[1] = "'gZJ#";
      stringArray1[2] = "'gZJ#";
      stringArray1[3] = "6*u6)E$vW)";
      stringArray1[4] = "'gZJ#";
      stringArray1[5] = "Z%g{WBTo>*>";
      stringArray1[6] = "'gZJ#";
      safelist0.removeTags(stringArray1);
      stringArray0[2] = "'gZJ#";
      stringArray0[3] = "'gZJ#";
      stringArray0[4] = "'gZJ#";
      stringArray0[5] = "'gZJ#";
      safelist0.removeTags(stringArray0);
      // Undeclared exception!
      try { 
        safelist0.getEnforcedAttributes((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "rJd9_EJ,";
      stringArray0[1] = "org.jsoup.select.CombiningEvaluator$And";
      stringArray0[2] = "PA'c7Mm{F@l";
      stringArray0[3] = "3]vNUk2XC*";
      stringArray0[4] = "option[selected]";
      stringArray0[5] = "";
      stringArray0[6] = "YR`yV:i*\">%[";
      stringArray0[7] = "";
      stringArray0[8] = "title";
      // Undeclared exception!
      try { 
        safelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Safelist.none();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=(fWnE+#jSy";
      stringArray0[1] = "(}inR^S!Qc";
      String string0 = "summary";
      Safelist safelist0 = Safelist.relaxed();
      // Undeclared exception!
      try { 
        safelist0.addAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Safelist.TagName safelist_TagName0 = new Safelist.TagName("org.jsoup.safety.Safelist$TypedValue");
      Safelist.Protocol.valueOf("5@kX");
      Safelist safelist0 = Safelist.basicWithImages();
      Safelist safelist1 = safelist0.removeEnforcedAttribute("ldnJi \"54e,uN$]r", "form");
      safelist1.isSafeTag("E.b*7>cNI y|8c?K*:");
      Safelist safelist2 = new Safelist(safelist0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "form";
      stringArray0[1] = "p";
      stringArray0[2] = "p";
      stringArray0[3] = "org.jsoup.safety.Safelist$TypedValue";
      stringArray0[4] = "p";
      stringArray0[5] = "org.jsoup.safety.Safelist$TypedValue";
      stringArray0[6] = "";
      stringArray0[7] = "5@kX";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("org.jsoup.safety.Safelist$TypedValue", "p", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Safelist.AttributeValue safelist_AttributeValue0 = new Safelist.AttributeValue("");
      Safelist.AttributeValue.valueOf("");
      safelist_AttributeValue0.toString();
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[0];
      Safelist safelist1 = safelist0.addTags(stringArray0);
      String string0 = null;
      Element element0 = null;
      Attribute attribute0 = new Attribute("c:zzCV1U", (String) null);
      Attribute attribute1 = attribute0.clone();
      // Undeclared exception!
      try { 
        safelist1.isSafeAttribute((String) null, (Element) null, attribute1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "O|FRZa<+tzK!QA7bR!(";
      stringArray0[3] = "";
      stringArray0[4] = "O|FRZa<+tzK!QA7bR!(";
      // Undeclared exception!
      try { 
        safelist0.addProtocols("", "O|FRZa<+tzK!QA7bR!(", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      // Undeclared exception!
      try { 
        safelist0.removeTags((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "ul";
      Safelist.Protocol.valueOf("ul");
      Safelist safelist0 = Safelist.none();
      String string1 = "jEAWe#P";
      safelist0.preserveRelativeLinks(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "jEAWe#P";
      stringArray0[1] = "ul";
      stringArray0[2] = "ul";
      stringArray0[3] = "ul";
      String string2 = "";
      // Undeclared exception!
      try { 
        safelist0.removeEnforcedAttribute("ul", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      Safelist.relaxed();
      Safelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z";
      stringArray0[1] = "Z";
      stringArray0[2] = "Z";
      Safelist safelist1 = safelist0.removeAttributes("Z", stringArray0);
      safelist1.removeTags(stringArray0);
      safelist0.getEnforcedAttributes("Z");
      // Undeclared exception!
      try { 
        safelist0.removeAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      Safelist safelist1 = Safelist.basicWithImages();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")36:B VUB";
      stringArray0[1] = "P`L;";
      stringArray0[2] = "xr7-x6dZ=&2]Guk|p";
      String string0 = "";
      // Undeclared exception!
      try { 
        safelist1.addEnforcedAttribute("P`L;", (String) null, "0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Safelist.basicWithImages();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "w;o0";
      String string0 = "height";
      Document document0 = new Document("w;o0");
      Document document1 = document0.clone();
      Safelist.basicWithImages();
      // Undeclared exception!
      try { 
        document1.prependChildren((Collection<? extends Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        safelist0.addEnforcedAttribute("", "[K", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "completeWrite exception";
      stringArray0[1] = "completeWrite exception";
      stringArray0[2] = "%s.%s@%x";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("%s.%s@%x", "completeWrite exception", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "utf";
      stringArray0[1] = "sup";
      stringArray0[2] = "utf";
      stringArray0[3] = "utf";
      stringArray0[4] = "utf";
      stringArray0[5] = "utf";
      stringArray0[6] = "utf";
      stringArray0[7] = "utf";
      stringArray0[8] = "utf";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("utf", "utf", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "y=7>H]2akFF6";
      Safelist.AttributeValue safelist_AttributeValue0 = new Safelist.AttributeValue("y=7>H]2akFF6");
      Safelist.TagName.valueOf("y=7>H]2akFF6");
      String string1 = ")zkWc-f=(2{%KoJJ";
      Safelist.TagName safelist_TagName0 = new Safelist.TagName(")zkWc-f=(2{%KoJJ");
      Safelist safelist0 = Safelist.relaxed();
      String string2 = "";
      String string3 = "";
      // Undeclared exception!
      try { 
        safelist0.removeEnforcedAttribute("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Safelist.Protocol.valueOf("`H&EeM");
      Safelist safelist0 = new Safelist();
      Safelist safelist1 = new Safelist(safelist0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`H&EeM";
      stringArray0[1] = "`H&EeM";
      stringArray0[2] = "`H&EeM";
      stringArray0[3] = "`H&EeM";
      stringArray0[4] = "`H&EeM";
      stringArray0[5] = "`H&EeM";
      stringArray0[6] = "`H&EeM";
      stringArray0[7] = "`H&EeM";
      stringArray0[8] = "`H&EeM";
      Safelist safelist2 = safelist1.addProtocols("`H&EeM", "`H&EeM", stringArray0);
      assertNotSame(safelist0, safelist2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1~ethocj\\tOhr";
      stringArray0[1] = "strong";
      stringArray0[2] = "cite";
      stringArray0[3] = "cite";
      safelist0.removeProtocols("cite", "cite", stringArray0);
      Safelist safelist1 = new Safelist(safelist0);
      Safelist safelist2 = Safelist.none();
      String string0 = "/}%%u";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "/}%%u";
      stringArray1[1] = "/}%%u";
      stringArray1[2] = "/}%%u";
      // Undeclared exception!
      try { 
        safelist2.removeProtocols("/}%%u", "/}%%u", stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/vvK+v#f`";
      stringArray0[1] = "/vvK+v#f`";
      stringArray0[2] = "/vvK+v#f`";
      stringArray0[3] = "/vvK+v#f`";
      stringArray0[4] = "/vvK+v#f`";
      stringArray0[5] = "/vvK+v#f`";
      stringArray0[6] = "/vvK+v#f`";
      stringArray0[7] = "/vvK+v#f`";
      stringArray0[8] = "/vvK+v#f`";
      safelist0.addAttributes("/vvK+v#f`", stringArray0);
      Safelist safelist1 = safelist0.addProtocols("/vvK+v#f`", "/vvK+v#f`", stringArray0);
      boolean boolean0 = safelist1.isSafeTag("/vvK+v#f`");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      Safelist safelist1 = new Safelist(safelist0);
      Safelist safelist2 = new Safelist(safelist1);
      String string0 = "axis";
      String string1 = "2_R~>9)UD";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        safelist1.addProtocols("axis", "2_R~>9)UD", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Safelist.Protocol.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "$2O;VhqV8;GN|t#,=";
      Safelist.AttributeKey safelist_AttributeKey0 = new Safelist.AttributeKey("$2O;VhqV8;GN|t#,=");
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "h6";
      stringArray0[1] = "h6";
      stringArray0[2] = "CjFNR";
      stringArray0[3] = "h6";
      stringArray0[4] = "$2O;VhqV8;GN|t#,=";
      stringArray0[5] = "";
      stringArray0[6] = "$2O;VhqV8;GN|t#,=";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("", "h6", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "h3";
      stringArray0[3] = "\"-,j(:GT`'}Ydbs=9";
      // Undeclared exception!
      try { 
        safelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String string0 = " S-M!zw";
      safelist0.getEnforcedAttributes(" S-M!zw");
      String string1 = "Xs";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Xs";
      String string2 = "%~gm}-L1WM";
      safelist0.getEnforcedAttributes("%~gm}-L1WM");
      stringArray0[1] = " S-M!zw";
      stringArray0[2] = " S-M!zw";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols(" S-M!zw", "Xs", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.jsoup.safety.Safelist$TypedValue";
      stringArray0[1] = "T@)[./i_?8<3yH^pe";
      stringArray0[2] = "xqQYX#{F=Sy)z'&a'hp";
      stringArray0[3] = "p}^hu*UOXd!TIw";
      safelist0.addTags(stringArray0);
      Safelist safelist1 = Safelist.basicWithImages();
      Safelist safelist2 = Safelist.basicWithImages();
      assertNotSame(safelist2, safelist1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "HjT:5";
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("HjT:5");
      Safelist.Protocol.valueOf("HjT:5");
      Safelist.Protocol.valueOf("HjT:5");
      Safelist.Protocol.valueOf("HjT:5");
      Safelist.Protocol.valueOf("HjT:5");
      safelist_Protocol0.equals("HjT:5");
      Safelist safelist0 = Safelist.basicWithImages();
      String string1 = "^<\\WDOh3o-5dc";
      safelist0.getEnforcedAttributes("^<WDOh3o-5dc");
      Safelist.basic();
      // Undeclared exception!
      try { 
        safelist0.removeEnforcedAttribute("HjT:5", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "zK=q`kg6z";
      stringArray0[1] = "zK=q`kg6z";
      stringArray0[2] = "zK=q`kg6z";
      stringArray0[3] = "zK=q`kg6z";
      stringArray0[4] = "zK=q`kg6z";
      stringArray0[5] = ":matchesWholeOwnText(%s)";
      stringArray0[6] = "zK=q`kg6z";
      stringArray0[7] = "zK=q`kg6z";
      stringArray0[8] = "zK=q`kg6z";
      safelist0.removeAttributes("zK=q`kg6z", stringArray0);
      Safelist.basicWithImages();
      Safelist.AttributeKey safelist_AttributeKey0 = new Safelist.AttributeKey("small");
      String string0 = safelist_AttributeKey0.toString();
      assertEquals("small", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Safelist.TagName safelist_TagName0 = new Safelist.TagName(" caP(<9^6:bO(z]?W@{");
      Safelist safelist0 = Safelist.simpleText();
      String string0 = "";
      String string1 = ":root";
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        safelist0.addProtocols(":root", "}Q8H", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String string0 = "";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "p3|%{v^L|7mj:xL9U";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "b";
      String string1 = ">DjLs!V2#Lrk4O]";
      stringArray0[6] = ">DjLs!V2#Lrk4O]";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        safelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Safelist.AttributeKey safelist_AttributeKey0 = new Safelist.AttributeKey("li");
      Safelist safelist0 = Safelist.basic();
      Safelist.basicWithImages();
      Safelist safelist1 = safelist0.addEnforcedAttribute("li", "I?b3uTiaDn4", "I?b3uTiaDn4");
      safelist1.getEnforcedAttributes("li");
      Safelist safelist2 = Safelist.basicWithImages();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`ge%=Q_U*a,]";
      stringArray0[1] = "org.jsoup.safety.Safelist$Protocol";
      stringArray0[2] = "org.jsoup.safety.Safelist$Protocol";
      stringArray0[3] = "li";
      stringArray0[4] = "li";
      stringArray0[5] = "org.jsoup.safety.Safelist$Protocol";
      stringArray0[6] = "org.jsoup.safety.Safelist$Protocol";
      stringArray0[7] = "org.jsoup.safety.Safelist$Protocol";
      safelist2.addAttributes("org.jsoup.safety.Safelist$Protocol", stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "I?b3uTiaDn4";
      stringArray1[1] = "li";
      stringArray1[2] = "";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("", "", stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String string0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      // Undeclared exception!
      try { 
        safelist0.addProtocols((String) null, (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        safelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Safelist safelist1 = new Safelist(safelist0);
      String string0 = null;
      Safelist safelist2 = safelist0.preserveRelativeLinks(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "colspan";
      stringArray0[2] = null;
      stringArray0[3] = "h\f";
      stringArray0[4] = "colspan";
      stringArray0[5] = "colspan";
      stringArray0[6] = "";
      stringArray0[7] = "colspan";
      stringArray0[8] = ")?doH@@y?n8Ym";
      // Undeclared exception!
      try { 
        safelist2.addProtocols((String) null, "colspan", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String string0 = "org.jsoup.select.StructuralEvaluator";
      String string1 = "";
      // Undeclared exception!
      try { 
        safelist0.removeEnforcedAttribute("u", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      boolean boolean0 = safelist0.isSafeTag("No attribute names supplied.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Safelist.basicWithImages();
      Safelist safelist1 = safelist0.removeEnforcedAttribute("D%{T4L;%?:?HY)Bp", "D%{T4L;%?:?HY)Bp");
      safelist1.isSafeTag("D%{T4L;%?:?HY)Bp");
      Safelist.AttributeValue safelist_AttributeValue0 = new Safelist.AttributeValue("D%{T4L;%?:?HY)Bp");
      Object object0 = new Object();
      safelist_AttributeValue0.equals(object0);
      Safelist safelist2 = Safelist.basicWithImages();
      assertNotSame(safelist2, safelist1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Safelist.AttributeKey.valueOf("{} lost race {}");
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("jbm#[");
      Safelist safelist0 = Safelist.basic();
      safelist0.preserveRelativeLinks(true);
      safelist0.isSafeTag("kM7z");
      safelist0.removeEnforcedAttribute("kM7z", "{} rejected {}");
      Safelist safelist1 = safelist0.removeEnforcedAttribute(" @ UM/3", "/by{&.}");
      String[] stringArray0 = new String[2];
      stringArray0[0] = " @ UM/3";
      stringArray0[1] = "/by{&.}";
      safelist1.removeAttributes("{} lost race {}", stringArray0);
      Safelist.relaxed();
      Safelist safelist2 = Safelist.relaxed();
      assertNotSame(safelist2, safelist1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      Safelist safelist1 = safelist0.removeEnforcedAttribute("bYY &4J#vm:74/", "bYY &4J#vm:74/");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "bYY &4J#vm:74/";
      Safelist safelist2 = safelist1.removeTags(stringArray0);
      safelist1.getEnforcedAttributes("Q");
      Safelist.TagName safelist_TagName0 = new Safelist.TagName("type");
      safelist_TagName0.toString();
      Safelist.none();
      Safelist.TagName.valueOf("");
      safelist2.addTags(stringArray0);
      Safelist.none();
      Safelist.none();
      boolean boolean0 = safelist2.isSafeTag(";,eZ7b_xIn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "};";
      stringArray0[1] = "};";
      stringArray0[2] = "};";
      stringArray0[3] = "};";
      safelist0.removeEnforcedAttribute("};", "};");
      stringArray0[4] = "};";
      safelist0.addAttributes("};", stringArray0);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("", "", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        safelist0.addAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "https";
      stringArray0[1] = "d| H1|1:FxH#|OX%/f";
      stringArray0[2] = "mWlL";
      Safelist safelist1 = safelist0.addTags(stringArray0);
      safelist0.getEnforcedAttributes("");
      Safelist.AttributeKey safelist_AttributeKey0 = new Safelist.AttributeKey("d| H1|1:FxH#|OX%/f");
      safelist_AttributeKey0.equals("mWlL");
      Safelist safelist2 = safelist1.removeEnforcedAttribute("mWlL", "https");
      // Undeclared exception!
      try { 
        safelist2.addEnforcedAttribute("d| H1|1:FxH#|OX%/f", " [depth=", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Safelist.AttributeValue safelist_AttributeValue0 = Safelist.AttributeValue.valueOf("0t");
      Safelist.AttributeValue.valueOf("$KPhP:!");
      String string0 = safelist_AttributeValue0.toString();
      assertEquals("0t", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String string0 = "width";
      safelist0.getEnforcedAttributes("width");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "width";
      Safelist.basicWithImages();
      Safelist.relaxed();
      String string1 = "KA";
      // Undeclared exception!
      try { 
        safelist0.addAttributes("KA", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "PT)vejI|0M!S!";
      stringArray0[1] = "PT)vejI|0M!S!";
      stringArray0[2] = "PT)vejI|0M!S!";
      stringArray0[3] = "PT)vejI|0M!S!";
      stringArray0[4] = "PT)vejI|0M!S!";
      stringArray0[5] = "PT)vejI|0M!S!";
      stringArray0[6] = "PT)vejI|0M!S!";
      stringArray0[7] = "PT)vejI|0M!S!";
      stringArray0[8] = "PT)vejI|0M!S!";
      safelist0.addAttributes("PT)vejI|0M!S!", stringArray0);
      Safelist.AttributeKey safelist_AttributeKey0 = Safelist.AttributeKey.valueOf("K Z");
      assertEquals("K Z", safelist_AttributeKey0.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Safelist.TagName.valueOf("}d$|bcM)X+");
      Safelist.relaxed();
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        safelist0.removeAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "{} idle timeout expired";
      Safelist.AttributeValue safelist_AttributeValue0 = new Safelist.AttributeValue("{} idle timeout expired");
      Safelist.AttributeValue safelist_AttributeValue1 = new Safelist.AttributeValue("");
      String string1 = "";
      Safelist.Protocol.valueOf("");
      Safelist safelist0 = Safelist.basicWithImages();
      String string2 = "c=ltde";
      String string3 = "";
      Safelist.AttributeValue.valueOf("");
      String[] stringArray0 = new String[3];
      String string4 = "org.jsoup.safety.Safelist$Protocol";
      stringArray0[0] = "org.jsoup.safety.Safelist$Protocol";
      Safelist.AttributeValue.valueOf("org.jsoup.safety.Safelist$Protocol");
      stringArray0[1] = "";
      stringArray0[2] = "{} idle timeout expired";
      // Undeclared exception!
      try { 
        safelist0.addAttributes("c=ltde", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String[] stringArray0 = new String[8];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "+{=sE";
      stringArray0[2] = "P[9ViWC{BKXxv";
      String string1 = "ab|*^=_=='";
      stringArray0[3] = "ab|*^=_=='";
      stringArray0[4] = "";
      stringArray0[5] = "3!$.'>~V)";
      String string2 = ";/O?x]cj3b5";
      stringArray0[6] = ";/O?x]cj3b5";
      String string3 = "";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        safelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = null;
      Safelist.AttributeValue safelist_AttributeValue0 = null;
      try {
        safelist_AttributeValue0 = new Safelist.AttributeValue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":";
      stringArray0[1] = ":";
      Safelist safelist1 = safelist0.addAttributes(":", stringArray0);
      Safelist.basicWithImages();
      Document document0 = Document.createShell("abbr");
      Attribute attribute0 = Attribute.createFromEncoded("KB(]F3-qyqs@3#", "1=JS&!1`");
      boolean boolean0 = safelist1.isSafeAttribute(":", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      String string0 = "l[r";
      Parser.parse("l[r", "l[r");
      String string1 = "'b_te^*~`N$/r";
      Attributes attributes0 = safelist0.getEnforcedAttributes("'b_te^*~`N$/r");
      Attribute attribute0 = new Attribute("'b_te^*~`N$/r", "R@}5^>s&");
      Attributes attributes1 = attributes0.put(attribute0);
      Attribute attribute1 = null;
      try {
        attribute1 = new Attribute((String) null, "l[r", attributes1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Safelist.basic();
      String string0 = "";
      String[] stringArray0 = new String[1];
      String string1 = "doctype-system";
      String string2 = null;
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment("doctype-system", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Safelist.none();
      String string0 = "(";
      String string1 = "td";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "td";
      Safelist safelist0 = Safelist.none();
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("G14Y\"L-dATH6.1 6A", "J^t[t7R&XWqy%.a3", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Safelist.basic();
      String string0 = "%s@%x{%s}";
      String[] stringArray0 = new String[3];
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag.valueOf("%s@%x{%s}", parseSettings0);
      String string1 = "\\.9M!GKr";
      parseSettings0.normalizeAttribute("CHSdBn3_P'u\"");
      // Undeclared exception!
      try { 
        Tag.valueOf("%s@%x{%s}", (ParseSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Safelist.basicWithImages();
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("9(8\"");
      Object object0 = new Object();
      boolean boolean0 = safelist_Protocol0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Safelist.basicWithImages();
      String[] stringArray0 = new String[1];
      String string0 = "m/NC.oK1nDsJn";
      stringArray0[0] = "m/NC.oK1nDsJn";
      Safelist safelist1 = safelist0.removeAttributes("m/NC.oK1nDsJn", stringArray0);
      safelist1.removeAttributes("org.jsoup.parser.TreeBuilder", stringArray0);
      Safelist safelist2 = safelist0.addTags(stringArray0);
      safelist2.removeTags(stringArray0);
      safelist2.addAttributes("m/NC.oK1nDsJn", stringArray0);
      Safelist.simpleText();
      Safelist.simpleText();
      String string1 = "title";
      Safelist safelist3 = safelist0.removeEnforcedAttribute("m/NC.oK1nDsJn", "title");
      Safelist.basicWithImages();
      safelist3.getEnforcedAttributes(",..$bCpePDq_]`?_%4E");
      Safelist.simpleText();
      Safelist safelist4 = Safelist.basic();
      // Undeclared exception!
      try { 
        safelist4.addEnforcedAttribute((String) null, "m/NC.oK1nDsJn", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String string0 = "";
      String[] stringArray0 = new String[19];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        safelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Safelist.AttributeValue.valueOf("");
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ">: ";
      stringArray0[3] = ">: ";
      stringArray0[4] = ">: ";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = ">: ";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        safelist0.addAttributes(">: ", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "I(Igqkd;{`j@5zC?-X";
      stringArray0[1] = null;
      stringArray0[2] = "I(Igqkd;{`j@5zC?-X";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "Error scanning files.";
      // Undeclared exception!
      try { 
        safelist0.addProtocols((String) null, "I(Igqkd;{`j@5zC?-X", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      // Undeclared exception!
      try { 
        safelist0.removeEnforcedAttribute("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Safelist.basicWithImages();
      Safelist safelist0 = Safelist.basic();
      String string0 = "FusmaKD-5flS|9X ";
      String string1 = "l$%BRZg$a/} 0 h/P";
      String string2 = null;
      // Undeclared exception!
      try { 
        safelist0.addEnforcedAttribute("l$%BRZg$a/} 0 h/P", "FusmaKD-5flS|9X ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Safelist.TagName.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[3];
      String string0 = "p%<*n+#<Q\\u(@V+a7";
      stringArray0[0] = string0;
      String string1 = "org.eclipse.jetty.io.ChannelEndPoint";
      stringArray0[1] = "org.eclipse.jetty.io.ChannelEndPoint";
      safelist0.isSafeTag(stringArray0[0]);
      stringArray0[2] = "#";
      safelist0.addTags(stringArray0);
      safelist0.isSafeTag("t,}^!?zh)");
      String string2 = "%s@%x{%s, %s}";
      // Undeclared exception!
      try { 
        safelist0.addEnforcedAttribute("%s@%x{%s, %s}", "t,}^!?zh)", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "div";
      stringArray0[1] = "wI";
      String string0 = "";
      stringArray0[2] = "";
      Document document0 = Parser.parse("div", "tMuOjInwA#C^z");
      Document document1 = document0.clone();
      Document document2 = document1.normalise();
      Document document3 = document2.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document3.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("div", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      safelist0.removeEnforcedAttribute("{}: {} -> {} not allowed", "&+T(f\"WQ_;");
      String string0 = "6?`";
      safelist0.isSafeTag("6?`");
      Safelist safelist1 = safelist0.removeEnforcedAttribute("X%", "X%");
      Safelist.AttributeValue safelist_AttributeValue0 = Safelist.AttributeValue.valueOf("");
      safelist_AttributeValue0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "X%";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        safelist1.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String string0 = null;
      String[] stringArray0 = new String[2];
      Safelist.relaxed();
      // Undeclared exception!
      try { 
        safelist0.addProtocols("", (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "XM(^";
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        safelist0.removeProtocols((String) null, (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "STOPPED: ";
      Safelist.TagName.valueOf("STOPPED: ");
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("STOPPED: ");
      Safelist safelist0 = Safelist.basicWithImages();
      Safelist safelist1 = new Safelist(safelist0);
      String[] stringArray0 = null;
      Safelist safelist2 = Safelist.basic();
      // Undeclared exception!
      try { 
        safelist2.addTags((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "";
      Safelist.AttributeValue.valueOf("");
      Safelist safelist0 = Safelist.relaxed();
      Safelist safelist1 = safelist0.preserveRelativeLinks(true);
      String string1 = null;
      String string2 = null;
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        safelist1.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Safelist.Protocol.valueOf("+:FEO\"S>;\"Bil/~y");
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+:FEO\"S>;\"Bil/~y";
      stringArray0[1] = "+:FEO\"S>;\"Bil/~y";
      stringArray0[2] = "+:FEO\"S>;\"Bil/~y";
      stringArray0[3] = "+:FEO\"S>;\"Bil/~y";
      stringArray0[4] = "+:FEO\"S>;\"Bil/~y";
      stringArray0[5] = "+:FEO\"S>;\"Bil/~y";
      stringArray0[6] = "+:FEO\"S>;\"Bil/~y";
      stringArray0[7] = "+:FEO\"S>;\"Bil/~y";
      stringArray0[8] = "small";
      safelist0.addTags(stringArray0);
      Safelist.basicWithImages();
      Safelist safelist1 = safelist0.preserveRelativeLinks(false);
      safelist1.removeAttributes("+:FEO\"S>;\"Bil/~y", stringArray0);
      Safelist safelist2 = safelist1.addTags(stringArray0);
      safelist2.isSafeTag("OSHUTTING");
      Safelist safelist3 = Safelist.relaxed();
      assertNotSame(safelist3, safelist1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "@&";
      Safelist.AttributeValue safelist_AttributeValue0 = new Safelist.AttributeValue("@&");
      Safelist.Protocol.valueOf("");
      // Undeclared exception!
      try { 
        Tag.valueOf("@&", (ParseSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jd[oj,T>4E*Q";
      stringArray0[1] = "h2";
      String string0 = "]l$?#9\\7=d_";
      stringArray0[2] = "]l$?#9\u0007=d_";
      String string1 = "Gp!P|\\H(y{o";
      // Undeclared exception!
      try { 
        safelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[2];
      String string0 = "$e]BVhep&";
      // Undeclared exception!
      try { 
        safelist0.addAttributes("$e]BVhep&", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String string0 = "org.eclipse.jetty.util.thread.Invocable";
      safelist0.addEnforcedAttribute("org.eclipse.jetty.util.thread.Invocable", "org.eclipse.jetty.util.thread.Invocable", "org.eclipse.jetty.util.thread.Invocable");
      safelist0.addEnforcedAttribute("org.eclipse.jetty.util.thread.Invocable", "org.eclipse.jetty.util.thread.Invocable", "org.eclipse.jetty.util.thread.Invocable");
      String string1 = "";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.eclipse.jetty.util.thread.Invocable";
      String string2 = "1Q n ]VZJh?ZC'";
      // Undeclared exception!
      try { 
        safelist0.addProtocols("1Q n ]VZJh?ZC'", "org.eclipse.jetty.util.thread.Invocable", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Document document0 = Parser.parse("strike", "strike");
      Attribute attribute0 = Attribute.createFromEncoded("y'mHjAbB]3!}l2MXR*", "");
      boolean boolean0 = safelist0.isSafeAttribute("y'mHjAbB]3!}l2MXR*", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      Safelist.relaxed();
      safelist0.preserveRelativeLinks(true);
      String[] stringArray0 = new String[2];
      Safelist safelist1 = Safelist.simpleText();
      // Undeclared exception!
      try { 
        safelist1.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Safelist.basicWithImages();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "scope";
      stringArray0[1] = "'MX.u";
      Safelist safelist1 = safelist0.addProtocols("scope", "kZQ):", stringArray0);
      safelist1.addTags(stringArray0);
      Safelist.AttributeValue safelist_AttributeValue0 = Safelist.AttributeValue.valueOf("kZQ):");
      String string0 = safelist_AttributeValue0.toString();
      assertEquals("kZQ):", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String string0 = "";
      Element element0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        safelist0.addAttributes("", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Safelist.AttributeKey.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "^^!4S5S[#d:}Ci>q";
      Safelist.AttributeKey.valueOf("^^!4S5S[#d:}Ci>q");
      Safelist.AttributeKey safelist_AttributeKey0 = new Safelist.AttributeKey("");
      Safelist.TagName safelist_TagName0 = new Safelist.TagName("^^!4S5S[#d:}Ci>q");
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "^^!4S5S[#d:}Ci>q";
      stringArray0[2] = "^^!4S5S[#d:}Ci>q";
      stringArray0[3] = "";
      stringArray0[4] = "CGa,T@E";
      stringArray0[5] = "^^!4S5S[#d:}Ci>q";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("", "", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String string0 = null;
      String string1 = "readonly";
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        safelist0.removeAttributes((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "compact";
      stringArray0[2] = "Ry!:%wH=Kpl6;}`U";
      // Undeclared exception!
      try { 
        safelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "";
      Safelist.AttributeValue safelist_AttributeValue0 = Safelist.AttributeValue.valueOf("");
      safelist_AttributeValue0.equals("");
      safelist_AttributeValue0.equals("");
      Safelist safelist0 = Safelist.basic();
      // Undeclared exception!
      try { 
        safelist0.addEnforcedAttribute("", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String string0 = "2]<{@(J";
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("16I+J,CbEi,L");
      String string0 = "Jmsrr5";
      Safelist.AttributeValue.valueOf("Jmsrr5");
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[0];
      Safelist safelist1 = safelist0.removeTags(stringArray0);
      Safelist.basic();
      // Undeclared exception!
      try { 
        safelist1.addAttributes("16I+J,CbEi,L", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      safelist0.getEnforcedAttributes("j:WZuAu!`lsn|sf=");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "j:WZuAu!`lsn|sf=";
      stringArray0[1] = "j:WZuAu!`lsn|sf=";
      Safelist safelist1 = safelist0.removeAttributes("j:WZuAu!`lsn|sf=", stringArray0);
      String string0 = "";
      safelist0.getEnforcedAttributes("");
      safelist1.addTags(stringArray0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement((Tag) null, "j:WZuAu!`lsn|sf=", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      Safelist safelist1 = new Safelist(safelist0);
      Document document0 = new Document("Kf#Bsi4&<vIk6`");
      Attributes attributes0 = new Attributes();
      attributes0.get("q");
      Attributes attributes1 = attributes0.add("Kf#Bsi4&<vIk6`", "Sl)qpdm=`'Q4{");
      attributes1.asList();
      Attributes attributes2 = attributes1.clone();
      attributes0.remove("Sl)qpdm=`'Q4{");
      Attribute attribute0 = new Attribute("Kf#Bsi4&<vIk6`", "Kf#Bsi4&<vIk6`", attributes2);
      safelist1.isSafeAttribute("Kf#Bsi4&<vIk6`", document0, attribute0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-,i#uB2j5fp9/6UYd";
      stringArray0[1] = "Kf#Bsi4&<vIk6`";
      stringArray0[2] = "Sl)qpdm=`'Q4{";
      stringArray0[3] = "Kf#Bsi4&<vIk6`";
      stringArray0[4] = "Sl)qpdm=`'Q4{";
      stringArray0[5] = "Sl)qpdm=`'Q4{";
      stringArray0[6] = "Sl)qpdm=`'Q4{";
      Safelist safelist2 = safelist0.addTags(stringArray0);
      Safelist.basic();
      Safelist safelist3 = safelist2.preserveRelativeLinks(false);
      // Undeclared exception!
      try { 
        safelist3.removeProtocols("org.eclipse.jetty.util.InetAddressSet$InetPattern", "Sl)qpdm=`'Q4{", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      safelist0.getEnforcedAttributes("colgroup");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "colgroup";
      stringArray0[1] = "colgroup";
      safelist0.addAttributes("colgroup", stringArray0);
      safelist0.getEnforcedAttributes("colgroup");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "colgroup";
      stringArray1[1] = "/p8;EG 5#O3WQ]mT";
      safelist0.addProtocols("/p8;EG 5#O3WQ]mT", "/p8;EG 5#O3WQ]mT", stringArray1);
      Safelist.none();
      Safelist.AttributeValue.valueOf("");
      Safelist safelist1 = Safelist.basicWithImages();
      assertNotSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      Safelist safelist1 = new Safelist(safelist0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "wpw{d(:aGhvfRG";
      stringArray0[1] = "wpw{d(:aGhvfRG";
      stringArray0[2] = "org.jsoup.helper.W3CDom";
      stringArray0[3] = "ssCde";
      stringArray0[4] = "wpw{d(:aGhvfRG";
      stringArray0[5] = "ssCde";
      stringArray0[6] = "wpw{d(:aGhvfRG";
      stringArray0[7] = "ssCde";
      // Undeclared exception!
      try { 
        safelist1.removeProtocols("wpw{d(:aGhvfRG", "ssCde", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      String string0 = "org.jsoup.safety.Safelist$Protocol";
      String[] stringArray0 = new String[2];
      String string1 = "gf ]-uz%{L=$G$@w8r";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("org.jsoup.safety.Safelist$Protocol", "gf ]-uz%{L=$G$@w8r", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ol";
      stringArray0[1] = "";
      stringArray0[2] = "bNtE0\"0k";
      stringArray0[3] = "ol";
      stringArray0[4] = "bNtE0\"0k";
      stringArray0[5] = "ol";
      // Undeclared exception!
      try { 
        safelist0.addProtocols("bNtE0\"0k", "ol", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String string0 = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "div";
      // Undeclared exception!
      try { 
        safelist0.removeEnforcedAttribute(stringArray0[0], "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      safelist0.getEnforcedAttributes("FLp>=IU/0");
      stringArray0[1] = "-";
      String string0 = "Q5)_wX}mh_9s";
      stringArray0[2] = "Q5)_wX}mh_9s";
      // Undeclared exception!
      try { 
        safelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Safelist.basicWithImages();
      Safelist.Protocol safelist_Protocol0 = Safelist.Protocol.valueOf("");
      assertEquals("", safelist_Protocol0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String string0 = "width";
      Safelist.relaxed();
      String string1 = "";
      // Undeclared exception!
      try { 
        safelist0.addEnforcedAttribute("width", "width", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Safelist.none();
      Safelist.simpleText();
      Safelist safelist1 = new Safelist(safelist0);
      safelist0.isSafeTag("2.a ~OR A?LvT2myK&");
      String string0 = ":all";
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        safelist1.removeProtocols(":all", "", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "XkL3VZ8JAS}/A";
      stringArray0[1] = "org.jsoup.parser.TreeBuilder";
      stringArray0[2] = "";
      stringArray0[3] = "&Sa6,X*f?";
      // Undeclared exception!
      try { 
        safelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "L&";
      Safelist.AttributeValue safelist_AttributeValue0 = Safelist.AttributeValue.valueOf("L&");
      Safelist.AttributeValue.valueOf("L&");
      safelist_AttributeValue0.toString();
      Safelist safelist0 = Safelist.relaxed();
      Safelist safelist1 = Safelist.none();
      boolean boolean0 = true;
      safelist1.preserveRelativeLinks(true);
      Safelist.AttributeValue.valueOf("L&");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "L&";
      stringArray0[1] = "L&";
      stringArray0[2] = "L&";
      // Undeclared exception!
      try { 
        safelist0.addProtocols("L&", "L&", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String string0 = "EI\"<(J*x";
      Safelist.none();
      Safelist.AttributeValue.valueOf("EI\"<(J*x");
      String[] stringArray0 = new String[3];
      safelist0.getEnforcedAttributes("");
      stringArray0[0] = "EI\"<(J*x";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("EI\"<(J*x", "EI\"<(J*x", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      safelist0.preserveRelativeLinks(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "i=jVBbaq";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        safelist0.removeAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      // Undeclared exception!
      try { 
        safelist0.addTags((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "U?a";
      safelist0.removeEnforcedAttribute("center", "center");
      stringArray0[1] = "#.3^em,ao";
      stringArray0[2] = "a";
      Safelist safelist1 = safelist0.addTags(stringArray0);
      assertSame(safelist0, safelist1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      Safelist safelist1 = new Safelist(safelist0);
      Safelist safelist2 = Safelist.relaxed();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "h4";
      stringArray0[1] = "h4";
      stringArray0[2] = "h4";
      stringArray0[3] = "Selector {} waiting with {} keys";
      stringArray0[4] = "h4";
      stringArray0[5] = "z";
      safelist2.addAttributes("h4", stringArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        safelist0.removeProtocols((String) null, (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      // Undeclared exception!
      try { 
        safelist0.addTags((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      Safelist safelist1 = new Safelist(safelist0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Unexpected HandshakeStatus ";
      safelist1.isSafeTag("X&p0XB:#hb\"lPqjBYN");
      stringArray0[1] = "{AGiIqmQS1 tF@QM3`p";
      stringArray0[2] = "Mark invalid";
      stringArray0[3] = "caption";
      stringArray0[4] = "";
      stringArray0[5] = "k>";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      safelist1.getEnforcedAttributes("");
      Safelist.simpleText();
      // Undeclared exception!
      try { 
        safelist1.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "colspan";
      Safelist.TagName.valueOf("colspan");
      Safelist safelist0 = Safelist.relaxed();
      String string1 = "";
      String string2 = "";
      // Undeclared exception!
      try { 
        safelist0.removeEnforcedAttribute("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      boolean boolean0 = false;
      String string0 = "li";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "li";
      stringArray0[1] = "li";
      Safelist safelist1 = safelist0.addProtocols("li", "li", stringArray0);
      safelist1.isSafeTag("li");
      String string1 = "sup";
      Safelist.basicWithImages();
      // Undeclared exception!
      try { 
        safelist0.addAttributes((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Safelist safelist1 = safelist0.preserveRelativeLinks(false);
      safelist1.removeEnforcedAttribute("gF{(^#p", "gF{(^#p");
      Safelist.Protocol.valueOf("org.eclipse.jetty.util.Attributes$Wrapper");
      safelist0.getEnforcedAttributes("org.eclipse.jetty.util.Attributes$Wrapper");
      Safelist.basicWithImages();
      Safelist safelist2 = Safelist.basicWithImages();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.eclipse.jetty.util.Attributes$Wrapper";
      stringArray0[1] = "org.eclipse.jetty.util.Attributes$Wrapper";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "gF{(^#p";
      stringArray1[1] = "org.eclipse.jetty.util.Attributes$Wrapper";
      safelist2.removeTags(stringArray1);
      stringArray0[2] = "gF{(^#p";
      stringArray0[3] = "org.eclipse.jetty.util.Attributes$Wrapper";
      stringArray0[4] = "org.eclipse.jetty.util.Attributes$Wrapper";
      safelist2.addProtocols("org.eclipse.jetty.util.Attributes$Wrapper", "gF{(^#p", stringArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        safelist2.addEnforcedAttribute("org.eclipse.jetty.util.Attributes$Wrapper", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      // Undeclared exception!
      try { 
        safelist0.removeEnforcedAttribute(")", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String string0 = "";
      Safelist.AttributeValue.valueOf("");
      String string1 = "";
      safelist0.isSafeTag("");
      // Undeclared exception!
      try { 
        safelist0.removeEnforcedAttribute("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Safelist.basic();
      String string0 = "h2";
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h2";
      stringArray0[1] = "C";
      stringArray0[2] = "h2";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("yj<", "yj<", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String string0 = "]906('&c}V|A";
      String string1 = "<o'lx3eGHgjiQ'a]";
      safelist0.addEnforcedAttribute("]906('&c}V|A", "<o'lx3eGHgjiQ'a]", "org.eclipse.jetty.io.ManagedSelector$Accept");
      String string2 = "";
      Element element0 = null;
      Attribute.createFromEncoded("org.eclipse.jetty.io.ManagedSelector$Accept", "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      Safelist safelist1 = Safelist.relaxed();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]906('&c}V|A";
      stringArray0[1] = "";
      stringArray0[2] = "_Jy{#wy?5@oy![";
      stringArray0[3] = "]906('&c}V|A";
      stringArray0[4] = "org.eclipse.jetty.io.ManagedSelector$Accept";
      stringArray0[5] = "<o'lx3eGHgjiQ'a]";
      stringArray0[6] = "]906('&c}V|A";
      stringArray0[7] = "org.eclipse.jetty.io.ManagedSelector$Accept";
      stringArray0[8] = "org.eclipse.jetty.io.ManagedSelector$Accept";
      // Undeclared exception!
      try { 
        safelist1.removeProtocols("p", "<o'lx3eGHgjiQ'a]", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String string0 = "";
      Safelist.AttributeValue safelist_AttributeValue0 = Safelist.AttributeValue.valueOf("");
      safelist_AttributeValue0.equals(safelist0);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String string0 = "R?Vd`0Tc)rM?vb#";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "R?Vd`0Tc)rM?vb#";
      // Undeclared exception!
      try { 
        safelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String string0 = null;
      // Undeclared exception!
      try { 
        safelist0.getEnforcedAttributes((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Z+^CZ([n|;#ad";
      stringArray0[1] = "i";
      stringArray0[2] = "7K{m,{`N/,_UeiD5a_";
      stringArray0[3] = "7K{m,{`N/,_UeiD5a_";
      stringArray0[4] = "Z+^CZ([n|;#ad";
      stringArray0[5] = "Z+^CZ([n|;#ad";
      stringArray0[6] = "Z+^CZ([n|;#ad";
      safelist0.addAttributes("Z+^CZ([n|;#ad", stringArray0);
      safelist0.isSafeTag("7K{m,{`N/,_UeiD5a_");
      safelist0.isSafeTag("Z+^CZ([n|;#ad");
      safelist0.isSafeTag("Z+^CZ([n|;#ad");
      Safelist.AttributeKey safelist_AttributeKey0 = Safelist.AttributeKey.valueOf("7K{m,{`N/,_UeiD5a_");
      assertEquals("7K{m,{`N/,_UeiD5a_", safelist_AttributeKey0.toString());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}7YD~Y:cq-j1b>Ox";
      stringArray0[1] = "}7YD~Y:cq-j1b>Ox";
      safelist0.addProtocols("(/", "}7YD~Y:cq-j1b>Ox", stringArray0);
      Safelist safelist1 = Safelist.simpleText();
      safelist1.removeTags(stringArray0);
      Safelist.TagName.valueOf("");
      Safelist.TagName.valueOf("shutdownOutput {}");
      safelist0.addAttributes("shutdownOutput {}", stringArray0);
      // Undeclared exception!
      try { 
        safelist0.addEnforcedAttribute("shutdownOutput {}", "3#mu:xOl3x9,zk:-v@", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String string0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        safelist0.removeAttributes((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
