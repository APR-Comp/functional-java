/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 03:57:14 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.MissingFormatArgumentException;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.select.Evaluator;
import org.jsoup.select.QueryParser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QueryParser_ESTest extends QueryParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("Could not parse(nth-index '%s': unexpected format", "Could not parse(nth-index '%s': unexpected format");
      // Undeclared exception!
      try { 
        QueryParser.parse("Could not parse(nth-index '%s': unexpected format");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":containsOwn(%s)");
      assertNotNull(evaluator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "[%s$=%s]";
      QueryParser.parse("[%s$=%s]");
      String string1 = "68$Yp";
      // Undeclared exception!
      try { 
        QueryParser.parse("68$Yp");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '68$Yp': unexpected token at '$Yp'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      QueryParser.parse("5g-P.IR7,.7Fq~MrZHY");
      QueryParser.parse("5g-P.IR7,.7Fq~MrZHY");
      QueryParser.parse("5g-P.IR7,.7Fq~MrZHY");
      String string0 = "";
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = ">(anXj)";
      // Undeclared exception!
      try { 
        QueryParser.parse(">(anXj)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '(anXj)': unexpected token at '(anXj)'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      QueryParser.parse("[%s=%s]");
      QueryParser.parse("[%s=%s]");
      QueryParser.parse("[%s=%s]");
      QueryParser.parse("[%s=%s]");
      // Undeclared exception!
      try { 
        QueryParser.parse("test({}) -> [!child {}]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'test({}) -> [!child {}]': unexpected token at '({}) -> [!child {}]'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "[%s*=%s]";
      QueryParser.parse("[%s*=%s]");
      QueryParser.parse("[%s*=%s]");
      QueryParser.parse("[%s*=%s]");
      QueryParser.parse("[%s*=%s]");
      String string1 = "";
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = ":gt(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":gt(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "OJvRh[()nL5v{%Y_eZ";
      // Undeclared exception!
      try { 
        QueryParser.parse("OJvRh[()nL5v{%Y_eZ");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'Y'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "[%s^=%s]";
      QueryParser.parse("[%s^=%s]");
      String string1 = "d'M0C0B8@";
      // Undeclared exception!
      try { 
        QueryParser.parse("d'M0C0B8@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'd'M0C0B8@': unexpected token at ''M0C0B8@'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = ":matchesOwn(%s)";
      QueryParser.parse(":matchesOwn(%s)");
      String string1 = "P_,";
      // Undeclared exception!
      try { 
        QueryParser.parse("P_,");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      QueryParser.parse("a+e,lGcW6,UWRfv1-");
      // Undeclared exception!
      try { 
        QueryParser.parse("W)Op'd5'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'W)Op'd5'': unexpected token at ')Op'd5''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      QueryParser.parse(":matchText");
      QueryParser.parse(":matchText");
      QueryParser.parse(":matchText");
      QueryParser.parse(":matchText");
      QueryParser.parse(":matchText");
      QueryParser.parse(":matchText");
      QueryParser.parse(":matchText");
      String string0 = "";
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = ":contains(text) query must not be empty";
      QueryParser.parse(":contains(text) query must not be empty");
      String string1 = "";
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "1";
      QueryParser.parse("1");
      QueryParser.parse("1");
      QueryParser.parse("Index must be numeric");
      QueryParser.parse(":root");
      QueryParser.parse("Index must be numeric");
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      QueryParser.parse("Y*QC");
      QueryParser.parse("Y*QC");
      QueryParser.parse("Y*QC");
      QueryParser.parse(":only-of-type");
      Evaluator evaluator0 = QueryParser.parse("W");
      assertNotNull(evaluator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      QueryParser.parse(":last-child");
      String string0 = null;
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = ":not(selector) subselect must not be empty";
      QueryParser.parse(":not(selector) subselect must not be empty");
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = ":last-of-type";
      QueryParser.parse(":last-of-type");
      QueryParser.parse(":last-of-type");
      String string1 = "@YlH/CwYeTBR@uh1;";
      // Undeclared exception!
      try { 
        QueryParser.parse("@YlH/CwYeTBR@uh1;");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '@YlH/CwYeTBR@uh1;': unexpected token at '@YlH/CwYeTBR@uh1;'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":eq(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = ":containsOwn(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":containsOwn(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      QueryParser.parse(":only-child");
      String string0 = ":containsData(text) query must not be empty";
      QueryParser.parse(":containsData(text) query must not be empty");
      QueryParser.parse(":only-child");
      QueryParser.parse(":containsData(text) query must not be empty");
      // Undeclared exception!
      try { 
        QueryParser.parse("+|.jD6):.`qJ0f");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '|.jD6):.`qJ0f': unexpected token at '|.jD6):.`qJ0f'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      QueryParser.parse(":matches(regex) query must not be empty");
      String string0 = null;
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = ":first-of-type";
      QueryParser.parse(":first-of-type");
      QueryParser.parse(":first-of-type");
      QueryParser.parse(":first-of-type");
      QueryParser.parse(":first-of-type");
      String string1 = null;
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "*|";
      QueryParser.parse("*|");
      QueryParser.parse("*|");
      QueryParser.parse(":empty");
      // Undeclared exception!
      try { 
        QueryParser.parse("_Rq_j&c2Lg&\"#UXg");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '_Rq_j&c2Lg&\"#UXg': unexpected token at '_Rq_j&c2Lg&\"#UXg'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      QueryParser.parse("~RSVmy2nih");
      String string0 = "/cyRyP\"yEo:.w20x1";
      // Undeclared exception!
      try { 
        QueryParser.parse("/cyRyP\"yEo:.w20x1");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '/cyRyP\"yEo:.w20x1': unexpected token at '/cyRyP\"yEo:.w20x1'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      QueryParser.parse(":only-child");
      QueryParser.parse(":only-child");
      QueryParser.parse(":only-child");
      QueryParser.parse(":only-child");
      // Undeclared exception!
      try { 
        QueryParser.parse("(1SC2kYf.h CMY.+");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '(1SC2kYf.h CMY.+': unexpected token at '(1SC2kYf.h CMY.+'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "S ";
      QueryParser.parse("S ");
      QueryParser.parse("S ");
      QueryParser.parse("S ");
      String string1 = "!3 n/kv]w.!?";
      // Undeclared exception!
      try { 
        QueryParser.parse("!3 n/kv]w.!?");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '!3 n/kv]w.!?': unexpected token at '!3 n/kv]w.!?'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = ":nth-of-type(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":nth-of-type(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "Encrypted buffer max length exceeded";
      QueryParser.parse("Encrypted buffer max length exceeded");
      QueryParser.parse("Encrypted buffer max length exceeded");
      String string1 = "";
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      QueryParser.parse("f");
      QueryParser.parse("f");
      Evaluator evaluator0 = QueryParser.parse("f");
      QueryParser.parse(":matches(regex) query must not be empty");
      QueryParser.parse("uREV");
      Evaluator evaluator1 = QueryParser.parse("f");
      assertNotSame(evaluator1, evaluator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":matches");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ':matches': unexpected token at ':matches'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("%s@%x{c=%d,m=%d,t=%d}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '%s@%x{c=%d,m=%d,t=%d}': unexpected token at '%s@%x{c=%d,m=%d,t=%d}'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = ":nth-last-of-type(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":nth-last-of-type(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      QueryParser.parse("*|x6pg4qwo");
      QueryParser.parse("*|x6pg4qwo");
      QueryParser.parse("*|x6pg4qwo");
      QueryParser.parse("*|x6pg4qwo");
      QueryParser.parse("*|x6pg4qwo");
      QueryParser.parse("*|x6pg4qwo");
      QueryParser.parse("*|x6pg4qwo");
      QueryParser.parse("*|x6pg4qwo");
      QueryParser.parse("*|x6pg4qwo");
      QueryParser.parse("*|x6pg4qwo");
      QueryParser.parse("*|x6pg4qwo");
      QueryParser.parse("*|x6pg4qwo");
      String string0 = "";
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      QueryParser.parse("bI|NR-");
      QueryParser.parse("bI|NR-");
      String string0 = "FbYP";
      QueryParser.parse("FbYP");
      String string1 = " ";
      // Undeclared exception!
      try { 
        QueryParser.parse(" ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      QueryParser.parse("wbr");
      QueryParser.parse("wbr");
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(">(FOQcUX7*");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'FOQcUX7*'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "Yon~%l.>PubSz w";
      // Undeclared exception!
      try { 
        QueryParser.parse("Yon~%l.>PubSz w");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '%l.': unexpected token at '%l.'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      QueryParser.parse("org.eclipse.jetty.io.ssl.SslConnection");
      QueryParser.parse("org.eclipse.jetty.io.ssl.SslConnection");
      String string0 = "6)% Ce~{gB";
      // Undeclared exception!
      try { 
        QueryParser.parse("6)% Ce~{gB");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '6)% Ce~{gB': unexpected token at ')% Ce~{gB'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "3K\"oVE:@G|aKF5";
      // Undeclared exception!
      try { 
        QueryParser.parse("3K\"oVE:@G|aKF5");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '3K\"oVE:@G|aKF5': unexpected token at '\"oVE:@G|aKF5'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = ">";
      // Undeclared exception!
      try { 
        QueryParser.parse(">");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      QueryParser.parse("X");
      QueryParser.parse("X");
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = ":gt(";
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      // Undeclared exception!
      try { 
        QueryParser.parse(":gt(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("{;Y?d0Q1|N[n0{UT");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '{;Y?d0Q1|N[n0{UT': unexpected token at '{;Y?d0Q1|N[n0{UT'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "DgMY_E,Zf E";
      QueryParser.parse("DgMY_E,Zf E");
      QueryParser.parse("DgMY_E,Zf E");
      QueryParser.parse("DgMY_E,Zf E");
      QueryParser.parse("DgMY_E,Zf E");
      String string1 = "";
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "N{Sqsohxhm#!_ycMQ`";
      // Undeclared exception!
      try { 
        QueryParser.parse("N{Sqsohxhm#!_ycMQ`");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'N{Sqsohxhm#!_ycMQ`': unexpected token at '{Sqsohxhm#!_ycMQ`'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      QueryParser.parse("[%s!=%s]");
      QueryParser.parse("[%s!=%s]");
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "Wj750RbfUz[X";
      // Undeclared exception!
      try { 
        QueryParser.parse("Wj750RbfUz[X");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'X'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "-\\";
      // Undeclared exception!
      try { 
        QueryParser.parse("-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '-': unexpected token at '-'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "a{:QD+gw~AwAy&9f";
      // Undeclared exception!
      try { 
        QueryParser.parse("a{:QD+gw~AwAy&9f");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'a{:QD+gw~AwAy&9f': unexpected token at '{:QD+gw~AwAy&9f'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "f>Z48h";
      QueryParser.parse("f>Z48h");
      QueryParser.parse("f>Z48h");
      String string1 = "R]yrBob*p";
      // Undeclared exception!
      try { 
        QueryParser.parse("R]yrBob*p");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'R]yrBob*p': unexpected token at ']yrBob*p'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "org.eclipse.jetty.util.IncludeExcludeSet";
      QueryParser.parse("org.eclipse.jetty.util.IncludeExcludeSet");
      String string1 = "";
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "j";
      QueryParser.parse("j");
      String string1 = "org.jsoup.select.Evaluator$IsLastChild";
      // Undeclared exception!
      try { 
        QueryParser.parse("org.jsoup.select.Evaluator$IsLastChild");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Evaluator$IsLastChild': unexpected token at '$IsLastChild'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      QueryParser.parse("iframe");
      QueryParser.parse(":first-child");
      QueryParser.parse("iframe");
      QueryParser.parse("iframe");
      QueryParser.parse("iframe");
      QueryParser.parse("iframe");
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      String string0 = "0";
      QueryParser.parse("0");
      QueryParser.parse("URL must be specified to connect");
      QueryParser.parse(":root");
      QueryParser.parse(":root");
      String string1 = "~KO8ET&zBl";
      // Undeclared exception!
      try { 
        QueryParser.parse("~KO8ET&zBl");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'KO8ET&zBl': unexpected token at '&zBl'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      QueryParser.parse("v4tOUv3cZi");
      // Undeclared exception!
      try { 
        QueryParser.parse("n]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'n]': unexpected token at ']'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "V0";
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      String string1 = "";
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "56=v]$LIE4kNbMcC";
      // Undeclared exception!
      try { 
        QueryParser.parse("56=v]$LIE4kNbMcC");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '56=v]$LIE4kNbMcC': unexpected token at '=v]$LIE4kNbMcC'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "`9@ZE";
      // Undeclared exception!
      try { 
        QueryParser.parse("`9@ZE");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '`9@ZE': unexpected token at '`9@ZE'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "0|Rc&;";
      // Undeclared exception!
      try { 
        QueryParser.parse("0|Rc&;");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '0|Rc&;': unexpected token at '&;'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "l1?tXoR9";
      // Undeclared exception!
      try { 
        QueryParser.parse("l1?tXoR9");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'l1?tXoR9': unexpected token at '?tXoR9'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      QueryParser.parse("rEj3");
      String string0 = "";
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = ";|cU";
      // Undeclared exception!
      try { 
        QueryParser.parse(";|cU");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ';|cU': unexpected token at ';|cU'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("^/.*Xl)\u0003");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '^/.*Xl)': unexpected token at '^/.*Xl)'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = ":not(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":not(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "cqAwHziMl\"!Uq^";
      // Undeclared exception!
      try { 
        QueryParser.parse("cqAwHziMl\"!Uq^");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'cqAwHziMl\"!Uq^': unexpected token at '\"!Uq^'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "}k(zqHx";
      // Undeclared exception!
      try { 
        QueryParser.parse("}k(zqHx");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}k(zqHx': unexpected token at '}k(zqHx'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      QueryParser.parse("xo");
      QueryParser.parse("xo");
      QueryParser.parse("xo");
      String string0 = ")\"A'$z=`sBii`Ge;^)-";
      // Undeclared exception!
      try { 
        QueryParser.parse(")\"A'$z=`sBii`Ge;^)-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ')\"A'$z=`sBii`Ge;^)-': unexpected token at ')\"A'$z=`sBii`Ge;^)-'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "~=";
      // Undeclared exception!
      try { 
        QueryParser.parse("~=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '=': unexpected token at '='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = ".";
      // Undeclared exception!
      try { 
        QueryParser.parse(".");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      QueryParser.parse("gmlCKXa+cbTJ3a#L");
      QueryParser.parse("gmlCKXa+cbTJ3a#L");
      // Undeclared exception!
      try { 
        QueryParser.parse(":has");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ':has': unexpected token at ':has'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "f0!Q";
      // Undeclared exception!
      try { 
        QueryParser.parse("f0!Q");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'f0!Q': unexpected token at '!Q'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("Could not parse attribute query '%s': unexpected token at '%s'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ''%s':': unexpected token at ''%s':'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "*=";
      // Undeclared exception!
      try { 
        QueryParser.parse("*=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '*=': unexpected token at '='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = ":";
      // Undeclared exception!
      try { 
        QueryParser.parse(":");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ':': unexpected token at ':'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse("onFail ");
      Evaluator evaluator1 = QueryParser.parse("onFail ");
      assertNotSame(evaluator1, evaluator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = ":matches(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":matches(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "g!2W65vG,r_2";
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      String string1 = "fgaYd?K$s5'FCFS";
      // Undeclared exception!
      try { 
        QueryParser.parse("fgaYd?K$s5'FCFS");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'fgaYd?K$s5'FCFS': unexpected token at '?K$s5'FCFS'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("flush b[{}]={}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'b[{}]={}': unexpected token at '={}'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      String string0 = "5_s*H*0";
      QueryParser.parse("5_s*H*0");
      QueryParser.parse("5_s*H*0");
      String string1 = "%%+Zh`wsC@`[Hjp0";
      // Undeclared exception!
      try { 
        QueryParser.parse("%%+Zh`wsC@`[Hjp0");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '%%+Zh`wsC@`[Hjp0': unexpected token at '%%+Zh`wsC@`[Hjp0'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "$=";
      // Undeclared exception!
      try { 
        QueryParser.parse("$=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '$=': unexpected token at '$='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "dir";
      QueryParser.parse("dir");
      QueryParser.parse("dir");
      String string1 = "\\dG1A";
      QueryParser.parse("dG1A");
      String string2 = "%h1i'8;%!zE>";
      // Undeclared exception!
      try { 
        QueryParser.parse(string2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '%h1i'8;%!zE>': unexpected token at '%h1i'8;%!zE>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$Matches";
      // Undeclared exception!
      try { 
        QueryParser.parse("org.jsoup.select.Evaluator$Matches");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Evaluator$Matches': unexpected token at '$Matches'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "Z+R9";
      QueryParser.parse("Z+R9");
      QueryParser.parse("Z+R9");
      String string1 = "yMj%W\\upx%";
      // Undeclared exception!
      try { 
        QueryParser.parse(string1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'yMj%W\\upx%': unexpected token at '%W\\upx%'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = ":nth-last-child(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":nth-last-child(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      QueryParser.parse("8~qZy76k4Qe9");
      Evaluator evaluator0 = QueryParser.parse("8~qZy76k4Qe9");
      Evaluator evaluator1 = QueryParser.parse("8~qZy76k4Qe9");
      assertNotSame(evaluator1, evaluator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "Iz|lF}G-@i9Y&>+o1b";
      // Undeclared exception!
      try { 
        QueryParser.parse("Iz|lF}G-@i9Y&>+o1b");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Iz|lF}G-@i9Y&>+o1b': unexpected token at '}G-@i9Y&>+o1b'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = ":nth-child(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":nth-child(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":containsData(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":contains(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "5C-b_N^cH/jWC+vMi]";
      // Undeclared exception!
      try { 
        QueryParser.parse("5C-b_N^cH/jWC+vMi]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '5C-b_N^cH/jWC+vMi]': unexpected token at '^cH/jWC+vMi]'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "=";
      // Undeclared exception!
      try { 
        QueryParser.parse("=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '=': unexpected token at '='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "INITIAL";
      QueryParser.parse("INITIAL");
      String string1 = null;
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "(^t'S:4U$7Vy(vQf!6K";
      // Undeclared exception!
      try { 
        QueryParser.parse("(^t'S:4U$7Vy(vQf!6K");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '(^t'S:4U$7Vy(vQf!6K': unexpected token at '(^t'S:4U$7Vy(vQf!6K'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      QueryParser.parse(":has(el) subselect must not be empty");
      QueryParser.parse(":has(el) subselect must not be empty");
      QueryParser.parse(":has(el) subselect must not be empty");
      QueryParser.parse(":has(el) subselect must not be empty");
      String string0 = ":matchesOwn(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":matchesOwn(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("fill starting handshake {}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '{}': unexpected token at '{}'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("(0pTl)(?X");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '(0pTl)(?X': unexpected token at '(0pTl)(?X'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "=l4`RyK";
      // Undeclared exception!
      try { 
        QueryParser.parse("=l4`RyK");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '=l4`RyK': unexpected token at '=l4`RyK'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = ":lt(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":lt(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "<'E|<&Mu_2B\\dh],";
      // Undeclared exception!
      try { 
        QueryParser.parse("<'E|<&Mu_2Bdh],");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<'E|<&Mu_2Bdh],': unexpected token at '<'E|<&Mu_2Bdh],'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "+";
      String string1 = "bd#&|k4&KPA";
      // Undeclared exception!
      try { 
        QueryParser.parse("bd#&|k4&KPA");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "8>z*)l\\/7@\\,Cd";
      // Undeclared exception!
      try { 
        QueryParser.parse("8>z*)l/7@,Cd");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'z*)l/7@': unexpected token at ')l/7@'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "b.2'owkHmXoOwf,AI";
      // Undeclared exception!
      try { 
        QueryParser.parse("b.2'owkHmXoOwf,AI");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'b.2'owkHmXoOwf,AI': unexpected token at ''owkHmXoOwf,AI'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "f7";
      QueryParser.parse("f7");
      QueryParser.parse("f7");
      String string1 = "b{;E";
      // Undeclared exception!
      try { 
        QueryParser.parse("b{;E");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'b{;E': unexpected token at '{;E'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
}
