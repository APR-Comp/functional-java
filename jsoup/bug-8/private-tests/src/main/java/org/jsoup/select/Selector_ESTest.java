/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 03:58:34 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.Reader;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.eclipse.jetty.io.ArrayByteBufferPool;
import org.eclipse.jetty.io.LeakTrackingByteBufferPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.Selector;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Selector_ESTest extends Selector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("L=bJvJ1gRN_V/g+@!-");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("L=bJvJ1gRN_V/g+@!-", parseSettings0);
      Attributes attributes0 = null;
      FormElement formElement0 = new FormElement(tag0, "L=bJvJ1gRN_V/g+@!-", (Attributes) null);
      parseSettings0.normalizeAttribute("kI$9<W");
      evaluator_TagEndsWith0.toString();
      Selector.select((Evaluator) evaluator_TagEndsWith0, (Element) formElement0);
      Selector.select((Evaluator) evaluator_TagEndsWith0, (Element) formElement0);
      Document document0 = new Document("");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        Selector.select("tl[ER@&u//%>7=&", (Element) document1);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '>'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("4DuDD'PAvvKhoP'6N", (Object[]) null);
      TreeSet<Element> treeSet0 = new TreeSet<Element>();
      ArrayByteBufferPool arrayByteBufferPool0 = new ArrayByteBufferPool();
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool(arrayByteBufferPool0);
      Class<Element> class0 = Element.class;
      Collection<Element> collection0 = leakTrackingByteBufferPool0.getBeans(class0);
      treeSet0.containsAll(collection0);
      Elements elements0 = Selector.select("l>kzd~ NZ", (Iterable<Element>) treeSet0);
      assertEquals(0, elements0.size());
  }

  // @Test(timeout = 4000)
  // public void test002()  throws Throwable  {
  //     String string0 = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
  //     Object[] objectArray0 = new Object[9];
  //     objectArray0[0] = (Object) "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
  //     Object object0 = new Object();
  //     objectArray0[1] = object0;
  //     objectArray0[2] = (Object) "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
  //     Object object1 = new Object();
  //     objectArray0[3] = object1;
  //     objectArray0[4] = (Object) "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
  //     objectArray0[5] = (Object) "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
  //     objectArray0[6] = (Object) "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
  //     objectArray0[7] = (Object) "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
  //     Object object2 = new Object();
  //     objectArray0[8] = object2;
  //     Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", objectArray0);
  //     Evaluator[] evaluatorArray0 = new Evaluator[0];
  //     CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
  //     String string1 = "JgIFPwYVy";
  //     Document document0 = new Document("JgIFPwYVy");
  //     String string2 = "<\"/s";
  //     Element element0 = document0.attr("<\"/s", "<\"/s");
  //     Element element1 = document0.head();
  //     element0.appendText("<\"/s");
  //     document0.prependChild(element1);
  //     combiningEvaluator_And0.num = 771;
  //     // Undeclared exception!
  //     try { 
  //       Selector.select((Evaluator) combiningEvaluator_And0, element1);
  //       fail("Expecting exception: IndexOutOfBoundsException");
  //     
  //     } catch(IndexOutOfBoundsException e) {
  //        //
  //        // Index: 770, Size: 0
  //        //
  //        verifyException("java.util.ArrayList", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Tag tag0 = Tag.valueOf("b");
      FormElement formElement0 = new FormElement(tag0, "! `D", (Attributes) null);
      FormElement formElement1 = formElement0.clone();
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_IsEmpty0);
      formElement1.closest((Evaluator) structuralEvaluator_ImmediatePreviousSibling0);
      FormElement formElement2 = formElement1.addElement(formElement0);
      Element element0 = Selector.selectFirst("b", formElement2);
      assertEquals("b", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[3];
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals((-3064));
      evaluatorArray0[0] = (Evaluator) evaluator_IndexEquals0;
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText(";jW@]?mPC");
      evaluatorArray0[1] = (Evaluator) evaluator_ContainsOwnText0;
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot(";jW@]?mPC", ";jW@]?mPC");
      evaluatorArray0[2] = (Evaluator) evaluator_AttributeWithValueNot0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      evaluator_AttributeWithValueNot0.toString();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      parseSettings0.normalizeTag(".f");
      Tag tag0 = Tag.valueOf("ypJHa(", parseSettings0);
      Element element0 = new Element(tag0, "ypJHa(");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      element0.selectFirst((Evaluator) evaluator_IsFirstChild0);
      Selector.select((Evaluator) combiningEvaluator_Or0, element0);
      Elements elements0 = Selector.select((Evaluator) evaluator_IndexEquals0, element0);
      Elements elements1 = Selector.filterOut(elements0, elements0);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("", objectArray0);
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild(0, 0);
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      Parser parser2 = parser1.setTrackErrors(38);
      String string0 = "";
      String string1 = "org.jsoup.select.Selector";
      Document document0 = parser2.parseInput("", "org.jsoup.select.Selector");
      Document document1 = document0.parser(parser0);
      Selector.select((Evaluator) evaluator_IsNthLastChild0, (Element) document1);
      // Undeclared exception!
      try { 
        Selector.select("", (Element) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Selector.selectFirst((String) null, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Collection<Element> collection0 = null;
      // Undeclared exception!
      try { 
        Selector.filterOut((Collection<Element>) null, (Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "ZD1<5j(BZ^g67h8\\+Z";
      String string1 = "";
      Pattern pattern0 = Pattern.compile("");
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("ZD1<5j(BZ^g67h8+Z", pattern0);
      evaluator_AttributeWithValueMatching0.toString();
      Element element0 = null;
      // Undeclared exception!
      try { 
        Selector.select((Evaluator) evaluator_AttributeWithValueMatching0, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "S/fa";
      String string1 = "kO7\\*ykZQd#X";
      String string2 = "";
      Document document0 = Parser.parse("kO7*ykZQd#X", "");
      Element element0 = document0.body();
      document0.cssSelector();
      document0.hasText();
      // Undeclared exception!
      try { 
        Selector.select("S/fa", element0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'S/fa': unexpected token at '/fa'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "LtZ1s;))^jW";
      objectArray0[1] = (Object) "LtZ1s;))^jW";
      objectArray0[2] = (Object) "LtZ1s;))^jW";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "LtZ1s;))^jW";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("LtZ1s;))^jW", objectArray0);
      Tag tag0 = Tag.valueOf("LtZ1s;))^jW");
      Element element0 = new Element(tag0, (String) null, (Attributes) null);
      Elements elements0 = Selector.select("org.jsoup.helper.DataUtil", element0);
      Elements elements1 = element0.getElementsByIndexGreaterThan(980);
      Selector.filterOut(elements0, elements1);
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("org.jsoup.helper.DataUtil");
      Elements elements2 = Selector.select((Evaluator) evaluator_Tag0, element0);
      Selector.select((Evaluator) evaluator_Tag0, element0);
      Elements elements3 = Selector.select("org.jsoup.helper.DataUtil", (Iterable<Element>) elements2);
      String string0 = "org.jsoup.select.Selector$SelectorParseException";
      // Undeclared exception!
      try { 
        Selector.select("org.jsoup.select.Selector$SelectorParseException", (Iterable<Element>) elements3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Selector$SelectorParseException': unexpected token at '$SelectorParseException'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("", objectArray0);
      LinkedList<Element> linkedList0 = new LinkedList<Element>();
      // Undeclared exception!
      try { 
        Selector.select("", (Iterable<Element>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "U(";
      String string1 = "ap@HUc.";
      Document document0 = Document.createShell("ap@HUc.");
      Document document1 = document0.parser((Parser) null);
      document0.children();
      document0.createElement("ap@HUc.");
      Document document2 = document1.ownerDocument();
      // Undeclared exception!
      try { 
        Selector.selectFirst("U(", document2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'U(': unexpected token at '('
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        Selector.select("", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      Document document0 = Parser.parse("Duplicate attribute", "Duplicate attribute");
      Element element0 = document0.createElement("3G7[k?:,J<Zo ]wlYQ(");
      element0.ownerDocument();
      // Undeclared exception!
      try { 
        Selector.select((Evaluator) evaluator_IsRoot0, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("", objectArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "Hw";
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("T;7>tdz:2@s9gau\"5");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "Read timeout";
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "[Kr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "m}E*j0P^xf";
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "org.jsoup.select.Selector";
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = null;
      try {
        evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("", "org.jsoup.select.Selector");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "{R]vH";
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Element, MockFileWriter> hashMap0 = new HashMap<Element, MockFileWriter>();
      Document document0 = Document.createShell(". Status=");
      Element element0 = document0.head();
      MockFileWriter mockFileWriter0 = new MockFileWriter(". Status=", false);
      hashMap0.put(element0, mockFileWriter0);
      String string0 = null;
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null, parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("", objectArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayList<Element> arrayList0 = new ArrayList<Element>();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("oPLt<3>?$|;J]mB?[", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "oPLt<3>?$|;J]mB?[", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      FormElement formElement2 = formElement1.clone();
      arrayList0.add((Element) formElement2);
      arrayList0.iterator();
      Elements elements0 = Selector.filterOut(arrayList0, arrayList0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "";
      Object object1 = new Object();
      objectArray0[7] = object1;
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("", objectArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "org.jsoup.select.Selector$SelectorParseException";
      String string1 = "+Hz/)T9";
      Document document0 = new Document("+Hz/)T9");
      document0.getElementsByAttribute("org.jsoup.select.Selector$SelectorParseException");
      // Undeclared exception!
      try { 
        Selector.select("org.jsoup.select.Selector$SelectorParseException", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Selector$SelectorParseException': unexpected token at '$SelectorParseException'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "";
      String string1 = "HBXY>Ni$z)";
      attributes0.remove("3");
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "HBXY>Ni$z)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("z", parseSettings0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "z";
      objectArray0[3] = (Object) tag0;
      objectArray0[4] = (Object) parseSettings0;
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("|@6`k[=@Ph.VCv", objectArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "org.jsoup.helper.HttpConnection$Base";
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document0 = Parser.parse("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Parser parser0 = Parser.htmlParser();
      Node[] nodeArray0 = null;
      Parser.unescapeEntities("org.jsoup.helper.HttpConnection$Base", false);
      parser0.parseInput("org.jsoup.helper.HttpConnection$Base", "(mF]a");
      // Undeclared exception!
      try { 
        document0.insertChildren(2353, (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      Selector.SelectorParseException selector_SelectorParseException0 = null;
      try {
        selector_SelectorParseException0 = new Selector.SelectorParseException((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedTransferQueue<Evaluator> linkedTransferQueue0 = new LinkedTransferQueue<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedTransferQueue0);
      Document document0 = new Document("@yrS:|p*?L");
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data((Collection<Connection.KeyVal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = null;
      try {
        evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = ">st!/Y[";
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Element> class0 = Element.class;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "", 2502L);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ServiceLoader<Element> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      // Undeclared exception!
      try { 
        Selector.select("", (Iterable<Element>) serviceLoader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "]4'+m_jB>$`";
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("]4'+m_jB>$`");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.newInstance();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser2 = parser1.settings(parseSettings0);
      Parser parser3 = parser2.setTrackErrors(236);
      String string1 = "";
      parseSettings0.normalizeTag("");
      Document document0 = parser3.parseInput("]4'+m_jB>$`", "");
      String string2 = "";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("Invalid interestOps for {}");
      Document document0 = Parser.parseBodyFragment("mark", "mark");
      Elements elements0 = Selector.select((Evaluator) evaluator_Id0, (Element) document0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Invalid interestOps for {}";
      objectArray0[1] = (Object) evaluator_Id0;
      objectArray0[2] = (Object) "Invalid interestOps for {}";
      objectArray0[3] = (Object) document0;
      objectArray0[4] = (Object) "org.jsoup.select.Selector";
      objectArray0[5] = (Object) elements0;
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("org.jsoup.select.Selector", objectArray0);
      Document document1 = new Document("]>9)5e9KUBbvm%;6TO");
      Elements elements1 = Selector.select("mark", (Element) document1);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = ".zHpm{SY*i>";
      // Undeclared exception!
      try { 
        Pattern.compile(".zHpm{SY*i>");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 4
         // .zHpm{SY*i>
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("C>'Rt;t<(;KGeU7SUQ", "C>'Rt;t<(;KGeU7SUQ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.prepend("C>'Rt;t<(;KGeU7SUQ");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Elements elements0 = document2.getElementsByIndexLessThan(0);
      Selector.filterOut(elements0, elements0);
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = null;
      try {
        evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("C>'Rt;t<(;KGeU7SUQ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.select("0", (Iterable<Element>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("", objectArray0);
      Parser parser0 = Parser.htmlParser();
      parser0.newInstance();
      parser0.parseInput("y1dA\"q|w3.`", "");
      String string0 = ",/p$*@`_;`_PifhsIKn";
      Document document0 = Parser.parse(",/p$*@`_;`_PifhsIKn", "");
      // Undeclared exception!
      try { 
        Selector.selectFirst("y1dA\"q|w3.`", document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'y1dA\"q|w3.`': unexpected token at '\"q|w3.`'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayDeque<Element> arrayDeque0 = new ArrayDeque<Element>();
      Selector.filterOut(arrayDeque0, arrayDeque0);
      String string0 = "*iC";
      Element element0 = null;
      Selector.selectFirst("*iC", (Element) null);
      // Undeclared exception!
      try { 
        arrayDeque0.add((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("{=QHY#A&b4O. @O[+", objectArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("", objectArray0);
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = ",XTyHug~?i";
      String string1 = "";
      parser0.parseInput(",XTyHug~?i", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-946));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      String string1 = "";
      document0.title("");
      Document document1 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        Selector.select("", (Element) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType((-58), 3102);
      Parser parser0 = Parser.xmlParser();
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) null, "on");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String input must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, "7@^v$|j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "org.jsoup.select.Selector";
      Vector<Element> vector0 = null;
      try {
        vector0 = new Vector<Element>((-1685));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1685
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "E";
      Tag tag0 = Tag.valueOf("E");
      Attributes attributes0 = new Attributes();
      String string1 = ",yeQrmP~L";
      Attributes attributes1 = attributes0.put(",yeQrmP~L", "E");
      Attributes attributes2 = attributes1.add("f]+", "");
      Element element0 = new Element(tag0, "E", attributes2);
      attributes2.normalize();
      element0.wholeText();
      attributes2.normalize();
      Element element1 = element0.attr("", true);
      Elements elements0 = Selector.select("E", element0);
      Selector.select(",yeQrmP~L", (Iterable<Element>) elements0);
      // Undeclared exception!
      try { 
        Selector.select("", element1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "e5tJ2)I";
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*0Z$|Pjr", "&lt;");
      Document document1 = document0.ownerDocument();
      Document document2 = document1.clone();
      document1.firstElementSibling();
      document0.getElementsMatchingOwnText("eYYBYtil;");
      Pattern pattern0 = Pattern.compile("&lt;");
      Elements elements0 = document2.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        Selector.select("*0Z$|Pjr", (Iterable<Element>) elements0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '*0Z$|Pjr': unexpected token at '$|Pjr'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[3] = (Object) "";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("", objectArray0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = null;
      try {
        pseudoTextElement0 = new PseudoTextElement((Tag) null, "org.jsoup.select.Selector$SelectorParseException", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "\"8M{rh.=?03ms";
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) pipedReader0, "\"8M{rh.=?03ms");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "L<?M-~_SrfCFM1^:7s";
      objectArray0[1] = (Object) "L<?M-~_SrfCFM1^:7s";
      objectArray0[2] = (Object) "L<?M-~_SrfCFM1^:7s";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "L<?M-~_SrfCFM1^:7s";
      objectArray0[5] = (Object) "L<?M-~_SrfCFM1^:7s";
      objectArray0[6] = (Object) "L<?M-~_SrfCFM1^:7s";
      objectArray0[7] = (Object) "L<?M-~_SrfCFM1^:7s";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("L<?M-~_SrfCFM1^:7s", objectArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Element element0 = null;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("Cbl@NsR-aOZ(9", objectArray0);
      String string0 = "title";
      Selector.selectFirst("title", (Element) null);
      String string1 = "]4F8!l";
      // Undeclared exception!
      try { 
        Selector.selectFirst("]4F8!l", (Element) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ']4F8!l': unexpected token at ']4F8!l'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = ",4\\tyJ>kBe";
      ArrayDeque<Element> arrayDeque0 = new ArrayDeque<Element>();
      PriorityBlockingQueue<Element> priorityBlockingQueue0 = new PriorityBlockingQueue<Element>();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "|@B1-.+!\"C9iAg7]X]0";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("|@B1-.+!\"C9iAg7]X]0", parseSettings0);
      Attributes attributes0 = new Attributes();
      Tag.valueOf("#jZR,V8");
      Attributes attributes1 = attributes0.add("#jZR,V8", "#jZR,V8");
      attributes0.removeIgnoreCase("]$_Nz");
      Attribute attribute0 = new Attribute("#jZR,V8", "org.jsoup.select.Selector");
      Attribute attribute1 = attribute0.clone();
      attributes1.put(attribute1);
      Attributes attributes2 = attributes1.clone();
      attributes1.deduplicate(parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "#jZR,V8", attributes2);
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("");
      evaluator_ContainsOwnText0.toString();
      formElement0.closest((Evaluator) evaluator_ContainsOwnText0);
      formElement0.cssSelector();
      attributes2.put(attribute0);
      Tag.valueOf("|@B1-.+!\"C9iAg7]X]0", parseSettings0);
      // Undeclared exception!
      try { 
        Selector.select("|@B1-.+!\"C9iAg7]X]0", (Element) formElement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '|@B1-.+!\"C9iAg7]X]0': unexpected token at '|@B1-.+!\"C9iAg7]X]0'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedList0);
      combiningEvaluator_And0.rightMostEvaluator();
      Document document0 = Parser.parseBodyFragment("S7b", "S7b");
      // Undeclared exception!
      try { 
        Selector.select((Evaluator) null, (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      Document document0 = new Document("/,ZHErAy#q0FNXX'`Z");
      Document document1 = document0.ownerDocument();
      // Undeclared exception!
      try { 
        Selector.select((Evaluator) evaluator_IsRoot0, (Element) document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "O";
      objectArray0[1] = (Object) "O";
      objectArray0[2] = (Object) "O";
      objectArray0[3] = (Object) "O";
      objectArray0[4] = (Object) "O";
      objectArray0[5] = (Object) "O";
      objectArray0[6] = (Object) "O";
      objectArray0[7] = (Object) "O";
      objectArray0[8] = (Object) "O";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("O", objectArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(1560);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "org.jsoup.select.Evaluator$AttributeWithValue";
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("", "]3Lj]");
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, "");
      Connection connection0 = HttpConnection.connect(uRL1);
      Document document1 = document0.connection(connection0);
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      Document document2 = document1.parser(parser1);
      Document document3 = document2.clone();
      // Undeclared exception!
      try { 
        Selector.selectFirst("XeaMt]@A3 $u]u$", document3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'XeaMt]@A3 $u]u$': unexpected token at ']@A3 $u]u$'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ArrayList<Element> arrayList0 = new ArrayList<Element>();
      // Undeclared exception!
      try { 
        Selector.select("Y]k]J7>w'yQ@!C+", (Iterable<Element>) arrayList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Y]k]J7>w'yQ@!C+': unexpected token at ']k]J7>w'yQ@!C+'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("", objectArray0);
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.newInstance();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) pipedReader0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "p");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsContainingOwnText("");
      Elements elements1 = Selector.filterOut(elements0, elements0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Element> class0 = Element.class;
      ServiceLoader<Element> serviceLoader0 = ServiceLoader.load(class0);
      Class<CharArrayWriter> class1 = CharArrayWriter.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader.load(class1, classLoader0);
      Selector.select("E|", (Iterable<Element>) serviceLoader0);
      Evaluator evaluator0 = null;
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test070()  throws Throwable  {
  //     String string0 = "d]#YQ_V9,";
  //     PriorityQueue<Element> priorityQueue0 = new PriorityQueue<Element>();
  //     Element element0 = new Element("d]#YQ_V9,");
  //     priorityQueue0.add(element0);
  //     LinkedTransferQueue<Element> linkedTransferQueue0 = new LinkedTransferQueue<Element>(priorityQueue0);
  //     linkedTransferQueue0.add(element0);
  //     // Undeclared exception!
  //     try { 
  //       Selector.select("d]#YQ_V9,", (Iterable<Element>) linkedTransferQueue0);
  //       fail("Expecting exception: IllegalStateException");
  //     
  //     } catch(IllegalStateException e) {
  //        //
  //        // Could not parse query 'd]#YQ_V9,': unexpected token at ']#YQ_V9,'
  //        //
  //        verifyException("org.jsoup.select.QueryParser", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SynchronousQueue<Element> synchronousQueue0 = new SynchronousQueue<Element>();
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = new Document("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
      Element element0 = document0.body();
      Map<String, String> map0 = element0.dataset();
      String string0 = ")5cq@( 0Uja|3l";
      httpConnection0.requestBody(")5cq@( 0Uja|3l");
      httpConnection0.headers(map0);
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "";
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement((Tag) null, "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      // Undeclared exception!
      try { 
        Tag.valueOf("", parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Attributes attributes0 = new Attributes();
      System.setCurrentTimeMillis((-754L));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Parser.htmlParser();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "BaseURI must not be null";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("-oFA6c3M#L^P", objectArray0);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "G6";
      Document document0 = new Document("G6");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Parser parser0 = Parser.xmlParser();
      Document document2 = document1.parser(parser0);
      // Undeclared exception!
      try { 
        document2.connection((Connection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[0];
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("", objectArray0);
      String string1 = "Ymb/5S_cD!%HqF!gP0";
      Document document0 = Parser.parseBodyFragment("", "Ymb/5S_cD!%HqF!gP0");
      document0.hasText();
      Element element0 = document0.createElement("q@f");
      document0.ownText();
      // Undeclared exception!
      try { 
        Selector.selectFirst("Ymb/5S_cD!%HqF!gP0", element0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Ymb/5S_cD!%HqF!gP0': unexpected token at '/5S_cD!%HqF!gP0'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        Selector.selectFirst("", document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-2450), (-2450));
      evaluator_IsNthLastOfType0.toString();
      Tag tag0 = Tag.valueOf("^8");
      Document document0 = Document.createShell("Qz3ty");
      evaluator_IsNthLastOfType0.matches(document0, document0);
      CDataNode cDataNode0 = new CDataNode("^8");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      attributes0.clone();
      attributes1.spliterator();
      attributes0.spliterator();
      FormElement formElement0 = new FormElement(tag0, "Qz3ty", attributes1);
      formElement0.clone();
      evaluator_IsNthLastOfType0.matches(formElement0, formElement0);
      evaluator_IsNthLastOfType0.matches(formElement0, formElement0);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.proxy(":nth-last-of-type(-2450n-2450)", (-2450));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2450
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      Object[] objectArray0 = new Object[4];
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("seamless");
      // Undeclared exception!
      try { 
        Parser.parse((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Z", "");
      Elements elements0 = document0.children();
      Pattern pattern0 = Pattern.compile("Z", 0);
      Elements elements1 = document0.getElementsMatchingOwnText(pattern0);
      Elements elements2 = Selector.filterOut(elements0, elements1);
      assertEquals(1, elements2.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "|bu";
      Stack<Element> stack0 = new Stack<Element>();
      // Undeclared exception!
      try { 
        Selector.select("|bu", (Iterable<Element>) stack0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '|bu': unexpected token at '|bu'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      Document document0 = parser1.parseInput("D2K1na|aps|", "D2K1na|aps|");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Element element0 = document0.clearAttributes();
      Charset charset0 = document0.charset();
      document_OutputSettings2.charset(charset0);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) parser0;
      objectArray0[2] = (Object) document1;
      objectArray0[3] = (Object) document0;
      objectArray0[6] = (Object) element0;
      objectArray0[7] = (Object) parser0;
      objectArray0[8] = (Object) parser1;
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("D2K1na|aps|", objectArray0);
      Selector.SelectorParseException selector_SelectorParseException1 = new Selector.SelectorParseException("D2K1na|aps|", objectArray0);
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Selector.select((Evaluator) combiningEvaluator_And0, (Element) document0);
      // Undeclared exception!
      try { 
        Selector.selectFirst("Xgf{[yxz_Y", element0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Xgf{[yxz_Y': unexpected token at '{[yxz_Y'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("taSin^ZO=:g.b>@ B?]");
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      Document document0 = new Document("taSin^ZO=:g.b>@ B?]");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Parser parser0 = Parser.htmlParser();
      document1.parser(parser0);
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Content-Type";
      stringArray0[1] = "taSin^ZO=:g.b>@ B?]";
      stringArray0[2] = "Content-Encoding";
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("org.jsoup.select.Selector$SelectorParseException", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "", attributes1);
      attributes1.clone();
      String string0 = "c5RhK#}2[6|NF@ ;";
      Element element0 = new Element(tag0, "c5RhK#}2[6|NF@ ;");
      FormElement formElement1 = formElement0.addElement(element0);
      // Undeclared exception!
      try { 
        Selector.selectFirst("_Y|U@R~VoMZsnXb", formElement1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '_Y|U@R~VoMZsnXb': unexpected token at '_Y|U@R~VoMZsnXb'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test086()  throws Throwable  {
  //     Parser parser0 = Parser.htmlParser();
  //     String string0 = "";
  //     Document document0 = parser0.parseInput("", "");
  //     String string1 = "";
  //     HashSet<Element> hashSet0 = new HashSet<Element>();
  //     Element element0 = document0.appendChildren(hashSet0);
  //     Pattern pattern0 = Pattern.compile("", 1731);
  //     Elements elements0 = document0.getElementsMatchingText(pattern0);
  //     Selector.filterOut(elements0, elements0);
  //     Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
  //     // Undeclared exception!
  //     try { 
  //       element0.replaceWith(document0);
  //       fail("Expecting exception: IllegalArgumentException");
  //     
  //     } catch(IllegalArgumentException e) {
  //        //
  //        // Object must not be null
  //        //
  //        verifyException("org.jsoup.helper.Validate", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = null;
      Vector<Element> vector0 = new Vector<Element>();
      // Undeclared exception!
      try { 
        vector0.setSize((-774));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -774
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "|/g&i=";
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("|/g&i=");
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.connection((Connection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      // Undeclared exception!
      try { 
        Selector.selectFirst("", element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TreeSet<Element> treeSet0 = new TreeSet<Element>();
      TreeSet<Element> treeSet1 = new TreeSet<Element>((SortedSet<Element>) treeSet0);
      Elements elements0 = Selector.filterOut(treeSet1, treeSet0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      Selector.SelectorParseException selector_SelectorParseException0 = null;
      try {
        selector_SelectorParseException0 = new Selector.SelectorParseException((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(0, 0);
      String string0 = "{aH1SHHr`E~\\j&83Ul";
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("{aH1SHHr`E~j&83Ul", parseSettings0);
      String string1 = "getLayer";
      parseSettings0.normalizeAttribute("getLayer");
      Element element0 = new Element(tag0, "{aH1SHHr`E~j&83Ul");
      parseSettings0.normalizeTag("{aH1SHHr`E~j&83Ul");
      element0.ownerDocument();
      // Undeclared exception!
      try { 
        Selector.select((Evaluator) evaluator_IsNthOfType0, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("dt", "No protocol factory for default protocol '");
      document0.documentType();
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      Elements elements0 = element0.nextElementSiblings();
      // Undeclared exception!
      try { 
        Selector.select("", (Iterable<Element>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[6] = (Object) "U[Lc!vmRS]K##G";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("U[Lc!vmRS]K##G", objectArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-1074), (-1074));
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn((Pattern) null);
      String string0 = "";
      Document document0 = Parser.parse("", "");
      Document document1 = document0.normalise();
      document1.getAllElements();
      // Undeclared exception!
      try { 
        Selector.select((Evaluator) evaluator_MatchesOwn0, (Element) document1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Evaluator evaluator0 = null;
      String string0 = "org.jsoup.select.StructuralEvaluator$Root";
      Element element0 = new Element("org.jsoup.select.StructuralEvaluator$Root");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      // Undeclared exception!
      try { 
        element0.insertChildren(1410, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Stack<Element> stack0 = new Stack<Element>();
      Document document0 = new Document((String) null);
      stack0.addElement(document0);
      Elements elements0 = Selector.filterOut(stack0, stack0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) document0;
      objectArray0[2] = (Object) elements0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "shutdownInput {}";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("shutdownInput {}", objectArray0);
      Elements elements1 = Selector.filterOut(stack0, stack0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) elements0;
      objectArray1[1] = (Object) elements1;
      objectArray1[2] = (Object) "shutdownInput {}";
      objectArray1[3] = object1;
      objectArray1[4] = (Object) elements0;
      objectArray1[5] = (Object) null;
      objectArray1[6] = (Object) "shutdownInput {}";
      Selector.SelectorParseException selector_SelectorParseException1 = new Selector.SelectorParseException("shutdownInput {}", objectArray1);
      assertFalse(selector_SelectorParseException1.equals((Object)selector_SelectorParseException0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Selector.SelectorParseException selector_SelectorParseException0 = null;
      try {
        selector_SelectorParseException0 = new Selector.SelectorParseException((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Evaluator evaluator0 = null;
      Parser.htmlParser();
      int int0 = (-521);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "; 0f%=b'f0pE<:\"i&k";
      LinkedBlockingQueue<Element> linkedBlockingQueue0 = new LinkedBlockingQueue<Element>();
      linkedBlockingQueue0.toArray();
      // Undeclared exception!
      try { 
        Selector.select("; 0f%=b'f0pE<:\"i&k", (Iterable<Element>) linkedBlockingQueue0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '; 0f%=b'f0pE<:\"i&k': unexpected token at '; 0f%=b'f0pE<:\"i&k'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "";
      Element element0 = null;
      // Undeclared exception!
      try { 
        Selector.selectFirst("", (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Pattern.matches("", "");
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) evaluator_MatchText0;
      objectArray0[4] = (Object) "";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("", objectArray0);
      Document document0 = Parser.parseBodyFragment("} zxR/qKUMD%|~~", "");
      // Undeclared exception!
      try { 
        Selector.select("", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "";
      Parser parser0 = Parser.xmlParser();
      parser0.parseInput("", "");
      String string1 = "~1$";
      String string2 = "+&\"V)&U";
      Parser.parseXmlFragment("+&\"V)&U", "");
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        Selector.select((Evaluator) null, (Element) document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = ",";
      Document document0 = Document.createShell("{} onFillInterestedFailed {}");
      document0.textNodes();
      Document document1 = document0.ownerDocument();
      Element element0 = document1.createElement(",");
      Elements elements0 = element0.getAllElements();
      // Undeclared exception!
      try { 
        Selector.select(",", (Iterable<Element>) elements0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "";
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("0e+'AkDg:8851f-", "org.jsoup.select.Selector");
      // Undeclared exception!
      try { 
        Selector.selectFirst("", document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      parser1.newInstance();
      parser1.parseInput(":p'{.(&f\"</1?TxXh", ":p'{.(&f\"</1?TxXh");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parser1.settings(parseSettings0);
      Parser.htmlParser();
      // Undeclared exception!
      try { 
        parseSettings0.normalizeAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayDeque<Element> arrayDeque0 = new ArrayDeque<Element>();
      // Undeclared exception!
      try { 
        Selector.select("org.jsoup.select.Selector$SelectorParseException", (Iterable<Element>) arrayDeque0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Selector$SelectorParseException': unexpected token at '$SelectorParseException'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("bb?'*lpK");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-2059));
      // Undeclared exception!
      try { 
        Selector.select("bb?'*lpK", (Iterable<Element>) elements0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'bb?'*lpK': unexpected token at '?'*lpK'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueContaining("aside", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "emD}5;E]Q_B~/\"457o";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "emD}5;E]Q_B~/\"457o";
      objectArray0[1] = (Object) "emD}5;E]Q_B~/\"457o";
      objectArray0[2] = (Object) "emD}5;E]Q_B~/\"457o";
      objectArray0[3] = (Object) "emD}5;E]Q_B~/\"457o";
      objectArray0[4] = (Object) "emD}5;E]Q_B~/\"457o";
      objectArray0[5] = (Object) "emD}5;E]Q_B~/\"457o";
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("emD}5;E]Q_B~/\"457o", objectArray0);
      Selector.SelectorParseException selector_SelectorParseException1 = new Selector.SelectorParseException("emD}5;E]Q_B~/\"457o", objectArray0);
      Tag.valueOf("emD}5;E]Q_B~/\"457o");
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.put((Attribute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
