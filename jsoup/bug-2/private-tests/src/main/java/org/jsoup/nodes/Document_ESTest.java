/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 03:52:07 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.CookieStore;
import java.net.Proxy;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.eclipse.jetty.util.AttributesMap;
import org.eclipse.jetty.util.HttpCookieStore;
import org.eclipse.jetty.util.IncludeExcludeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Document_ESTest extends Document_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth(364);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.prettyPrint(false);
      document_OutputSettings2.outline(true);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.maxPaddingWidth(30);
      document_OutputSettings0.charset();
      Document document0 = new Document("F^");
      document0.getElementsContainingText("],a v{ l");
      Document document1 = document0.clone();
      Document document2 = document1.outputSettings(document_OutputSettings1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      document3.outputSettings();
      document0.isEffectivelyFirst();
      document2.createElement("],a v{ l");
      document3.connection();
      Document document4 = document3.clone();
      document4.createElement("F^");
      document0.charset();
      document_OutputSettings3.indentAmount();
      document3.connection();
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertNotSame(document0, document4);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("limitedQuirks", "limitedQuirks");
      Document document1 = document0.shallowClone();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors((-1857));
      Document document2 = document1.parser(parser1);
      document2.appendTo(document1);
      // Undeclared exception!
      document2.head();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "doctype-system";
      Document document0 = Parser.parseBodyFragment("doctype-system", "doctype-system");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      List<Node> list0 = document0.childNodesCopy();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.setSiblingIndex(3);
      Document document2 = document1.outputSettings(document_OutputSettings0);
      document2.childNodes = list0;
      document1.childNodes();
      String string1 = "SW{K!oM^=}{Kge";
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueNot("", "SW{K!oM^=}{Kge");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Document$OutputSettings$Syntax", "org.jsoup.nodes.Document$OutputSettings$Syntax");
      Connection connection0 = document0.connection();
      assertNotNull(connection0);
      
      document0.getElementsByIndexLessThan(1);
      document0.outerHtml();
      document0.nextElementSiblings();
      Document.OutputSettings.Syntax.values();
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  org.jsoup.nodes.Document$OutputSettings$Syntax\n </body>\n</html>", string0);
      
      document0.updateMetaCharsetElement();
      Tag tag0 = document0.tag();
      Tag.valueOf("LO");
      Element element0 = new Element(tag0, "4u,*=Ql,?y{>d");
      document0.parentNode = (Node) element0;
      Document document1 = document0.connection(connection0);
      Node.isNode(document1, "org.jsoup.nodes.Document$OutputSettings$Syntax");
      document0.connection();
      document1.connection(connection0);
      document0.quirksMode();
      document1.forms();
      boolean boolean0 = document0.updateMetaCharsetElement();
      assertFalse(boolean0);
      
      document0.forms();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      Document document2 = document0.parser(parser1);
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document2.location());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser2 = parser1.settings(parseSettings0);
      Parser.parseBodyFragment("$VALUES", "ByteBuffer {} does not belong to this pool, discarding it");
      parser2.settings(parseSettings0);
      Document document0 = parser2.parseInput("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      parser1.setTrackPosition(true);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      document1.text();
      Document document2 = document1.parser(parser0);
      document2.parser();
      document2.title("dir");
      document_OutputSettings1.maxPaddingWidth(0);
      document1.body();
      document2.outputSettings(document_OutputSettings0);
      assertEquals(1, document2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "3";
      Document document0 = Parser.parseBodyFragment("3", "3");
      Document document1 = document0.ownerDocument();
      document1.setParentNode(document0);
      Charset charset0 = document0.charset();
      // Undeclared exception!
      document1.charset(charset0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parse("", "");
      Document document1 = document0.parser((Parser) null);
      document0.parser();
      Charset charset0 = Charset.defaultCharset();
      document1.charset(charset0);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        document1.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "";
      String string1 = "Xd:~bYp]\"C(6?*K";
      Document document0 = Parser.parse("", "Xd:~bYp]\"C(6?*K");
      Document document1 = document0.parser((Parser) null);
      Document.OutputSettings.Syntax.values();
      document0.shallowClone();
      // Undeclared exception!
      try { 
        document1.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("9)[");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      CDataNode cDataNode0 = new CDataNode((String) null);
      cDataNode0.lastChild();
      linkedList0.add(cDataNode0);
      document0.appendChildren(linkedList0);
      document0.textNodes();
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.updateMetaCharsetElement(true);
      document0.id();
      document0.outerHtml();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data("<![CDATA[null]]>", "", (InputStream) null, "}8OS{>;>'x");
      document0.connection(connection0);
      assertTrue(document0.updateMetaCharsetElement());
  }

  // @Test(timeout = 4000)
  // public void test009()  throws Throwable  {
  //     Parser parser0 = Parser.xmlParser();
  //     String string0 = "";
  //     Document document0 = parser0.parseInput("", "");
  //     Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  //     document0.forEach(consumer0);
  //     String string1 = "";
  //     Charset charset0 = Charset.defaultCharset();
  //     document0.childNodes();
  //     // Undeclared exception!
  //     try { 
  //       document0.charset(charset0);
  //       fail("Expecting exception: IndexOutOfBoundsException");
  //     
  //     } catch(IndexOutOfBoundsException e) {
  //        //
  //        // Index: 0, Size: 0
  //        //
  //        verifyException("java.util.ArrayList", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = new Document("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      document0.documentType();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      document_OutputSettings1.encoder();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.maxPaddingWidth((-1));
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings4);
      document1.setBaseUri("PUBLIC");
      document1.siblingIndex = (-15);
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings3.clone();
      document_OutputSettings0.charset();
      document1.quirksMode();
      document1.head();
      document1.getElementsByAttributeValueEnding("SYSTEM", "PUBLIC");
      document0.nodeName();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document1.quirksMode(document_QuirksMode0);
      document_OutputSettings4.prepareEncoder();
      Document document2 = document0.outputSettings(document_OutputSettings5);
      document1.outputSettings(document_OutputSettings0);
      document2.charset();
      assertTrue(document_OutputSettings1.outline());
      assertEquals((-1), document_OutputSettings3.maxPaddingWidth());
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("No form elements matched the query '%s' in the document.", "No form elements matched the query '%s' in the document.");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      document0.lastChild();
      document0.childNodesAsArray();
      document0.remove();
      document_OutputSettings0.indentAmount(232);
      document_OutputSettings0.outline(true);
      document_OutputSettings0.clone();
      document_OutputSettings0.maxPaddingWidth(0);
      document_OutputSettings0.maxPaddingWidth();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.appendText("No form elements matched the query '%s' in the document.");
      Tag tag0 = document0.tag();
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("dfn", "");
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Document$QuirksMode", "");
      Element element0 = new Element(tag0, "dfn", attributes2);
      document0.setParentNode(element0);
      document1.getElementsByAttributeValueMatching("", "dfn");
      String string0 = "";
      document1.getElementsByIndexEquals(0);
      document1.text("");
      // Undeclared exception!
      try { 
        document0.expectForm("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test012()  throws Throwable  {
  //     Document document0 = Document.createShell("");
  //     Document document1 = document0.shallowClone();
  //     boolean boolean0 = true;
  //     document0.updateMetaCharsetElement(true);
  //     Document document2 = document1.clone();
  //     document2.remove();
  //     document2.getElementsByIndexGreaterThan((-1477));
  //     document2.location();
  //     document1.parser();
  //     Document document3 = document0.clone();
  //     document3.ownText();
  //     document3.setParentNode(document1);
  //     // Undeclared exception!
  //     try { 
  //       document3.setParentNode(document0);
  //       fail("Expecting exception: IndexOutOfBoundsException");
  //     
  //     } catch(IndexOutOfBoundsException e) {
  //        //
  //        // Index: 0, Size: 0
  //        //
  //        verifyException("java.util.ArrayList", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?Yf%L+,In-ta#We", "org.jsoup.nodes.Document$OutputSettings$Syntax");
      Element element0 = document0.text("?Yf%L+,In-ta#We");
      document0.setParentNode(element0);
      Connection connection0 = document0.connection();
      assertNotNull(connection0);
      
      Document document1 = document0.parser((Parser) null);
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document1.location());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("%S>=tlL U|sritHv{");
      Parser parser0 = Parser.xmlParser();
      int int0 = 26;
      Parser parser1 = parser0.setTrackErrors(26);
      Document document1 = document0.parser(parser1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.parser();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("%S>=tlL U|sritHv{");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // %S>=tlL U|sritHv{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Direct Buckets size=", "");
      document0.getElementsContainingText("%.XW9i<UDsR_||Tw(");
      assertFalse(document0.updateMetaCharsetElement());
      
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      document0.parser(parser1);
      assertTrue(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.attributesSize();
      document0.wrap("tzAI7TLht+q\"C&y3");
      Node.isNode(document0, "");
      document0.attr("", false);
      document0.nodeName();
      document0.className();
      Charset charset0 = document0.charset();
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.charset(charset0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.quirksMode(document_QuirksMode0);
      assertTrue(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.escapeMode();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      Document document0 = Parser.parse("", "");
      Comment comment0 = new Comment("");
      comment0.setParentNode(document0);
      Document document1 = (Document)document0.appendChild(comment0);
      document0.nextElementSiblings();
      document1.childNodesAsArray();
      document0.setParentNode(document1);
      document0.getAllElements();
      document0.nodeName();
      // Undeclared exception!
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("9+DS", "l5]4l");
      Element element0 = document0.prependText("1.0");
      element0.hasClass("9+DS");
      document0.doClone(element0);
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      document0.siblingNodes();
      Element element1 = document0.empty();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Node.isNode(element1, "");
      document1.getElementsByIndexEquals((-282));
      document0.appendChild(element1);
      // Undeclared exception!
      document0.title("$VALUES");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document document0 = new Document("encoding");
      document0.setBaseUri("");
      Charset charset0 = document0.charset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      charset0.aliases();
      document_OutputSettings2.encoder();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      Charset charset1 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(true);
      document_OutputSettings2.charset(charset1);
      document_OutputSettings4.prettyPrint(true);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings0.clone();
      document_OutputSettings3.coreCharset = entities_CoreCharset0;
      document_OutputSettings0.indentAmount(2429);
      document_OutputSettings4.prettyPrint(true);
      document_OutputSettings4.encoder();
      document0.text("encoding");
      document0.documentType();
      document_OutputSettings2.indentAmount(0);
      document0.outputSettings();
      document0.head();
      Document.QuirksMode[] document_QuirksModeArray0 = Document.QuirksMode.values();
      assertEquals(3, document_QuirksModeArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = document0.ownerDocument();
      Document document2 = document1.clone();
      document2.setBaseUri("");
      document0.getElementsByAttributeValueMatching("", "");
      Parser parser0 = Parser.xmlParser();
      int int0 = 0;
      int int1 = (-2007);
      document2.setSiblingIndex((-2007));
      Parser parser1 = parser0.setTrackErrors(0);
      document2.parser(parser1);
      document1.forms();
      document0.title();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "o6@zFcer{Sp)[iL";
      Document document0 = new Document("o6@zFcer{Sp)[iL");
      document0.childrenSize();
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.title();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = Parser.parse("*Rc6Q+8", "*Rc6Q+8");
      Parser parser0 = Parser.htmlParser();
      Document document1 = document0.parser(parser0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document1.prependChild(document0);
      Document document2 = document1.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      document2.expectForm("*Rc6Q+8");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.charset(charset0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      document_OutputSettings0.prepareEncoder();
      document_OutputSettings2.charset(charset0);
      Document document1 = document0.outputSettings(document_OutputSettings4);
      document1.forms();
      document1.id("");
      document0.parser();
      document1.elementSiblingIndex();
      document1.outerHtml();
      assertFalse(document1.updateMetaCharsetElement());
      
      document_OutputSettings3.prepareEncoder();
      document1.updateMetaCharsetElement(true);
      document0.title("YtGm-Q");
      document0.title();
      assertTrue(document0.updateMetaCharsetElement());
      
      boolean boolean0 = document_OutputSettings3.outline();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document.OutputSettings.Syntax.values();
      Document document0 = Parser.parseBodyFragment("=)k]^LJk8yWz2:1U", "=)k]^LJk8yWz2:1U");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document1.charset((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document((String) null);
      Document document1 = document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outputSettings(document_OutputSettings0);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(2684);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.maxPaddingWidth(2684);
      document_OutputSettings0.prettyPrint(false);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings2.coreCharset = entities_CoreCharset0;
      Document document2 = document1.outputSettings(document_OutputSettings3);
      document0.siblingNodes();
      document2.nodeName();
      document0.location();
      document_OutputSettings3.maxPaddingWidth();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings4.charset(charset0);
      document0.outerHtml();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "G{05+NDo~{!AB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.parseInput("", "&W0s");
      Document document0 = parser0.parseInput("", "frameset");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      document0.title();
      parser0.parseInput("", "ueFSa");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document_OutputSettings1.syntax();
      document_OutputSettings1.encoder();
      document0.charset();
      boolean boolean0 = document_OutputSettings1.outline();
      boolean boolean1 = document_OutputSettings0.prettyPrint();
      assertEquals("frameset", document0.location());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertTrue(boolean1 == boolean0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(240);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charset0.encode(charBuffer0);
      document_OutputSettings0.outline(false);
      charset0.aliases();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      document_OutputSettings1.outline();
      document_OutputSettings1.clone();
      Document.OutputSettings.Syntax.values();
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.prependChild(document0);
      document1.location();
      document0.head();
      // Undeclared exception!
      try { 
        document0.expectForm("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("!DOi$}O#Zna'AO");
      document0.setSiblingIndex(0);
      IncludeExcludeSet<CDataNode, Proxy.Type> includeExcludeSet0 = new IncludeExcludeSet<CDataNode, Proxy.Type>();
      Set<CDataNode> set0 = includeExcludeSet0.getExcluded();
      Element element0 = document0.appendChildren(set0);
      document0.appendTo(element0);
      // Undeclared exception!
      document0.forms();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document.OutputSettings.Syntax.values();
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.outputSettings((Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("limitedQuirks", "limitedQuirks");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Class<CDataNode> class0 = CDataNode.class;
      String string0 = "";
      parser0.parseFragmentInput("limitedQuirks", document0, "");
      document1.isNode("ha#x[;c=");
      // Undeclared exception!
      try { 
        document1.selectXpath("limitedQuirks", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.W3CDom$W3CBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("No form elements matched the query '%s' in the document.", "No form elements matched the query '%s' in the document.");
      Document document1 = document0.shallowClone();
      Document document2 = document1.clone();
      String string0 = document2.nodeName();
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", string0);
      assertNotSame(document2, document1);
      assertEquals("No form elements matched the query '%s' in the document.", document2.location());
      assertEquals(0, document2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document0.nextSibling();
      document1.dataNodes();
      document1.appendElement("body");
      document1.siblingElements();
      document1.createElement("body");
      document1.title("");
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings2.indentAmount(0);
      document_OutputSettings0.outline();
      document_OutputSettings2.escapeMode();
      document1.shallowClone();
      document0.forms();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = " )4]$iFF/Z!/GS";
      Document document0 = Parser.parse(" )4]$iFF/Z!/GS", " )4]$iFF/Z!/GS");
      int int0 = 0;
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(0);
      evaluator_IndexGreaterThan0.matches(document0, document0);
      evaluator_IndexGreaterThan0.matches(document0, document0);
      document0.closest((Evaluator) evaluator_IndexGreaterThan0);
      Node.isNode(document0, "ZD13rOCHvh%P%\"TrQ");
      document0.parser();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document0.childNodesCopy();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse("x,j?N", "xShT");
      document0.className();
      Document document1 = document0.parser((Parser) null);
      document1.parser((Parser) null);
      // Undeclared exception!
      try { 
        document0.title("xShT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("Pt9D=R");
      document0.attr("Pt9D=R", "");
      document0.head();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(39);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      int int0 = 30;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.maxPaddingWidth(30);
      document_OutputSettings3.outline(false);
      // Undeclared exception!
      try { 
        document_OutputSettings3.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset("ascii");
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      assertEquals(1, document_OutputSettings3.indentAmount());
      
      document_OutputSettings3.indentAmount(0);
      assertEquals(0, document_OutputSettings3.indentAmount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.forms();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth(0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document_OutputSettings2.prettyPrint(false);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.newInstance();
      Document document0 = parser1.parseInput("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(40);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.maxPaddingWidth(30000);
      document0.wrap("1");
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings4);
      document0.connection();
      Document.QuirksMode.values();
      document0.body();
      document_OutputSettings0.outline(true);
      document0.connection();
      Element element0 = document1.text("");
      assertEquals(30000, document_OutputSettings2.maxPaddingWidth());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Document.createShell("z$KK]xF%ISG.|d");
      Document document1 = document0.clone();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "org.jsoup.nodes.Document$OutputSettings$Syntax";
      Map<String, String> map0 = document1.dataset();
      httpConnection0.data(map0);
      document0.title("(application|text)/w*+?xml.*");
      // Undeclared exception!
      try { 
        document0.after("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.ownerDocument();
      Document document2 = document1.clone();
      document2.childNodesAsArray();
      // Undeclared exception!
      try { 
        document2.expectForm("Hy}>on[");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Hy}>on[': unexpected token at '}>on['
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document.QuirksMode[] document_QuirksModeArray0 = Document.QuirksMode.values();
      assertEquals(3, document_QuirksModeArray0.length);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = Parser.parse("rgd@d-%d'<5nM4", "rgd@d-%d'<5nM4");
      Document document1 = document0.shallowClone();
      document1.forms();
      document0.title("rgd@d-%d'<5nM4");
      document1.childNodesAsArray();
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      // Undeclared exception!
      try { 
        document1.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "i!cv$~R{{nI7}";
      Document document0 = Parser.parseBodyFragment("i!cv$~R{{nI7}", "i!cv$~R{{nI7}");
      HttpConnection httpConnection0 = new HttpConnection();
      document0.title();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(true);
      Document document1 = document0.connection(connection0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document2.expectForm("Content-Type");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No form elements matched the query 'Content-Type' in the document.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = Parser.parse("sub ", "(^wgr8&I_X6Zf]\"v");
      Charset charset0 = document0.charset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      document_OutputSettings1.charset(charset0);
      document_OutputSettings0.prettyPrint(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings0.prettyPrint(true);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        document0.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("body");
      // Undeclared exception!
      try { 
        document0.title((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "O^";
      Document document0 = Document.createShell("O^");
      document0.getElementsByIndexGreaterThan((-767));
      // Undeclared exception!
      try { 
        document0.connection((Connection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackPosition(false);
      Document document0 = parser1.parseInput("E:mtCfI7", "$VALUES");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document1.expectForm("$VALUES");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '$VALUES': unexpected token at '$VALUES'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "0{q^DV~<hqJ\\";
      Document document0 = Document.createShell("0{q^DV~<hqJ");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      AttributesMap attributesMap0 = new AttributesMap();
      Object object0 = new Object();
      attributesMap0.setAttribute("PN%<a]aN", object0);
      attributesMap0.setAttribute("+", object0);
      Set<String> set0 = attributesMap0.getAttributeNameSet();
      document0.classNames(set0);
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = null;
      // Undeclared exception!
      try { 
        Document.createShell((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document.QuirksMode.values();
      Document.QuirksMode.values();
      Document document0 = Document.createShell("");
      Document document1 = document0.shallowClone();
      document0.getElementsByIndexGreaterThan((-195));
      document0.title("keygen");
      Document.OutputSettings.Syntax.values();
      document1.quirksMode();
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("FZ DDY");
      document0.charset(charset0);
      document0.title("keygen");
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = document0.dataset();
      Connection connection0 = httpConnection0.cookies(map0);
      Document document2 = document0.connection(connection0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings2.prettyPrint(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      document_OutputSettings3.maxPaddingWidth(0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      document_OutputSettings4.encoder();
      document_OutputSettings1.prettyPrint(true);
      document2.title();
      // Undeclared exception!
      try { 
        document_OutputSettings4.charset("Content-Encoding");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Content-Encoding
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Document document1 = document0.shallowClone();
      Document document2 = document1.clone();
      int int0 = (-1046);
      // Undeclared exception!
      try { 
        document2.appendChildren((Collection<? extends Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      HashSet<CDataNode> hashSet0 = new HashSet<CDataNode>();
      CDataNode cDataNode0 = new CDataNode("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'l';
      charArray0[2] = '\"';
      charArray0[3] = 'H';
      charArray0[4] = '\'';
      charArray0[5] = '1';
      charArray0[6] = 'e';
      charArray0[7] = 'm';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-430), (-430));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth(1);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      document_OutputSettings3.encoder();
      document_OutputSettings3.prettyPrint();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings4.outline(false);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings4.coreCharset = entities_CoreCharset0;
      document_OutputSettings4.outline();
      Document document0 = new Document("L;sQ>3&g;bu");
      Document document1 = document0.clone();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.userAgent("");
      document0.connection(connection0);
      HttpConnection httpConnection1 = new HttpConnection();
      Connection connection1 = httpConnection1.referrer("dFqwE[xjd#E");
      httpConnection1.followRedirects(true);
      document1.connection(connection1);
      document1.text("L;sQ>3&g;bu");
      Charset charset0 = document0.charset();
      charset0.encode("noQuirks");
      document0.charset(charset0);
      document1.text("Content-Encoding");
      document1.parser((Parser) null);
      document_OutputSettings4.indentAmount();
      document0.createElement("Content-Type");
      // Undeclared exception!
      try { 
        document0.expectForm("Content-Type");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No form elements matched the query 'Content-Type' in the document.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document.OutputSettings.Syntax.values();
      Document document0 = new Document("5^r+z");
      Document.QuirksMode document_QuirksMode0 = document0.quirksMode();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document_OutputSettings1.indentAmount();
      document_OutputSettings1.escapeMode();
      // Undeclared exception!
      try { 
        document1.expectForm("[");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.setParentNode((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(290);
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "TLSv1.3";
      httpConnection0.referrer("TLSv1.3");
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.shallowClone();
      document2.location();
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      document_OutputSettings1.prepareEncoder();
      document_OutputSettings3.indentAmount(0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings3.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("uRm@J1VxE9ip$T*nIq");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // uRm@J1VxE9ip$T*nIq
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document.QuirksMode.values();
      String string0 = "";
      Document document0 = new Document("");
      String string1 = "body";
      HttpConnection httpConnection0 = new HttpConnection();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      int int0 = (-1345);
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress((String) null, (-1345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Document.QuirksMode.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "org.eclipse.jetty.io.Connection$Listener$Adapter";
      Document.createShell("org.eclipse.jetty.io.Connection$Listener$Adapter");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = 0;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth(0);
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset("Selector {} woken with none selected");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Selector {} woken with none selected
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse(" \":41DB.I0DjF,|N,", " \":41DB.I0DjF,|N,");
      document0.previousElementSiblings();
      document0.text("");
      document0.location();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth(3700);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(3700);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings2.prettyPrint(false);
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(true);
      document0.outputSettings(document_OutputSettings4);
      assertEquals(3700, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Document$OutputSettings$Syntax";
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Document$OutputSettings$Syntax", "org.jsoup.nodes.Document$OutputSettings$Syntax");
      document0.baseUri();
      document0.hasText();
      document0.nodeName();
      document0.title();
      Document.OutputSettings.Syntax.values();
      document0.documentType();
      Document document1 = document0.shallowClone();
      document1.html("#document");
      document1.childElementsList();
      document0.text("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("    ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      document_OutputSettings0.clone();
      document_OutputSettings0.outline(false);
      document_OutputSettings0.maxPaddingWidth();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "dl";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("dl");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // dl
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      int int0 = (-246);
      // Undeclared exception!
      try { 
        document_OutputSettings1.indentAmount((-246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("3JQ,#[mZM+");
      int int0 = 65535;
      String string0 = "W'B";
      // Undeclared exception!
      try { 
        Pattern.compile("}eQ9oZ)d=+]?cNgn", 106);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 5
         // }eQ9oZ)d=+]?cNgn
         //      ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.clone();
      Parser parser0 = Parser.xmlParser();
      Document document2 = document1.parser(parser0);
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document2.filter(nodeFilter0);
      Document document3 = document2.shallowClone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document4 = document3.quirksMode(document_QuirksMode0);
      document4.documentType();
      document0.connection();
      document2.outerHtml();
      Document document5 = document4.parser(parser0);
      // Undeclared exception!
      try { 
        document5.expectFirst("PUBLIC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No elements matched the query 'PUBLIC' in the document.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("No protocol factory for default protocol '", ":Qs/d@VB_Wc9|9zEc");
      document0.val("No protocol factory for default protocol '");
      document0.forms();
      Document.QuirksMode[] document_QuirksModeArray0 = Document.QuirksMode.values();
      assertEquals(3, document_QuirksModeArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = false;
      document_OutputSettings1.outline(false);
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("ux)gap\"'J=EQA!*");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ux)gap\"'J=EQA!*
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ruby", ":g)B3L&!gd!?c+tX\"S");
      // Undeclared exception!
      try { 
        document0.outputSettings((Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("form", "Dfy)Sc!sBju");
      document0.body();
      document0.documentType();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = 1736;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1736);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document_OutputSettings2.clone();
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset("Dfy)Sc!sBju");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Dfy)Sc!sBju
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(3);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings1.clone();
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.escapeMode(entities_EscapeMode0);
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.extended;
      document_OutputSettings5.escapeMode(entities_EscapeMode1);
      document_OutputSettings5.clone();
      Document.QuirksMode[] document_QuirksModeArray0 = Document.QuirksMode.values();
      assertEquals(3, document_QuirksModeArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document.OutputSettings.Syntax.values();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset("y>oJ8@!s]E\"([XXR6");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // y>oJ8@!s]E\"([XXR6
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("frameset");
      document0.documentType();
      document0.clearAttributes();
      Document document1 = document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = document1.outputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings0.charset();
      Document document2 = document0.outputSettings(document_OutputSettings1);
      document2.documentType();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      document2.nodeName();
      document0.connection();
      Document.QuirksMode.values();
      Document document3 = document1.outputSettings(document_OutputSettings2);
      document_OutputSettings2.indentAmount(361);
      document_OutputSettings0.charset();
      document1.nodeName();
      document3.documentType();
      document3.documentType();
      assertEquals(361, document_OutputSettings2.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("application/x-www-form-urlencoded; charset=", "#dV");
      document0.title();
      document0.documentType();
      document0.outputSettings();
      List<FormElement> list0 = document0.forms();
      document0.title("");
      // Undeclared exception!
      try { 
        document0.insertChildren(685, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth(0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset("s-v-jKtiysh_:");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // s-v-jKtiysh_:
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = new Document("");
      Charset charset0 = document0.charset();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      document_OutputSettings1.indentAmount(0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.maxPaddingWidth(0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings3.prepareEncoder();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.indentAmount(4546);
      document0.attributes();
      document_OutputSettings5.indentAmount();
      document_OutputSettings2.maxPaddingWidth();
      document0.location();
      document_OutputSettings5.clone();
      // Undeclared exception!
      try { 
        Document.OutputSettings.Syntax.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.OutputSettings.Syntax.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = new Document("");
      document0.charset();
      String string0 = "meta[name=charset]";
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("meta[name=charset]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // meta[name=charset]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("quirks", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.module.ResolvedModule", "java.lang.module.ResolvedModule");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Charset charset0 = document0.charset();
      document_OutputSettings2.clone();
      document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      document1.outputSettings();
      document1.title("java.lang.module.ResolvedModule");
      Document.QuirksMode.values();
      document_OutputSettings2.charset();
      Document document2 = document0.clone();
      document_OutputSettings0.charset();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      
      Element element0 = document0.head();
      assertEquals(1, element0.childNodeSize());
      assertEquals("java.lang.module.ResolvedModule", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<S|Rz+", "<S|Rz+");
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      Document document1 = document0.connection(connection0);
      Document document2 = document1.connection(connection0);
      document2.classNames();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      document_OutputSettings2.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("location", "");
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Content-Type";
      document0.setBaseUri("");
      stringArray0[1] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      Connection connection0 = httpConnection0.data(stringArray0);
      document0.connection(connection0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings1.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.newRequest();
      Document document1 = document0.connection(connection0);
      Document document2 = document1.shallowClone();
      document2.outerHtml();
      document0.connection();
      document2.text("GI");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        document_OutputSettings3.charset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "org.jsoup.parser.Tag";
      Document.createShell("org.jsoup.parser.Tag");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      int int0 = (-1);
      document_OutputSettings2.maxPaddingWidth((-1));
      Charset.defaultCharset();
      document_OutputSettings1.outline(false);
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parser0.settings(parseSettings0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = (-2008);
      // Undeclared exception!
      try { 
        document_OutputSettings0.maxPaddingWidth((-2008));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document0 = Document.createShell("n['^tM");
      Document document1 = document0.ownerDocument();
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      Charset charset0 = document3.charset();
      document_OutputSettings1.charset(charset0);
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("n['^tM", document3.location());
      
      document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings1.escapeMode();
      document_OutputSettings1.syntax();
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
  }

  // @Test(timeout = 4000)
  // public void test095()  throws Throwable  {
  //     Document document0 = Document.createShell("");
  //     Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
  //     document0.children();
  //     document0.nextElementSibling();
  //     ArrayList<Node> arrayList0 = new ArrayList<Node>();
  //     document0.attributes();
  //     document0.childNodes = (List<Node>) arrayList0;
  //     Document document1 = document0.quirksMode(document_QuirksMode0);
  //     document0.charset();
  //     Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.limitedQuirks;
  //     // Undeclared exception!
  //     try { 
  //       arrayList0.set(0, document1);
  //       fail("Expecting exception: IndexOutOfBoundsException");
  //     
  //     } catch(IndexOutOfBoundsException e) {
  //        //
  //        // Index: 0, Size: 0
  //        //
  //        verifyException("java.util.ArrayList", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      boolean boolean0 = true;
      String string0 = "RG4.;^]C)9s&S}%z_UJ";
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("RG4.;^]C)9s&S}%z_UJ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // RG4.;^]C)9s&S}%z_UJ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("X`V|Z^>5QK{HLU");
      Document document1 = document0.clone();
      document1.updateMetaCharsetElement();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.hasText();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset(charset0);
      document_OutputSettings2.indentAmount(0);
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.maxPaddingWidth(0);
      document_OutputSettings5.prettyPrint(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax1 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings5.syntax(document_OutputSettings_Syntax1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        Pattern.compile("X`V|Z^>5QK{HLU");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 9
         // X`V|Z^>5QK{HLU
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "0";
      Document document0 = new Document("0");
      document0.text();
      document0.firstElementChild();
      document0.firstElementSibling();
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = null;
      try {
        evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      int int0 = (-904);
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-904));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("\"W4L;2w7");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"W4L;2w7
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      document0.toString();
      document0.updateMetaCharsetElement();
      document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      try { 
        document_OutputSettings1.indentAmount((-2611));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.selectXpath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(0);
      String string0 = "1[]De(";
      // Undeclared exception!
      try { 
        Parser.parse((String) null, "1[]De(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Parser parser2 = parser1.setTrackPosition(true);
      Parser parser3 = parser2.setTrackErrors(0);
      // Undeclared exception!
      try { 
        parser3.newInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prepareEncoder();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(0);
      document_OutputSettings1.prepareEncoder();
      String string0 = "";
      document_OutputSettings1.encoder();
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = true;
      document_OutputSettings0.prettyPrint(true);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(3);
      document_OutputSettings2.prepareEncoder();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        document_OutputSettings3.charset("Array must not contain any null objects");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings0.encoder();
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings1.clone();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      boolean boolean0 = true;
      Parser parser2 = parser1.setTrackPosition(true);
      Parser.xmlParser();
      Document document0 = parser2.parseInput("]", "p|9Iq+6'P3'Hp'-");
      Document document1 = document0.ownerDocument();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.referrer("0p:{");
      Document document2 = document1.connection(connection0);
      // Undeclared exception!
      try { 
        document2.expectForm("p|9Iq+6'P3'Hp'-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '6'P3'Hp'-': unexpected token at ''P3'Hp'-'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.maxPaddingWidth(593);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Charset charset0 = Charset.defaultCharset();
      StringBuilder stringBuilder0 = new StringBuilder(256);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (CharSequence) stringBuffer0);
      StringBuilder stringBuilder2 = stringBuilder1.append(3138);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder2);
      charset0.encode(charBuffer0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      document_OutputSettings2.maxPaddingWidth(593);
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      // Undeclared exception!
      try { 
        document_OutputSettings3.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth((-1));
      document_OutputSettings1.encoder();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      document_OutputSettings2.escapeMode(entities_EscapeMode0);
      String string0 = "acronym";
      document_OutputSettings0.encoder();
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset("acronym");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // acronym
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.prettyPrint(false);
      document_OutputSettings5.charset();
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertNotNull(charsetEncoder0);
      
      boolean boolean0 = document_OutputSettings0.outline();
      assertFalse(boolean0);
      
      document_OutputSettings0.charset();
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "Broken pipe";
      Document document0 = Parser.parse("Broken pipe", "Hw#6r");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      document_OutputSettings3.prettyPrint(true);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document1.addChildren(nodeArray0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document1.nodelistChanged();
      document1.quirksMode(document_QuirksMode0);
      document0.updateMetaCharsetElement(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax1 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax1);
      // Undeclared exception!
      document1.title("Hw#6r");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset("Accept failed for channel {}");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Accept failed for channel {}
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.createShell((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("D%vUn~aOU9(F^)>o)(", "b");
      document0.appendText("D%vUn~aOU9(F^)>o)(");
      document0.isEffectivelyFirst();
      document0.parser();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Pattern pattern0 = Pattern.compile("b");
      document0.getElementsMatchingText(pattern0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document0.wholeText();
      int int0 = 2328;
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset("D%vUn~aOU9(F^)>o)(");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // D%vUn~aOU9(F^)>o)(
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.OutputSettings.Syntax.valueOf("org.jsoup.nodes.Document$QuirksMode");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.OutputSettings.Syntax.org.jsoup.nodes.Document$QuirksMode
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      document_OutputSettings1.clone();
      Parser parser0 = Parser.xmlParser();
      Parser.xmlParser();
      Document document0 = parser0.parseInput("_psT7Psm9}W)K%$H@m-", "_psT7Psm9}W)K%$H@m-");
      document0.charset();
      document_OutputSettings0.clone();
      document0.firstElementSibling();
      Parser.parseXmlFragment("", "");
      document0.updateMetaCharsetElement(true);
      document0.updateMetaCharsetElement();
      document0.parser();
      document0.createElement("_psT7Psm9}W)K%$H@m-");
      document_OutputSettings1.outline();
      Document.QuirksMode.values();
      Charset charset0 = document0.charset();
      Charset.defaultCharset();
      document0.charset(charset0);
      document0.location();
      // Undeclared exception!
      try { 
        Document.QuirksMode.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.QuirksMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = new Document("");
      boolean boolean0 = false;
      document0.updateMetaCharsetElement(false);
      Document document2 = document1.clone();
      document2.remove();
      String string0 = Node.EmptyString;
      document1.parser();
      Document document3 = document0.clone();
      document3.ownText();
      document3.setParentNode(document0);
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        document1.charset((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("encoding");
      assertFalse(document0.updateMetaCharsetElement());
      
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      assertTrue(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document.QuirksMode.values();
      Document.OutputSettings.Syntax.values();
      HttpConnection httpConnection0 = new HttpConnection();
      HttpCookieStore.Empty httpCookieStore_Empty0 = new HttpCookieStore.Empty();
      URI uRI0 = MockURI.aFileURI;
      httpCookieStore_Empty0.get(uRI0);
      httpConnection0.cookieStore((CookieStore) httpCookieStore_Empty0);
      String string0 = "Error scanning files.";
      httpConnection0.followRedirects(false);
      // Undeclared exception!
      try { 
        httpConnection0.url("Error scanning files.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The supplied URL, 'Error scanning files.', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.QuirksMode.valueOf("org.eclipse.jetty.util.CountingCallback");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.QuirksMode.org.eclipse.jetty.util.CountingCallback
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(78);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings5.clone();
      assertEquals(78, document_OutputSettings3.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = 0;
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("OqWHfoJ");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // OqWHfoJ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = "";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      int int0 = 1;
      Parser parser1 = parser0.setTrackErrors(1);
      PipedReader pipedReader0 = new PipedReader(1);
      Parser.parse("Q7!Zz}{M;SO3A.", "Q7!Zz}{M;SO3A.");
      String string0 = "[vh$n,TF";
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) pipedReader0, "[vh$n,TF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = "\\J_L2=1%L 4N6 N8WQ";
      // Undeclared exception!
      try { 
        Charset.forName("J_L2=1%L 4N6 N8WQ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // J_L2=1%L 4N6 N8WQ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Document.createShell((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(295);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1560);
      document_OutputSettings1.syntax();
      assertEquals(1560, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = new Document("");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors((-1774));
      Parser parser2 = parser1.newInstance();
      Parser parser3 = parser2.setTrackPosition(true);
      Document document1 = document0.parser(parser3);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = document0.charset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document document2 = document1.outputSettings(document_OutputSettings1);
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertEquals(1, document_OutputSettings1.indentAmount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("gR85Wj_x+-", "");
      Document document1 = document0.shallowClone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Document document3 = document2.ownerDocument();
      document3.quirksMode();
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "";
      Document document0 = parser0.parseInput("form", "");
      document0.data();
      document0.classNames();
      Document document1 = document0.ownerDocument();
      document1.head();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      document1.attributesSize();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      // Undeclared exception!
      try { 
        document_OutputSettings2.indentAmount((-2416));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document.QuirksMode.values();
      Document document0 = Parser.parseBodyFragment("noQuirks", "{} addIfAbsent ignored {}");
      Document document1 = document0.shallowClone();
      document0.siblingElements();
      document0.sourceRange();
      document1.siblingNodes();
      document1.outerHtml();
      document0.outerHtml();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      int int0 = 30;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(30);
      document_OutputSettings3.clone();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Document document0 = new Document("01tM>EJh6tYj|<{e");
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection0 = httpConnection0.method(connection_Method0);
      Document document1 = document0.connection(connection0);
      Document document2 = (Document)document1.text("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
      assertEquals("01tM>EJh6tYj|<{e", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document.OutputSettings.Syntax.values();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      document_OutputSettings0.maxPaddingWidth(0);
      document_OutputSettings1.maxPaddingWidth();
      document_OutputSettings1.outline(true);
      document_OutputSettings1.maxPaddingWidth(0);
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document.QuirksMode.values();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2015);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      document_OutputSettings2.prepareEncoder();
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.prettyPrint(true);
      document_OutputSettings5.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings0.charset(charset0);
      assertEquals(2015, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = new Document("%6coFsX'+_D~_bI:L");
      // Undeclared exception!
      try { 
        document0.expectForm("xml");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No form elements matched the query 'xml' in the document.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell(" suppressed ");
      document0.id();
      String string0 = "$gj0R";
      document0.prependText("No form elements matched the query '%s' in the document.");
      Pattern pattern0 = Pattern.compile("$gj0R");
      pattern0.asPredicate();
      pattern0.matcher(" suppressed ");
      pattern0.asPredicate();
      document0.lastChild();
      document0.className();
      document0.getElementsByAttributeValueMatching("$gj0R", pattern0);
      // Undeclared exception!
      try { 
        document0.connection((Connection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.QuirksMode.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.QuirksMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("Rz5\"MR/oKjQfZK k");
      String string0 = document0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      assertEquals("Rz5\"MR/oKjQfZK k", document0.location());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document.OutputSettings.Syntax.values();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      String string0 = null;
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document.createShell("K;vH|{dUye dp,r+");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = "";
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = new Document(":g2\u0006eps(q\")");
      document0.title();
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      document0.doSetBaseUri(":g2\u0006eps(q\")");
      document0.charset(charset0);
      document0.charset();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("RE");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // RE
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = "";
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document.QuirksMode.values();
      // Undeclared exception!
      try { 
        Document.OutputSettings.Syntax.valueOf("head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.OutputSettings.Syntax.head
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      int int0 = 20;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.maxPaddingWidth(20);
      // Undeclared exception!
      try { 
        document_OutputSettings4.charset((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }
}
