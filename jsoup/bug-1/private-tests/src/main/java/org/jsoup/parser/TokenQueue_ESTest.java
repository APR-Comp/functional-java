/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 03:49:59 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.addFirst("f&|b9zJr");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.addFirst("        ");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeWord();
      TokenQueue.unescape("");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consume();
      TokenQueue.unescape("p#<%~tSoq@+");
      char char0 = '{';
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced(' ', '{');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '      &|b9zJr'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "qr-^";
      TokenQueue tokenQueue0 = new TokenQueue("qr-^");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consumeWhitespace();
      tokenQueue0.chompBalanced('', '_');
      tokenQueue0.chompBalanced('_', '');
      tokenQueue0.chompBalanced('|', '|');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$+_P;<AB3";
      tokenQueue0.consumeWord();
      tokenQueue0.chompTo("");
      tokenQueue0.consumeCssIdentifier();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("=.o^NEtLE0W_ [w");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(">\"");
      char char0 = '%';
      tokenQueue0.consumeWhitespace();
      char char1 = 'U';
      tokenQueue0.chompBalanced('%', '%');
      TokenQueue.escapeCssIdentifier(">\"");
      tokenQueue0.chompBalanced('%', 'U');
      tokenQueue0.chompTo(">\"");
      tokenQueue0.chompToIgnoreCase("TB(b'klD'?ZIUy7[[");
      tokenQueue0.matchChomp("`;&OU5B<C");
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TokenQueue.escapeCssIdentifier("\"J|KQBhvp33]*");
      TokenQueue tokenQueue0 = new TokenQueue("?8@eMm8~ryB{");
      TokenQueue.unescape("\"J|K\\QBhvp33]*");
      tokenQueue0.matchesWord();
      TokenQueue.escapeCssIdentifier("\"J|K\\QBhvp33]*");
      tokenQueue0.consumeWhitespace();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"J|K\\QBhvp33]*";
      stringArray0[1] = "?8@eMm8~ryB{";
      String string0 = "+CNFh+7%sk:A";
      stringArray0[2] = "+CNFh+7%sk:A";
      String string1 = "org.jsoup.parser.TokenQueue";
      tokenQueue0.consumeWhitespace();
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("IzzGg*pB-`NpR%!apQ");
      tokenQueue0.consumeToIgnoreCase("-");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeTo("-@RKo9CcF~Y^(EFj3p>");
      tokenQueue0.addFirst("    ");
      tokenQueue0.chompBalanced('\\', '\\');
      tokenQueue0.remainder();
      tokenQueue0.consumeWord();
      TokenQueue.escapeCssIdentifier("");
      tokenQueue0.consumeTo("    ");
      tokenQueue0.chompTo("Queue not long enough to consume sequence");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.addFirst("                  ");
      tokenQueue0.remainder();
      tokenQueue0.toString();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.matchesWhitespace();
      tokenQueue0.isEmpty();
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      // Undeclared exception!
      try { 
        tokenQueue0.consume("`NpR%!apQ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("eQ!-54\"z");
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "t4V";
      TokenQueue tokenQueue0 = new TokenQueue("t4V");
      tokenQueue0.matchChomp("t4V");
      tokenQueue0.consumeWord();
      tokenQueue0.addFirst((String) null);
      tokenQueue0.consume();
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "Queue did not match expected sequence";
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      String string1 = "^2c3pFP9";
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "              ";
      TokenQueue tokenQueue0 = new TokenQueue("              ");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.chompToIgnoreCase("              ");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeWord();
      tokenQueue0.advance();
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$nxx");
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "@?(l:0XE9b&~jbwy";
      TokenQueue tokenQueue0 = new TokenQueue("@?(l:0XE9b&~jbwy");
      tokenQueue0.chompToIgnoreCase("             ");
      char[] charArray0 = new char[7];
      char char0 = 'A';
      charArray0[0] = 'A';
      tokenQueue0.consumeWhitespace();
      charArray0[1] = 'W';
      charArray0[2] = '=';
      charArray0[3] = 'U';
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = TokenQueue.escapeCssIdentifier("3o$u}A");
      assertEquals("3o\\$u\\}A", string0);
      
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.chompToIgnoreCase("3o$u}A");
      tokenQueue0.remainder();
      tokenQueue0.chompToIgnoreCase("3o$u}A");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.chompBalanced('4', '3');
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      TokenQueue.unescape("k_zl");
      String string1 = TokenQueue.unescape("Queue not long enough to consume sequence");
      assertEquals("Queue not long enough to consume sequence", string1);
      
      boolean boolean1 = tokenQueue0.matchChomp("cx5\u0006]b$2G#VL");
      assertTrue(boolean1 == boolean0);
      
      tokenQueue0.consumeTo("\"{'~nb883c|Io");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.remainder();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "cx5\u0006]b$2G#VL";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "cx5\u0006]b$2G#VL";
      stringArray0[5] = "Queue not long enough to consume sequence";
      String string2 = tokenQueue0.consumeToAny(stringArray0);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                ");
      tokenQueue0.consume();
      tokenQueue0.consumeToIgnoreCase("                ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "               ";
      stringArray0[2] = "                ";
      stringArray0[3] = "               ";
      stringArray0[4] = "                ";
      stringArray0[5] = "               ";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("7");
      tokenQueue0.consume();
      tokenQueue0.consumeWhitespace();
      tokenQueue0.matchChomp("jyl[^4bbN#;i]&} ");
      TokenQueue.escapeCssIdentifier("'");
      tokenQueue0.advance();
      tokenQueue0.chompToIgnoreCase("7");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consumeToIgnoreCase("Yo");
      tokenQueue0.chompTo("");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      tokenQueue0.consume();
      tokenQueue0.consume();
      String[] stringArray0 = new String[2];
      TokenQueue.unescape("Did not find balanced marker at '");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.addFirst("Queue did not match expected sequence");
      stringArray0[0] = "Queue did not match expected sequence";
      tokenQueue0.consumeTo("Did not find balanced marker at '");
      stringArray0[1] = "Did not find balanced marker at '";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.addFirst("Did not find balanced marker at '");
      tokenQueue0.advance();
      tokenQueue0.addFirst("11++4M?xQ8ES:%B~C.1");
      tokenQueue0.chompToIgnoreCase("org.jsoup.internal.StringUtil");
      tokenQueue0.toString();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.matchesWord();
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'D';
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("pTg6vASmUZ>Q12957I|");
      boolean boolean0 = tokenQueue0.isEmpty();
      tokenQueue0.addFirst("pTg6vASmUZ>Q12957I|");
      assertEquals("pTg6vASmUZ>Q12957I|pTg6vASmUZ>Q12957I|", tokenQueue0.toString());
      
      tokenQueue0.chompTo("Rww^<-}-E:;Ex\"v0r");
      tokenQueue0.chompToIgnoreCase("pTg6vASmUZ>Q12957I|");
      TokenQueue.unescape("ZJD)d>&{T}Q,@%");
      tokenQueue0.consumeWord();
      tokenQueue0.matchChomp("d]k)`qDotZG-GGi>}L");
      boolean boolean1 = tokenQueue0.matches("2,0^ !TjKU~");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consumeToIgnoreCase("-");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      tokenQueue0.matchesWhitespace();
      TokenQueue.unescape("");
      tokenQueue0.isEmpty();
      tokenQueue0.consumeElementSelector();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-[t_x2Q_p";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      boolean boolean1 = tokenQueue0.matchesAny(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TokenQueue.unescape("");
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.advance();
      boolean boolean0 = tokenQueue0.matchChomp("'");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "'";
      stringArray0[3] = "";
      stringArray0[4] = "'";
      stringArray0[5] = "'";
      stringArray0[6] = "'";
      stringArray0[7] = "'";
      stringArray0[8] = "";
      boolean boolean1 = tokenQueue0.matchesAny(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consumeWord();
      tokenQueue0.addFirst("e>UBvB");
      tokenQueue0.advance();
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#");
      tokenQueue0.consumeTo("");
      tokenQueue0.chompTo("");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.advance();
      tokenQueue0.consumeTo("");
      tokenQueue0.isEmpty();
      TokenQueue.escapeCssIdentifier("");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.matches("");
      tokenQueue0.advance();
      tokenQueue0.chompBalanced('(', '$');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.toString();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      tokenQueue0.addFirst("Queue not long enough to consume sequence");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Queue not long enough to consume sequence";
      stringArray0[1] = "Queue not long enough to consume sequence";
      stringArray0[2] = "Queue not long enough to consume sequence";
      stringArray0[3] = "Queue not long enough to consume sequence";
      stringArray0[4] = "Queue not long enough to consume sequence";
      stringArray0[5] = "Queue not long enough to consume sequence";
      stringArray0[6] = "Queue not long enough to consume sequence";
      stringArray0[7] = "Queue not long enough to consume sequence";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.consume();
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consume();
      tokenQueue0.matchChomp("");
      tokenQueue0.consumeTo("Queue not long enough to consume sequence");
      tokenQueue0.chompTo("eue not long enough to consume sequence");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("Qu");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "/";
      TokenQueue tokenQueue0 = new TokenQueue("/");
      String string1 = "IWayip.^EGB s/3_V";
      tokenQueue0.advance();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/";
      stringArray0[1] = "IWayip.^EGB s/3_V";
      stringArray0[2] = "/";
      stringArray0[3] = "/";
      stringArray0[4] = "IWayip.^EGB s/3_V";
      stringArray0[5] = "/";
      stringArray0[6] = "IWayip.^EGB s/3_V";
      stringArray0[7] = "";
      stringArray0[8] = "/";
      tokenQueue0.consumeToAny(stringArray0);
      // Undeclared exception!
      try { 
        TokenQueue.escapeCssIdentifier((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "/";
      TokenQueue tokenQueue0 = new TokenQueue("/");
      tokenQueue0.consume("/");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.chompBalanced('w', '~');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "/";
      stringArray0[2] = "";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.matches("/");
      tokenQueue0.consumeWhitespace();
      // Undeclared exception!
      try { 
        tokenQueue0.consume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("~W^@llf%F!e.%$/@?x^");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consumeWhitespace();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~W^@llf%F!e.%$/@?x^";
      stringArray0[1] = "            ";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.chompBalanced('L', 'W');
      TokenQueue.unescape("");
      char char0 = 'q';
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('W', 'q');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '^@llf%F!e.%$/@?x^'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "";
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.addFirst("Queue not long enough to consume sequence");
      tokenQueue0.matchChomp("");
      TokenQueue.unescape("");
      tokenQueue0.consumeToIgnoreCase("a`Njb:MO");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.advance();
      tokenQueue0.advance();
      String string1 = null;
      tokenQueue0.consumeToIgnoreCase(" j;tEa<7#sz>o");
      tokenQueue0.remainder();
      TokenQueue.escapeCssIdentifier(" j;tEa<7#sz>o");
      tokenQueue0.chompBalanced('!', '(');
      // Undeclared exception!
      try { 
        tokenQueue0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "Qx2reL";
      TokenQueue.escapeCssIdentifier("Qx2reL");
      TokenQueue tokenQueue0 = new TokenQueue("Qx2reL");
      tokenQueue0.consumeElementSelector();
      // Undeclared exception!
      try { 
        tokenQueue0.matchChomp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("@L0^qPeh+.*,0[]v");
      tokenQueue0.consume();
      tokenQueue0.chompTo("@L0^qPeh+.*,0[]v");
      tokenQueue0.consumeCssIdentifier();
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "";
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.remainder();
      tokenQueue0.chompTo("");
      // Undeclared exception!
      try { 
        tokenQueue0.chompTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "fTqsM*~|'>s!?H";
      TokenQueue tokenQueue0 = new TokenQueue("fTqsM*~|'>s!?H");
      tokenQueue0.consumeCssIdentifier();
      char char0 = '!';
      tokenQueue0.chompBalanced('!', '!');
      tokenQueue0.consumeCssIdentifier();
      String string1 = "*|";
      tokenQueue0.matches("*|");
      tokenQueue0.chompBalanced('!', 'V');
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        tokenQueue0.consume("fTqsM*~|'>s!?H");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("@,x/)0IOoGtvFs:");
      tokenQueue0.consumeTo(">Sm");
      tokenQueue0.consumeTo("@,x/)0IOoGtvFs:");
      tokenQueue0.chompBalanced('r', 'r');
      tokenQueue0.isEmpty();
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"MNPP;0Ee,(");
      tokenQueue0.consume();
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("GR0$$-S(HN");
      tokenQueue0.addFirst("GR0$$-S(HN");
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = '-';
      tokenQueue0.remainder();
      charArray0[2] = 'x';
      charArray0[3] = '\"';
      charArray0[4] = '9';
      tokenQueue0.remainder();
      charArray0[5] = 'p';
      charArray0[6] = '3';
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = null;
      TokenQueue tokenQueue0 = null;
      try {
        tokenQueue0 = new TokenQueue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "C;vj-b";
      TokenQueue tokenQueue0 = new TokenQueue("C;vj-b");
      tokenQueue0.matchesWhitespace();
      TokenQueue.escapeCssIdentifier("]a(IK]");
      tokenQueue0.consumeWord();
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("AVK=VPoJI/@#");
      tokenQueue0.consumeWord();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeElementSelector();
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = 'n';
      charArray0[2] = '=';
      charArray0[3] = '?';
      charArray0[4] = '_';
      charArray0[5] = 'v';
      tokenQueue0.matchesAny(charArray0);
      tokenQueue0.consumeCssIdentifier();
      assertEquals("=VPoJI/@#", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("             ");
      tokenQueue0.consumeWord();
      tokenQueue0.toString();
      tokenQueue0.chompTo("");
      tokenQueue0.matchChomp("");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.addFirst("             ");
      tokenQueue0.chompBalanced('?', '<');
      tokenQueue0.advance();
      tokenQueue0.matchChomp("");
      String[] stringArray0 = null;
      tokenQueue0.addFirst("             ");
      TokenQueue.escapeCssIdentifier("");
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Q3ZD\"6ER,J");
      tokenQueue0.advance();
      tokenQueue0.consumeCssIdentifier();
      String[] stringArray0 = new String[3];
      String string0 = "3";
      char char0 = ',';
      tokenQueue0.chompBalanced(',', ',');
      stringArray0[0] = "3";
      stringArray0[1] = "Q3ZD\"6ER,J";
      stringArray0[2] = "Q3ZD\"6ER,J";
      tokenQueue0.consumeElementSelector();
      TokenQueue.unescape("3");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.isEmpty();
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "dyWSh]SZ*yn";
      TokenQueue tokenQueue0 = new TokenQueue("dyWSh]SZ*yn");
      tokenQueue0.matchChomp("dyWSh]SZ*yn");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.remainder();
      char char0 = 'a';
      String string1 = "              ";
      tokenQueue0.chompToIgnoreCase("              ");
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("3QYQh8gyw2");
      tokenQueue0.chompBalanced('b', '.');
      tokenQueue0.matchChomp("3QYQh8gyw2");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.matches("3QYQh8gyw2");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("3QYQh8gyw2");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "D{;";
      TokenQueue tokenQueue0 = new TokenQueue("D{;");
      tokenQueue0.consumeToIgnoreCase("D{;");
      TokenQueue.escapeCssIdentifier("+N+|Lc|");
      // Undeclared exception!
      try { 
        tokenQueue0.chompTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "";
      stringArray0[6] = "";
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("KH|o%VMG_`");
      tokenQueue0.consumeWord();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.chompTo("|o");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.remainder();
      tokenQueue0.advance();
      tokenQueue0.consumeToIgnoreCase("/W~::|P^PFUU");
      tokenQueue0.remainder();
      tokenQueue0.advance();
      tokenQueue0.consumeCssIdentifier();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("x9");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = ':';
      TokenQueue.escapeCssIdentifier("");
      charArray0[2] = ';';
      charArray0[3] = 'I';
      charArray0[4] = '#';
      charArray0[5] = 'W';
      char char0 = '@';
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = 'E';
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      char char0 = 'e';
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("8~nNR_LK");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("./7IMY\"s%");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "./7IMY\"s%";
      stringArray0[1] = "kX.Y1vKD!{fXnW'>{Jn";
      stringArray0[2] = "./7IMY\"s%";
      stringArray0[3] = "./7IMY\"s%";
      stringArray0[4] = "5rw$A}3'0>HFaH-kO";
      stringArray0[5] = "./7IMY\"s%";
      stringArray0[6] = "./7IMY\"s%";
      stringArray0[7] = "./7IMY\"s%";
      stringArray0[8] = "./7IMY\"s%";
      tokenQueue0.matchesAny(stringArray0);
      tokenQueue0.consumeElementSelector();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("Y6MVAL9x&nP*|");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = TokenQueue.escapeCssIdentifier("Queue did not match expected sequence");
      assertEquals("Queue\\ did\\ not\\ match\\ expected\\ sequence", string0);
      
      String string1 = TokenQueue.escapeCssIdentifier("          ");
      assertEquals("\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ", string1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("^/((.{1,2}/)+)");
      String[] stringArray0 = new String[4];
      tokenQueue0.consumeElementSelector();
      stringArray0[0] = "^/((.{1,2}/)+)";
      tokenQueue0.consumeWord();
      stringArray0[1] = "^/((.{1,2}/)+)";
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.matchChomp("^/((.{1,2}/)+)");
      stringArray0[2] = "^/((.{1,2}/)+)";
      stringArray0[3] = "^/((.{1,2}/)+)";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.chompTo("^/((.{1,2}/)+)");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("^/((.{1,2}/)+)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("m(F7m5IwCmR[3v");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("A");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "\\{*>!|Z&:CC7";
      TokenQueue tokenQueue0 = new TokenQueue("{*>!|Z&:CC7");
      tokenQueue0.chompToIgnoreCase("C]3{s<ywEcvG");
      String[] stringArray0 = new String[2];
      tokenQueue0.consumeWord();
      tokenQueue0.matchesWhitespace();
      stringArray0[0] = "{*>!|Z&:CC7";
      tokenQueue0.addFirst("{*>!|Z&:CC7");
      stringArray0[1] = "{*>!|Z&:CC7";
      tokenQueue0.consume();
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.consumeWord();
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$s9gxN.");
      TokenQueue.escapeCssIdentifier("");
      tokenQueue0.consume();
      tokenQueue0.chompTo("                ");
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.consumeElementSelector();
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("WoB'(TzIlyA");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.matchChomp("WoB'(TzIlyA");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "WoB'(TzIlyA";
      tokenQueue0.chompBalanced('$', '$');
      stringArray0[1] = "WoB'(TzIlyA";
      stringArray0[2] = "WoB'(TzIlyA";
      stringArray0[3] = "WoB'(TzIlyA";
      tokenQueue0.addFirst("9r%hi?gLj.");
      tokenQueue0.matchChomp("P.x");
      stringArray0[4] = "WoB'(TzIlyA";
      stringArray0[5] = "WoB'(TzIlyA";
      stringArray0[6] = "Did not find balanced marker at '";
      stringArray0[7] = "WoB'(TzIlyA";
      String string0 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
      
      tokenQueue0.remainder();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.matchChomp("");
      tokenQueue0.advance();
      tokenQueue0.chompBalanced('x', '!');
      String string1 = tokenQueue0.consumeCssIdentifier();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "";
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.matchesWhitespace();
      TokenQueue.escapeCssIdentifier("U");
      tokenQueue0.consumeElementSelector();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "U";
      stringArray0[1] = "U";
      stringArray0[2] = "U";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.chompTo("\u0006e3\n+OzL");
      // Undeclared exception!
      try { 
        tokenQueue0.consume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TokenQueue tokenQueue0 = null;
      try {
        tokenQueue0 = new TokenQueue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = ")Y{8autPx<BhU";
      TokenQueue tokenQueue0 = new TokenQueue(")Y{8autPx<BhU");
      tokenQueue0.consumeWord();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consumeElementSelector();
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[2];
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "org.jsoup.parser.TokenQueue";
      TokenQueue.unescape("org.jsoup.parser.TokenQueue");
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      TokenQueue.unescape("org.jsoup.parser.TokenQueue");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeWord();
      String[] stringArray0 = new String[1];
      tokenQueue0.consume("");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "";
      TokenQueue.escapeCssIdentifier("");
      String string1 = "$gXE~|w,u [";
      TokenQueue.unescape("$gXE~|w,u [");
      TokenQueue tokenQueue0 = new TokenQueue("$gXE~|w,u [");
      tokenQueue0.consumeWord();
      TokenQueue.escapeCssIdentifier("");
      String string2 = "5]\\3~<1nL2uB";
      // Undeclared exception!
      try { 
        tokenQueue0.consume("5]\u0003~<1nL2uB");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.chompToIgnoreCase("-");
      tokenQueue0.remainder();
      tokenQueue0.matches("");
      tokenQueue0.addFirst("");
      tokenQueue0.matchChomp("");
      String string0 = "w.SUch?P";
      tokenQueue0.matchChomp("w.SUch?P");
      tokenQueue0.advance();
      tokenQueue0.remainder();
      tokenQueue0.remainder();
      TokenQueue.unescape("      ");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("w");
      tokenQueue0.addFirst("");
      tokenQueue0.chompTo("[");
      tokenQueue0.advance();
      tokenQueue0.matchChomp(",");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.remainder();
      tokenQueue0.addFirst(".KB");
      tokenQueue0.consume();
      tokenQueue0.matchChomp(".KB");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consumeWhitespace();
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consumeWord();
      tokenQueue0.chompBalanced('A', 'L');
      String[] stringArray0 = new String[0];
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = ":JjL";
      TokenQueue tokenQueue0 = new TokenQueue(":JjL");
      tokenQueue0.remainder();
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeWhitespace();
      String string1 = "|";
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$9;>{Q1mr&");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consumeWhitespace();
      tokenQueue0.chompBalanced('R', '<');
      tokenQueue0.matches("org.jsoup.parser.TokenQueue");
      tokenQueue0.matches("");
      tokenQueue0.matchesWord();
      tokenQueue0.matchesWord();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.chompTo("");
      // Undeclared exception!
      try { 
        TokenQueue.escapeCssIdentifier((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consumeWhitespace();
      TokenQueue.escapeCssIdentifier("");
      tokenQueue0.consumeWord();
      tokenQueue0.chompBalanced(':', 'k');
      char char0 = 'v';
      tokenQueue0.chompBalanced('8', 'v');
      // Undeclared exception!
      try { 
        tokenQueue0.consume("                 ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("           ");
      TokenQueue.unescape("");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("IM=Xb'{J5!hYC0vV(t");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "IM=Xb'{J5!hYC0vV(t";
      stringArray0[1] = "IM=Xb'{J5!hYC0vV(t";
      stringArray0[2] = "IM=Xb'{J5!hYC0vV(t";
      stringArray0[3] = "^/((.{1,2}/)+)";
      stringArray0[4] = "IM=Xb'{J5!hYC0vV(t";
      tokenQueue0.consumeToAny(stringArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'l';
      charArray0[2] = 'm';
      tokenQueue0.matchesAny(charArray0);
      tokenQueue0.matchChomp("Did not find balanced marker at '");
      tokenQueue0.chompTo("IM=Xb'{J5!hYC0vV(t");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("We");
      tokenQueue0.addFirst("");
      tokenQueue0.consumeToIgnoreCase("We");
      tokenQueue0.addFirst("We");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.advance();
      TokenQueue.unescape("");
      String string0 = tokenQueue0.consumeWord();
      tokenQueue0.consumeWhitespace();
      tokenQueue0.chompToIgnoreCase("We");
      tokenQueue0.matches("c>/jdg-C");
      tokenQueue0.consumeToIgnoreCase("        ");
      assertEquals("", tokenQueue0.toString());
      
      TokenQueue.escapeCssIdentifier("We");
      tokenQueue0.remainder();
      tokenQueue0.consumeWord();
      tokenQueue0.matchesWhitespace();
      tokenQueue0.toString();
      tokenQueue0.matches("");
      tokenQueue0.consumeWord();
      tokenQueue0.isEmpty();
      String string1 = TokenQueue.escapeCssIdentifier("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "6Ctgtzj.HWBMl*YW9";
      TokenQueue tokenQueue0 = new TokenQueue("6Ctgtzj.HWBMl*YW9");
      tokenQueue0.consumeWord();
      tokenQueue0.chompToIgnoreCase("6Ctgtzj");
      tokenQueue0.chompToIgnoreCase("(<M7yVbzKLQr'Q3");
      String string1 = "";
      tokenQueue0.matchChomp("");
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("vG/~");
      boolean boolean0 = tokenQueue0.matches("%<9@k*:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "W1D";
      TokenQueue tokenQueue0 = new TokenQueue("W1D");
      tokenQueue0.chompTo("W1D");
      String string1 = null;
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeWord();
      // Undeclared exception!
      try { 
        tokenQueue0.consume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("D03kZqOc;o3[B585%");
      tokenQueue0.consumeToIgnoreCase("D03kZqOc;o3[B585%");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "D03kZqOc;o3[B585%";
      tokenQueue0.addFirst("D03kZqOc;o3[B585%");
      stringArray0[1] = "";
      stringArray0[2] = "D03kZqOc;o3[B585%";
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeTo("");
      TokenQueue.unescape("j2ytHC).d");
      stringArray0[3] = "D03kZqOc;o3[B585%";
      tokenQueue0.matchChomp("D03kZqOc;o3[B585%");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consumeToIgnoreCase("D03kZqOc;o3[B585%");
      stringArray0[4] = "";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.consume();
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeElementSelector();
      assertEquals(";o3[B585%", tokenQueue0.toString());
      
      String string0 = tokenQueue0.remainder();
      assertEquals(";o3[B585%", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("z|tj");
      assertTrue(tokenQueue0.matchesWord());
      
      String string0 = TokenQueue.escapeCssIdentifier("/");
      tokenQueue0.remainder();
      tokenQueue0.consumeToIgnoreCase("/");
      tokenQueue0.consumeToIgnoreCase("z|tj");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "z|tj";
      stringArray0[2] = "-";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "Did not find balanced marker at '";
      stringArray0[6] = "/";
      stringArray0[7] = "/";
      stringArray0[8] = "/";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.matchesWhitespace();
      tokenQueue0.addFirst("");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.toString();
      String string1 = tokenQueue0.consumeTo("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'Wj#?ok");
      tokenQueue0.chompTo("");
      char[] charArray0 = new char[8];
      tokenQueue0.consumeWord();
      charArray0[0] = '-';
      charArray0[1] = '}';
      charArray0[2] = 'q';
      charArray0[3] = '?';
      charArray0[4] = 'L';
      charArray0[5] = '$';
      charArray0[6] = '\'';
      charArray0[7] = 'U';
      tokenQueue0.matchesAny(charArray0);
      assertFalse(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.remainder();
      assertEquals("'Wj#?ok", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=vg<pXUJ1Li3o");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "=vg<pXUJ1Li3o";
      stringArray0[1] = "=vg<pXUJ1Li3o";
      stringArray0[2] = "=vg<pXUJ1Li3o";
      tokenQueue0.advance();
      tokenQueue0.consumeCssIdentifier();
      stringArray0[3] = "=vg<pXUJ1Li3o";
      stringArray0[4] = "=vg<pXUJ1Li3o";
      stringArray0[5] = "=vg<pXUJ1Li3o";
      stringArray0[6] = "O()gUXxI^![]OJ.W%<C";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.isEmpty();
      tokenQueue0.matchChomp("=vg<pXUJ1Li3o");
      assertEquals("", tokenQueue0.toString());
      
      tokenQueue0.chompTo("_");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.remainder();
      tokenQueue0.matchesAny(stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "vg";
      stringArray1[1] = "vg";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "K\\5{yV'F{\"f";
      TokenQueue tokenQueue0 = new TokenQueue("K\u0005{yV'F{\"f");
      String string1 = null;
      String string2 = "   ";
      tokenQueue0.addFirst("K\u0005{yV'F{\"f");
      TokenQueue.escapeCssIdentifier("   ");
      // Undeclared exception!
      try { 
        tokenQueue0.consume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "R \\V";
      TokenQueue tokenQueue0 = new TokenQueue("R V");
      String string1 = null;
      String string2 = "-";
      TokenQueue.unescape("-");
      String string3 = "                 ";
      tokenQueue0.consumeTo("                 ");
      // Undeclared exception!
      try { 
        tokenQueue0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("kh|o|vmg_`");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeWord();
      TokenQueue.unescape("");
      TokenQueue.unescape("");
      tokenQueue0.consume();
      tokenQueue0.consumeToIgnoreCase("4_+6WFR]%");
      tokenQueue0.matchesWhitespace();
      TokenQueue.unescape("");
      tokenQueue0.isEmpty();
      tokenQueue0.advance();
      assertEquals("", tokenQueue0.toString());
      
      tokenQueue0.consumeTo("+&d");
      tokenQueue0.remainder();
      TokenQueue.unescape("+&d");
      String string0 = TokenQueue.escapeCssIdentifier("^[a-zA-Z][a-zA-Z0-9+-.]*:");
      assertEquals("\\^\\[a-zA-Z\\]\\[a-zA-Z0-9\\+-\\.\\]\\*\\:", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TokenQueue.escapeCssIdentifier("");
      TokenQueue tokenQueue0 = new TokenQueue("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      tokenQueue0.matchChomp("Queue did not match expected sequence");
      TokenQueue.unescape("");
      stringArray0[2] = "";
      stringArray0[3] = "";
      tokenQueue0.remainder();
      stringArray0[4] = "";
      String string0 = "C_yc";
      tokenQueue0.consumeTo("C_yc");
      stringArray0[5] = "";
      tokenQueue0.matchesAny(stringArray0);
      tokenQueue0.matchChomp("");
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "T(d9";
      TokenQueue tokenQueue0 = new TokenQueue("T(d9");
      tokenQueue0.remainder();
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.chompBalanced('H', 'J');
      // Undeclared exception!
      try { 
        tokenQueue0.consume("T(d9");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("  ");
      tokenQueue0.chompToIgnoreCase("  ");
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("             ");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeWhitespace();
      tokenQueue0.matchesWord();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeCssIdentifier();
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      tokenQueue0.matchesWhitespace();
      String string0 = "DRhds`@Et[E{";
      tokenQueue0.chompTo("DRhds`@Et[E{");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Did not find balanced marker at '";
      stringArray0[1] = "-T";
      stringArray0[2] = "Did not find balanced marker at '";
      tokenQueue0.consumeWhitespace();
      String string1 = "";
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("pen~t_vjDD:] k");
      tokenQueue0.matchChomp("pen~t_vjDD:] k");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.chompTo("pen~t_vjDD:] k");
      tokenQueue0.matches("pen~t_vjDD:] k");
      tokenQueue0.consumeToIgnoreCase("pen~t_vjDD:] k");
      tokenQueue0.remainder();
      tokenQueue0.consumeWord();
      tokenQueue0.chompTo("");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consume("");
      tokenQueue0.matchesWord();
      char[] charArray0 = new char[6];
      TokenQueue.escapeCssIdentifier("");
      charArray0[0] = 'g';
      charArray0[1] = 't';
      charArray0[2] = 'E';
      charArray0[3] = '\\';
      charArray0[4] = '3';
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeCssIdentifier();
      charArray0[5] = '.';
      tokenQueue0.matchesAny(charArray0);
      tokenQueue0.matchesWord();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "pen~t_vjDD:] k";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "M_.;R66[BV/;;tP]<V";
      stringArray0[7] = "";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeElementSelector();
      charArray0[1] = 'p';
      String[] stringArray0 = null;
      tokenQueue0.consume("");
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = ")9b[qxF9-wE_l";
      TokenQueue tokenQueue0 = new TokenQueue(")9b[qxF9-wE_l");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")9b[qxF9-wE_l";
      stringArray0[1] = ")9b[qxF9-wE_l";
      stringArray0[2] = "V";
      stringArray0[3] = ")9b[qxF9-wE_l";
      stringArray0[4] = ")9b[qxF9-wE_l";
      stringArray0[5] = ")9b[qxF9-wE_l";
      tokenQueue0.remainder();
      stringArray0[6] = ")9b[qxF9-wE_l";
      tokenQueue0.chompTo(")9b[qxF9-wE_l");
      stringArray0[7] = ")9b[qxF9-wE_l";
      stringArray0[8] = ")9b[qxF9-wE_l";
      tokenQueue0.consumeToAny(stringArray0);
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "t>SUgH==V4t%)'I";
      TokenQueue tokenQueue0 = new TokenQueue("t>SUgH==V4t%)'I");
      tokenQueue0.chompTo("t>SUgH==V4t%)'I");
      tokenQueue0.remainder();
      tokenQueue0.chompBalanced('M', ';');
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "'";
      TokenQueue tokenQueue0 = new TokenQueue("'");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[7];
      char[] charArray0 = new char[9];
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = TokenQueue.escapeCssIdentifier("$9->{q1mr&");
      assertEquals("\\$9-\\>\\{q1mr\\&", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      String string0 = tokenQueue0.consumeTo("Did not find balanced marker at '");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Did not find balanced marker at '";
      stringArray0[1] = "Did not find balanced marker at '";
      stringArray0[2] = "Did not find balanced marker at '";
      stringArray0[3] = "Did not find balanced marker at '";
      stringArray0[4] = "";
      String string1 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("Did not find balanced marker at '", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("a)]X<b@LQ%=k}r");
      tokenQueue0.chompBalanced('=', '=');
      tokenQueue0.consumeElementSelector();
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced(')', 's');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at ']X<b@LQ%=k}r'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeWhitespace();
      TokenQueue.escapeCssIdentifier("_");
      tokenQueue0.remainder();
      // Undeclared exception!
      try { 
        tokenQueue0.consume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      tokenQueue0.advance();
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consume("");
      tokenQueue0.consumeWord();
      tokenQueue0.chompTo("org.jsoup.parser.TokenQueue");
      TokenQueue.unescape("k%-|[CA");
      tokenQueue0.addFirst("vc(vzia<'ztnew1");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeWhitespace();
      tokenQueue0.matchChomp(" n`Vbm");
      tokenQueue0.chompBalanced('@', '3');
      tokenQueue0.advance();
      tokenQueue0.consumeWord();
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|");
      String string0 = tokenQueue0.consumeTo("|");
      assertEquals("", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '4';
      charArray0[2] = ':';
      charArray0[3] = '[';
      charArray0[4] = ')';
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("g");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.chompTo("g");
      tokenQueue0.consumeWord();
      tokenQueue0.addFirst("g");
      tokenQueue0.matches("g");
      tokenQueue0.chompTo("");
      tokenQueue0.addFirst("1bC{H{");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consume("");
      assertEquals("{H{g", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.remainder();
      tokenQueue0.matchChomp("Queue did not match expected sequence");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.matchesWhitespace();
      String string0 = "org.jsoup.internal.StringUtil$1";
      String string1 = null;
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#J/");
      tokenQueue0.toString();
      tokenQueue0.chompToIgnoreCase("#J/");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.toString();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<-/;Uw]");
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = 'r';
      charArray0[2] = 'G';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '~';
      charArray0[6] = '#';
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      boolean boolean1 = tokenQueue0.matchChomp("H+Br2k");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'");
      tokenQueue0.consumeElementSelector();
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "mMl\\VtBv]l9s`a'T";
      TokenQueue tokenQueue0 = new TokenQueue("mMlVtBv]l9s`a'T");
      char[] charArray0 = null;
      char char0 = 'y';
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeWord();
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "XS\"y|@";
      TokenQueue tokenQueue0 = new TokenQueue("XS\"y|@");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "XS\"y|@";
      stringArray0[1] = "XS\"y|@";
      stringArray0[2] = "XS\"y|@";
      stringArray0[3] = "XS\"y|@";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.consumeWord();
      tokenQueue0.consumeToIgnoreCase("XS");
      String[] stringArray1 = new String[6];
      tokenQueue0.matchesWhitespace();
      tokenQueue0.chompTo("XS\"y|@");
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "";
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.addFirst("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      TokenQueue.escapeCssIdentifier("");
      tokenQueue0.consumeElementSelector();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("$Z|5vAHpx-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "          ";
      TokenQueue tokenQueue0 = new TokenQueue("          ");
      tokenQueue0.consumeWord();
      tokenQueue0.chompBalanced('w', '!');
      tokenQueue0.remainder();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "          ";
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" [{%)OoXp)'CKpn!");
      tokenQueue0.chompTo(" [{%)OoXp)'CKpn!");
      TokenQueue.unescape("");
      tokenQueue0.chompBalanced('`', 'o');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("qw");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeCssIdentifier();
      String string0 = "JDK)SiH";
      tokenQueue0.matchChomp("");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("FIzSL");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "";
      TokenQueue tokenQueue0 = new TokenQueue("");
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "";
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.chompBalanced('$', '$');
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("H_|pDC;");
      tokenQueue0.advance();
      assertEquals("_|pDC;", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      boolean boolean1 = tokenQueue0.matchesWord();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("0Im#hajYx");
      tokenQueue0.matchChomp("0Im#hajYx");
      tokenQueue0.chompTo("0Im#hajYx");
      tokenQueue0.advance();
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeElementSelector();
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consumeWhitespace();
      TokenQueue.escapeCssIdentifier("");
      tokenQueue0.chompTo("y*ET]N`l@nzf%O");
      tokenQueue0.consumeWord();
      tokenQueue0.addFirst("");
      TokenQueue.unescape("y*ET]N`l@nzf%O");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'");
      char char0 = '<';
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeToIgnoreCase("qZ:e2?lOd$z");
      tokenQueue0.consumeTo("|");
      char char1 = '`';
      tokenQueue0.advance();
      tokenQueue0.chompToIgnoreCase("2>+6`PT");
      tokenQueue0.consumeToIgnoreCase("'");
      tokenQueue0.addFirst("");
      tokenQueue0.chompBalanced('e', '<');
      tokenQueue0.chompBalanced('<', '`');
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'");
      tokenQueue0.addFirst("'");
      tokenQueue0.consumeWord();
      tokenQueue0.consumeTo("");
      char char0 = 'R';
      tokenQueue0.chompBalanced('R', '{');
      tokenQueue0.chompToIgnoreCase("        ");
      tokenQueue0.chompBalanced('i', ':');
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = 'R';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      tokenQueue0.consumeToAny(stringArray0);
      charArray0[5] = 'R';
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(".i{qo{oRMi:Z]c");
      tokenQueue0.chompBalanced('6', '6');
      tokenQueue0.addFirst("");
      tokenQueue0.consume("");
      tokenQueue0.consumeWord();
      tokenQueue0.consumeToIgnoreCase(".i{qo{oRMi:Z]c");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.chompTo(".i{qo{oRMi:Z]c");
      tokenQueue0.addFirst(".i{qo{oRMi:Z]c");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.matchesWhitespace();
      TokenQueue.unescape("");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consume();
      tokenQueue0.matchChomp("");
      tokenQueue0.consumeWord();
      tokenQueue0.chompBalanced('.', '6');
      tokenQueue0.advance();
      tokenQueue0.matchChomp("");
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("      ");
      char char0 = 'R';
      tokenQueue0.advance();
      TokenQueue.escapeCssIdentifier("_");
      tokenQueue0.chompBalanced('R', 'R');
      tokenQueue0.chompToIgnoreCase("      ");
      tokenQueue0.consumeTo("      ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":aVRv%<X_HmY}";
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("@5;syo=&ZBe");
      tokenQueue0.addFirst("@5;syo=&ZBe");
      tokenQueue0.matchChomp("@5;syo=&ZBe");
      tokenQueue0.remainder();
      tokenQueue0.remainder();
      tokenQueue0.matchChomp("@0X^nR;NZEo)w]BX=M");
      tokenQueue0.chompBalanced('9', '9');
      tokenQueue0.consumeWord();
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeTo("@5;syo=&ZBe");
      String string0 = "            ";
      tokenQueue0.chompTo("            ");
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = TokenQueue.unescape("|");
      String string1 = TokenQueue.escapeCssIdentifier("|");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = TokenQueue.escapeCssIdentifier("");
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "0y}";
      TokenQueue tokenQueue0 = new TokenQueue("0y}");
      tokenQueue0.consumeElementSelector();
      String string1 = "";
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("%Tt%D:YWQ1^`B.");
      tokenQueue0.consume("");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.advance();
      tokenQueue0.matchesWhitespace();
      tokenQueue0.chompToIgnoreCase("%Tt%D:YWQ1^`B.");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "";
      TokenQueue tokenQueue0 = new TokenQueue("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      tokenQueue0.consumeToIgnoreCase("                   ");
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeWhitespace();
      String[] stringArray1 = new String[0];
      tokenQueue0.consumeToAny(stringArray1);
      TokenQueue.unescape("");
      String string1 = null;
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Pi");
      boolean boolean0 = tokenQueue0.matchesWord();
      assertTrue(boolean0);
      assertEquals("Pi", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("@h");
      tokenQueue0.matchesWord();
      tokenQueue0.chompToIgnoreCase("@h");
      tokenQueue0.chompTo("*KOIiu&U90V");
      tokenQueue0.chompTo("@h");
      tokenQueue0.chompTo("@h");
      tokenQueue0.advance();
      tokenQueue0.toString();
      tokenQueue0.matchChomp("?");
      tokenQueue0.advance();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TokenQueue.unescape("E:*-?6*G0CAkfl* ");
      String string0 = TokenQueue.escapeCssIdentifier("Did not find balanced marker at '");
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      tokenQueue0.matchesWord();
      tokenQueue0.addFirst("         ");
      assertEquals("         Did not find balanced marker at '", tokenQueue0.toString());
      
      tokenQueue0.chompTo("E:*-?6*G0CAkfl* ");
      tokenQueue0.matchesWord();
      String string1 = tokenQueue0.chompToIgnoreCase("         Did not find balanced marker at '");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "";
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeWhitespace();
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*ia]][#ub5PU+^jv/$");
      String[] stringArray0 = new String[1];
      tokenQueue0.consumeTo("UwCeE+,eO");
      stringArray0[0] = "x0vF";
      tokenQueue0.consumeToAny(stringArray0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(")J P<rlH7T~m\"\"");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.addFirst(")J P<rlH7T~m\"\"");
      tokenQueue0.chompToIgnoreCase(")J P<rlH7T~m\"\"");
      tokenQueue0.remainder();
      tokenQueue0.chompToIgnoreCase("!]s0omkHPunOYk1");
      tokenQueue0.addFirst("]b51D-h?i9");
      TokenQueue.escapeCssIdentifier("");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.addFirst("-");
      tokenQueue0.addFirst("]b51D-h?i9");
      TokenQueue.escapeCssIdentifier(":AByp`^se|0@&/uW2F_");
      tokenQueue0.chompTo(";Wt08");
      TokenQueue.escapeCssIdentifier(" s'x\"/mYzU");
      tokenQueue0.advance();
      tokenQueue0.consumeToIgnoreCase(":AByp`^se|0@&/uW2F_");
      tokenQueue0.isEmpty();
      tokenQueue0.consumeWhitespace();
      TokenQueue.escapeCssIdentifier(" s'x\"/mYzU");
      tokenQueue0.consumeWord();
      tokenQueue0.matchChomp("j!Z:_/(_i.Bq0T1");
      tokenQueue0.consume("");
      tokenQueue0.toString();
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TokenQueue.escapeCssIdentifier("*|");
      TokenQueue tokenQueue0 = new TokenQueue("'s~Fe\u0007");
      tokenQueue0.matchesWord();
      tokenQueue0.chompToIgnoreCase("*|");
      String[] stringArray0 = new String[4];
      String string0 = "gI-JevjYvF@jC";
      stringArray0[0] = "gI-JevjYvF@jC";
      stringArray0[1] = "*|";
      stringArray0[2] = "*|";
      stringArray0[3] = "'s~Fe\u0007";
      tokenQueue0.matchesAny(stringArray0);
      tokenQueue0.consumeCssIdentifier();
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("       ");
      tokenQueue0.consumeWhitespace();
      String[] stringArray0 = new String[0];
      tokenQueue0.matchesAny(stringArray0);
      tokenQueue0.consumeWord();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("JQA{[! v1h");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.chompToIgnoreCase("JQA{[! v1h");
      tokenQueue0.consumeWord();
      tokenQueue0.chompToIgnoreCase("o$v=!H9,");
      tokenQueue0.advance();
      tokenQueue0.addFirst("         ");
      tokenQueue0.advance();
      tokenQueue0.consumeWord();
      tokenQueue0.consumeWhitespace();
      tokenQueue0.isEmpty();
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = 'O';
      charArray0[2] = 'k';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      tokenQueue0.matchesAny(charArray0);
      tokenQueue0.chompToIgnoreCase("U6R~");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "";
      TokenQueue tokenQueue0 = new TokenQueue("");
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      assertFalse(tokenQueue0.isEmpty());
      
      tokenQueue0.chompBalanced('(', 'I');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      tokenQueue0.addFirst("");
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      tokenQueue0.consumeTo("       ");
      stringArray1[3] = "^/((.{1,2}/)+)";
      tokenQueue0.consumeToAny(stringArray1);
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      tokenQueue0.matchChomp("8dO'D{TX)p1\"y@41Y,");
      tokenQueue0.remainder();
      stringArray0[5] = "";
      tokenQueue0.matchChomp("");
      stringArray0[6] = "";
      stringArray0[7] = "";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.chompTo("");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consumeToAny(stringArray1);
      tokenQueue0.chompBalanced('{', 'G');
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.chompTo("");
      tokenQueue0.consumeCssIdentifier();
      TokenQueue.unescape("");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeElementSelector();
      String string0 = "org.jsoup.parser.TokenQueue";
      TokenQueue.escapeCssIdentifier("org.jsoup.parser.TokenQueue");
      tokenQueue0.toString();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("org.jsoup.internal.StringUtil$1");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("i_dIS");
      tokenQueue0.advance();
      tokenQueue0.chompTo("i_dIS");
      tokenQueue0.toString();
      tokenQueue0.matchChomp("OD41-9Y");
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = 'w';
      charArray0[2] = 'l';
      charArray0[3] = 's';
      charArray0[4] = 'Y';
      charArray0[5] = '2';
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }
}
