/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Nov 25 04:03:48 GMT 2023
 */

package io.lettuce.core;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class RedisURI_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "io.lettuce.core.RedisURI"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("user.dir", "/home/crhf/projects/apr-comp/experiment/functional-java-private/lettuce-core/bug-2/src"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(RedisURI_ESTest_scaffolding.class.getClassLoader() ,
      "reactor.core.publisher.MonoHide",
      "org.reactivestreams.Processor",
      "reactor.util.Loggers$Slf4JLogger",
      "reactor.core.publisher.MonoFilterFuseable",
      "reactor.core.publisher.MonoCallable",
      "reactor.core.publisher.MonoRepeat",
      "reactor.core.publisher.MonoSourceFuseable",
      "reactor.core.CoreSubscriber",
      "reactor.util.Loggers",
      "reactor.core.publisher.MonoFirstWithValue",
      "reactor.core.publisher.MonoDelayUntil",
      "reactor.core.publisher.SourceProducer",
      "reactor.core.publisher.AssemblyOp",
      "reactor.core.publisher.MonoPublishMulticast",
      "io.lettuce.core.RedisURI$Builder",
      "reactor.core.publisher.MonoSupplier",
      "reactor.core.publisher.MonoMaterialize",
      "reactor.core.publisher.MonoTimeout",
      "io.lettuce.core.SslVerifyMode",
      "reactor.core.publisher.FluxOnAssembly$CheckpointHeavySnapshot",
      "reactor.core.publisher.MonoCurrentContext",
      "reactor.core.publisher.MonoFilter",
      "reactor.core.publisher.MonoDoOnEach",
      "reactor.core.publisher.FluxCallable",
      "reactor.core.publisher.MonoContextWrite",
      "reactor.core.publisher.MonoPublishOn",
      "io.lettuce.core.RedisURI$1",
      "reactor.core.publisher.MonoRepeatWhen",
      "reactor.core.publisher.MonoDetach",
      "reactor.core.Fuseable",
      "reactor.core.publisher.MonoError",
      "reactor.core.publisher.MonoZip",
      "io.lettuce.core.internal.LettuceStrings",
      "io.lettuce.core.internal.LettuceSets",
      "io.lettuce.core.ConnectionPoint",
      "reactor.core.CorePublisher",
      "reactor.core.publisher.MonoRetryWhen",
      "reactor.core.publisher.MonoSingleCallable",
      "reactor.core.publisher.MonoIgnorePublisher",
      "reactor.core.publisher.SignalPeek",
      "reactor.core.Disposable",
      "reactor.core.Scannable",
      "reactor.core.publisher.MonoDoFirst",
      "reactor.core.publisher.MonoDelayElement",
      "reactor.core.publisher.MonoOnAssembly",
      "reactor.core.publisher.MonoDoFirstFuseable",
      "reactor.core.publisher.MonoSequenceEqual",
      "reactor.core.publisher.FluxFromMonoOperator",
      "reactor.core.publisher.MonoTimed",
      "io.lettuce.core.RedisCredentials",
      "reactor.core.publisher.MonoMapFuseable",
      "reactor.core.publisher.MonoNext",
      "reactor.core.publisher.MonoJust",
      "reactor.core.publisher.MonoCacheInvalidateWhen",
      "reactor.core.publisher.MonoPeekFuseable",
      "org.reactivestreams.Publisher",
      "reactor.core.publisher.MonoCacheInvalidateIf",
      "reactor.core.publisher.MonoDoOnEachFuseable",
      "reactor.core.publisher.Mono",
      "reactor.core.publisher.MonoExpand",
      "reactor.core.publisher.MonoSingleMono",
      "reactor.core.publisher.Flux",
      "reactor.core.publisher.MonoPeekTerminal",
      "reactor.core.publisher.MonoSource",
      "reactor.util.Loggers$Slf4JLoggerFactory",
      "reactor.core.publisher.MonoElapsed",
      "reactor.core.publisher.OptimizableOperator",
      "reactor.core.publisher.FluxOnAssembly$AssemblySnapshot",
      "io.lettuce.core.RedisCredentialsProvider",
      "reactor.core.publisher.OnNextFailureStrategy",
      "reactor.core.publisher.MonoFlatMapMany",
      "reactor.core.publisher.MonoLogFuseable",
      "reactor.core.publisher.MonoDelay",
      "reactor.core.publisher.MonoUsing",
      "reactor.core.publisher.MonoIgnoreElement",
      "reactor.core.publisher.Hooks",
      "reactor.core.publisher.MonoCompletionStage",
      "io.lettuce.core.internal.LettuceAssert",
      "reactor.core.publisher.MonoOnErrorResume",
      "reactor.core.publisher.MonoSubscribeOnCallable",
      "reactor.core.publisher.MonoFromFluxOperator",
      "reactor.util.Logger",
      "reactor.core.publisher.MonoRepeatPredicate",
      "reactor.core.publisher.FluxOnAssembly$MethodReturnSnapshot",
      "reactor.core.publisher.MonoDematerialize",
      "reactor.core.publisher.MonoSwitchIfEmpty",
      "reactor.core.publisher.MonoTakeUntilOther",
      "reactor.core.publisher.FluxOnAssembly$CheckpointLightSnapshot",
      "reactor.core.publisher.MonoErrorSupplied",
      "io.lettuce.core.StaticRedisCredentials",
      "io.lettuce.core.StaticCredentialsProvider",
      "io.lettuce.core.RedisURI",
      "io.lettuce.core.internal.HostAndPort",
      "reactor.core.publisher.MonoOperator",
      "reactor.core.publisher.MonoDeferContextual",
      "reactor.core.publisher.MonoIgnoreThen",
      "reactor.core.publisher.MonoHasElement",
      "reactor.core.publisher.MonoCreate",
      "reactor.core.publisher.MonoCacheTime",
      "reactor.core.publisher.MonoSubscribeOnValue",
      "reactor.core.publisher.MonoFlattenIterable",
      "io.lettuce.core.RedisCredentialsProvider$ImmediateRedisCredentialsProvider",
      "reactor.core.publisher.MonoMetricsFuseable",
      "reactor.core.publisher.MonoFirstWithSignal",
      "reactor.core.publisher.InternalMonoOperator",
      "reactor.core.publisher.MonoLog",
      "reactor.core.publisher.MonoSourceFluxFuseable",
      "reactor.core.publisher.MonoCancelOn",
      "org.reactivestreams.Subscriber",
      "reactor.core.publisher.MonoSubscribeOn",
      "reactor.core.publisher.MonoRetry",
      "reactor.core.publisher.MonoRunnable",
      "reactor.core.publisher.MonoSourceFlux",
      "reactor.core.publisher.MonoFilterWhen",
      "reactor.core.publisher.MonoProcessor",
      "reactor.core.publisher.MonoFromPublisher",
      "reactor.core.publisher.NextProcessor",
      "reactor.core.publisher.MonoPeek",
      "reactor.core.publisher.MonoDefaultIfEmpty",
      "reactor.core.publisher.MonoDelaySubscription",
      "reactor.core.publisher.MonoDoFinally",
      "reactor.core.publisher.MonoWhen",
      "reactor.core.publisher.MonoFlatMap",
      "reactor.core.publisher.MonoHandle",
      "reactor.core.publisher.MonoDefer",
      "reactor.core.publisher.MonoMetrics",
      "reactor.core.Fuseable$ScalarCallable",
      "org.reactivestreams.Subscription",
      "reactor.core.publisher.MonoMap",
      "reactor.core.publisher.MonoUsingWhen",
      "reactor.core.publisher.MonoHandleFuseable"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.function.Supplier", false, RedisURI_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(RedisURI_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "io.lettuce.core.RedisURI",
      "io.lettuce.core.RedisURI$Builder",
      "io.lettuce.core.SslVerifyMode",
      "kotlin.DeprecationLevel",
      "io.lettuce.core.internal.LettuceAssert",
      "io.lettuce.core.internal.LettuceStrings",
      "io.lettuce.core.StaticCredentialsProvider",
      "io.lettuce.core.StaticRedisCredentials",
      "reactor.core.publisher.Mono",
      "reactor.core.Scannable",
      "reactor.core.publisher.MonoJust",
      "reactor.util.Loggers$Slf4JLoggerFactory",
      "reactor.util.Loggers$Slf4JLogger",
      "reactor.util.Loggers",
      "reactor.core.publisher.Hooks",
      "io.lettuce.core.internal.LettuceSets",
      "io.lettuce.core.internal.HostAndPort"
    );
  }
}
