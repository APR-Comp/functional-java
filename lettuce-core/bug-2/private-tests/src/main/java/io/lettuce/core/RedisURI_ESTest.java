/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 04:03:48 GMT 2023
 */

package io.lettuce.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.lettuce.core.RedisCredentials;
import io.lettuce.core.RedisCredentialsProvider;
import io.lettuce.core.RedisURI;
import io.lettuce.core.SslVerifyMode;
import io.lettuce.core.StaticCredentialsProvider;
import io.lettuce.core.StaticRedisCredentials;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Month;
import java.time.OffsetDateTime;
import java.time.Period;
import java.time.ZonedDateTime;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RedisURI_ESTest extends RedisURI_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setDatabase(6379);
      redisURI0.setClientName("com.github.javaparser.ast.Node$BreadthFirstIterator");
      URI uRI0 = redisURI0.toURI();
      redisURI0.setHost("redis+tls");
      redisURI0.toString();
      redisURI0.equals(redisURI0);
      redisURI0.isSsl();
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider redisCredentialsProvider0 = RedisCredentialsProvider.from(supplier0);
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      redisURI0.equals(uRI0);
      assertEquals(6379, redisURI0.getDatabase());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("YHPZ~lQG:#", 31);
      Duration duration0 = Duration.ofMinutes(31);
      RedisURI.Builder.sentinel("YHPZ~lQG:#", "O#XJEjG[934dYs");
      Duration duration1 = duration0.minusSeconds(213L);
      duration0.withSeconds((-375L));
      redisURI_Builder0.withTimeout(duration0);
      RedisURI.Builder redisURI_Builder1 = RedisURI.Builder.socket("YHPZ~lQG:#");
      RedisURI redisURI0 = RedisURI.create("[Socket %s]", 0);
      redisURI0.setSentinelMasterId("[Socket %s]");
      redisURI_Builder0.withSentinel(redisURI0);
      String string0 = RedisURI.URI_SCHEME_REDIS_SECURE_ALT;
      redisURI_Builder1.withAuthentication("rediss", (CharSequence) "redis+ssl");
      RedisURI redisURI1 = new RedisURI("YHPZ~lQG:#", (-1715), duration1);
      redisURI0.applySsl(redisURI1);
      redisURI0.setSentinelMasterId("?:}ByR]LB2AKuhi");
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder0.withSsl(true);
      redisURI0.isVerifyPeer();
      RedisURI.Builder.sentinel("database", 6379);
      redisURI_Builder1.withStartTls(true);
      redisURI0.setStartTls(true);
      RedisURI.Builder redisURI_Builder3 = RedisURI.builder();
      redisURI0.toURI();
      redisURI0.getPort();
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      RedisURI.Builder redisURI_Builder4 = redisURI_Builder2.withVerifyPeer(sslVerifyMode0);
      assertNotSame(redisURI_Builder4, redisURI_Builder3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getSocket();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("verifyPeer");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withClientName("database");
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      redisURI_Builder1.withAuthentication("h&|0(yD&tS\"[Yg", charArray0);
      redisURI0.setHost("");
      charArray0[1] = 'N';
      charArray0[2] = '}';
      charArray0[3] = 'U';
      RedisURI.Builder.redis("redis+socket", 440);
      charArray0[4] = '.';
      redisURI_Builder1.withAuthentication("redis+tls", charArray0);
      redisURI0.setUsername("");
      redisURI0.setUsername("@/3MXM/('R:?6m`CZ");
      redisURI0.getHost();
      redisURI0.setSsl(true);
      Duration duration0 = Duration.ofNanos(26379);
      duration0.plusDays(440);
      redisURI0.setTimeout(duration0);
      assertEquals("@/3MXM/('R:?6m`CZ", redisURI0.getUsername());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      boolean boolean0 = true;
      redisURI0.setSsl(true);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      RedisURI redisURI1 = new RedisURI();
      RedisURI.builder(redisURI1);
      redisURI0.applyAuthentication(redisURI1);
      redisURI0.toURI();
      redisURI0.getPassword();
      redisURI0.toString();
      redisURI0.hashCode();
      // Undeclared exception!
      try { 
        RedisURI.create("", 6379);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI redisURI1 = new RedisURI();
      RedisURI.create("~S;GqvRVcdS*=gh9", 6379);
      redisURI0.equals(redisURI1);
      redisURI0.setUsername("db");
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI1);
      redisURI1.toString();
      redisURI1.applySsl(redisURI0);
      // Undeclared exception!
      try { 
        redisURI_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build a RedisURI. One of the following must be provided Host, Socket or Sentinel
         //
         verifyException("io.lettuce.core.RedisURI$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      URI uRI0 = MockURI.URI("redis+socket", ")}&4]uX=W8Pe?4<9Y!d", "rediss-sentinel");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Socket must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      String string0 = null;
      // Undeclared exception!
      try { 
        redisURI0.setPassword((CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Password must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("{k|/9>v~`0Vg", 0);
      assertEquals(0, redisURI0.getPort());
      
      redisURI0.setPort((-1507));
      redisURI0.getSentinelMasterId();
      RedisURI redisURI1 = RedisURI.create(">=l>0dLjOf=", 0);
      URI uRI0 = redisURI1.toURI();
      RedisURI redisURI2 = RedisURI.create(uRI0);
      redisURI0.applySsl(redisURI2);
      redisURI0.setDatabase(28);
      redisURI0.hashCode();
      assertEquals("{k|/9>v~`0Vg", redisURI0.getHost());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      RedisURI redisURI0 = new RedisURI("tXA$?6", 104, duration0);
      RedisURI redisURI1 = new RedisURI();
      boolean boolean0 = redisURI0.equals(redisURI1);
      assertFalse(redisURI1.isSsl());
      assertFalse(redisURI0.isStartTls());
      assertEquals(104, redisURI0.getPort());
      assertFalse(redisURI1.isStartTls());
      assertEquals("tXA$?6", redisURI0.getHost());
      assertFalse(redisURI0.isSsl());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getCredentialsProvider();
      RedisURI redisURI1 = RedisURI.create("redis+tls", 6379);
      redisURI1.setSocket("c!U:E7@MX5M!Pz");
      assertEquals(6379, redisURI1.getPort());
      assertFalse(redisURI1.isStartTls());
      assertEquals("redis+tls", redisURI1.getHost());
      assertEquals("c!U:E7@MX5M!Pz", redisURI1.getSocket());
      assertFalse(redisURI1.isSsl());
      
      redisURI0.setClientName("");
      String string0 = redisURI0.getSentinelMasterId();
      assertNull(string0);
      
      String string1 = redisURI0.getClientName();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L, 0L);
      RedisURI redisURI0 = new RedisURI("HWP`Gc", 98, duration0);
      redisURI0.setPassword("HWP`Gc");
      duration0.plusMinutes(0L);
      redisURI0.setUsername("-~rnhGPk!Y+$>");
      redisURI0.setHost("");
      redisURI0.isVerifyPeer();
      redisURI0.getUsername();
      redisURI0.getSentinelMasterId();
      RedisURI.Builder.socket("");
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 98, (-823));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setSocket("EkTTxp");
      redisURI0.setPort((-925));
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI0.setUsername("q");
      redisURI0.setDatabase(0);
      redisURI0.getTimeout();
      redisURI0.getClientName();
      redisURI0.setClientName(")>zdp-qwT!j}G+kZ6}");
      redisURI0.getPort();
      redisURI0.getSentinelMasterId();
      assertEquals((-925), redisURI0.getPort());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setStartTls(true);
      RedisURI redisURI1 = new RedisURI();
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      String string0 = "Hwo/j6wT!z3M";
      redisURI0.setSocket("Hwo/j6wT!z3M");
      redisURI1.setVerifyPeer(sslVerifyMode0);
      redisURI0.applySsl(redisURI1);
      redisURI0.applySsl(redisURI1);
      redisURI0.equals(redisURI1);
      redisURI1.setSentinelMasterId((String) null);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("redis-socket", "clientName");
      char[] charArray0 = null;
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withPassword((char[]) null);
      Supplier<RedisCredentials> supplier0 = null;
      redisURI_Builder1.withTimeout(redisURI1.DEFAULT_TIMEOUT_DURATION);
      redisURI1.setTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      // Undeclared exception!
      try { 
        RedisCredentialsProvider.from((Supplier<RedisCredentials>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplier must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setPort(79);
      redisURI0.setSocket("Cannot render URI for ");
      redisURI0.hashCode();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withHost("redis-sentinel");
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSsl(true);
      redisURI_Builder2.withSentinelMasterId("redis-sentinel");
      assertEquals(79, redisURI0.getPort());
      assertEquals("Cannot render URI for ", redisURI0.getSocket());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisCredentialsProvider redisCredentialsProvider0 = redisURI0.getCredentialsProvider();
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<RedisCredentials> supplier1 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier1);
      redisURI0.setPassword("F");
      redisURI0.setUsername("BIT_OR");
      RedisCredentialsProvider.from(supplier0);
      Supplier<RedisCredentials> supplier2 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier2);
      redisURI0.getCredentialsProvider();
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      redisURI0.isVerifyPeer();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      redisURI_Builder0.withTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI_Builder0.withAuthentication(redisURI0);
      // Undeclared exception!
      try { 
        redisURI0.setPassword("F");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot configure password after setting a RedisCredentialsProvider
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RedisURI.Builder.sentinel("aiO4ph");
      RedisURI redisURI0 = new RedisURI();
      redisURI0.toURI();
      redisURI0.getPort();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("redis+tls", "redis");
      redisURI0.setClientName("z^~t->*aZXr5_y)@|");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withVerifyPeer(false);
      redisURI0.toString();
      redisURI0.getClientName();
      redisURI_Builder0.withAuthentication(redisURI0);
      redisURI0.getVerifyMode();
      redisURI0.setDatabase(0);
      redisURI0.getDatabase();
      redisURI0.getCredentialsProvider();
      // Undeclared exception!
      try { 
        redisURI_Builder1.withPort(446);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Host is null. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = '~';
      charArray0[2] = '{';
      charArray0[3] = 'Z';
      charArray0[4] = '?';
      charArray0[5] = '4';
      charArray0[6] = 'w';
      charArray0[7] = 'g';
      redisURI0.setPassword(charArray0);
      redisURI0.setHost("    ");
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      redisURI0.setStartTls(false);
      redisURI0.setPassword("");
      redisURI0.getPassword();
      redisURI0.getTimeout();
      RedisURI.Builder redisURI_Builder1 = RedisURI.builder();
      assertNotSame(redisURI_Builder1, redisURI_Builder0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("_.89n.,BON4!.");
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = 'p';
      charArray0[2] = 'k';
      charArray0[3] = ':';
      redisURI_Builder0.withAuthentication("_.89n.,BON4!.", charArray0);
      RedisURI redisURI0 = redisURI_Builder0.build();
      redisURI0.setDatabase(61);
      redisURI0.toURI();
      RedisURI.Builder redisURI_Builder1 = RedisURI.Builder.redis("p>'xTAH*]V,+?");
      assertNotSame(redisURI_Builder1, redisURI_Builder0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Duration duration0 = RedisURI.DEFAULT_TIMEOUT_DURATION;
      RedisURI redisURI0 = new RedisURI("T# KhezO -}?eLs4", 0, duration0);
      boolean boolean0 = redisURI0.equals((Object) null);
      assertFalse(boolean0);
      
      redisURI0.setSentinelMasterId("");
      String string0 = redisURI0.getClientName();
      assertNull(string0);
      
      duration0.toMillis();
      redisURI0.setClientName((String) null);
      String string1 = redisURI0.getSentinelMasterId();
      assertEquals("", string1);
      
      RedisURI redisURI1 = RedisURI.create("W-2S!yGt4rg", 6379);
      redisURI0.applyAuthentication(redisURI1);
      redisURI1.setSentinelMasterId((String) null);
      String string2 = redisURI1.getSocket();
      assertFalse(redisURI1.isSsl());
      assertEquals(0, redisURI1.getDatabase());
      assertEquals(6379, redisURI1.getPort());
      assertEquals("W-2S!yGt4rg", redisURI1.getHost());
      assertFalse(redisURI1.isStartTls());
      assertNull(string2);
      
      redisURI0.getPassword();
      assertEquals("T# KhezO -}?eLs4", redisURI0.getHost());
      assertFalse(redisURI0.isSsl());
      assertEquals(0, redisURI0.getPort());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setDatabase(64);
      redisURI0.getSocket();
      URI uRI0 = redisURI0.toURI();
      RedisURI redisURI1 = RedisURI.create(uRI0);
      redisURI0.setStartTls(false);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = '<';
      charArray0[2] = '[';
      charArray0[3] = '0';
      redisURI_Builder0.withPassword(charArray0);
      redisURI_Builder0.withSentinel("sentinelMasterId");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinelMasterId("redis+tls");
      redisURI0.setVerifyPeer(false);
      redisURI0.applySsl(redisURI1);
      redisURI0.setStartTls(false);
      redisURI0.toString();
      redisURI_Builder0.withSentinel("redis-sentinel", 6379);
      redisURI0.getHost();
      redisURI_Builder0.withSsl(false);
      redisURI0.getDatabase();
      redisURI0.getSentinelMasterId();
      RedisURI.Builder.sentinel("EXCEPTION", 6379);
      redisURI1.toURI();
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSentinel("redis", 6379);
      assertSame(redisURI_Builder1, redisURI_Builder2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      RedisURI.Builder.redis("redis+ssl", 26379);
      redisURI0.toString();
      redisURI0.toString();
      redisURI_Builder0.withSsl(true);
      redisURI0.setSentinelMasterId("rediss-sentinel");
      RedisURI.builder();
      redisURI0.setVerifyPeer(true);
      redisURI0.setPassword((CharSequence) "redis://null");
      redisURI0.setSsl(true);
      String string0 = "\\uk_jh:,=,";
      redisURI0.setSentinelMasterId(string0);
      redisURI0.hashCode();
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'z';
      redisURI0.setPassword(charArray0);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 2942;
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.minusMillis(2942);
      RedisURI redisURI0 = new RedisURI("Port out of range: %s", 2942, duration0);
      duration0.plusMinutes(6379);
      duration1.plusSeconds(26379);
      duration0.minus(duration1);
      redisURI0.setVerifyPeer(true);
      redisURI0.setStartTls(false);
      Duration.ofMinutes(2147483647L);
      // Undeclared exception!
      try { 
        redisURI0.applyAuthentication((RedisURI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source RedisURI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("redis", 1633);
      URI uRI0 = redisURI0.toURI();
      RedisURI redisURI1 = RedisURI.create(uRI0);
      boolean boolean0 = redisURI1.isStartTls();
      boolean boolean1 = redisURI1.isVerifyPeer();
      assertFalse(boolean1 == boolean0);
      assertEquals("redis://redis:1633", uRI0.toString());
      
      redisURI0.getSocket();
      int int0 = redisURI0.getDatabase();
      assertEquals(0, int0);
      
      redisURI0.setSocket((String) null);
      assertTrue(redisURI0.equals((Object)redisURI1));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("W^jk#{&Uq8S");
      RedisURI redisURI0 = redisURI_Builder0.build();
      redisURI0.toURI();
      redisURI0.getCredentialsProvider();
      redisURI_Builder0.withVerifyPeer(false);
      URI uRI0 = MockURI.URI("redis+ssl", "redis-sentinel", "verifyPeer");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid URI, cannot get host or socket part
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider redisCredentialsProvider0 = RedisCredentialsProvider.from(supplier0);
      redisURI_Builder0.withAuthentication(redisCredentialsProvider0);
      // Undeclared exception!
      try { 
        redisURI0.setPassword((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Password must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("c6PM.w>%", 694);
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'k';
      charArray0[2] = '@';
      charArray0[3] = '(';
      charArray0[4] = '5';
      charArray0[5] = 'W';
      charArray0[6] = 'y';
      charArray0[7] = 'g';
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider("redis-sentinel", charArray0);
      redisURI0.setCredentialsProvider(staticCredentialsProvider0);
      redisURI0.getPort();
      // Undeclared exception!
      try { 
        redisURI0.setPassword("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot configure password after setting a RedisCredentialsProvider
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withVerifyPeer(false);
      RedisURI redisURI0 = new RedisURI();
      char[] charArray0 = new char[0];
      redisURI_Builder0.withPassword(charArray0);
      redisURI_Builder1.withSentinel("7JRz6?6WzFL", 0);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSsl(redisURI0);
      RedisURI.Builder.sentinel("`Nbng(7Kz=3TIm", 0);
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withSentinel("redis-sentinel", 6379);
      redisURI_Builder2.withSentinel(redisURI0);
      redisURI0.setPassword((CharSequence) "");
      redisURI_Builder3.build();
      redisURI_Builder3.withVerifyPeer(false);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "oZuY";
      RedisURI redisURI0 = RedisURI.create("oZuY", 0);
      redisURI0.setSsl(true);
      redisURI0.setSocket("oZuY");
      redisURI0.isSsl();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI_Builder0.withStartTls(false);
      SslVerifyMode sslVerifyMode1 = SslVerifyMode.FULL;
      RedisURI.Builder.sentinel("ms", 0);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withVerifyPeer(sslVerifyMode1);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSentinel("yG71&~lH");
      redisURI0.getTimeout();
      // Undeclared exception!
      try { 
        redisURI_Builder2.withHost("redis+socket");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sentinels are non-empty. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setUsername("");
      redisURI0.setVerifyPeer(false);
      redisURI0.isVerifyPeer();
      redisURI0.isStartTls();
      redisURI0.getSentinelMasterId();
      RedisURI.builder();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("P+J7ltLbk[vmDy?z%G/");
      redisURI0.isVerifyPeer();
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = 'J';
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withAuthentication("C^~", charArray0);
      assertSame(redisURI_Builder0, redisURI_Builder1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "T";
      URI uRI0 = MockURI.URI("redis+ssl", "T", "redis+ssl");
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid URI, cannot get host or socket part
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setUsername("F_g `V:1hoxE");
      redisURI0.setPort(223);
      String string0 = RedisURI.PARAMETER_NAME_DATABASE;
      redisURI0.setPassword((CharSequence) "database");
      redisURI0.setVerifyPeer(true);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI0.setUsername("database");
      redisURI0.toString();
      redisURI0.toString();
      redisURI0.setPort(58);
      redisURI0.setUsername("redis+ssl");
      redisURI0.getPassword();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("*.", "sentinelMasterId");
      redisURI_Builder0.withPassword((CharSequence) "timeout");
      redisURI0.getPassword();
      RedisURI.builder(redisURI0);
      redisURI_Builder0.withSentinel("redis-socket", 0, (CharSequence) "redis");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withHost("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sentinels are non-empty. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "Fc+SC[s/";
      RedisURI redisURI0 = RedisURI.create("Fc+SC[s/", 1821);
      RedisURI.builder(redisURI0);
      redisURI0.setClientName("#E&Taye^/");
      redisURI0.toURI();
      redisURI0.setClientName("Fc+SC[s/");
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("zIZ\fO");
      redisURI0.setPort(65535);
      RedisURI.Builder.socket("#E&Taye^/");
      redisURI_Builder0.withPassword((CharSequence) "redis+socket");
      redisURI0.getVerifyMode();
      redisURI0.toURI();
      redisURI0.setSocket(" gU)3%_8Y");
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      char[] charArray0 = new char[5];
      redisURI0.setSocket("db=");
      charArray0[0] = '2';
      charArray0[1] = 'I';
      charArray0[2] = 'x';
      charArray0[3] = '=';
      charArray0[4] = '';
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider("", charArray0);
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier0);
      redisURI0.setCredentialsProvider(staticCredentialsProvider0);
      redisURI0.toURI();
      redisURI0.getCredentialsProvider();
      redisURI0.setStartTls(false);
      String string0 = RedisURI.URI_SCHEME_REDIS_SECURE_ALT;
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      // Undeclared exception!
      try { 
        redisURI0.setPassword((CharSequence) "redis+ssl");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot configure password after setting a RedisCredentialsProvider
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI redisURI1 = new RedisURI("`5pa9maby", 6379, redisURI0.DEFAULT_TIMEOUT_DURATION);
      boolean boolean0 = redisURI0.equals(redisURI1);
      assertFalse(boolean0);
      assertEquals("`5pa9maby", redisURI1.getHost());
      assertFalse(redisURI1.isStartTls());
      assertFalse(redisURI0.isStartTls());
      assertFalse(redisURI1.isSsl());
      assertEquals(6379, redisURI1.getPort());
      assertFalse(redisURI0.isSsl());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinelMasterId("Port out of range: %s");
      int int0 = 0;
      redisURI_Builder1.withDatabase(0);
      // Undeclared exception!
      try { 
        redisURI_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build a RedisURI. One of the following must be provided Host, Socket or Sentinel
         //
         verifyException("io.lettuce.core.RedisURI$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("$yeA)6>N|F#?'}");
      RedisURI redisURI0 = redisURI_Builder0.build();
      RedisURI.builder();
      RedisCredentialsProvider redisCredentialsProvider0 = redisURI0.getCredentialsProvider();
      redisURI_Builder0.withAuthentication(redisCredentialsProvider0);
      RedisURI redisURI1 = redisURI_Builder0.build();
      redisURI_Builder0.withSsl(redisURI1);
      assertFalse(redisURI1.isSsl());
      assertEquals(0, redisURI1.getDatabase());
      assertEquals(6379, redisURI1.getPort());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("Z}-b");
      RedisURI redisURI0 = RedisURI.create("Z}-b", 104);
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider redisCredentialsProvider0 = RedisCredentialsProvider.from(supplier0);
      Supplier<RedisCredentials> supplier1 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider redisCredentialsProvider1 = RedisCredentialsProvider.from(supplier1);
      RedisURI redisURI1 = new RedisURI("sentinelMasterId", 31, redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.applyAuthentication(redisURI1);
      Supplier<RedisCredentials> supplier2 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<RedisCredentials> supplier3 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      redisURI_Builder0.withAuthentication(redisCredentialsProvider1);
      RedisCredentialsProvider.from(supplier3);
      RedisCredentialsProvider redisCredentialsProvider2 = RedisCredentialsProvider.from(supplier2);
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      Supplier<RedisCredentials> supplier4 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier4);
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      redisURI1.applyAuthentication(redisURI0);
      Supplier<RedisCredentials> supplier5 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier5);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withAuthentication(redisCredentialsProvider2);
      int int0 = 3;
      // Undeclared exception!
      try { 
        redisURI_Builder1.withHost("db");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sentinels are non-empty. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setHost(";;y/S~O[BTX1Er0t");
      RedisURI redisURI1 = new RedisURI();
      redisURI0.applyAuthentication(redisURI1);
      redisURI0.setPort(0);
      RedisURI.create("rediss", 0);
      int int0 = 58;
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("redis-sentinel", 58);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI1.setVerifyPeer(sslVerifyMode0);
      redisURI0.getPort();
      redisURI1.setTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      RedisURI redisURI2 = redisURI_Builder0.build();
      redisURI2.toURI();
      int int1 = 66;
      redisURI_Builder0.withSentinelMasterId("redis");
      // Undeclared exception!
      try { 
        RedisURI.create("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      String string0 = "";
      redisURI0.setPassword((CharSequence) "");
      redisURI0.setUsername("");
      redisURI0.setClientName("");
      redisURI0.setPassword((CharSequence) "");
      redisURI0.toString();
      int int0 = (-1502);
      redisURI0.setPort((-1502));
      redisURI0.getCredentialsProvider();
      String string1 = ")j:3bH'7Uwqx;h";
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("", ")j:3bH'7Uwqx;h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      Duration duration0 = Duration.ofMillis((-527L));
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withTimeout(duration0);
      String string0 = "";
      // Undeclared exception!
      try { 
        redisURI_Builder1.withSentinel("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.isStartTls();
      redisURI0.setClientName("");
      redisURI0.setPassword("");
      redisURI0.getHost();
      RedisURI redisURI1 = RedisURI.create("cRE5!CK_5", 6379);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSsl(redisURI1);
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider redisCredentialsProvider0 = RedisCredentialsProvider.from(supplier0);
      redisURI_Builder1.withAuthentication(redisCredentialsProvider0);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder0.withSsl(false);
      redisURI_Builder0.withSentinel("sentinelMasterId", 26379, (CharSequence) null);
      redisURI_Builder2.withTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.setTimeout(redisURI1.DEFAULT_TIMEOUT_DURATION);
      redisURI1.setSsl(false);
      // Undeclared exception!
      try { 
        RedisURI.create((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.isVerifyPeer();
      redisURI0.setSocket("io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage$CompletionStageHandler");
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("?:", 26379);
      String string0 = RedisURI.URI_SCHEME_REDIS_SENTINEL_SECURE;
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("A)a Jl`PUL+gx)rH_(", 26379);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot use with Redis mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("redis-sentinel", 26379, "redis+ssl");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withHost("redis+tls");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sentinels are non-empty. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setStartTls(false);
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider redisCredentialsProvider0 = RedisCredentialsProvider.from(supplier0);
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        redisURI0.setPassword((char[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot configure password after setting a RedisCredentialsProvider
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Duration duration0 = RedisURI.DEFAULT_TIMEOUT_DURATION;
      String string0 = RedisURI.URI_SCHEME_REDIS_SENTINEL_SECURE;
      redisURI0.setPassword((CharSequence) "rediss-sentinel");
      Duration.ofMinutes(3920L);
      redisURI0.setTimeout(duration0);
      redisURI0.setSentinelMasterId("bQFsX&3EcT^LB");
      // Undeclared exception!
      try { 
        redisURI0.setDatabase((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid database number: -1
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create(":mC0-y/18BqI", 52);
      URI uRI0 = redisURI0.toURI();
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"18BqI:52\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("%2F", 1);
      StaticRedisCredentials staticRedisCredentials0 = new StaticRedisCredentials("redis+ssl", (char[]) null);
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider(staticRedisCredentials0);
      redisURI0.setCredentialsProvider(staticCredentialsProvider0);
      redisURI0.setSentinelMasterId("%2F");
      redisURI0.setDatabase(1);
      RedisURI redisURI1 = RedisURI.create(";>24kRQLP", 26379);
      redisURI1.getSentinels();
      RedisURI.Builder.sentinel("u~");
      redisURI0.getCredentialsProvider();
      RedisURI.builder(redisURI0);
      assertEquals(1, redisURI0.getDatabase());
      
      redisURI1.setSsl(false);
      assertEquals(";>24kRQLP", redisURI1.getHost());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.toString();
      redisURI0.setVerifyPeer(false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '0';
      redisURI0.setPassword(charArray0);
      redisURI0.getUsername();
      redisURI0.getClientName();
      RedisURI redisURI1 = new RedisURI("i2ecUG,ivz83_Y", 54, redisURI0.DEFAULT_TIMEOUT_DURATION);
      assertFalse(redisURI0.isVerifyPeer());
      
      redisURI0.applySsl(redisURI1);
      assertEquals("i2ecUG,ivz83_Y", redisURI1.getHost());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("reactor.core.publisher.Mono", 0);
      URI uRI0 = redisURI0.toURI();
      URI uRI1 = MockURI.normalize(uRI0);
      RedisURI.create(uRI1);
      String string0 = "+73)PLI~V|fM jZ4Fu&";
      redisURI0.setVerifyPeer(true);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("+73)PLI~V|fM jZ4Fu&", 2377, "EapZw]C55");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withDatabase(65535);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSentinel("P*qh3EW(6v`<Yur!", 26379);
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withStartTls(false);
      redisURI_Builder2.withSsl(false);
      // Undeclared exception!
      try { 
        redisURI_Builder3.withAuthentication((RedisCredentialsProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RedisCredentialsProvider must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RedisURI.Builder.redis("'>-^yvq");
      RedisURI.Builder.sentinel("'>-^yvq", 65535);
      // Undeclared exception!
      try { 
        RedisURI.create("L!&{'1JGL,[Coe,Xs`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 3: L!&{'1JGL,[Coe,Xs`
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-751);
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("D^'9V'7D$k+V6=YX{", (-751), "D^'9V'7D$k+V6=YX{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -751
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RedisURI redisURI0 = null;
      // Undeclared exception!
      try { 
        RedisURI.builder((RedisURI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source RedisURI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("#!K{U", 27);
      Duration duration0 = Duration.ofMinutes(0L);
      duration0.toMinutes();
      redisURI0.setTimeout(duration0);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      redisURI0.toURI();
      redisURI0.setSentinelMasterId("#!K{U");
      redisURI_Builder0.withVerifyPeer(false);
      redisURI_Builder0.withAuthentication("ZBj/&3NQ&82rH", (CharSequence) "rediss");
      redisURI0.getPort();
      redisURI0.setVerifyPeer(true);
      redisURI_Builder0.withDatabase(27);
      // Undeclared exception!
      try { 
        redisURI0.setCredentialsProvider((RedisCredentialsProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RedisCredentialsProvider must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getCredentialsProvider();
      // Undeclared exception!
      try { 
        redisURI0.applySsl((RedisURI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source RedisURI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "else ";
      RedisURI redisURI0 = RedisURI.create("else ", 1555);
      redisURI0.getPort();
      redisURI0.getCredentialsProvider();
      URI uRI0 = redisURI0.toURI();
      RedisURI.create(uRI0);
      RedisURI.builder(redisURI0);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      redisURI_Builder0.withSentinel("()");
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      redisURI_Builder0.withVerifyPeer(sslVerifyMode0);
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("");
      Duration duration0 = Duration.ofMillis(0);
      RedisURI redisURI0 = new RedisURI("_A#_", 0, duration0);
      Duration duration1 = duration0.plusHours((-1805L));
      redisURI0.setPassword("n{w0!48");
      redisURI0.getVerifyMode();
      redisURI_Builder0.withVerifyPeer(false);
      redisURI0.setSsl(false);
      redisURI0.getHost();
      redisURI_Builder0.withVerifyPeer(true);
      RedisURI.builder();
      redisURI0.hashCode();
      // Undeclared exception!
      try { 
        redisURI0.setTimeout(duration1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout must be greater or equal 0
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("NzW&Ak?R>", 0);
      char[] charArray0 = new char[0];
      redisURI0.setVerifyPeer(false);
      redisURI0.setPassword(charArray0);
      int int0 = redisURI0.getPort();
      assertFalse(redisURI0.isVerifyPeer());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "5";
      int int0 = 5229;
      RedisURI redisURI0 = RedisURI.create("5", 5229);
      redisURI0.toURI();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      String string1 = "";
      redisURI_Builder0.withPort(5229);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, 6379, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("timeout");
      RedisURI.Builder.sentinel("L", 138);
      Duration duration0 = Duration.ofSeconds(0L, 0L);
      redisURI_Builder0.withTimeout(duration0);
      redisURI_Builder0.withVerifyPeer(false);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("L");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot use with Redis mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("com.github.javaparser.ast.expr.DoubleLiteralExpr", 533);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinelMasterId("com.github.javaparser.ast.expr.DoubleLiteralExpr");
      redisURI_Builder1.withPassword((CharSequence) "com.github.javaparser.ast.expr.DoubleLiteralExpr");
      URI uRI0 = MockURI.create("com.github.javaparser.ast.expr.DoubleLiteralExpr");
      URI uRI1 = MockURI.normalize(uRI0);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.builder();
      RedisURI.builder();
      URI uRI0 = redisURI0.toURI();
      assertEquals("redis://null", uRI0.toString());
      
      redisURI0.getCredentialsProvider();
      Duration duration0 = Duration.ofHours(26379);
      Duration.ofMillis(9223372036854775807L);
      duration0.toMillis();
      redisURI0.setTimeout(duration0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      String string0 = redisURI0.getHost();
      assertNull(string0);
      
      redisURI0.hashCode();
      URI uRI1 = redisURI0.toURI();
      assertEquals("redis://null?timeout=94964400s", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("!e1y", 3398);
      redisURI0.setHost("!e1y");
      RedisURI.builder();
      redisURI0.setDatabase(3398);
      char[] charArray0 = new char[0];
      redisURI0.setPassword(charArray0);
      redisURI0.setPassword((CharSequence) "!e1y");
      redisURI0.setSocket((String) null);
      redisURI0.toString();
      // Undeclared exception!
      try { 
        RedisURI.Builder.redis((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setClientName((String) null);
      redisURI0.getDatabase();
      redisURI0.getPassword();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("redis-socket");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      boolean boolean0 = true;
      redisURI0.getCredentialsProvider();
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSsl(true);
      redisURI_Builder2.withPassword((char[]) null);
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withClientName("y|");
      redisURI_Builder3.withPassword((char[]) null);
      String string0 = "/M28";
      // Undeclared exception!
      try { 
        redisURI_Builder3.withSentinel((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Duration duration0 = Duration.ofMillis(0L);
      RedisURI redisURI0 = new RedisURI(":z", 0, duration0);
      redisURI0.getCredentialsProvider();
      redisURI0.toString();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withAuthentication("verifyPeer", (CharSequence) "verifyPeer");
      assertSame(redisURI_Builder0, redisURI_Builder1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("#\"(n", 0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = '^';
      charArray0[2] = '\'';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.put(charArray0, 0, 0);
      charBuffer0.put(charArray0, 0, 0);
      redisURI_Builder0.withAuthentication("#\"(n", (CharSequence) charBuffer0);
      charArray0[3] = 'K';
      charArray0[4] = 'x';
      charArray0[5] = 'G';
      charArray0[6] = 'O';
      redisURI_Builder0.withPassword(charArray0);
      RedisURI redisURI0 = RedisURI.create("#\"(n", 15);
      redisURI0.hashCode();
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI0.setClientName("#\"(n");
      redisURI0.getPassword();
      assertEquals("#\"(n", redisURI0.getHost());
      assertEquals("#\"(n", redisURI0.getClientName());
      assertFalse(redisURI0.isStartTls());
      assertEquals(15, redisURI0.getPort());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: \"
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setSocket("");
      // Undeclared exception!
      try { 
        redisURI0.toURI();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot render URI for redis-socket://
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        RedisURI.create("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Duration duration0 = Duration.ofHours((-398L));
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("aY4.uhh%[,3vPW", 709, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout duration must be greater or equal to zero
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "=,mV`qT4MrH";
      Duration duration0 = Duration.ofNanos(0L);
      RedisURI redisURI0 = new RedisURI("=,mV`qT4MrH", 0, duration0);
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      URI uRI2 = MockURI.relativize(uRI1, uRI0);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("`+NQL>:~?jt_dk>", 3052374);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: 3052374
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      String string0 = RedisURI.URI_SCHEME_REDIS_TLS_ALT;
      RedisCredentials redisCredentials0 = RedisCredentials.just((String) null, (CharSequence) "redis+tls");
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider(redisCredentials0);
      redisURI0.setCredentialsProvider(staticCredentialsProvider0);
      redisURI0.setSsl(false);
      boolean boolean0 = true;
      redisURI0.setStartTls(true);
      URI uRI0 = redisURI0.toURI();
      redisURI0.getTimeout();
      Object object0 = new Object();
      redisURI0.equals(object0);
      redisURI0.isStartTls();
      RedisURI redisURI1 = RedisURI.create(uRI0);
      // Undeclared exception!
      try { 
        redisURI0.applyAuthentication(redisURI1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot configure password after setting a RedisCredentialsProvider
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI redisURI1 = new RedisURI("db", 6379, redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI1.applySsl(redisURI0);
      redisURI0.applySsl(redisURI1);
      RedisURI.builder();
      redisURI1.setPassword("redis-sentinel");
      redisURI0.getPort();
      RedisCredentialsProvider redisCredentialsProvider0 = redisURI0.getCredentialsProvider();
      redisURI1.setCredentialsProvider(redisCredentialsProvider0);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      redisURI0.getVerifyMode();
      redisURI1.applyAuthentication(redisURI0);
      redisURI1.toString();
      redisURI_Builder0.withSentinel("c@b;N:DL^t/bTT3d*t");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withPort(6379);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Host is null. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      RedisURI redisURI0 = new RedisURI("lg}", 2556, duration0);
      redisURI0.getSocket();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("lg}", 26379, "clientName");
      RedisURI.Builder.sentinel("verifyPeer", 6379);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withStartTls(false);
      redisURI_Builder1.withVerifyPeer(false);
      String string0 = null;
      // Undeclared exception!
      try { 
        redisURI0.toString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      RedisURI redisURI0 = RedisURI.create("iM#", 0);
      redisURI0.setUsername("");
      redisURI0.getUsername();
      redisURI0.setVerifyPeer(true);
      redisURI0.toURI();
      Duration duration0 = Duration.ofDays(0);
      Duration.ofMinutes(0L);
      redisURI0.setTimeout(duration0);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("redis+socket", 0);
      redisURI_Builder0.withClientName("timeout");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("ForStmt", 0, (CharSequence) "rediss");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot use with Redis mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "b%/!2g)'rL88";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("b%/!2g)'rL88");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSsl((RedisURI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source RedisURI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("f;oe:co]NW.+1!<", 0);
      redisURI0.getDatabase();
      URI uRI0 = redisURI0.toURI();
      assertEquals("redis://f%3Boe%3Aco%5DNW.%2B1%21%3C:0", uRI0.toString());
      
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("f;oe:co]NW.+1!<");
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI_Builder0.withStartTls(false);
      redisURI_Builder0.withVerifyPeer(sslVerifyMode0);
      redisURI_Builder0.withSentinel("sentinelMasterId", 0, (CharSequence) "sentinelMasterId");
      redisURI_Builder0.withSentinel("db", 2465, (CharSequence) "timeout");
      redisURI0.hashCode();
      redisURI0.getSentinels();
      assertEquals("f;oe:co]NW.+1!<", redisURI0.getHost());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("xvOvtd#9f U;C,c]|#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in fragment at index 9: xvOvtd#9f U;C,c]|#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "";
      URI uRI0 = MockURI.create("");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("");
      redisURI_Builder0.withVerifyPeer(true);
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getSentinelMasterId();
      redisURI0.getSentinels();
      redisURI_Builder0.withStartTls(true);
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      Duration duration0 = chronoUnit0.getDuration();
      duration0.negated();
      redisURI0.setTimeout(duration0);
      // Undeclared exception!
      try { 
        redisURI0.setTimeout((Duration) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RedisURI.builder();
      // Undeclared exception!
      try { 
        RedisURI.create("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      RedisURI.builder();
      // Undeclared exception!
      try { 
        MockURI.create(">%XEJqDB1%TW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: >%XEJqDB1%TW
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      redisURI_Builder0.withHost(" *-woSsIL1SMy86tY");
      Duration duration0 = Duration.ofMinutes(0L);
      redisURI_Builder0.withTimeout(duration0);
      Duration duration1 = Duration.ofMinutes(0L);
      redisURI_Builder0.withTimeout(duration1);
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getSentinels();
      redisURI0.getPassword();
      assertFalse(redisURI0.isStartTls());
      assertFalse(redisURI0.isSsl());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "-";
      int int0 = (-298);
      // Undeclared exception!
      try { 
        RedisURI.Builder.redis("-", (-298));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -298
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      URI uRI0 = null;
      try { 
        MockURI.URI("", "", "", 0, "FINAL", "", "FINAL");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://@:0FINAL?#FINAL
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("\"ej*L|f8t3-4?#O)v");
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = 'K';
      charArray0[2] = '';
      charArray0[3] = 'I';
      StaticRedisCredentials staticRedisCredentials0 = new StaticRedisCredentials("_cp[V^_", charArray0);
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider(staticRedisCredentials0);
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      char[] charArray1 = new char[8];
      charArray1[0] = '';
      charArray1[1] = '*';
      charArray1[2] = 'I';
      charArray1[3] = 'I';
      charArray1[4] = 'I';
      charArray1[5] = 'K';
      charArray1[6] = 'I';
      charArray1[7] = '#';
      RedisCredentials.just("[", charArray1);
      RedisCredentialsProvider.from(supplier0);
      redisURI_Builder0.withAuthentication((RedisCredentialsProvider) staticCredentialsProvider0);
      redisURI_Builder0.withStartTls(true);
      // Undeclared exception!
      try { 
        RedisURI.create("tkh][eDl,", (-3396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -3396
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        MockURI.URI("2h", "2h", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 2h:2h#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("q.%{Xu");
      Duration duration0 = Duration.ofSeconds(9223372036854775807L);
      RedisURI redisURI0 = new RedisURI("q.%{Xu", 2561, duration0);
      redisURI_Builder0.withSsl(redisURI0);
      assertEquals("q.%{Xu", redisURI0.getHost());
      assertEquals(2561, redisURI0.getPort());
      assertFalse(redisURI0.isSsl());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel((String) null, 3025);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme file not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      String string0 = RedisURI.URI_SCHEME_REDIS_SENTINEL;
      redisURI0.setPassword((CharSequence) "redis-sentinel");
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("Cannot render URI for ", 6379);
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = 'u';
      charArray0[2] = 's';
      charArray0[3] = '}';
      charArray0[4] = 'q';
      charArray0[5] = '8';
      charArray0[6] = 'U';
      charArray0[7] = 'S';
      charArray0[8] = 'P';
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withPassword(charArray0);
      assertSame(redisURI_Builder1, redisURI_Builder0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RedisURI.Builder.socket("");
      // Undeclared exception!
      try { 
        RedisURI.create("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getCredentialsProvider();
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      // Undeclared exception!
      try { 
        redisURI0.setPassword((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Password must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("BIT_AND");
      RedisURI redisURI0 = new RedisURI();
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withDatabase(26379);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withStartTls(false);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withVerifyPeer(sslVerifyMode0);
      RedisURI.Builder.sentinel("redis-sentinel", "tyy");
      redisURI_Builder2.withSentinel(redisURI0);
      redisURI_Builder3.withSsl(false);
      redisURI0.setClientName((String) null);
      try { 
        MockURI.URI("X6xgN55#a`1h{[j(ee", "com.github.javaparser.ast.type.ArrayType$ArrayBracketPair", "redis", 6379, "", "closeStaleConnections() count before expiring: {}", " not supported");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in fragment at index 9: X6xgN55#a`1h{[j(ee://com.github.javaparser.ast.type.ArrayType$ArrayBracketPair@redis:6379?closeStaleConnections()%20count%20before%20expiring:%20%7B%7D#%20not%20supported
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = (-665);
      Duration duration0 = null;
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("&", (-665), (Duration) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout duration must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RedisURI.create("database=", 0);
      // Undeclared exception!
      try { 
        RedisURI.create("redis+socket");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        RedisURI.Builder.socket((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Socket must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "ofUOl[4<x=SI~XB@";
      try { 
        MockURI.URI("", "", "", "", "ofUOl[4<x=SI~XB@");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#ofUOl[4%3Cx=SI~XB@
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      URI uRI0 = MockURI.URI("F(O8");
      URI uRI1 = MockURI.normalize(uRI0);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "skip";
      int int0 = 683;
      RedisURI redisURI0 = RedisURI.create("skip", 683);
      redisURI0.setDatabase(683);
      redisURI0.setPassword((CharSequence) "skip");
      redisURI0.getVerifyMode();
      boolean boolean0 = true;
      redisURI0.setStartTls(true);
      redisURI0.toURI();
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("Exceeded maximum number of repeats");
      int int0 = 5;
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinel("Exceeded maximum number of repeats", 5);
      String string0 = null;
      int int1 = 294;
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      chronoUnit0.getDuration();
      String string1 = "";
      // Undeclared exception!
      try { 
        redisURI_Builder1.withHost("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sentinels are non-empty. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "TdI]5C6hXP23x[";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("TdI]5C6hXP23x[");
      redisURI_Builder0.withSentinelMasterId("\"R#");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withAuthentication((RedisCredentialsProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RedisCredentialsProvider must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "`";
      // Undeclared exception!
      try { 
        RedisURI.create("`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: `
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 880;
      String string0 = "%s is not a Type variable";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("d", 880, "%s is not a Type variable");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withVerifyPeer(true);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withStartTls(true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = '5';
      charArray0[2] = 'y';
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withAuthentication("a })A", charArray0);
      // Undeclared exception!
      try { 
        redisURI_Builder3.withPort(880);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Host is null. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("Cannot render URI for ");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withAuthentication("Cannot render URI for ", (CharSequence) "Cannot render URI for ");
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.from(offsetDateTime0);
      Duration duration0 = Duration.between(zonedDateTime0, zonedDateTime0);
      duration0.isZero();
      RedisURI redisURI0 = new RedisURI("Cannot render URI for ", 38, duration0);
      RedisURI redisURI1 = RedisURI.create("9(8w7z", 26379);
      RedisCredentialsProvider redisCredentialsProvider0 = redisURI1.getCredentialsProvider();
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      redisURI1.getSentinelMasterId();
      redisURI0.setTimeout(duration0);
      redisURI1.setSocket("clientName");
      RedisURI redisURI2 = new RedisURI("redis-socket", 1860, redisURI1.DEFAULT_TIMEOUT_DURATION);
      redisURI1.applySsl(redisURI2);
      RedisURI.builder(redisURI1);
      RedisURI redisURI3 = new RedisURI("verifyPeer", 26379, redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI_Builder1.withSentinel(redisURI3);
      redisURI0.getSentinelMasterId();
      redisURI1.getPort();
      // Undeclared exception!
      try { 
        redisURI_Builder1.withPort(327);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Host is null. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getCredentialsProvider();
      redisURI0.toString();
      String string0 = "_ :E,]8vZd\\9(=";
      redisURI0.setSocket("_ :E,]8vZd9(=");
      RedisURI.builder(redisURI0);
      boolean boolean0 = true;
      redisURI0.setVerifyPeer(true);
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme file not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getCredentialsProvider();
      redisURI0.setSsl(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(1668);
      redisURI0.setPassword((CharSequence) charBuffer0);
      redisURI0.setClientName("");
      URI uRI0 = redisURI0.toURI();
      RedisURI redisURI1 = RedisURI.create(uRI0);
      redisURI1.setSentinelMasterId("database");
      redisURI1.toURI();
      redisURI0.setUsername("database");
      redisURI1.setUsername("rediss");
      RedisURI redisURI2 = RedisURI.create(uRI0);
      redisURI2.toString();
      redisURI2.setSsl(true);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("3._81");
      redisURI0.setSentinelMasterId("3._81");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.setDatabase(3951);
      RedisURI.Builder redisURI_Builder2 = RedisURI.Builder.socket("redis-socket");
      redisURI_Builder1.withSentinel("database");
      redisURI0.isVerifyPeer();
      redisURI1.getTimeout();
      // Undeclared exception!
      try { 
        redisURI_Builder2.withSentinel("g\"uNqc_D<7-", (-1809), (CharSequence) "redis-sentinel");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -1809
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI redisURI1 = new RedisURI("LETTER", 6379, redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.applySsl(redisURI1);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel(">daJ^", "redis+tls");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinel("timeout", 6379, (CharSequence) "verifyPeer");
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withStartTls(true);
      // Undeclared exception!
      try { 
        redisURI_Builder2.withAuthentication((RedisCredentialsProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RedisCredentialsProvider must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RedisURI.Builder.socket("z=(O");
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setSocket("z=(O");
      redisURI0.setClientName("z=(O");
      redisURI0.setPassword("z=(O");
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      RedisURI.builder(redisURI0);
      redisURI0.getSentinels();
      URI uRI0 = redisURI0.toURI();
      assertEquals("redis-socket://z%3D%28O@z%3D%28O?clientName=z%3D%28O", uRI0.toString());
      
      String string0 = redisURI0.getSocket();
      assertEquals("z=(O", string0);
      
      RedisURI redisURI1 = new RedisURI("n-|<_f", 6379, redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.applyAuthentication(redisURI1);
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '1';
      charArray0[2] = 'q';
      charArray0[3] = 'p';
      charArray0[4] = 'I';
      redisURI1.setPassword(charArray0);
      assertEquals("z=(O", redisURI0.getClientName());
      assertEquals("n-|<_f", redisURI1.getHost());
      assertEquals(6379, redisURI1.getPort());
      assertFalse(redisURI1.isStartTls());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      Duration duration0 = chronoUnit0.getDuration();
      duration0.plusNanos(0L);
      RedisURI redisURI0 = new RedisURI("DOT", (-2214), duration0);
      duration0.abs();
      redisURI0.setSocket("DOT");
      URI uRI0 = redisURI0.toURI();
      String string0 = RedisURI.URI_SCHEME_REDIS_TLS_ALT;
      duration0.negated();
      redisURI0.setPassword((CharSequence) "redis+tls");
      redisURI0.setStartTls(false);
      redisURI0.getHost();
      redisURI0.setClientName("");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build a RedisURI. One of the following must be provided Host, Socket or Sentinel
         //
         verifyException("io.lettuce.core.RedisURI$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "@&ms l:~E{J!QY";
      RedisURI.Builder.sentinel("@&ms l:~E{J!QY");
      // Undeclared exception!
      try { 
        RedisURI.create("@&ms l:~E{J!QY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in scheme name at index 0: @&ms l:~E{J!QY
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "c/Y_I#4D";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("c/Y_I#4D", "c/Y_I#4D");
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withVerifyPeer(sslVerifyMode0);
      String string1 = null;
      // Undeclared exception!
      try { 
        redisURI_Builder1.withSentinel((String) null, 140);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getUsername();
      RedisURI redisURI1 = RedisURI.create("+keSz<", 6379);
      redisURI0.applySsl(redisURI1);
      redisURI0.toURI();
      redisURI0.toString();
      redisURI0.setVerifyPeer(true);
      // Undeclared exception!
      try { 
        redisURI0.setCredentialsProvider((RedisCredentialsProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RedisCredentialsProvider must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RedisURI.create("||eA&ZD;0_W1.]^,lZ", 0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RedisURI.create((String) null, (-831));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setHost("*8y");
      assertFalse(redisURI0.isSsl());
      assertEquals("*8y", redisURI0.getHost());
      assertFalse(redisURI0.isStartTls());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "ANNOTATIONS";
      int int0 = (-1979);
      Duration duration0 = Duration.ofDays((-1979));
      duration0.minusSeconds(1L);
      Duration.ofHours((-3520L));
      // Undeclared exception!
      try { 
        Duration.parse("ANNOTATIONS");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text cannot be parsed to a Duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        MockURI.URI("_FU_)", "", "-", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: _FU_)://-#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      RedisURI redisURI1 = RedisURI.create("sentinelMasterId", 3151);
      redisURI0.applySsl(redisURI1);
      RedisURI.builder(redisURI0);
      redisURI0.toURI();
      assertEquals(SslVerifyMode.FULL, redisURI0.getVerifyMode());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "a@K{3v);C";
      try { 
        MockURI.URI("a@K{3v);C");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 3: a@K{3v);C
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("", 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("io.lettuce.core.RedisURI$1");
      redisURI_Builder0.withPassword((CharSequence) "io.lettuce.core.RedisURI$1");
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.normalize(uRI0);
      URI uRI2 = MockURI.resolve(uRI0, uRI1);
      URI uRI3 = MockURI.parseServerAuthority(uRI2);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme ftp not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "]=6n'4Y:U0[i1U}[X";
      Duration duration0 = Duration.ZERO;
      RedisURI redisURI0 = new RedisURI("]=6n'4Y:U0[i1U}[X", (-1713), duration0);
      // Undeclared exception!
      try { 
        RedisURI.builder(redisURI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -1713
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "dFt4V8RP%";
      // Undeclared exception!
      try { 
        RedisURI.create("dFt4V8RP%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed escape pair at index 8: dFt4V8RP%
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setClientName("");
      redisURI0.setStartTls(false);
      redisURI0.setUsername((String) null);
      redisURI0.setDatabase(76);
      redisURI0.setSocket((String) null);
      redisURI0.setUsername("");
      redisURI0.setHost("");
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("db", "redis+tls");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withClientName("");
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withAuthentication("redis-sentinel", (CharSequence) "redis+socket");
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withSentinel(redisURI0);
      RedisURI.Builder redisURI_Builder4 = redisURI_Builder3.withSentinel(",>hV[`H^e[");
      RedisURI.Builder redisURI_Builder5 = redisURI_Builder4.withSentinel("ErlLl.q8f,(uN(", 76, (CharSequence) "database");
      // Undeclared exception!
      try { 
        redisURI_Builder5.withPort(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Host is null. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '\'';
      charArray0[2] = '0';
      charArray0[3] = 'l';
      charArray0[4] = 't';
      charArray0[5] = '\"';
      charArray0[6] = '[';
      charArray0[7] = '}';
      charArray0[8] = '7';
      StaticRedisCredentials staticRedisCredentials0 = new StaticRedisCredentials((String) null, charArray0);
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider(staticRedisCredentials0);
      redisURI0.setCredentialsProvider(staticCredentialsProvider0);
      redisURI0.setSocket("");
      redisURI0.setStartTls(false);
      redisURI0.setHost("");
      redisURI0.setVerifyPeer(true);
      String string0 = redisURI0.getUsername();
      assertNull(string0);
      
      Duration duration0 = Duration.ofMillis(60L);
      redisURI0.setTimeout(duration0);
      assertTrue(redisURI0.isVerifyPeer());
      assertFalse(redisURI0.isSsl());
      assertEquals("", redisURI0.getHost());
      assertEquals("", redisURI0.getSocket());
      assertFalse(redisURI0.isStartTls());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      String string0 = "";
      redisURI0.setPassword((CharSequence) "");
      RedisURI redisURI1 = null;
      // Undeclared exception!
      try { 
        redisURI0.applyAuthentication((RedisURI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source RedisURI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "";
      int int0 = (-559);
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      // Undeclared exception!
      try { 
        Duration.of(1874L, chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unit must not have an estimated duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      RedisURI.Builder.socket("");
      String string0 = "";
      // Undeclared exception!
      try { 
        RedisURI.create("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "K\"&#^1";
      String string1 = "g";
      RedisURI.Builder.sentinel("K\"&#^1", "g");
      // Undeclared exception!
      try { 
        RedisURI.create("6f_)O}BCs%:", (-1598));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -1598
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "iNIXos}k";
      int int0 = 2;
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("iNIXos}k", 2);
      RedisURI.Builder.redis("iNIXos}k", 134);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withTimeout((Duration) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      String string0 = "7Z4kU#!s6-$hL'Z";
      // Undeclared exception!
      try { 
        RedisURI.create("7Z4kU#!s6-$hL'Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("@gUZd}Zo@wB^W^&vhO5", (-1999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -1999
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel((String) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("Client name must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 6: Client name must not be null
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withVerifyPeer(false);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withVerifyPeer(sslVerifyMode0);
      boolean boolean0 = true;
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withStartTls(true);
      // Undeclared exception!
      try { 
        redisURI_Builder3.withAuthentication((RedisCredentialsProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RedisCredentialsProvider must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Duration duration0 = Duration.ofDays((-1L));
      duration0.getNano();
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("l-?M$~UFW*>:je", 48, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout duration must be greater or equal to zero
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        RedisURI.Builder.redis((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setStartTls(false);
      redisURI0.toString();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("java.lang", 229);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinel("factoryInstance", 59);
      assertSame(redisURI_Builder0, redisURI_Builder1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = null;
      int int0 = 2421;
      // Undeclared exception!
      try { 
        RedisURI.Builder.redis((String) null, 2421);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockURI.parseServerAuthority((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setHost((String) null);
      RedisURI.Builder.sentinel("clientName", 6379);
      redisURI0.setSocket("clientName=");
      try { 
        MockURI.URI("timeout", "h", "sources", "redis");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: timeout://hsources#redis
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "null or too small array, need between 2 and 8 values";
      int int0 = 2280;
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        Duration.of(455L, chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unit must not have an estimated duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        RedisURI.create("", (-436));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = (-1320);
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("DECIMAL_FLOATING_POINT_LITERAL", (-64));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -64
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("redis+ssl", 4);
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      chronoUnit0.isDurationEstimated();
      Duration duration0 = Duration.of(4, chronoUnit0);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinel("_ux0aU8bDulQF", 491, (CharSequence) "_ux0aU8bDulQF");
      chronoUnit0.isTimeBased();
      RedisURI redisURI0 = new RedisURI("redis+ssl", 4, duration0);
      redisURI0.setSsl(true);
      redisURI0.setSentinelMasterId("io.lettuce.core.RedisURI$1");
      RedisURI.Builder.sentinel("redis+ssl", "redis-socket");
      duration0.plusDays(292L);
      redisURI0.setStartTls(true);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSentinel(".class", 0, (CharSequence) "database");
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      redisURI_Builder2.withVerifyPeer(sslVerifyMode0);
      redisURI_Builder2.withSentinel("XY\"NH\u0000A}7cz");
      redisURI_Builder2.withSentinel("redis");
      // Undeclared exception!
      try { 
        redisURI0.applySsl((RedisURI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source RedisURI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "reactor.core.scheduler.SchedulerMetricDecorator";
      int int0 = (-585);
      Period period0 = Period.ofDays((-585));
      Period period1 = period0.plusDays((-585));
      Period period2 = Period.ofWeeks(65);
      period2.withDays(0);
      period2.withDays((-585));
      // Undeclared exception!
      try { 
        Duration.from(period1);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unit must not have an estimated duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "io.lettuce.core.dynamic.ReactiveTypeAdapters$PublisherToRxJava3FlowableAdapter";
      int int0 = (-1474);
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      chronoUnit0.getDuration();
      Month month0 = Month.JULY;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(0, month0, 0, (-1474), 0, 5146, 2082);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("{x=]'>2&^:O+VP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in scheme name at index 0: {x=]'>2&^:O+VP
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI redisURI1 = new RedisURI();
      redisURI1.setDatabase(6379);
      redisURI1.setClientName("com.github.javaparser.ast.Node$BreadthFirstIterator");
      redisURI1.setHost("redis+tls");
      redisURI1.toString();
      redisURI0.equals(redisURI1);
      redisURI1.isSsl();
      redisURI0.setDatabase(26379);
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider redisCredentialsProvider0 = RedisCredentialsProvider.from(supplier0);
      redisURI1.setCredentialsProvider(redisCredentialsProvider0);
      assertEquals(6379, redisURI1.getDatabase());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "x`M!";
      String string1 = "(#J?ccE[J#IK7K.5";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("x`M!", "(#J?ccE[J#IK7K.5");
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      redisURI_Builder0.withVerifyPeer(sslVerifyMode0);
      String string2 = ">";
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = '{';
      charArray0[2] = '&';
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider(">", charArray0);
      redisURI_Builder0.withAuthentication((RedisCredentialsProvider) staticCredentialsProvider0);
      redisURI_Builder0.withVerifyPeer(sslVerifyMode0);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withDatabase((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid database number: -1
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("9P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("di+%T8tyiBBF$G0&H", (-1296));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -1296
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider redisCredentialsProvider0 = RedisCredentialsProvider.from(supplier0);
      Supplier<RedisCredentials> supplier1 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier1);
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      redisURI0.hashCode();
      redisURI0.setDatabase(78);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("clientName", 26379);
      redisURI0.getPort();
      redisURI0.setHost("|S");
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withVerifyPeer(sslVerifyMode0);
      RedisURI.builder();
      redisURI0.equals(redisURI_Builder0);
      RedisURI.Builder redisURI_Builder2 = RedisURI.Builder.sentinel("|S", 0, "Cannot build a RedisURI. One of the following must be provided Host, Socket or Sentinel");
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withPassword((CharSequence) "db");
      assertNotSame(redisURI_Builder3, redisURI_Builder1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected scheme name at index 0: :
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getSocket();
      String string0 = "1=R[@<[wA|P[$#?Rx";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("1=R[@<[wA|P[$#?Rx");
      redisURI_Builder0.withSentinel("redis+socket");
      redisURI_Builder0.withTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      RedisURI redisURI1 = redisURI_Builder0.build();
      redisURI_Builder0.withAuthentication(redisURI1);
      int int0 = (-1777);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withDatabase((-1777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid database number: -1777
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme http not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "SINGLE_LINE_COMMENT";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("SINGLE_LINE_COMMENT");
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '.';
      charArray0[2] = 'X';
      charArray0[3] = '8';
      charArray0[4] = 'r';
      charArray0[5] = '=';
      charArray0[6] = 'U';
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withPassword(charArray0);
      // Undeclared exception!
      try { 
        redisURI_Builder1.withPort(432);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Host is null. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("\"{~(:st|GI}.Vi8f", 0);
      RedisURI redisURI1 = new RedisURI();
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI1.setVerifyPeer(sslVerifyMode0);
      redisURI0.applySsl(redisURI1);
      redisURI0.toString();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("db", 6379);
      redisURI1.setPort(6379);
      redisURI0.setSentinelMasterId("db=");
      char[] charArray0 = new char[1];
      redisURI1.setClientName("sm6S,Ud_^");
      charArray0[0] = ' ';
      redisURI_Builder0.withPassword(charArray0);
      // Undeclared exception!
      try { 
        RedisURI.create("", 26379);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create((String) null, (-3384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "";
      String string1 = "Sentinel master id must not empty";
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("", (-2442), "Sentinel master id must not empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      boolean boolean0 = redisURI0.isStartTls();
      assertFalse(boolean0);
      
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("io.lettuce.core.RedisURI$Builder", 0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withVerifyPeer(sslVerifyMode0);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSsl(false);
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withClientName("Wp(@}'fV6");
      RedisURI.Builder redisURI_Builder4 = redisURI_Builder3.withTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      RedisURI.Builder redisURI_Builder5 = redisURI_Builder4.withSsl(redisURI0);
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = 'f';
      charArray0[2] = '4';
      charArray0[3] = 'g';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'B';
      redisURI_Builder5.withPassword(charArray0);
      assertFalse(redisURI0.isSsl());
      assertFalse(redisURI0.isStartTls());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setSsl(false);
      char[] charArray0 = new char[0];
      redisURI0.setPassword(charArray0);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("clientName", 26379);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withAuthentication("database", (CharSequence) "redis");
      RedisURI.Builder.sentinel("q{=N\"ecYxOUc34V&7", "qePf#B");
      redisURI_Builder2.withSentinel(redisURI0);
      // Undeclared exception!
      try { 
        redisURI_Builder1.withSentinel("", (-82));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot use with Redis mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("Rz,*x4G,.dLn/i<^|", 4);
      // Undeclared exception!
      try { 
        redisURI0.toURI();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot render URI for redis://Rz,*x4G,.dLn/i<^|
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 70;
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("%s is not an VarType", 70, (Duration) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout duration must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      String string0 = "";
      int int0 = (-88);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("", (-88));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("", 1731);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("Szv>IlAy6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 3: Szv>IlAy6
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "['+>";
      // Undeclared exception!
      try { 
        RedisURI.create("['+>", (-423));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -423
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("long");
      RedisURI redisURI0 = RedisURI.create("Sentinels are non-empty. Cannot use in Sentinel mode.", 0);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSsl(redisURI0);
      char[] charArray0 = new char[1];
      RedisURI redisURI1 = redisURI_Builder0.build();
      charArray0[0] = '3';
      redisURI0.setPassword(charArray0);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withVerifyPeer(false);
      URI uRI0 = redisURI0.toURI();
      RedisCredentialsProvider redisCredentialsProvider0 = redisURI0.getCredentialsProvider();
      assertNotNull(redisCredentialsProvider0);
      
      RedisURI.Builder.sentinel("rediss", "qnXgo Q,0:_-m`");
      Duration duration0 = Duration.ofDays(0);
      RedisURI.builder(redisURI0);
      redisURI0.setTimeout(duration0);
      RedisURI redisURI2 = RedisURI.create(uRI0);
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withPassword((CharSequence) "Sentinels are non-empty. Cannot use in Sentinel mode.");
      redisURI2.setPassword(charArray0);
      RedisURI.Builder.sentinel("[Socket %s]", 0, "db");
      redisURI2.setTimeout(redisURI1.DEFAULT_TIMEOUT_DURATION);
      redisURI2.setPassword(charArray0);
      assertEquals("redis", uRI0.getScheme());
      assertEquals(6379, redisURI2.getPort());
      assertEquals("redis://3@Sentinels+are+non-empty.+Cannot+use+in+Sentinel+mode.:0", uRI0.toString());
      
      redisURI_Builder3.withSentinel("[Socket %s]", 0, (CharSequence) "verifyPeer");
      assertEquals("Sentinels are non-empty. Cannot use in Sentinel mode.", redisURI0.getHost());
      assertEquals(0, redisURI0.getPort());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.builder(redisURI0);
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'q';
      charArray0[2] = 't';
      charArray0[3] = '8';
      charArray0[4] = '[';
      charArray0[5] = '\\';
      charArray0[6] = '/';
      charArray0[7] = 'R';
      charArray0[8] = 'e';
      redisURI0.setPassword(charArray0);
      // Undeclared exception!
      try { 
        redisURI0.setTimeout((Duration) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = 4;
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("Ib6:", 4);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinel("Ib6:", 1143);
      redisURI_Builder0.withSsl(false);
      // Undeclared exception!
      try { 
        redisURI_Builder1.withSentinel("Ib6:", (-515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -515
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }
}
