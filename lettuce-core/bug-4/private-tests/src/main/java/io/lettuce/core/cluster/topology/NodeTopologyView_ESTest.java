/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 04:06:12 GMT 2023
 */

package io.lettuce.core.cluster.topology;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.lettuce.core.RedisCredentials;
import io.lettuce.core.RedisCredentialsProvider;
import io.lettuce.core.RedisURI;
import io.lettuce.core.SslVerifyMode;
import io.lettuce.core.StaticCredentialsProvider;
import io.lettuce.core.cluster.models.partitions.Partitions;
import io.lettuce.core.cluster.models.partitions.RedisClusterNode;
import io.lettuce.core.cluster.topology.NodeTopologyView;
import io.lettuce.core.cluster.topology.Requests;
import io.lettuce.core.cluster.topology.TimedAsyncCommand;
import io.lettuce.core.codec.StringCodec;
import io.lettuce.core.output.StatusOutput;
import io.lettuce.core.output.ValueOutput;
import io.lettuce.core.protocol.AsyncCommand;
import io.lettuce.core.protocol.Command;
import io.lettuce.core.protocol.CommandArgs;
import io.lettuce.core.protocol.CommandKeyword;
import io.lettuce.core.protocol.CommandType;
import io.lettuce.core.protocol.CommandWrapper;
import io.lettuce.core.protocol.RedisCommand;
import io.lettuce.core.protocol.TransactionalCommand;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Period;
import java.time.chrono.ThaiBuddhistDate;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.EnumSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeTopologyView_ESTest extends NodeTopologyView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      Requests requests1 = new Requests();
      requests0.mergeWith(requests1);
      nodeTopologyView0.isAvailable();
      nodeTopologyView0.getLatency();
      NodeTopologyView nodeTopologyView1 = NodeTopologyView.from(redisURI0, requests0, requests0);
      redisURI0.toString();
      nodeTopologyView0.setPartitions((Partitions) null);
      RedisURI.builder();
      nodeTopologyView1.getPartitions();
      nodeTopologyView0.setPartitions((Partitions) null);
      nodeTopologyView1.getPartitions();
      nodeTopologyView0.getPartitions();
      nodeTopologyView1.getPartitions();
      // Undeclared exception!
      try { 
        nodeTopologyView0.postProcessPartitions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.topology.TopologyComparators$SortAction$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Duration duration0 = Duration.ofNanos(0L);
      RedisURI redisURI0 = new RedisURI("Count can not be negative", 2433, duration0);
      Duration.ofHours(0L);
      redisURI0.setClientName("Count can not be negative");
      redisURI0.toString();
      duration0.minusMillis(494L);
      redisURI0.setHost("");
      Requests requests0 = new Requests();
      Duration.ofSeconds((-3675L), (-3675L));
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      nodeTopologyView0.setPartitions((Partitions) null);
      // Undeclared exception!
      try { 
        nodeTopologyView0.canContribute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setHost("8Y>Jivc{=k\"S>*ev");
      redisURI0.setSentinelMasterId("i?o");
      Requests requests0 = new Requests();
      requests0.allCompleted();
      requests0.allCompleted();
      redisURI0.setStartTls(true);
      requests0.allCompleted();
      redisURI0.setClientName("8Y>Jivc{=k\"S>*ev");
      redisURI0.setSentinelMasterId("tyNddvkE~z`]h.X<f");
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      nodeTopologyView0.postProcessPartitions();
      RedisURI.create("Using Verbose Console logging", 6379);
      nodeTopologyView0.getInfo();
      requests0.allCompleted();
      nodeTopologyView0.getRedisURI();
      nodeTopologyView0.canContribute();
      nodeTopologyView0.getRedisURI();
      Requests requests1 = new Requests();
      requests0.mergeWith(requests1);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Duration duration0 = RedisURI.DEFAULT_TIMEOUT_DURATION;
      RedisURI redisURI0 = new RedisURI("timeout", 1, duration0);
      NodeTopologyView nodeTopologyView0 = new NodeTopologyView(redisURI0, "", (String) null, (-334L));
      String string0 = nodeTopologyView0.getInfo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NodeTopologyView nodeTopologyView0 = new NodeTopologyView((RedisURI) null, "", "", 686L);
      nodeTopologyView0.canContribute();
      nodeTopologyView0.setPartitions((Partitions) null);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getRedisURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setClientName("a?ubd$x");
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      requests0.allCompleted();
      Partitions partitions0 = null;
      redisURI0.setVerifyPeer(true);
      nodeTopologyView0.setPartitions((Partitions) null);
      nodeTopologyView0.setPartitions((Partitions) null);
      nodeTopologyView0.setPartitions((Partitions) null);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getOwnPartition();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      requests0.allCompleted();
      nodeTopologyView0.isAvailable();
      nodeTopologyView0.getRedisURI();
      nodeTopologyView0.getRedisURI();
      Partitions partitions0 = nodeTopologyView0.getPartitions();
      Partitions partitions1 = new Partitions();
      Partitions partitions2 = partitions0.clone();
      partitions2.getPartition("", 26379);
      // Undeclared exception!
      try { 
        partitions1.add((RedisClusterNode) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RedisClusterNode must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RedisURI redisURI0 = null;
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from((RedisURI) null, requests0, requests0);
      nodeTopologyView0.setPartitions((Partitions) null);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      Partitions partitions0 = nodeTopologyView0.getPartitions();
      assertNotNull(partitions0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      RedisClusterNode.NodeFlag redisClusterNode_NodeFlag0 = RedisClusterNode.NodeFlag.MYSELF;
      RedisClusterNode.NodeFlag redisClusterNode_NodeFlag1 = RedisClusterNode.NodeFlag.ONLINE;
      EnumSet<RedisClusterNode.NodeFlag> enumSet0 = EnumSet.of(redisClusterNode_NodeFlag0, redisClusterNode_NodeFlag0, redisClusterNode_NodeFlag1);
      EnumSet<RedisClusterNode.NodeFlag> enumSet1 = enumSet0.clone();
      requests0.allCompleted();
      RedisClusterNode.NodeFlag redisClusterNode_NodeFlag2 = RedisClusterNode.NodeFlag.NOADDR;
      enumSet1.add(redisClusterNode_NodeFlag2);
      RedisClusterNode redisClusterNode0 = new RedisClusterNode(redisURI0, "3zaNB", false, (String) null, 60L, 26379, (-2153L), linkedList0, enumSet1);
      redisClusterNode0.setUri(redisURI0);
      partitions0.add(redisClusterNode0);
      nodeTopologyView0.getNodeId();
      nodeTopologyView0.setPartitions(partitions0);
      nodeTopologyView0.canContribute();
      nodeTopologyView0.canContribute();
      nodeTopologyView0.getOwnPartition();
      nodeTopologyView0.getNodeId();
      nodeTopologyView0.setPartitions(partitions0);
      nodeTopologyView0.getOwnPartition();
      nodeTopologyView0.getReplicationOffset();
      nodeTopologyView0.canContribute();
      nodeTopologyView0.canContribute();
      nodeTopologyView0.getInfo();
      Partitions partitions1 = nodeTopologyView0.getPartitions();
      assertSame(partitions1, partitions0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      Duration duration0 = chronoUnit0.getDuration();
      RedisURI redisURI0 = new RedisURI("kji", 0, duration0);
      NodeTopologyView nodeTopologyView0 = new NodeTopologyView(redisURI0, "", "redis+tls", 0);
      boolean boolean0 = nodeTopologyView0.isAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Duration duration0 = Duration.ofMillis(1L);
      RedisURI redisURI0 = new RedisURI("^RID]<bNxT#j4", (-1669), duration0);
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      RedisURI redisURI1 = nodeTopologyView0.getRedisURI();
      assertEquals(SslVerifyMode.FULL, redisURI1.getVerifyMode());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("z{", 0);
      RedisCredentialsProvider redisCredentialsProvider0 = redisURI0.getCredentialsProvider();
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      NodeTopologyView nodeTopologyView0 = new NodeTopologyView(redisURI0, "", "redis-socket", (-883L));
      String string0 = nodeTopologyView0.getClusterNodes();
      assertEquals("", string0);
      
      nodeTopologyView0.getPartitions();
      long long0 = nodeTopologyView0.getLatency();
      assertEquals((-883L), long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("RPUSHX", 290);
      Requests requests0 = new Requests();
      requests0.allCompleted();
      Requests requests1 = new Requests();
      requests1.allCompleted();
      requests0.mergeWith(requests1);
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      redisURI0.getCredentialsProvider();
      nodeTopologyView0.setPartitions((Partitions) null);
      // Undeclared exception!
      try { 
        nodeTopologyView0.postProcessPartitions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.topology.TopologyComparators$SortAction$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("+", 20);
      NodeTopologyView nodeTopologyView0 = new NodeTopologyView(redisURI0, "", "", 0L);
      Duration duration0 = Duration.ofMinutes(347L);
      redisURI0.setTimeout(duration0);
      nodeTopologyView0.postProcessPartitions();
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView1 = NodeTopologyView.from(redisURI0, requests0, requests0);
      Partitions partitions0 = nodeTopologyView0.getPartitions();
      nodeTopologyView0.getInfo();
      nodeTopologyView0.getReplicationOffset();
      nodeTopologyView1.setPartitions(partitions0);
      assertNotSame(nodeTopologyView1, nodeTopologyView0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("Operator called default onErrorDropped", 1016);
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      Partitions partitions0 = nodeTopologyView0.getPartitions();
      nodeTopologyView0.getLatency();
      Requests requests1 = new Requests();
      requests0.mergeWith(requests1);
      nodeTopologyView0.setPartitions(partitions0);
      requests1.allCompleted();
      requests1.allCompleted();
      requests1.allCompleted();
      nodeTopologyView0.setPartitions(partitions0);
      requests0.allCompleted();
      requests0.mergeWith(requests1);
      nodeTopologyView0.getInfo();
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RedisURI redisURI0 = null;
      // Undeclared exception!
      try { 
        NodeTopologyView.from((RedisURI) null, (Requests) null, (Requests) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NodeTopologyView nodeTopologyView0 = new NodeTopologyView((RedisURI) null, "", "", 685L);
      Partitions partitions0 = new Partitions();
      Partitions partitions1 = partitions0.clone();
      RedisClusterNode redisClusterNode0 = RedisClusterNode.of("");
      List<Integer> list0 = redisClusterNode0.getSlots();
      redisClusterNode0.setSlots(list0);
      partitions1.add(redisClusterNode0);
      Partitions partitions2 = partitions1.clone();
      partitions2.clone();
      nodeTopologyView0.setPartitions(partitions2);
      nodeTopologyView0.postProcessPartitions();
      nodeTopologyView0.canContribute();
      nodeTopologyView0.getClusterNodes();
      nodeTopologyView0.getLatency();
      Duration duration0 = Duration.ofSeconds(1036L, 685L);
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("", 0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((long) 131, (long) 131);
      RedisURI redisURI0 = new RedisURI("Zamqer#", 131, duration0);
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      int int0 = nodeTopologyView0.getConnectedClients();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, (String) null, (String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse null
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setHost("com.github.javaparser.metamodel.ParameterMetaModel");
      RedisURI.create("redis-socket", 6379);
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      nodeTopologyView0.canContribute();
      requests0.allCompleted();
      nodeTopologyView0.getPartitions();
      Requests requests1 = new Requests();
      Requests requests2 = new Requests();
      requests1.mergeWith(requests2);
      requests0.mergeWith(requests1);
      redisURI0.getCredentialsProvider();
      // Undeclared exception!
      try { 
        nodeTopologyView0.getOwnPartition();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider redisCredentialsProvider0 = RedisCredentialsProvider.from(supplier0);
      redisURI0.getCredentialsProvider();
      Supplier<RedisCredentials> supplier1 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier1);
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      Requests requests0 = new Requests();
      TimedAsyncCommand<String, String, String> timedAsyncCommand0 = null;
      requests0.addRequest(redisURI0, (TimedAsyncCommand<String, String, String>) null);
      Requests requests1 = new Requests();
      requests1.allCompleted();
      requests0.mergeWith(requests1);
      requests0.addRequest(redisURI0, (TimedAsyncCommand<String, String, String>) null);
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create((String) null, 1180);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      CommandKeyword commandKeyword0 = CommandKeyword.SOFT;
      StringCodec stringCodec0 = StringCodec.UTF8;
      ValueOutput<String, String> valueOutput0 = new ValueOutput<String, String>(stringCodec0);
      Command<String, String, String> command0 = new Command<String, String, String>(commandKeyword0, valueOutput0);
      TimedAsyncCommand<String, String, String> timedAsyncCommand0 = new TimedAsyncCommand<String, String, String>(command0);
      requests0.addRequest(redisURI0, timedAsyncCommand0);
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("triggerProvider required");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 15: triggerProvider required
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      nodeTopologyView0.postProcessPartitions();
      NodeTopologyView nodeTopologyView1 = NodeTopologyView.from(redisURI0, requests0, requests0);
      Partitions partitions0 = nodeTopologyView1.getPartitions();
      Partitions partitions1 = partitions0.clone();
      partitions0.toString();
      Partitions partitions2 = partitions1.clone();
      nodeTopologyView1.setPartitions(partitions2);
      nodeTopologyView0.getRedisURI();
      boolean boolean0 = nodeTopologyView1.isAvailable();
      assertFalse(boolean0);
      
      long long0 = nodeTopologyView0.getLatency();
      assertEquals(0L, long0);
      
      int int0 = nodeTopologyView1.getConnectedClients();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("", 355);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      String string0 = "&yR!{3^B[jHm!L4,";
      String string1 = null;
      long long0 = 1278L;
      // Undeclared exception!
      try { 
        RedisURI.create("clientName");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((long) 321);
      Duration duration1 = Duration.from(duration0);
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI((String) null, 321, duration1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("my{Qc.*`Vm<2.!", (-1403));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -1403
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Duration duration0 = RedisURI.DEFAULT_TIMEOUT_DURATION;
      Duration duration1 = Duration.ofHours(1538);
      RedisURI redisURI0 = new RedisURI("$", 1538, duration0);
      Requests requests0 = new Requests();
      RedisURI redisURI1 = new RedisURI("rediss", 63, duration1);
      CommandType commandType0 = CommandType.SINTERCARD;
      StringCodec stringCodec0 = StringCodec.ASCII;
      StatusOutput<String, String> statusOutput0 = new StatusOutput<String, String>(stringCodec0);
      CommandArgs<String, String> commandArgs0 = new CommandArgs<String, String>(stringCodec0);
      Command<String, String, String> command0 = new Command<String, String, String>(commandType0, statusOutput0, commandArgs0);
      TimedAsyncCommand<String, String, String> timedAsyncCommand0 = new TimedAsyncCommand<String, String, String>(command0);
      requests0.addRequest(redisURI1, timedAsyncCommand0);
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      nodeTopologyView0.getInfo();
      nodeTopologyView0.getRedisURI();
      int int0 = nodeTopologyView0.getConnectedClients();
      assertEquals(0, int0);
  }

  // @Test(timeout = 4000)
  // public void test030()  throws Throwable  {
  //     RedisURI redisURI0 = new RedisURI();
  //     Requests requests0 = new Requests();
  //     NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
  //     nodeTopologyView0.getConnectedClients();
  //     nodeTopologyView0.getReplicationOffset();
  //     nodeTopologyView0.postProcessPartitions();
  //     RedisURI.create("redis+tls", 6379);
  //     nodeTopologyView0.isAvailable();
  //     nodeTopologyView0.canContribute();
  //     Partitions partitions0 = nodeTopologyView0.getPartitions();
  //     // Undeclared exception!
  //     try { 
  //       partitions0.getPartition(0);
  //       fail("Expecting exception: IndexOutOfBoundsException");
  //     
  //     } catch(IndexOutOfBoundsException e) {
  //        //
  //        // Index: 0, Size: 0
  //        //
  //        verifyException("java.util.ArrayList", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      Duration duration0 = chronoUnit0.getDuration();
      RedisURI redisURI0 = new RedisURI("Cannot determine own partition", 0, duration0);
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      Partitions partitions0 = new Partitions();
      nodeTopologyView0.setPartitions(partitions0);
      long long0 = nodeTopologyView0.getReplicationOffset();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("io.lettuce.core.cluster.topology.NodeTopologyView", 1657);
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      nodeTopologyView0.getRedisURI();
      Partitions partitions0 = new Partitions();
      partitions0.clone();
      nodeTopologyView0.postProcessPartitions();
      RedisClusterNode redisClusterNode0 = RedisClusterNode.of("io.lettuce.core.cluster.topology.NodeTopologyView");
      Set<RedisClusterNode.NodeFlag> set0 = redisClusterNode0.getFlags();
      RedisClusterNode redisClusterNode1 = null;
      try {
        redisClusterNode1 = new RedisClusterNode(redisURI0, "'gboR/bG<t", false, "db", 777L, 1657, 1657, (List<Integer>) null, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.models.partitions.RedisClusterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      Requests requests1 = new Requests();
      redisURI0.toString();
      requests1.mergeWith(requests0);
      Requests requests2 = new Requests();
      requests1.getRequest(redisURI0);
      requests2.addRequest(redisURI0, (TimedAsyncCommand<String, String, String>) null);
      requests1.mergeWith(requests2);
      requests0.mergeWith(requests1);
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        MockURI.URI("lL^_K\"j9w>|0=+^HTm", "lL^_K\"j9w>|0=+^HTm", "lL^_K\"j9w>|0=+^HTm");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: lL^_K\"j9w>|0=+^HTm:lL%5E_K%22j9w%3E%7C0=+%5EHTm#lL%5E_K%22j9w%3E%7C0=+%5EHTm
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("e0i&1$#0-+m)]", 8);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "v@PJ*k", "redis-socket", 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse v@PJ*k
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      long long0 = nodeTopologyView0.getReplicationOffset();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("*SK~DZIPR-", 0);
      Requests requests0 = new Requests();
      requests0.getRequest(redisURI0);
      requests0.addRequest(redisURI0, (TimedAsyncCommand<String, String, String>) null);
      RedisURI.create("3<Cr2", 0);
      // Undeclared exception!
      try { 
        NodeTopologyView.from(redisURI0, (Requests) null, requests0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      URI uRI0 = MockURI.URI("ABSTTL");
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "database", "You can use this only when the field declares only 1 variable name", 6379);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse database
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("WIVE`(u9i4S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 4: WIVE`(u9i4S
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      RedisURI redisURI0 = new RedisURI(") but was: [", (-638), duration0);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "T-R'", "redis+ssl", 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse T-R'
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from((RedisURI) null, requests0, requests0);
      requests0.getRequest((RedisURI) null);
      requests0.allCompleted();
      requests0.addRequest((RedisURI) null, (TimedAsyncCommand<String, String, String>) null);
      Partitions partitions0 = new Partitions();
      RedisClusterNode redisClusterNode0 = new RedisClusterNode();
      partitions0.add(redisClusterNode0);
      RedisClusterNode.of("");
      nodeTopologyView0.canContribute();
      partitions0.add(redisClusterNode0);
      nodeTopologyView0.setPartitions(partitions0);
      nodeTopologyView0.canContribute();
      // Undeclared exception!
      try { 
        nodeTopologyView0.getRedisURI();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        MockURI.URI("", "", "a'gw]z.C", "|}C3h", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://a'gw%5Dz.C?%7C%7DC3h#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RedisURI redisURI0 = null;
      long long0 = (-4557L);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView((RedisURI) null, "aC,1.GG%s^dIbb|^a", "aC,1.GG%s^dIbb|^a", (-4557L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse aC,1.GG%s^dIbb|^a
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes(2108);
      RedisURI redisURI0 = new RedisURI("U=vKzGu?", 2108, duration0);
      duration0.getUnits();
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "clientName", "database", 60L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse clientName
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Duration duration0 = Duration.ofHours(0);
      RedisURI redisURI0 = new RedisURI(".\"q*9'8{0`!4l[O3z ", 0, duration0);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, (String) null, "db", 60L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse null
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from((RedisURI) null, requests0, requests0);
      Requests requests1 = new Requests();
      Requests requests2 = new Requests();
      requests2.mergeWith(requests0);
      requests1.mergeWith(requests2);
      requests0.mergeWith(requests1);
      NodeTopologyView nodeTopologyView1 = NodeTopologyView.from((RedisURI) null, requests0, requests0);
      nodeTopologyView1.getRedisURI();
      nodeTopologyView1.canContribute();
      requests0.mergeWith(requests1);
      nodeTopologyView1.getRedisURI();
      nodeTopologyView0.canContribute();
      nodeTopologyView0.canContribute();
      nodeTopologyView1.getLatency();
      nodeTopologyView1.postProcessPartitions();
      nodeTopologyView0.getReplicationOffset();
      Partitions partitions0 = nodeTopologyView0.getPartitions();
      nodeTopologyView0.getPartitions();
      nodeTopologyView1.postProcessPartitions();
      nodeTopologyView1.getClusterNodes();
      nodeTopologyView1.setPartitions(partitions0);
      nodeTopologyView1.getLatency();
      // Undeclared exception!
      try { 
        nodeTopologyView0.getOwnPartition();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RedisURI redisURI0 = null;
      NodeTopologyView nodeTopologyView0 = new NodeTopologyView((RedisURI) null, "", "", (-1L));
      // Undeclared exception!
      try { 
        nodeTopologyView0.getOwnPartition();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      Period period0 = Period.ofMonths(0);
      // Undeclared exception!
      try { 
        Duration.from(period0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unit must not have an estimated duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = null;
      // Undeclared exception!
      try { 
        NodeTopologyView.from(redisURI0, (Requests) null, (Requests) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.toString();
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "2%Qn4lk42[@ZNZ9oS", "NjP", 26379);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse 2%Qn4lk42[@ZNZ9oS
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setPort(8);
      redisURI0.setSentinelMasterId((String) null);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "redis-sentinel", (String) null, 60L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse redis-sentinel
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("io.lettuce.core.protocol.TracedCommand", 905);
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      int int0 = nodeTopologyView0.getConnectedClients();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      URI uRI0 = redisURI0.toURI();
      RedisURI redisURI1 = RedisURI.create(uRI0);
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI1, requests0, requests0);
      RedisURI redisURI2 = new RedisURI();
      Requests requests1 = new Requests();
      requests0.mergeWith(requests1);
      RedisURI.builder(redisURI2);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getOwnPartition();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "db", "|mHu4@+bU(dp9(gXR|o", 60L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse db
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((long) 1, (long) 1);
      duration0.isNegative();
      duration0.plusSeconds(1);
      RedisURI redisURI0 = new RedisURI("<L{*", 1, duration0);
      String string0 = null;
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, (String) null, "clientName", 26379);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse null
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme ftp not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      Requests requests1 = new Requests();
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme http not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes(1689L);
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      chronoUnit0.getDuration();
      ChronoUnit chronoUnit1 = ChronoUnit.ERAS;
      // Undeclared exception!
      try { 
        duration0.get(chronoUnit1);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported unit: Eras
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.toString();
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "Cannot determine own partition", "IFJy@!'^: TGxWu/Jd", 1332L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      boolean boolean0 = false;
      redisURI0.setSsl(false);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "=xs", "redis", 26379);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse =xs
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("G8^*\"vif0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 2: G8^*\"vif0
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = '}';
      charArray0[2] = '\'';
      charArray0[3] = '}';
      charArray0[4] = '&';
      charArray0[5] = 'h';
      charArray0[6] = 'N';
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider("jo'[U78*OxiYm:", charArray0);
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier0);
      redisURI0.setCredentialsProvider(staticCredentialsProvider0);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "rediss", ".j", 60L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse rediss
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RedisURI redisURI0 = null;
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from((RedisURI) null, requests0, requests0);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("poz\"hf_VX>yEIyeRz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 3: poz\"hf_VX>yEIyeRz
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      URI uRI0 = MockURI.URI("io.lettuce.core.cluster.topology.NodeTopologyView", "io.lettuce.core.cluster.topology.NodeTopologyView", "io.lettuce.core.cluster.topology.NodeTopologyView");
      URI uRI1 = MockURI.normalize(uRI0);
      URI uRI2 = MockURI.resolve(uRI1, uRI1);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme io.lettuce.core.cluster.topology.NodeTopologyView not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "/b";
      URI uRI0 = MockURI.create("/b");
      URI uRI1 = MockURI.normalize(uRI0);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockURI.parseServerAuthority((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.toString();
      redisURI0.getCredentialsProvider();
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      redisURI0.getCredentialsProvider();
      requests0.getRequest(redisURI0);
      requests0.allCompleted();
      requests0.addRequest(redisURI0, (TimedAsyncCommand<String, String, String>) null);
      nodeTopologyView0.canContribute();
      nodeTopologyView0.canContribute();
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RedisURI redisURI0 = null;
      Requests requests0 = new Requests();
      RedisURI redisURI1 = new RedisURI();
      RedisURI redisURI2 = null;
      try {
        redisURI2 = new RedisURI("", 26379, redisURI1.DEFAULT_TIMEOUT_DURATION);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("", (-290));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setClientName("");
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "redis-socket", "h2qgWzC7Lq1|r", 26379);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse redis-socket
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("", (-2866));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      long long0 = nodeTopologyView0.getLatency();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme file not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("", (-533));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "";
      try { 
        MockURI.URI("", "_/jve<[`", "rx.internal.operators.OperatorTimestamp$1", (-3149), "", "reactor.core.publisher.MonoDefaultIfEmpty", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://_%2Fjve%3C%5B%60@rx.internal.operators.OperatorTimestamp$1:-3149?reactor.core.publisher.MonoDefaultIfEmpty#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      nodeTopologyView0.canContribute();
      Partitions partitions0 = nodeTopologyView0.getPartitions();
      PriorityBlockingQueue<RedisClusterNode> priorityBlockingQueue0 = new PriorityBlockingQueue<RedisClusterNode>();
      partitions0.containsAll(priorityBlockingQueue0);
      partitions0.addAll(priorityBlockingQueue0);
      NodeTopologyView nodeTopologyView1 = NodeTopologyView.from(redisURI0, requests0, requests0);
      nodeTopologyView1.getRedisURI();
      nodeTopologyView0.setPartitions(partitions0);
      nodeTopologyView0.isAvailable();
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Duration duration0 = Duration.ofHours(0);
      Duration duration1 = Duration.from(duration0);
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI((String) null, 0, duration1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("", 769, (Duration) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("?.Y]HQT(>C$qCc.[<?{", 0);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "redis+tls", "", 60L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse redis+tls
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Duration duration0 = Duration.ofMillis(248L);
      RedisURI redisURI0 = new RedisURI("checkpoint", (-1982), duration0);
      Requests requests0 = new Requests();
      requests0.getRequest(redisURI0);
      requests0.addRequest(redisURI0, (TimedAsyncCommand<String, String, String>) null);
      NodeTopologyView.from(redisURI0, requests0, requests0);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        requests0.allCompleted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.topology.Requests", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "";
      int int0 = (-1512);
      // Undeclared exception!
      try { 
        Duration.of((-1512), (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // unit
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        MockURI.URI("])70$wH\"%<NA", "u]^q.uSt6t", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: ])70$wH\"%<NA:u]%5Eq.uSt6t#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.SECONDS;
      Duration duration0 = Duration.of((-1937), chronoUnit0);
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("Cannot determine own partition", (-1937), duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout duration must be greater or equal to zero
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      // Undeclared exception!
      try { 
        Duration.parse("sentinelMasterId");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text cannot be parsed to a Duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("m#>+h$Fe{$\u0003+", 165);
      redisURI0.setPort(165);
      NodeTopologyView nodeTopologyView0 = new NodeTopologyView(redisURI0, "", "database", (-20L));
      nodeTopologyView0.canContribute();
      redisURI0.toString();
      nodeTopologyView0.getRedisURI();
      // Undeclared exception!
      try { 
        nodeTopologyView0.getOwnPartition();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("]hxZBH(;5mwy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: ]hxZBH(;5mwy
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      Partitions partitions0 = new Partitions();
      RedisClusterNode redisClusterNode0 = RedisClusterNode.of("redis");
      partitions0.add(redisClusterNode0);
      Requests requests1 = new Requests();
      requests1.getRequest(redisURI0);
      requests1.addRequest(redisURI0, (TimedAsyncCommand<String, String, String>) null);
      NodeTopologyView.from(redisURI0, requests0, requests1);
      redisURI0.setSocket("+Dt\"");
      nodeTopologyView0.setPartitions(partitions0);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getRedisURI();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setHost("");
      int int0 = (-1118);
      redisURI0.setPort((-1118));
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "db", "", (-1144L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse db
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.toURI();
      Requests requests0 = new Requests();
      requests0.getRequest(redisURI0);
      requests0.allCompleted();
      Supplier<RedisClusterNode> supplier0 = (Supplier<RedisClusterNode>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CompletableFuture.supplyAsync(supplier0);
      redisURI0.setSentinelMasterId(".@qJ{WR6");
      requests0.addRequest(redisURI0, (TimedAsyncCommand<String, String, String>) null);
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getOwnPartition();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme http not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      Duration duration0 = chronoUnit0.getDuration();
      RedisURI redisURI0 = new RedisURI("rx.observables.ConnectableObservable", 424, duration0);
      redisURI0.getCredentialsProvider();
      duration0.plusHours(0L);
      redisURI0.setSentinelMasterId("Is9");
      redisURI0.setDatabase(0);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "timeout", "database", (-911L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse timeout
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 1934;
      RedisURI redisURI0 = RedisURI.create("\"vbts4<k^K n<", 1934);
      redisURI0.setStartTls(true);
      Requests requests0 = new Requests();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      Requests requests1 = new Requests();
      requests1.mergeWith(requests0);
      requests0.mergeWith(requests1);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI redisURI1 = new RedisURI();
      RedisURI.create("verifyPeer", 6379);
      redisURI0.applyAuthentication(redisURI1);
      URI uRI0 = redisURI0.toURI();
      RedisURI.create(uRI0);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "database", "redis", (-563L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse database
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((-1549L), (long) 0);
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("'@oG.SBy'7Rp", 0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout duration must be greater or equal to zero
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setSsl(false);
      redisURI0.setSsl(false);
      redisURI0.setVerifyPeer(false);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "o_bq6.-SgP", "io.lettuce.core.cluster.topology.NodeTopologyView", 26379);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse o_bq6.-SgP
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setHost((String) null);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      Requests requests0 = new Requests();
      redisURI0.getCredentialsProvider();
      Requests requests1 = new Requests();
      requests0.mergeWith(requests1);
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      nodeTopologyView0.canContribute();
      nodeTopologyView0.getPartitions();
      // Undeclared exception!
      try { 
        nodeTopologyView0.getOwnPartition();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("io.lettuce.core.cluster.topology.NodeTopologyView", (-395));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -395
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("QM(DA0O'Iyb$&yj=+b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      RedisURI redisURI0 = new RedisURI("resourceSupplier", 0, duration0);
      Requests requests0 = new Requests();
      duration0.isNegative();
      redisURI0.setSentinelMasterId("");
      duration0.abs();
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        MockURI.URI("^%s:(.*)$", "[hgqmjJ", "&I={c]44.m:EmvA+Yc&", 3290, "&I={c]44.m:EmvA+Yc&", "^%s:(.*)$", "L];uBRP+i;Qcp[?|");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ^%s:(.*)$://%5BhgqmjJ@[&I={c]44.m:EmvA+Yc&]:3290&I=%7Bc%5D44.m:EmvA+Yc&?%5E%25s:(.*)$#L];uBRP+i;Qcp[?%7C
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = '0';
      charArray0[2] = 'b';
      charArray0[3] = '}';
      charArray0[4] = '_';
      charArray0[5] = ' ';
      charArray0[6] = '$';
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider("`h0a", charArray0);
      redisURI0.setCredentialsProvider(staticCredentialsProvider0);
      requests0.getRequest((RedisURI) null);
      requests0.addRequest(redisURI0, (TimedAsyncCommand<String, String, String>) null);
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      requests0.getRequest(redisURI0);
      requests0.addRequest(redisURI0, (TimedAsyncCommand<String, String, String>) null);
      nodeTopologyView0.postProcessPartitions();
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      String string0 = "io.lettuce.core.cluster.topology.NodeTopologyView";
      URI uRI1 = MockURI.resolve(uRI0, "io.lettuce.core.cluster.topology.NodeTopologyView");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme ftp not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("^8]9D;`^@", 0);
      NodeTopologyView nodeTopologyView0 = new NodeTopologyView(redisURI0, "", "}mIgzt", 26379);
      String string0 = nodeTopologyView0.getInfo();
      assertEquals("}mIgzt", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      NodeTopologyView.from(redisURI0, requests0, requests0);
      requests0.getRequest(redisURI0);
      TimedAsyncCommand<RedisClusterNode, CompletionStage<String>, Object> timedAsyncCommand0 = null;
      try {
        timedAsyncCommand0 = new TimedAsyncCommand<RedisClusterNode, CompletionStage<String>, Object>((RedisCommand<RedisClusterNode, CompletionStage<String>, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RedisCommand must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Requests requests0 = new Requests();
      RedisCredentialsProvider redisCredentialsProvider0 = redisURI0.getCredentialsProvider();
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      NodeTopologyView.from(redisURI0, requests0, requests0);
      nodeTopologyView0.canContribute();
      // Undeclared exception!
      try { 
        nodeTopologyView0.getNodeId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot determine own partition
         //
         verifyException("io.lettuce.core.cluster.topology.NodeTopologyView", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("subscribeActual failed", 0);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "redis-sentinel", "", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse redis-sentinel
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("resourceClosure", 1343);
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "resourceClosure", (String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse resourceClosure
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("I[ $:>pFk0J]Yn", 1554);
      Requests requests0 = new Requests();
      CommandWrapper<String, String, String> commandWrapper0 = new CommandWrapper<String, String, String>((RedisCommand<String, String, String>) null);
      AsyncCommand<String, String, String> asyncCommand0 = new AsyncCommand<String, String, String>(commandWrapper0);
      TransactionalCommand<String, String, String> transactionalCommand0 = new TransactionalCommand<String, String, String>(asyncCommand0);
      TimedAsyncCommand<String, String, String> timedAsyncCommand0 = new TimedAsyncCommand<String, String, String>(transactionalCommand0);
      requests0.addRequest(redisURI0, timedAsyncCommand0);
      NodeTopologyView nodeTopologyView0 = NodeTopologyView.from(redisURI0, requests0, requests0);
      long long0 = nodeTopologyView0.getReplicationOffset();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "verifyPeer", "%s is not an BreakStmt", 60L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse verifyPeer
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "db", "redis-socket", 713L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse db
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("", 175, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      NodeTopologyView nodeTopologyView0 = null;
      try {
        nodeTopologyView0 = new NodeTopologyView(redisURI0, "redis+tls", "redis-sentinel", 3026L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse redis+tls
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = ",MTf_";
      int int0 = 308;
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        MockInstant.from(thaiBuddhistDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain Instant from TemporalAccessor: ThaiBuddhist BE 2557-02-14 of type java.time.chrono.ThaiBuddhistDate
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "]OlSjDX> ,O%Rjc9A";
      // Undeclared exception!
      try { 
        RedisURI.create("]OlSjDX> ,O%Rjc9A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: ]OlSjDX> ,O%Rjc9A
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("Cannot determine own partition", (-3033), (Duration) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout duration must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }
}
