/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 04:05:07 GMT 2023
 */

package io.lettuce.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.lettuce.core.RedisCredentials;
import io.lettuce.core.RedisCredentialsProvider;
import io.lettuce.core.RedisURI;
import io.lettuce.core.SslVerifyMode;
import io.lettuce.core.StaticCredentialsProvider;
import io.lettuce.core.StaticRedisCredentials;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RedisURI_ESTest extends RedisURI_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Duration duration0 = Duration.ofSeconds(60L);
      redisURI0.setHost("_BB#w");
      duration0.getSeconds();
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      duration0.minusSeconds(26379);
      Duration.ofMinutes(6379);
      duration0.minus(redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.setTimeout(duration0);
      redisURI0.setSocket("F");
      redisURI0.setPassword("N(kH<r3kW(NE}~K@`");
      redisURI0.getCredentialsProvider();
      char[] charArray0 = new char[3];
      redisURI0.setUsername("F");
      assertEquals("_BB#w", redisURI0.getHost());
      
      charArray0[0] = '7';
      redisURI0.setHost("redis+ssl");
      charArray0[1] = ' ';
      charArray0[2] = 'm';
      redisURI0.setPassword(charArray0);
      redisURI0.getUsername();
      redisURI0.getPort();
      redisURI0.getSentinelMasterId();
      assertFalse(redisURI0.isStartTls());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RedisURI.Builder.socket("m");
      RedisURI redisURI0 = new RedisURI();
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI0.setSsl(true);
      redisURI0.isSsl();
      // Undeclared exception!
      try { 
        redisURI0.setDatabase((-615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid database number: -615
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setSocket("RituV:~zSW7sG");
      redisURI0.setDatabase(50);
      redisURI0.setClientName("oj!!!4Oa");
      redisURI0.setPort(138);
      RedisURI redisURI1 = new RedisURI("verifyPeer", 6379, redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.applySsl(redisURI1);
      redisURI0.getPort();
      redisURI0.getUsername();
      redisURI0.toString();
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      RedisURI.builder();
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI1.setTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(6379, 26379);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 26379
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "redis+socket";
      URI uRI0 = MockURI.URI("redis+socket", "redis+socket", "redis+socket");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Socket must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getPort();
      redisURI0.toString();
      redisURI0.setDatabase(0);
      redisURI0.toString();
      RedisURI redisURI1 = new RedisURI();
      redisURI0.equals(redisURI1);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("fwk#e]Ia|}8kPVf");
      redisURI_Builder0.withSentinelMasterId("redis://null");
      RedisURI.Builder.sentinel("redis://null", 130);
      redisURI_Builder0.withSentinelMasterId("*yy2+P?3{4&#q;wCZ");
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_DATE_TIME;
      // Undeclared exception!
      try { 
        MockLocalDate.parse((CharSequence) "db", dateTimeFormatter0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'db' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("db", 1890);
      redisURI0.setStartTls(true);
      RedisURI.builder();
      redisURI0.setPort(0);
      redisURI0.setPort(1890);
      redisURI0.isStartTls();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      redisURI_Builder0.withSsl(true);
      redisURI0.setSocket("l]+");
      redisURI0.equals(redisURI_Builder0);
      redisURI0.setPort(1890);
      redisURI0.toURI();
      assertEquals(1890, redisURI0.getPort());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setPort(480);
      redisURI0.toString();
      redisURI0.setUsername("");
      redisURI0.toString();
      redisURI0.toString();
      redisURI0.setSentinelMasterId("@@stD*");
      redisURI0.getSentinels();
      redisURI0.getUsername();
      RedisURI.create("redis-socket", 6379);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("s'[08>7Ht]xx@K");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSsl(redisURI0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI_Builder1.withVerifyPeer(sslVerifyMode0);
      redisURI0.setSocket("M^0");
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = 'I';
      charArray0[2] = 'U';
      charArray0[3] = '';
      charArray0[4] = 'w';
      charArray0[5] = 'i';
      StaticRedisCredentials staticRedisCredentials0 = new StaticRedisCredentials("EOc?", charArray0);
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider(staticRedisCredentials0);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder0.withAuthentication((RedisCredentialsProvider) staticCredentialsProvider0);
      assertSame(redisURI_Builder2, redisURI_Builder0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.builder();
      redisURI0.setPassword((CharSequence) "[BlS");
      redisURI0.setUsername("[BlS");
      RedisURI.builder();
      URI uRI0 = redisURI0.toURI();
      RedisURI.builder(redisURI0);
      RedisURI.Builder.redis("4W^A21aDgTH;J]", 1282);
      URI uRI1 = MockURI.resolve(uRI0, "redis-socket");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"edis-socket\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("+XpoZcwB", 0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI0.toURI();
      redisURI0.setDatabase(0);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      RedisURI redisURI1 = RedisURI.create("sentinelMasterId", 0);
      redisURI0.applyAuthentication(redisURI1);
      redisURI0.setSentinelMasterId("+XpoZcwB");
      redisURI0.setStartTls(true);
      redisURI0.setClientName("+XpoZcwB");
      redisURI0.getPassword();
      RedisURI.Builder.sentinel("timeout");
      redisURI0.setStartTls(true);
      RedisURI redisURI2 = new RedisURI("redis+ssl", 3, redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI2.setClientName("database");
      redisURI2.setVerifyPeer(sslVerifyMode0);
      redisURI0.applySsl(redisURI2);
      redisURI2.applyAuthentication(redisURI0);
      redisURI0.getPassword();
      redisURI0.getSentinels();
      redisURI2.equals(redisURI1);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("", 6379);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot use with Redis mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "7j99";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("7j99", 57);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI_Builder0.withVerifyPeer(sslVerifyMode0);
      RedisURI redisURI0 = redisURI_Builder0.build();
      redisURI_Builder0.withSsl(true);
      RedisURI.builder();
      redisURI0.toString();
      int int0 = 0;
      RedisURI.Builder.redis("Ncl(#$YW$GqSKP+", 0);
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("Ncl(#$YW$GqSKP+", (-771), "Ncl(#$YW$GqSKP+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -771
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Duration duration0 = Duration.ofDays(2355);
      RedisURI redisURI0 = new RedisURI("rediss-sentinel", 2355, duration0);
      redisURI0.toString();
      duration0.negated();
      redisURI0.isSsl();
      URI uRI0 = MockURI.URI("rediss-sentinel", "sentinelMasterId", "", "redis", "rediss-sentinel");
      RedisURI redisURI1 = RedisURI.create(uRI0);
      redisURI1.setUsername("");
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      redisURI1.setVerifyPeer(sslVerifyMode0);
      // Undeclared exception!
      try { 
        RedisURI.Builder.redis("rediss-sentinel", (-1856));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -1856
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider redisCredentialsProvider0 = RedisCredentialsProvider.from(supplier0);
      Supplier<RedisCredentials> supplier1 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier1);
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      redisURI0.setSocket(")*[T");
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("redis-sentinel");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withPassword((CharSequence) "clientName");
      redisURI_Builder1.withSsl(redisURI0);
      URI uRI0 = redisURI0.toURI();
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build a RedisURI. One of the following must be provided Host, Socket or Sentinel
         //
         verifyException("io.lettuce.core.RedisURI$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("IHF", 53);
      redisURI0.setPassword((CharSequence) "IHF");
      redisURI0.setHost(":jaV@{(X4M.iod\"QCw9");
      RedisURI.Builder.sentinel("clientName", "timeout");
      redisURI0.isStartTls();
      Duration duration0 = Duration.ofHours(1L);
      redisURI0.setTimeout(duration0);
      redisURI0.setSocket("while (");
      char[] charArray0 = new char[1];
      char char0 = ' ';
      URI uRI0 = redisURI0.toURI();
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build a RedisURI. One of the following must be provided Host, Socket or Sentinel
         //
         verifyException("io.lettuce.core.RedisURI$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setSocket("");
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      boolean boolean0 = redisURI0.isSsl();
      assertFalse(boolean0);
      
      redisURI_Builder0.withVerifyPeer(false);
      String string0 = redisURI0.getSocket();
      assertEquals("", string0);
      
      redisURI_Builder0.withSentinel(redisURI0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = 'K';
      charArray0[2] = 'B';
      charArray0[3] = '>';
      charArray0[4] = 'd';
      charArray0[5] = 'H';
      charArray0[6] = 'G';
      charArray0[7] = 'n';
      charArray0[8] = '0';
      redisURI0.setPassword(charArray0);
      assertFalse(redisURI0.isStartTls());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setDatabase(733);
      URI uRI0 = redisURI0.toURI();
      RedisURI redisURI1 = RedisURI.create(uRI0);
      redisURI0.applySsl(redisURI1);
      redisURI0.setUsername("qGPDaA{ WOP^");
      redisURI0.getSocket();
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'x';
      redisURI1.setUsername("");
      redisURI0.setTimeout(redisURI1.DEFAULT_TIMEOUT_DURATION);
      charArray0[2] = 'j';
      redisURI1.setHost("redis+ssl");
      charArray0[3] = 'S';
      redisURI1.setPassword(charArray0);
      assertEquals(733, redisURI0.getDatabase());
      assertEquals("redis://null/733", uRI0.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("U", 61);
      redisURI0.setClientName("j`[S4-3+-RvF");
      String string0 = redisURI0.getClientName();
      assertEquals("j`[S4-3+-RvF", string0);
      
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSsl(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = '';
      charArray0[2] = 'N';
      charArray0[3] = 'c';
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withPassword(charArray0);
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withSsl(redisURI0);
      RedisURI.Builder redisURI_Builder4 = redisURI_Builder3.withStartTls(false);
      RedisCredentials redisCredentials0 = RedisCredentials.just("Invalid database number: ", (CharSequence) "database");
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider(redisCredentials0);
      RedisURI.Builder redisURI_Builder5 = redisURI_Builder4.withAuthentication((RedisCredentialsProvider) staticCredentialsProvider0);
      redisURI_Builder5.withAuthentication((RedisCredentialsProvider) staticCredentialsProvider0);
      assertEquals(61, redisURI0.getPort());
      assertEquals(0, redisURI0.getDatabase());
      assertFalse(redisURI0.isStartTls());
      assertEquals("U", redisURI0.getHost());
      assertFalse(redisURI0.isSsl());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setUsername("3eQ|zzc,");
      redisURI0.setSocket("h");
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      SslVerifyMode sslVerifyMode1 = SslVerifyMode.NONE;
      redisURI0.setVerifyPeer(sslVerifyMode1);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("rediss");
      RedisURI.Builder.redis("clientName");
      redisURI0.setPort((-1691));
      redisURI0.setPassword("Invalid URI, cannot get host or socket part");
      redisURI0.setSsl(true);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withVerifyPeer(true);
      redisURI_Builder0.withPassword((char[]) null);
      redisURI0.getPort();
      redisURI0.isVerifyPeer();
      // Undeclared exception!
      try { 
        redisURI_Builder1.withAuthentication((RedisCredentialsProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RedisCredentialsProvider must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI redisURI1 = RedisURI.create("database", 396);
      redisURI0.setDatabase(0);
      redisURI1.setSentinelMasterId("redis+socket");
      redisURI0.setClientName("");
      redisURI1.toString();
      redisURI1.setPort(0);
      redisURI1.hashCode();
      redisURI0.getSentinelMasterId();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI1);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("yutL`lHtawhQ%\"B{gHA");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot use with Redis mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "z";
      Duration duration0 = Duration.ofNanos(0L);
      RedisURI redisURI0 = new RedisURI("z", 47, duration0);
      URI uRI0 = redisURI0.toURI();
      URI uRI1 = MockURI.resolve(uRI0, "EOF");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"OF\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      URI uRI0 = redisURI0.toURI();
      String string0 = "Bk)/i/u";
      redisURI0.setPort(61);
      redisURI0.setHost("Bk)/i/u");
      redisURI0.setHost("");
      RedisURI redisURI1 = RedisURI.create(uRI0);
      redisURI0.setPassword((CharSequence) "rediss-sentinel");
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      redisURI0.setSentinelMasterId("");
      redisURI1.setClientName("2@KPB^@u%Z.f*]]S");
      RedisCredentialsProvider redisCredentialsProvider0 = RedisCredentialsProvider.from(supplier0);
      redisURI1.setCredentialsProvider(redisCredentialsProvider0);
      // Undeclared exception!
      try { 
        redisURI1.applyAuthentication(redisURI0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot configure password after setting a RedisCredentialsProvider
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("redis-socket", 6379);
      redisURI0.setPort(0);
      assertFalse(redisURI0.isStartTls());
      assertFalse(redisURI0.isSsl());
      assertEquals(0, redisURI0.getPort());
      
      RedisURI redisURI1 = RedisURI.create("verifyPeer", 6379);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI1.setVerifyPeer(sslVerifyMode0);
      redisURI_Builder0.withAuthentication(redisURI1);
      redisURI1.isVerifyPeer();
      assertEquals("verifyPeer", redisURI1.getHost());
      assertFalse(redisURI1.isStartTls());
      assertEquals(0, redisURI1.getDatabase());
      assertEquals(6379, redisURI1.getPort());
      assertFalse(redisURI1.isSsl());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "<>=K,ps`sMB}";
      RedisURI redisURI0 = RedisURI.create("<>=K,ps`sMB}", 0);
      char[] charArray0 = new char[0];
      redisURI0.setPassword(charArray0);
      redisURI0.getPassword();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("?");
      redisURI0.toString();
      // Undeclared exception!
      try { 
        redisURI_Builder0.withPort(26379);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Host is null. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Duration duration0 = Duration.ofSeconds(1000L, (long) 26379);
      redisURI0.setSocket("Timeout must be greater or equal 0");
      redisURI0.setTimeout(duration0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      redisURI0.setClientName("Timeout must be greater or equal 0");
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI0.setClientName("Timeout must be greater or equal 0");
      redisURI0.getSentinels();
      RedisURI.Builder.redis("NONE");
      redisURI0.isVerifyPeer();
      redisURI0.getDatabase();
      redisURI0.hashCode();
      RedisURI.builder(redisURI0);
      URI uRI0 = MockURI.URI("redis");
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      URI uRI0 = MockURI.URI("rediss", "b", "", "redis-sentinel", "");
      RedisURI redisURI1 = RedisURI.create(uRI0);
      assertTrue(redisURI1.isSsl());
      
      redisURI0.setClientName("reactor.core.scheduler.SchedulerMetricDecorator");
      redisURI0.getPassword();
      RedisURI.Builder.sentinel("redis-sentinel", 52);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("z. 77I ", 6379);
      redisURI_Builder0.withSsl(redisURI0);
      redisURI1.setSsl(false);
      assertFalse(redisURI1.isSsl());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisCredentialsProvider redisCredentialsProvider0 = redisURI0.getCredentialsProvider();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI0.setVerifyPeer(false);
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      URI uRI0 = redisURI0.toURI();
      assertEquals("redis://**credentialsProvider**@null", uRI0.toString());
      
      redisURI_Builder0.withSentinel(redisURI0);
      assertFalse(redisURI0.isStartTls());
      
      redisURI0.setStartTls(false);
      assertEquals(0, redisURI0.getDatabase());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Duration duration0 = Duration.ofHours(6379);
      RedisURI redisURI0 = new RedisURI("com.github.javaparser.metamodel.FieldDeclarationMetaModel", 6379, duration0);
      redisURI0.setPassword("com.github.javaparser.metamodel.FieldDeclarationMetaModel");
      Duration.ofSeconds((long) 26379);
      URI uRI0 = redisURI0.toURI();
      redisURI0.setStartTls(true);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      RedisURI.Builder redisURI_Builder1 = RedisURI.Builder.sentinel("@d", "vJ,=gJoBF7GNc");
      redisURI_Builder1.withSsl(redisURI0);
      RedisURI.Builder redisURI_Builder2 = RedisURI.Builder.socket("{@");
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder1.withSsl(redisURI0);
      redisURI_Builder3.withTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.getHost();
      redisURI0.getDatabase();
      RedisURI redisURI1 = RedisURI.create(uRI0);
      redisURI0.applySsl(redisURI1);
      redisURI1.applySsl(redisURI0);
      redisURI_Builder3.withSentinel("redis-sentinel");
      redisURI1.applySsl(redisURI0);
      redisURI0.getVerifyMode();
      redisURI_Builder0.withSentinel(redisURI1);
      redisURI_Builder1.withAuthentication("sentinelMasterId", (CharSequence) "database");
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'q';
      charArray0[2] = 'P';
      RedisURI.Builder redisURI_Builder4 = redisURI_Builder1.withPassword(charArray0);
      assertFalse(redisURI_Builder4.equals((Object)redisURI_Builder2));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("9");
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '(';
      charArray0[2] = 'P';
      charArray0[3] = 'a';
      charArray0[4] = '2';
      charArray0[5] = 'f';
      charArray0[6] = ',';
      charArray0[7] = '(';
      charArray0[8] = 'S';
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withPassword(charArray0);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSentinel("W&6", 305, (CharSequence) null);
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withAuthentication("2?rUw*d@XTd>%%#!", (CharSequence) "W&6");
      assertSame(redisURI_Builder1, redisURI_Builder3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI redisURI1 = new RedisURI("redis+tls", 1525, redisURI0.DEFAULT_TIMEOUT_DURATION);
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = '6';
      charArray0[2] = '[';
      redisURI1.setPort(1525);
      charArray0[3] = '/';
      charArray0[4] = ' ';
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider("redis-socket", charArray0);
      redisURI1.setCredentialsProvider(staticCredentialsProvider0);
      redisURI0.applyAuthentication(redisURI1);
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("", 1525, "FoJ/dOg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("Password must not be null");
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = '\'';
      redisURI_Builder0.withPassword(charArray0);
      redisURI_Builder0.withStartTls(false);
      RedisURI redisURI0 = redisURI_Builder0.build();
      redisURI0.getDatabase();
      URI uRI0 = MockURI.URI("");
      redisURI_Builder0.withAuthentication(redisURI0);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("N&&/9JdAlU", 1917);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      RedisURI.builder();
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'V';
      charArray0[2] = ',';
      charArray0[3] = '*';
      charArray0[4] = 'L';
      charArray0[5] = '=';
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider((String) null, charArray0);
      redisURI0.setCredentialsProvider(staticCredentialsProvider0);
      redisURI0.setHost("N&&/9JdAlU");
      redisURI0.setVerifyPeer(sslVerifyMode0);
      RedisURI.Builder.sentinel("rediss-sentinel");
      // Undeclared exception!
      try { 
        redisURI0.setPassword((CharSequence) "N&&/9JdAlU");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot configure password after setting a RedisCredentialsProvider
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("i", 0);
      redisURI0.setStartTls(true);
      boolean boolean0 = true;
      RedisURI redisURI1 = RedisURI.create("db", 26379);
      redisURI1.setStartTls(true);
      redisURI0.setSsl(true);
      redisURI0.setClientName("5PKc3m$J.>;#F");
      redisURI0.toString();
      redisURI0.getSentinels();
      redisURI0.setUsername("5PKc3m$J.>;#F");
      redisURI0.setHost("i");
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI1);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withDatabase(26379);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSsl(true);
      redisURI0.setPassword("/");
      String string0 = null;
      redisURI1.setStartTls(true);
      // Undeclared exception!
      try { 
        redisURI_Builder2.withSentinel("redis+tls");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot use with Redis mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setDatabase(31);
      redisURI0.hashCode();
      // Undeclared exception!
      try { 
        RedisURI.create("tx%", (-1409));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -1409
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisCredentialsProvider redisCredentialsProvider0 = redisURI0.getCredentialsProvider();
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<RedisCredentials> supplier1 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<RedisCredentials> supplier2 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier2);
      RedisCredentialsProvider.from(supplier1);
      RedisCredentialsProvider.from(supplier0);
      redisURI0.setClientName("?~C;DDj");
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      String string0 = "Dc*aL,Z },h";
      // Undeclared exception!
      try { 
        redisURI0.setPassword("Dc*aL,Z },h");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot configure password after setting a RedisCredentialsProvider
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setClientName("Yk(9H#ht");
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("clientName");
      redisURI_Builder0.withVerifyPeer(true);
      redisURI_Builder0.withSentinelMasterId("LS5C4|2");
      redisURI_Builder0.withClientName("");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinel("Yk(9H#ht", 5637, (CharSequence) "rediss");
      URI uRI0 = redisURI0.toURI();
      RedisURI.create(uRI0);
      redisURI0.getDatabase();
      redisURI0.setHost("Yk(9H#ht");
      redisURI_Builder0.withVerifyPeer(true);
      RedisURI.Builder.redis("verifyPeer");
      redisURI0.setPort(0);
      redisURI_Builder0.build();
      redisURI0.setSentinelMasterId("nhCghD'~k}]a7");
      // Undeclared exception!
      try { 
        redisURI_Builder1.withPort((-284));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Host is null. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Duration duration0 = Duration.ofDays(0);
      RedisURI redisURI0 = new RedisURI("other", 0, duration0);
      URI uRI0 = redisURI0.toURI();
      URI uRI1 = MockURI.resolve(uRI0, "database");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"atabase\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      char[] charArray0 = new char[0];
      StaticRedisCredentials staticRedisCredentials0 = new StaticRedisCredentials("sentinelMasterId", charArray0);
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider(staticRedisCredentials0);
      redisURI0.setCredentialsProvider(staticCredentialsProvider0);
      redisURI0.getPort();
      redisURI0.setUsername("YurGLb5?rl3\"Lg^M");
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("redis+ssl", 0, "redis+tls");
      redisURI0.getCredentialsProvider();
      redisURI_Builder0.withClientName("timeout");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      RedisURI.Builder.redis("database");
      redisURI0.setPort(0);
      char[] charArray1 = new char[1];
      charArray1[0] = 'i';
      redisURI_Builder1.withPassword(charArray1);
      // Undeclared exception!
      try { 
        redisURI_Builder1.withPort((-1810));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Host is null. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setClientName("wGry:P/_Z_");
      boolean boolean0 = false;
      redisURI0.setStartTls(false);
      redisURI0.setHost("");
      // Undeclared exception!
      try { 
        RedisURI.builder(redisURI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI redisURI1 = null;
      // Undeclared exception!
      try { 
        redisURI0.applySsl((RedisURI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source RedisURI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      URI uRI0 = MockURI.URI("redis+tls", "o~SR", ".A&$Yyl]*C");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid URI, cannot get host or socket part
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setStartTls(false);
      redisURI0.toString();
      RedisURI redisURI1 = new RedisURI();
      redisURI0.applySsl(redisURI1);
      RedisURI redisURI2 = RedisURI.create("redis+socket", 1928);
      redisURI2.setTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.getCredentialsProvider();
      redisURI0.equals(redisURI2);
      assertEquals(1928, redisURI2.getPort());
      
      redisURI0.setPassword("AssertStmt");
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI2);
      redisURI_Builder0.withVerifyPeer(false);
      RedisURI.Builder.sentinel("clientName", "4o[}iaG0wb");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSsl(redisURI0);
      RedisURI.Builder.sentinel("timeout", 26379);
      redisURI2.setStartTls(false);
      redisURI_Builder1.withPassword((CharSequence) "db");
      assertEquals(0, redisURI2.getDatabase());
      assertEquals("redis+socket", redisURI2.getHost());
      
      RedisURI.Builder.redis("timeout");
      String string0 = redisURI0.toString();
      assertTrue(redisURI0.equals((Object)redisURI1));
      assertFalse(redisURI0.isStartTls());
      assertEquals("redis://**********@null", string0);
      assertTrue(redisURI0.isVerifyPeer());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Duration duration0 = RedisURI.DEFAULT_TIMEOUT_DURATION;
      RedisURI redisURI0 = new RedisURI("da7&BY4", 58, duration0);
      redisURI0.setDatabase(58);
      redisURI0.setPort(58);
      char[] charArray0 = new char[0];
      redisURI0.setPassword("da7&BY4");
      redisURI0.setPassword(charArray0);
      redisURI0.getPort();
      redisURI0.setClientName("da7&BY4");
      redisURI0.getDatabase();
      redisURI0.getTimeout();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("redis-sentinel");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("verifyPeer", 58, (CharSequence) "verifyPeer");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot use with Redis mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Duration duration0 = Duration.ofDays(476L);
      RedisURI redisURI1 = new RedisURI("c%sJV\"bm}rdn,RLSLG", 26379, duration0);
      redisURI0.setSentinelMasterId("db");
      redisURI0.applySsl(redisURI1);
      String string0 = null;
      // Undeclared exception!
      try { 
        redisURI1.toURI();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot render URI for redis://c%sJV\"bm}rdn,RLSLG?timeout=41126400s
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI redisURI1 = RedisURI.create("ywJ{=IjHGR", 65535);
      redisURI0.applyAuthentication(redisURI1);
      redisURI1.setPassword("timeout");
      redisURI0.setUsername("");
      redisURI0.hashCode();
      redisURI1.getCredentialsProvider();
      redisURI1.setSsl(false);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("db", 125, "Hcl',.5(iJF");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withHost("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sentinels are non-empty. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.isSsl();
      redisURI0.setClientName("Sentinel master id must not empty");
      URI uRI0 = MockURI.URI("redis-socket", "timeout", "d");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Socket must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getCredentialsProvider();
      redisURI0.setDatabase(900);
      redisURI0.toURI();
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel((String) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      String string0 = redisURI0.getClientName();
      assertNull(string0);
      
      URI uRI0 = redisURI0.toURI();
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      RedisURI redisURI1 = RedisURI.create(uRI1);
      assertEquals("null", redisURI1.getHost());
      assertEquals(6379, redisURI1.getPort());
      assertEquals("redis://null", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI redisURI1 = new RedisURI();
      redisURI0.toString();
      redisURI0.getCredentialsProvider();
      boolean boolean0 = true;
      redisURI1.setSsl(true);
      redisURI0.applySsl(redisURI1);
      redisURI1.setTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.applySsl(redisURI1);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI0.toString();
      redisURI0.toString();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("clientName");
      char[] charArray0 = new char[0];
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withPassword(charArray0);
      // Undeclared exception!
      try { 
        redisURI_Builder1.withPort((-5436));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -5436
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      // Undeclared exception!
      try { 
        redisURI0.setDatabase((-1481));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid database number: -1481
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "FRkk*c\"]u*#vFfN,";
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      Duration duration0 = chronoUnit0.getDuration();
      RedisURI redisURI0 = new RedisURI("FRkk*c\"]u*#vFfN,", 384, duration0);
      redisURI0.hashCode();
      redisURI0.setClientName("");
      RedisURI.Builder.redis("database", 6379);
      String string1 = "0hJ";
      // Undeclared exception!
      try { 
        redisURI0.setPassword((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Password must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      assertNotNull(redisURI_Builder0);
      
      redisURI_Builder0.withSentinelMasterId("O=&.vpVHUaDu7\"}");
      Duration duration0 = Duration.ofMinutes((-312L));
      duration0.plusSeconds(0L);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withTimeout(duration0);
      // Undeclared exception!
      try { 
        redisURI_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build a RedisURI. One of the following must be provided Host, Socket or Sentinel
         //
         verifyException("io.lettuce.core.RedisURI$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getVerifyMode();
      redisURI0.setPassword("com.github.javaparser.ast.modules.ModuleRequiresStmt");
      RedisURI redisURI1 = RedisURI.create("redis-socket", 1510);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      redisURI_Builder0.withSsl(true);
      redisURI1.toString();
      redisURI0.setPort((-1804));
      redisURI1.setPassword((CharSequence) "clientName");
      redisURI1.setTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI1.applyAuthentication(redisURI0);
      redisURI1.applySsl(redisURI0);
      Object object0 = new Object();
      redisURI1.equals(object0);
      redisURI0.applyAuthentication(redisURI1);
      redisURI_Builder0.withSentinel("redis+socket");
      redisURI1.isSsl();
      redisURI_Builder0.withVerifyPeer(false);
      assertEquals((-1804), redisURI0.getPort());
      assertTrue(redisURI0.isVerifyPeer());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      // Undeclared exception!
      try { 
        redisURI0.setPassword((CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Password must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.getPort();
      RedisURI redisURI1 = null;
      // Undeclared exception!
      try { 
        redisURI0.applyAuthentication((RedisURI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source RedisURI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.create("c8", 0);
      redisURI0.getPort();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinel("redis");
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = 'g';
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withAuthentication("redis+ssl", charArray0);
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withDatabase(6379);
      // Undeclared exception!
      try { 
        redisURI_Builder3.withPort(26379);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Host is null. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Duration duration0 = Duration.ofMillis(943L);
      RedisURI redisURI0 = new RedisURI("I&1CcrG).zP}", 26379, duration0);
      duration0.minus(redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.setClientName("I&1CcrG).zP}");
      redisURI0.getPassword();
      redisURI0.getPort();
      RedisURI.builder();
      redisURI0.setUsername("Timeout duration must be greater or equal to zero");
      redisURI0.toURI();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("2-&E-Px}", 0, "timeout");
      redisURI_Builder0.withClientName("sentinelMasterId");
      redisURI_Builder0.withVerifyPeer(true);
      redisURI0.getCredentialsProvider();
      // Undeclared exception!
      try { 
        RedisURI.create("redis+tls");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("<>", 4629);
      redisURI0.setClientName("xmUlUeRvrx=SR:}L6Y");
      String string0 = "SEMICOLON";
      RedisURI.Builder.sentinel("rediss", "SEMICOLON");
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      Duration duration0 = Duration.ofNanos((-565L));
      // Undeclared exception!
      try { 
        redisURI0.setTimeout(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout must be greater or equal 0
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("Timed(", 0);
      RedisURI redisURI1 = RedisURI.create("redis+tls", 0);
      redisURI1.toURI();
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI1.setPassword((CharSequence) "redis");
      redisURI1.setVerifyPeer(sslVerifyMode0);
      redisURI1.setPassword("");
      redisURI1.setSsl(true);
      redisURI1.toURI();
      redisURI1.setPassword("rediss");
      redisURI0.setHost("E3JiX@2k7-.O");
      redisURI0.setPort(34);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      redisURI0.setSentinelMasterId("yFM_8T5i*ozQ)IPm@i");
      redisURI0.getVerifyMode();
      redisURI0.setUsername("yFM_8T5i*ozQ)IPm@i");
      redisURI0.getSentinelMasterId();
      RedisURI.Builder.sentinel("PACKAGE_DECLARATION");
      redisURI0.setSocket("yFM_8T5i*ozQ)IPm@i");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withHost("redis+ssl");
      assertSame(redisURI_Builder0, redisURI_Builder1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "{A!Q";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("{A!Q");
      int int0 = 106;
      redisURI_Builder0.withDatabase(106);
      Period period0 = Period.of(106, 106, 106);
      redisURI_Builder0.build();
      RedisURI.create(":~6Rw+}$JI@", 0);
      Period period1 = period0.withMonths(106);
      RedisURI.Builder.redis("]^*gHlR>-I1Me'H", 143);
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      // Undeclared exception!
      try { 
        period1.get(chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported unit: Millennia
         //
         verifyException("java.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "SREf&|90TwF+Da";
      RedisURI redisURI0 = RedisURI.create("SREf&|90TwF+Da", 1);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      RedisURI redisURI1 = new RedisURI();
      redisURI_Builder0.withSentinel(redisURI1);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSsl(true);
      redisURI_Builder1.withSentinel(redisURI0);
      redisURI1.applyAuthentication(redisURI0);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("redis+socket", 0, (CharSequence) "database");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot use with Redis mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      redisURI0.setPassword("null cannot be cast to non-null type kotlinx.coroutines.JobNode");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinel("clientName", 6379);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSentinel("redis-socket");
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withSsl(redisURI0);
      redisURI_Builder0.withDatabase(26379);
      RedisURI.Builder redisURI_Builder4 = redisURI_Builder3.withPassword((char[]) null);
      RedisURI.Builder.sentinel("clientName", 26379);
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider("redis+tls", (char[]) null);
      redisURI_Builder4.withAuthentication((RedisCredentialsProvider) staticCredentialsProvider0);
      // Undeclared exception!
      try { 
        RedisURI.create("dl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      redisURI0.setPassword("CallableDeclaration");
      redisURI0.getVerifyMode();
      RedisURI.builder(redisURI0);
      redisURI0.setStartTls(false);
      redisURI_Builder0.withSentinelMasterId("rediss-sentinel");
      redisURI0.getSentinels();
      assertEquals(0, redisURI0.getDatabase());
      assertFalse(redisURI0.isStartTls());
      assertFalse(redisURI0.isSsl());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Duration duration0 = Duration.ofMillis(0L);
      RedisURI redisURI0 = new RedisURI("o", (-292), duration0);
      redisURI0.getSentinelMasterId();
      redisURI0.isStartTls();
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, "db");
      URI uRI2 = MockURI.resolve(uRI1, uRI1);
      URI uRI3 = MockURI.normalize(uRI2);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme ftp not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      redisURI_Builder0.withSentinel(redisURI0);
      redisURI_Builder0.withSentinel("clientName", 6);
      redisURI0.getClientName();
      redisURI_Builder0.withSentinel("rediss");
      redisURI0.setVerifyPeer(true);
      redisURI0.setPort(1142);
      redisURI0.setSsl(true);
      redisURI_Builder0.withSentinel("redis+ssl", 0, (CharSequence) "verifyPeer");
      assertEquals(1142, redisURI0.getPort());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setStartTls(false);
      boolean boolean0 = redisURI0.isVerifyPeer();
      assertFalse(redisURI0.isStartTls());
      assertTrue(boolean0);
      assertFalse(redisURI0.isSsl());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 1399;
      RedisURI.Builder.sentinel("_H", 1399);
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setDatabase(1399);
      ChronoUnit chronoUnit0 = ChronoUnit.CENTURIES;
      // Undeclared exception!
      try { 
        Duration.of((-2001L), chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unit must not have an estimated duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme http not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Duration duration0 = null;
      // Undeclared exception!
      try { 
        redisURI0.setTimeout((Duration) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Duration duration0 = null;
      // Undeclared exception!
      try { 
        redisURI0.setCredentialsProvider((RedisCredentialsProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RedisCredentialsProvider must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("m;F+]pB", 751);
      redisURI0.setSentinelMasterId((String) null);
      // Undeclared exception!
      try { 
        RedisURI.create("iI6lqy3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = " )<e0~Ya`,rDkb4";
      // Undeclared exception!
      try { 
        RedisURI.create(" )<e0~Ya`,rDkb4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0:  )<e0~Ya`,rDkb4
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes((-4865));
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("^^v<xon9V", (-4865), duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout duration must be greater or equal to zero
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = null;
      int int0 = (-3278);
      // Undeclared exception!
      try { 
        RedisURI.create((String) null, (-3278));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Duration duration0 = Duration.ofNanos(1000L);
      RedisURI redisURI0 = new RedisURI("L).X\"/;b[Lj N", 0, duration0);
      RedisCredentialsProvider redisCredentialsProvider0 = redisURI0.getCredentialsProvider();
      RedisURI redisURI1 = RedisURI.create("redis+ssl", 31);
      redisURI1.setStartTls(false);
      RedisURI redisURI2 = RedisURI.create("redis-socket", 0);
      Duration duration1 = Duration.ofNanos(26379);
      redisURI2.setTimeout(duration1);
      redisURI0.applyAuthentication(redisURI1);
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI0.getTimeout();
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = ' ';
      charArray0[2] = 'u';
      charArray0[3] = 'A';
      charArray0[4] = 'C';
      charArray0[5] = 'd';
      charArray0[6] = 'Q';
      // Undeclared exception!
      try { 
        redisURI0.setPassword(charArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot configure password after setting a RedisCredentialsProvider
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("V-L0XT`+=3", 0);
      redisURI0.setSocket("V-L0XT`+=3");
      redisURI0.setSsl(true);
      char[] charArray0 = new char[7];
      redisURI0.setSsl(false);
      charArray0[0] = '5';
      charArray0[1] = '1';
      charArray0[2] = 'k';
      charArray0[3] = '/';
      charArray0[4] = '?';
      charArray0[5] = '6';
      charArray0[6] = 'f';
      redisURI0.setPassword(charArray0);
      redisURI0.toString();
      redisURI0.setSsl(false);
      redisURI0.setStartTls(true);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder(redisURI0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI_Builder0.withAuthentication("s ,F]", charArray0);
      redisURI_Builder0.withSentinel("timeout", 1712, (CharSequence) "redis-socket://*******@V-L0XT%60%5C%2B%3D3");
      assertFalse(redisURI0.isSsl());
      assertEquals(0, redisURI0.getDatabase());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setSocket("");
      RedisURI redisURI1 = RedisURI.create("Port out of range: %s", 0);
      assertEquals("Port out of range: %s", redisURI1.getHost());
      assertEquals(0, redisURI1.getPort());
      assertEquals(0, redisURI1.getDatabase());
      
      RedisURI redisURI2 = new RedisURI("clientName", 914, redisURI0.DEFAULT_TIMEOUT_DURATION);
      RedisURI redisURI3 = new RedisURI();
      redisURI2.applyAuthentication(redisURI3);
      redisURI0.applySsl(redisURI2);
      assertEquals("clientName", redisURI2.getHost());
      assertEquals(914, redisURI2.getPort());
      
      redisURI0.setClientName("redis-socket");
      redisURI0.setPort(2206);
      redisURI0.setUsername("Socket must not be null");
      String string0 = redisURI0.toString();
      assertEquals("redis-socket://Socket+must+not+be+null:?clientName=redis-socket", string0);
      
      redisURI0.getSentinels();
      redisURI0.setPort(0);
      redisURI0.getCredentialsProvider();
      RedisURI.builder();
      redisURI0.setHost(".zY7hWh");
      assertFalse(redisURI0.isStartTls());
      assertTrue(redisURI0.isVerifyPeer());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RedisURI.builder();
      RedisURI redisURI0 = RedisURI.create("com.github.javaparser.ast.expr.NameExpr", 0);
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = '^';
      charArray0[2] = '&';
      charArray0[3] = '2';
      charArray0[4] = '3';
      charArray0[5] = 'D';
      charArray0[6] = 't';
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider((String) null, charArray0);
      redisURI0.setCredentialsProvider(staticCredentialsProvider0);
      String string0 = redisURI0.toString();
      assertFalse(redisURI0.isStartTls());
      assertEquals("redis://com.github.javaparser.ast.expr.NameExpr:0", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("&K]QkpRxs}nG4_H4", "&K]QkpRxs}nG4_H4");
      String string0 = RedisURI.PARAMETER_NAME_CLIENT_NAME;
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinel("&K]QkpRxs}nG4_H4", 120, (CharSequence) "clientName");
      assertSame(redisURI_Builder0, redisURI_Builder1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "2_2@ f+HJ4f'ZlNHL";
      // Undeclared exception!
      try { 
        RedisURI.create("2_2@ f+HJ4f'ZlNHL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 4: 2_2@ f+HJ4f'ZlNHL
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      String string0 = null;
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Duration duration0 = Duration.ofHours(562L);
      duration0.withSeconds((-3250));
      duration0.toNanos();
      RedisURI redisURI0 = new RedisURI("G)6#FV*CqAZGuk", (-3250), duration0);
      duration0.getUnits();
      RedisURI redisURI1 = new RedisURI();
      redisURI0.applyAuthentication(redisURI1);
      redisURI0.setTimeout(duration0);
      CharBuffer charBuffer0 = CharBuffer.allocate(26379);
      String string0 = redisURI0.toString();
      assertEquals("redis://G%296%23FV*CqAZGuk:-3250?timeout=2023200s", string0);
      
      redisURI0.setPassword((CharSequence) charBuffer0);
      redisURI0.setSocket("G)6#FV*CqAZGuk");
      String string1 = redisURI0.getHost();
      assertEquals("G)6#FV*CqAZGuk", string1);
      
      redisURI0.toURI();
      redisURI0.equals(charBuffer0);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("redis+ssl");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSsl(redisURI0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'T';
      charArray0[2] = '(';
      charArray0[3] = ']';
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withAuthentication("db", charArray0);
      redisURI_Builder2.withAuthentication("", (CharSequence) "timeout");
      assertEquals("G)6#FV*CqAZGuk", redisURI0.getSocket());
      assertEquals("G)6#FV*CqAZGuk", redisURI0.getHost());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = null;
      int int0 = 31;
      // Undeclared exception!
      try { 
        RedisURI.create((String) null, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.builder();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("HzcHnt8zpTA");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withAuthentication("PaJ*gU'?#+GbY#", (CharSequence) "rediss");
      redisURI_Builder1.withPassword((CharSequence) "verifyPeer");
      redisURI_Builder1.withSentinel(redisURI0);
      boolean boolean0 = true;
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSsl(true);
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withSentinel("PaJ*gU'?#+GbY#");
      int int0 = 0;
      redisURI_Builder1.withDatabase(6379);
      redisURI_Builder1.withDatabase(26379);
      // Undeclared exception!
      try { 
        redisURI_Builder3.withHost("redis");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sentinels are non-empty. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        RedisURI.create("", 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = null;
      String string1 = "K";
      URI uRI0 = MockURI.URI((String) null, "K", "K", "");
      URI uRI1 = MockURI.normalize(uRI0);
      // Undeclared exception!
      try { 
        RedisURI.create(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("INHERIT_DOC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "i(dhbEmI|t0g]Oo;Ti";
      try { 
        MockURI.URI("bQpE-M;P1*", "bQpE-M;P1*", "bQpE-M;P1*", "i(dhbEmI|t0g]Oo;Ti");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: bQpE-M;P1*://bQpE-M;P1*bQpE-M;P1*#i(dhbEmI%7Ct0g]Oo;Ti
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      RedisURI redisURI0 = new RedisURI();
      redisURI_Builder0.withSsl(redisURI0);
      RedisURI.Builder.sentinel("rediss-sentinel", "db");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withDatabase((-2260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid database number: -2260
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("I:XGS .&I_:,4;", 0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '^';
      charArray0[2] = 'w';
      charArray0[3] = ']';
      charArray0[4] = 'V';
      charArray0[5] = 't';
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider("redis-sentinel", charArray0);
      redisURI0.setCredentialsProvider(staticCredentialsProvider0);
      redisURI0.setVerifyPeer(true);
      assertEquals(SslVerifyMode.FULL, redisURI0.getVerifyMode());
      
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI0.setDatabase(0);
      assertEquals("I:XGS .&I_:,4;", redisURI0.getHost());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("T", 2109, "T");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withStartTls(true);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSentinel("axFOi5;/", 0);
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withDatabase(3858);
      // Undeclared exception!
      try { 
        redisURI_Builder3.withSentinel("T", (-659));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -659
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        MockURI.URI("Invalid URI, cannot get host or socket part", "Invalid URI, cannot get host or socket part", "Invalid URI, cannot get host or socket part", ".I%n-`$");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: Invalid URI, cannot get host or socket part://Invalid URI, cannot get host or socket partInvalid%20URI,%20cannot%20get%20host%20or%20socket%20part#.I%25n-%60$
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI redisURI1 = new RedisURI();
      RedisURI.builder(redisURI1);
      // Undeclared exception!
      try { 
        RedisURI.create("db");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Duration duration0 = Duration.ofMillis((-1L));
      duration0.withNanos(61);
      duration0.plusHours((-1L));
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("gfD4;DU/!Uyw%Rx", 61, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout duration must be greater or equal to zero
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      Object object0 = new Object();
      redisURI0.setVerifyPeer(false);
      redisURI0.equals(object0);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withHost("redis+ssl");
      assertSame(redisURI_Builder1, redisURI_Builder0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("td2Ta", 0);
      redisURI0.setPassword((CharSequence) "td2Ta");
      Duration duration0 = Duration.ofSeconds(60L, (long) 6379);
      duration0.minus(redisURI0.DEFAULT_TIMEOUT_DURATION);
      Duration.ofMinutes((-1118L));
      duration0.getNano();
      redisURI0.setTimeout(duration0);
      redisURI0.toURI();
      redisURI0.setPassword("ZP&VAK2d");
      RedisURI redisURI1 = RedisURI.create("redis+socket", 6);
      redisURI0.getSentinelMasterId();
      RedisURI redisURI2 = RedisURI.create("redis-sentinel", 0);
      redisURI2.setUsername("redis+tls");
      redisURI2.getSocket();
      redisURI1.setSsl(true);
      redisURI2.setHost("");
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("=J+U\";uo@EeSi8", 6379, "redis-sentinel");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel((String) null, (-252));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RedisURI.Builder.socket("com.github.javaparser.metamodel.DoStmtMetaModel");
      RedisURI redisURI0 = RedisURI.create("com.github.javaparser.metamodel.DoStmtMetaModel", 0);
      RedisURI redisURI1 = RedisURI.create("database", 26379);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI1.setPassword((CharSequence) "redis-socket");
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI1.getDatabase();
      redisURI0.setVerifyPeer(true);
      redisURI0.setSsl(true);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      redisURI1.setVerifyPeer(true);
      redisURI0.getTimeout();
      redisURI_Builder0.withSsl(redisURI0);
      redisURI0.setVerifyPeer(true);
      assertEquals(SslVerifyMode.FULL, redisURI0.getVerifyMode());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "LastOperator hook returned null";
      int int0 = (-3543);
      // Undeclared exception!
      try { 
        RedisURI.create("LastOperator hook returned null", (-3543));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -3543
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RedisURI.builder();
      try { 
        MockURI.URI("$lS#Uc\"Y=c1", "$lS#Uc\"Y=c1", "", (-2063), "Timeout must be greater or equal 0", "&", "r5pk7v*\bW{W`W~q");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: $lS#Uc\"Y=c1://$lS%23Uc%22Y=c1%7F@:-2063Timeout%20must%20be%20greater%20or%20equal%200?&#r5pk7v*%08W%7BW%60W~q
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("StringLiteralExpr");
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider redisCredentialsProvider0 = RedisCredentialsProvider.from(supplier0);
      redisURI_Builder0.withAuthentication(redisCredentialsProvider0);
      redisURI_Builder0.build();
      boolean boolean0 = true;
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withStartTls(true);
      // Undeclared exception!
      try { 
        redisURI_Builder1.withPort((-62));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Host is null. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "@9m%=!efhky!OG";
      // Undeclared exception!
      try { 
        RedisURI.create("@9m%=!efhky!OG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed escape pair at index 3: @9m%=!efhky!OG
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        RedisURI.create("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        MockURI.URI("", "DECIMAL_EXPONENT", "tW0");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :DECIMAL_EXPONENT#tW0
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        RedisURI.Builder.redis("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Duration duration0 = RedisURI.DEFAULT_TIMEOUT_DURATION;
      RedisURI redisURI0 = new RedisURI("com.github.javaparser.ast.Node$1", (-1768), duration0);
      redisURI0.setClientName("com.github.javaparser.ast.Node$1");
      redisURI0.setDatabase(0);
      redisURI0.setClientName("");
      // Undeclared exception!
      try { 
        RedisURI.create("sentinelMasterId");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "18ie7@A{-,";
      int int0 = 47;
      RedisURI.Builder.sentinel("18ie7@A{-,", 47, "18ie7@A{-,");
      // Undeclared exception!
      try { 
        RedisURI.create("18ie7@A{-,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 7: 18ie7@A{-,
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("-", 0);
      RedisURI redisURI1 = new RedisURI();
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      redisURI0.setClientName("Cancelled");
      charArray0[1] = 'Y';
      URI uRI0 = redisURI0.toURI();
      RedisURI.create(uRI0);
      redisURI0.setStartTls(false);
      charArray0[2] = '\u001F';
      charArray0[3] = '%';
      redisURI1.setUsername("Client name must not be null");
      charArray0[4] = '~';
      redisURI1.setPassword(charArray0);
      redisURI0.applySsl(redisURI1);
      redisURI0.getUsername();
      redisURI1.getSentinelMasterId();
      redisURI1.isSsl();
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("database", (-1941), "wKa(UtU ,b]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -1941
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = ">ll>t|\\d?pO#kSJpJB-";
      int int0 = 64;
      // Undeclared exception!
      try { 
        Duration.parse(">ll>t|d?pO#kSJpJB-");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text cannot be parsed to a Duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("pdM", "clientName");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withHost("rediss");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sentinels are non-empty. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = null;
      int int0 = 4508;
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI((String) null, 4508, (Duration) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'H';
      charArray0[2] = '=';
      charArray0[3] = '*';
      redisURI0.setPassword(charArray0);
      int int0 = 3290;
      redisURI0.setPort(3290);
      RedisURI.Builder.sentinel("rediss", "*D.Y@");
      String string0 = "";
      // Undeclared exception!
      try { 
        RedisURI.Builder.redis("", (-3631));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("`-%_#8");
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'E';
      RedisURI.Builder.sentinel("`-%_#8", 6379, "q,");
      redisURI_Builder0.withDatabase(58);
      charArray0[2] = 'T';
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withAuthentication("`-%_#8", charArray0);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSentinelMasterId("RECEIVER_PARAMETER");
      redisURI_Builder2.withSsl(true);
      redisURI_Builder2.withSentinel("onHandleError", 414, (CharSequence) "RECEIVER_PARAMETER");
      redisURI_Builder0.withClientName("onHandleError");
      // Undeclared exception!
      try { 
        RedisURI.create("q,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "aY[oxmY!k\\";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("aY[oxmY!k");
      redisURI_Builder0.withSentinelMasterId("BQz7epZL))@h");
      int int0 = 64711720;
      // Undeclared exception!
      try { 
        RedisURI.create("aY[oxmY!k", 64711720);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: 64711720
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "Client name must not be null";
      int int0 = (-2390);
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("Client name must not be null", (-2390));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -2390
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("8yR?7W3.JP?", 2202, "8yR?7W3.JP?");
      assertNotNull(redisURI_Builder0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      RedisURI redisURI0 = new RedisURI("\"Kx7p:^LO`&4=", 1076, duration0);
      redisURI0.hashCode();
      RedisURI redisURI1 = new RedisURI("database", 6379, redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.applyAuthentication(redisURI1);
      assertEquals(1076, redisURI0.getPort());
      assertEquals("\"Kx7p:^LO`&4=", redisURI0.getHost());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("", 131, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      RedisURI redisURI0 = RedisURI.create("ilJaKpt4", 0);
      redisURI0.setSentinelMasterId("ilJaKpt4");
      try { 
        MockURI.URI("Zx5{I8PTSqPP}u 'su", "redis-sentinel", "rediss-sentinel", "redis", "rediss");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: Zx5{I8PTSqPP}u 'su://redis-sentinelrediss-sentinel?redis#rediss
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("", 121);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'b';
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withPassword(charArray0);
      String string0 = "8XA E$d?l paLe_g";
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider redisCredentialsProvider0 = RedisCredentialsProvider.from(supplier0);
      Supplier<RedisCredentials> supplier1 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<RedisCredentials> supplier2 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier2);
      RedisCredentialsProvider.from(supplier1);
      redisURI_Builder1.withAuthentication(redisCredentialsProvider0);
      RedisURI.Builder.socket("8XA E$d?l paLe_g");
      RedisURI.Builder.redis("io.lettuce.core.cluster.ClusterPubSubConnectionProvider$DecoratingClusterNodeConnectionFactory");
      // Undeclared exception!
      try { 
        redisURI_Builder1.withSsl((RedisURI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source RedisURI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.Builder.socket((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Socket must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "Timeout must not be null";
      // Undeclared exception!
      try { 
        MockURI.create("Timeout must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 7: Timeout must not be null
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "";
      int int0 = 114;
      // Undeclared exception!
      try { 
        RedisURI.create("", 114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("", 21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("Y( WgDkj", 90);
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = 'd';
      charArray0[2] = ':';
      charArray0[3] = 'B';
      charArray0[4] = 'O';
      charArray0[5] = 'v';
      redisURI_Builder0.withPassword(charArray0);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("", 0, (CharSequence) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "+d/0^";
      int int0 = (-2608);
      // Undeclared exception!
      try { 
        RedisURI.create("+d/0^", (-2608));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -2608
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("`f}Onc[Md`$l8A_", 0);
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      redisURI0.setSocket("&");
      redisURI0.getSentinels();
      RedisURI redisURI1 = RedisURI.create("uJs/gd,gtDOAwUrPxS3", 0);
      RedisCredentialsProvider redisCredentialsProvider0 = redisURI0.getCredentialsProvider();
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<RedisCredentials> supplier1 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier1);
      RedisCredentialsProvider.from(supplier0);
      redisURI0.setCredentialsProvider(redisCredentialsProvider0);
      redisURI1.toString();
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withAuthentication(redisURI0);
      // Undeclared exception!
      try { 
        redisURI_Builder1.withSentinel("uQ|<(2K8SD@@Z/W*f", (-570));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -570
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = null;
      int int0 = (-1725);
      Duration duration0 = Duration.ofMinutes(0L);
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI((String) null, (-1725), duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      // Undeclared exception!
      try { 
        RedisURI.create("", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      RedisURI redisURI0 = RedisURI.create("'", 58);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("-");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withPort(58);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withAuthentication("redis+ssl", (CharSequence) "rediss");
      SslVerifyMode sslVerifyMode1 = SslVerifyMode.FULL;
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withVerifyPeer(sslVerifyMode1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = '0';
      charArray0[2] = 'm';
      charArray0[3] = ']';
      charArray0[4] = '@';
      charArray0[5] = '_';
      RedisURI.Builder redisURI_Builder4 = redisURI_Builder3.withPassword(charArray0);
      RedisURI.Builder redisURI_Builder5 = redisURI_Builder4.withVerifyPeer(true);
      assertSame(redisURI_Builder0, redisURI_Builder5);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = (-126);
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("/D:s4C", (-126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -126
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("Sentinel master id must not empty");
      Duration duration0 = Duration.ofNanos((-694L));
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withTimeout(duration0);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withAuthentication("", (CharSequence) "Sentinel master id must not empty");
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withClientName("Sentinel master id must not empty");
      RedisURI.Builder redisURI_Builder4 = redisURI_Builder3.withSentinelMasterId("Sentinel master id must not empty");
      RedisURI redisURI0 = new RedisURI();
      RedisURI.Builder redisURI_Builder5 = redisURI_Builder4.withSentinel(redisURI0);
      RedisURI.Builder redisURI_Builder6 = redisURI_Builder5.withSentinel("Sentinel master id must not empty", 0);
      assertSame(redisURI_Builder6, redisURI_Builder0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      URI uRI0 = MockURI.create("sn$zd!_B=?qcT");
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setSocket("");
      redisURI0.getUsername();
      redisURI0.setPort(179);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("sentinelMasterId");
      char[] charArray0 = new char[0];
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withPassword(charArray0);
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withSentinelMasterId("timeout");
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withStartTls(true);
      redisURI_Builder0.withSentinel("rediss-sentinel", 2372);
      RedisURI.Builder redisURI_Builder4 = redisURI_Builder2.withStartTls(false);
      redisURI_Builder4.withSentinelMasterId("rediss-sentinel");
      redisURI0.setPort(179);
      redisURI_Builder2.withAuthentication("db=", (CharSequence) "redis-socket");
      // Undeclared exception!
      try { 
        redisURI_Builder3.withSentinel("-#F}?n(r7o)D'G", (-2286));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -2286
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        RedisURI.create(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scheme file not supported
         //
         verifyException("io.lettuce.core.RedisURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = ":_)`Ll8";
      RedisURI.Builder.sentinel(":_)`Ll8");
      // Undeclared exception!
      try { 
        RedisURI.create(":_)`Ll8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected scheme name at index 0: :_)`Ll8
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 0;
      RedisURI.Builder.sentinel("Cannot render URI for ", 0);
      Duration duration0 = Duration.ofNanos(0);
      RedisURI redisURI0 = new RedisURI("Cannot render URI for ", 0, duration0);
      redisURI0.getHost();
      duration0.plusSeconds(0L);
      duration0.toString();
      duration0.getNano();
      RedisURI redisURI1 = null;
      try {
        redisURI1 = new RedisURI("", 0, redisURI0.DEFAULT_TIMEOUT_DURATION);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = (-481);
      // Undeclared exception!
      try { 
        RedisURI.create("jgS_v\"%S\"!h", (-481));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -481
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      String string0 = "ELSE_EXPR";
      redisURI0.setClientName("ELSE_EXPR");
      redisURI0.setStartTls(true);
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("timeout", 6379);
      String string1 = "sentinelMasterId=";
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withClientName("sentinelMasterId=");
      // Undeclared exception!
      try { 
        redisURI_Builder1.withPort(26379);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Host is null. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel((String) null, 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("Lv:,A", 0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 't';
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withPassword(charArray0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.FULL;
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withVerifyPeer(sslVerifyMode0);
      RedisURI.Builder redisURI_Builder3 = redisURI_Builder2.withVerifyPeer(true);
      assertSame(redisURI_Builder3, redisURI_Builder2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      redisURI_Builder0.withStartTls(true);
      RedisURI.Builder.sentinel("muj24D_,u)Me/?_b");
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      redisURI_Builder0.withVerifyPeer(sslVerifyMode0);
      redisURI_Builder0.withSentinel("ObjectCreationExpr", 6379, (CharSequence) "ObjectCreationExpr");
      redisURI_Builder0.withStartTls(true);
      Duration duration0 = Duration.ZERO;
      RedisURI redisURI0 = new RedisURI("ObjectCreationExpr", 6379, duration0);
      RedisCredentialsProvider redisCredentialsProvider0 = redisURI0.getCredentialsProvider();
      redisURI_Builder0.withAuthentication(redisCredentialsProvider0);
      redisURI_Builder0.withSentinelMasterId("%s is not an DoubleLiteralExpr");
      RedisURI redisURI1 = new RedisURI();
      redisURI1.setPassword("%s is not an DoubleLiteralExpr");
      redisURI1.applySsl(redisURI0);
      SslVerifyMode sslVerifyMode1 = SslVerifyMode.CA;
      redisURI0.setVerifyPeer(sslVerifyMode1);
      redisURI1.setStartTls(true);
      String string0 = redisURI1.toString();
      assertEquals("redis://******************************@null", string0);
      
      redisURI1.getPassword();
      RedisURI.builder(redisURI0);
      assertEquals("ObjectCreationExpr", redisURI0.getHost());
      assertEquals(6379, redisURI0.getPort());
      
      redisURI1.hashCode();
      assertEquals(0, redisURI1.getPort());
      assertEquals(SslVerifyMode.FULL, redisURI1.getVerifyMode());
      assertEquals(0, redisURI1.getDatabase());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("U");
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinelMasterId("U");
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withVerifyPeer(sslVerifyMode0);
      RedisURI redisURI0 = redisURI_Builder2.build();
      redisURI0.toString();
      redisURI_Builder2.withVerifyPeer(sslVerifyMode0);
      redisURI0.getPort();
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("redis+tls", 597, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sentinel master id must not empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      String string0 = "";
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("", 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        RedisURI.create((String) null, 528);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("", (-1271));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "7~E{";
      String string1 = "1CdZf{^}YdC7H\"";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("7~E{", "1CdZf{^}YdC7H\"");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withHost("1CdZf{^}YdC7H\"");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sentinels are non-empty. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "com.github.javaparser.metamodel.CharLiteralExprMetaModel";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("com.github.javaparser.metamodel.CharLiteralExprMetaModel", 104, "com.github.javaparser.metamodel.CharLiteralExprMetaModel");
      String string1 = "Zq^TtWgb@-";
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinel("Zq^TtWgb@-");
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder1.withVerifyPeer(true);
      // Undeclared exception!
      try { 
        redisURI_Builder2.withHost("Zq^TtWgb@-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sentinels are non-empty. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "a6|agxI";
      // Undeclared exception!
      try { 
        RedisURI.create("a6|agxI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 2: a6|agxI
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "_#?b\".HvCHlt?-";
      // Undeclared exception!
      try { 
        RedisURI.create("_#?b\".HvCHlt?-", (-682));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -682
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "";
      int int0 = 2;
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      // Undeclared exception!
      try { 
        Duration.of(2, chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unit must not have an estimated duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes(58);
      RedisURI redisURI0 = new RedisURI("f", 58, duration0);
      redisURI0.setUsername("f");
      assertFalse(redisURI0.isSsl());
      assertEquals("f", redisURI0.getUsername());
      assertEquals("f", redisURI0.getHost());
      assertEquals(58, redisURI0.getPort());
      assertFalse(redisURI0.isStartTls());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("reactor.core.publisher.ImmutableSignal", "9J'{?dj|");
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'a';
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withAuthentication(".lw^kB8/2JN/u|q", charArray0);
      // Undeclared exception!
      try { 
        redisURI_Builder1.withSentinel((RedisURI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Redis URI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "ms";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("ms");
      // Undeclared exception!
      try { 
        redisURI_Builder0.withHost("ms");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sentinels are non-empty. Cannot use in Sentinel mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Duration duration0 = Duration.ofNanos(1L);
      RedisURI redisURI0 = new RedisURI(".hxT", 816, duration0);
      duration0.minusNanos(0L);
      redisURI0.setVerifyPeer(false);
      RedisURI.builder(redisURI0);
      URI uRI0 = redisURI0.toURI();
      RedisURI redisURI1 = RedisURI.create(uRI0);
      redisURI1.toURI();
      String string0 = "";
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("", 6379, "redis+socket");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.builder((RedisURI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source RedisURI must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("MsnYT%z)I@&rR?bX1Ue", (-2999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -2999
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 0;
      Duration duration0 = Duration.ofDays(150L);
      RedisURI redisURI0 = new RedisURI("jgFM`/&pG6W[", 0, duration0);
      redisURI0.getCredentialsProvider();
      duration0.plusMinutes(0L);
      redisURI0.toURI();
      String string0 = "7~(73G@O +k5`7_";
      // Undeclared exception!
      try { 
        Duration.parse("rediss");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text cannot be parsed to a Duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "Z8|960B";
      int int0 = (-580);
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("Z8|960B", (-580), "Z8|960B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range: -580
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("5N}7#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 2: 5N}7#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(666L, (-1L));
      RedisURI redisURI0 = new RedisURI(")o?lNwn", 0, duration0);
      // Undeclared exception!
      try { 
        RedisURI.create("sentinelMasterId");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme must not be null
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setUsername("Password must not be null");
      boolean boolean0 = false;
      redisURI0.setVerifyPeer(false);
      // Undeclared exception!
      try { 
        RedisURI.Builder.sentinel("", "redis+tls");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setPort(0);
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.NONE;
      RedisURI.builder();
      redisURI0.setVerifyPeer(true);
      assertEquals(SslVerifyMode.FULL, redisURI0.getVerifyMode());
      
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI0.getHost();
      assertFalse(redisURI0.isStartTls());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.Builder.redis("", (-1794));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      try { 
        MockURI.URI("", ",", "", 3002, "", (String) null, "QHdlFN");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://,@:3002#QHdlFN
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        RedisURI.Builder.redis("", 65535);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisURI.create("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "";
      RedisURI redisURI0 = null;
      try {
        redisURI0 = new RedisURI("", 1687, (Duration) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host must not be empty
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      // Undeclared exception!
      try { 
        redisURI0.setDatabase((-1558));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid database number: -1558
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "reactor.schedulers.defaultBoundedElasticQueueSize";
      String string1 = "Timeout duration must not be null";
      try { 
        MockURI.URI("6C8s\"-vbJ+z7w?", "reactor.schedulers.defaultBoundedElasticQueueSize", "=Xh(5|#R[23$=<P", "Timeout duration must not be null", "onError(%s)");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 6C8s\"-vbJ+z7w?://reactor.schedulers.defaultBoundedElasticQueueSize=Xh(5%7F%7C%23R%5B23$=%3CP?Timeout%20duration%20must%20not%20be%20null#onError(%25s)
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = ",E&C:tNi4xj'Y`yOn^";
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis(",E&C:tNi4xj'Y`yOn^", 0);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel(",E&C:tNi4xj'Y`yOn^");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot use with Redis mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      RedisURI.Builder.sentinel("E}eCM", "[Socket %s]");
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<RedisCredentials> supplier1 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier1);
      RedisURI redisURI0 = new RedisURI();
      RedisURI.builder(redisURI0);
      RedisURI redisURI1 = new RedisURI();
      redisURI1.setSentinelMasterId("E}eCM");
      RedisURI.builder(redisURI1);
      assertEquals("E}eCM", redisURI1.getSentinelMasterId());
      assertFalse(redisURI1.isStartTls());
      assertEquals(0, redisURI1.getDatabase());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.setVerifyPeer(true);
      assertEquals(SslVerifyMode.FULL, redisURI0.getVerifyMode());
      
      SslVerifyMode sslVerifyMode0 = SslVerifyMode.CA;
      redisURI0.setVerifyPeer(sslVerifyMode0);
      redisURI0.setSocket("");
      redisURI0.hashCode();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("db", 26379, ")\t@)|2");
      redisURI_Builder0.build();
      redisURI_Builder0.build();
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withAuthentication(redisURI0);
      redisURI_Builder1.withTimeout(redisURI0.DEFAULT_TIMEOUT_DURATION);
      redisURI0.getCredentialsProvider();
      assertEquals("", redisURI0.getSocket());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.redis("`6Oc");
      String string0 = "+3(\\HV^M_]\"";
      RedisURI redisURI0 = RedisURI.create("^1iXuuk:V fOsa|", 0);
      URI uRI0 = redisURI0.toURI();
      RedisURI.create(uRI0);
      // Undeclared exception!
      try { 
        redisURI_Builder0.withSentinel("com.github.javaparser.metamodel.CallableDeclarationMetaModel", 26379);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot use with Redis mode.
         //
         verifyException("io.lettuce.core.internal.LettuceAssert", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.socket("db");
      RedisURI.Builder redisURI_Builder1 = RedisURI.Builder.socket("X'A$tb_#88!dUx");
      assertFalse(redisURI_Builder1.equals((Object)redisURI_Builder0));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      RedisURI.Builder redisURI_Builder0 = RedisURI.builder();
      RedisURI redisURI0 = RedisURI.create("={2Cr}hhw*k;O(3", 0);
      RedisCredentials redisCredentials0 = RedisCredentials.just("redis-sentinel", (CharSequence) "rediss");
      RedisCredentials.just("\"ENYtJQ'2", (CharSequence) "redis+socket");
      StaticCredentialsProvider staticCredentialsProvider0 = new StaticCredentialsProvider(redisCredentials0);
      Supplier<RedisCredentials> supplier0 = (Supplier<RedisCredentials>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RedisCredentialsProvider.from(supplier0);
      redisURI0.setCredentialsProvider(staticCredentialsProvider0);
      RedisURI.Builder redisURI_Builder1 = redisURI_Builder0.withSentinel("sentinelMasterId=", 0, (CharSequence) "redis+ssl");
      RedisURI.Builder redisURI_Builder2 = redisURI_Builder0.withSsl(false);
      assertSame(redisURI_Builder2, redisURI_Builder1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      RedisURI redisURI0 = new RedisURI();
      redisURI0.isSsl();
      RedisURI.Builder redisURI_Builder0 = RedisURI.Builder.sentinel("< *(G:bM;:c(}.>X-%");
      redisURI_Builder0.withDatabase(6379);
      redisURI0.setPort(905);
      assertEquals(905, redisURI0.getPort());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "GiXDqi-5:'\"[Y!";
      int int0 = 1341;
      // Undeclared exception!
      try { 
        RedisURI.create("GiXDqi-5:'\"[Y!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in opaque part at index 10: GiXDqi-5:'\"[Y!
         //
         verifyException("java.net.URI", e);
      }
  }
}
