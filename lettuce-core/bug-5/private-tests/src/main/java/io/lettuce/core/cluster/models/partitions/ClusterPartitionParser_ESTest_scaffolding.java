/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Nov 25 04:50:34 GMT 2023
 */

package io.lettuce.core.cluster.models.partitions;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class ClusterPartitionParser_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "io.lettuce.core.cluster.models.partitions.ClusterPartitionParser"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/crhf/projects/apr-comp/experiment/functional-java-private/lettuce-core/bug-5/src"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ClusterPartitionParser_ESTest_scaffolding.class.getClassLoader() ,
      "io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag",
      "com.google.common.base.Converter$ConverterComposition",
      "io.lettuce.core.cluster.models.partitions.Partitions",
      "io.lettuce.core.models.role.RedisNodeDescription",
      "io.lettuce.core.internal.LettuceAssert",
      "com.google.common.hash.BloomFilter$Strategy",
      "io.lettuce.core.models.role.RedisInstance",
      "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray",
      "com.google.common.base.Converter",
      "com.google.common.base.Function",
      "io.lettuce.core.RedisException",
      "io.lettuce.core.internal.LettuceLists",
      "io.lettuce.core.cluster.models.partitions.RedisClusterNode",
      "com.google.common.base.Converter$IdentityConverter",
      "com.google.common.hash.BloomFilter",
      "io.lettuce.core.cluster.models.partitions.ClusterPartitionParser$KeyValueMap",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "com.google.common.hash.Funnel",
      "com.google.common.base.ElementTypesAreNonnullByDefault",
      "io.lettuce.core.internal.HostAndPort",
      "com.google.common.base.Converter$ReverseConverter",
      "io.lettuce.core.cluster.models.partitions.ClusterPartitionParser",
      "com.google.common.base.Predicate",
      "io.lettuce.core.internal.LettuceStrings",
      "com.google.common.base.ParametricNullness",
      "com.google.common.base.Preconditions"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.Comparator", false, ClusterPartitionParser_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("java.util.function.BiFunction", false, ClusterPartitionParser_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("java.util.function.Consumer", false, ClusterPartitionParser_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ClusterPartitionParser_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "io.lettuce.core.cluster.models.partitions.RedisClusterNode$NodeFlag",
      "io.lettuce.core.cluster.models.partitions.ClusterPartitionParser",
      "io.lettuce.core.cluster.models.partitions.ClusterPartitionParser$KeyValueMap",
      "kotlin.DeprecationLevel",
      "io.lettuce.core.cluster.models.partitions.Partitions",
      "io.lettuce.core.internal.LettuceAssert",
      "io.lettuce.core.RedisException",
      "io.lettuce.core.SslVerifyMode",
      "io.lettuce.core.internal.HostAndPort",
      "io.lettuce.core.internal.LettuceStrings",
      "com.google.common.base.Converter",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "com.google.common.base.Preconditions",
      "com.google.common.base.Converter$IdentityConverter",
      "com.google.common.base.Converter$ConverterComposition",
      "com.google.common.hash.BloomFilter",
      "com.google.common.primitives.UnsignedBytes",
      "com.google.common.base.Converter$ReverseConverter",
      "com.google.common.hash.BloomFilterStrategies",
      "com.google.common.base.Strings",
      "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray",
      "com.google.common.math.LongMath",
      "com.google.common.math.LongMath$1",
      "com.google.common.primitives.IntsMethodsForWeb",
      "com.google.common.primitives.Ints",
      "com.google.common.hash.Striped64$1",
      "com.google.common.hash.Striped64",
      "com.google.common.hash.LongAdder",
      "com.google.common.hash.LongAddables$1",
      "com.google.common.hash.LongAddables",
      "com.google.common.base.Converter$1",
      "com.google.common.math.DoubleMath",
      "com.google.common.math.DoubleUtils",
      "com.google.common.math.DoubleMath$1",
      "com.google.common.math.MathPreconditions",
      "io.lettuce.core.RedisURI$Builder",
      "io.lettuce.core.RedisURI",
      "io.lettuce.core.LettuceVersion",
      "io.lettuce.core.internal.LettuceLists"
    );
  }
}
