/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 04:50:34 GMT 2023
 */

package io.lettuce.core.cluster.models.partitions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.lettuce.core.cluster.models.partitions.ClusterPartitionParser;
import io.lettuce.core.cluster.models.partitions.Partitions;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClusterPartitionParser_ESTest extends ClusterPartitionParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, BitSet> hashMap1 = new HashMap<String, BitSet>();
      LongBuffer longBuffer0 = LongBuffer.allocate(702);
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      hashMap1.put((String) null, bitSet0);
      hashMap0.putAll(hashMap1);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      Vector<Object> vector0 = new Vector<Object>();
      ClusterPartitionParser.parse((List<Object>) vector0);
      clusterPartitionParser_KeyValueMap1.get("");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap2 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      hashMap0.replace("q-8ih[#1h}m", (Object) "");
      clusterPartitionParser_KeyValueMap0.get("lB<K4<7T;k$=E");
      clusterPartitionParser_KeyValueMap1.get(",  eventTimestampEpochMillis=");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse(",  eventTimestampEpochMillis=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse ,  eventTimestampEpochMillis=
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(stack0);
      stack0.clear();
      Object object0 = new Object();
      stack0.add((Object) linkedHashSet0);
      stack0.add(object0);
      stack0.addAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) stack0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = (Object) linkedList0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = new Object();
      unaryOperator0.apply(object0);
      Object object1 = new Object();
      unaryOperator0.apply(object1);
      linkedList0.replaceAll(unaryOperator0);
      objectArray0[5] = (Object) linkedList0;
      objectArray0[6] = (Object) linkedList0;
      linkedList0.add(objectArray0[1]);
      linkedList0.toArray(objectArray0);
      ClusterPartitionParser.parse((List<Object>) linkedList0);
      ClusterPartitionParser.parse((List<Object>) linkedList0);
      String string0 = "!VN(IFC";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("!VN(IFC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse !VN(IFC
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = 0;
      List<Object> list0 = arrayList0.subList(0, 0);
      Object object0 = new Object();
      arrayList0.add(object0);
      Object object1 = new Object();
      arrayList0.add(object1);
      arrayList0.add(object1);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "io.lettuce.core.cluster.models.partitions.ClusterPartitionParser";
      clusterPartitionParser_KeyValueMap0.get("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser");
      Stack<Object> stack0 = new Stack<Object>();
      stack0.listIterator();
      stack0.add((Object) null);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [null]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "";
      ClusterPartitionParser.parse("");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Short short0 = new Short((short)0);
      Object object0 = new Object();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string1 = "nodes";
      clusterPartitionParser_KeyValueMap0.get("nodes");
      hashMap0.remove(object0, (Object) null);
      hashMap0.put("", short0);
      BiFunction<Object, Object, BitSet> biFunction0 = (BiFunction<Object, Object, BitSet>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.merge("", short0, biFunction0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap1.get("");
      clusterPartitionParser_KeyValueMap1.get("");
      ClusterPartitionParser.parse("");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("nodes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse nodes
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.replace("0", (Object) "0");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("");
      Stack<Object> stack0 = new Stack<Object>();
      Partitions partitions0 = ClusterPartitionParser.parse((List<Object>) stack0);
      Partitions partitions1 = ClusterPartitionParser.parse("");
      assertNotSame(partitions1, partitions0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      ClusterPartitionParser.parse((List<Object>) arrayList0);
      Partitions partitions0 = ClusterPartitionParser.parse("");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap1.get("");
      Partitions partitions1 = ClusterPartitionParser.parse("");
      assertNotSame(partitions1, partitions0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "reactor.test.ValueFormatters$PredicateBasedToStringConverter";
      String string1 = "PP76i";
      // Undeclared exception!
      try { 
        ByteBuffer.allocateDirect((-1612));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -1612
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse null
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "";
      Partitions partitions0 = ClusterPartitionParser.parse("");
      hashMap0.put("", partitions0);
      String string1 = "";
      clusterPartitionParser_KeyValueMap0.get("");
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = (-1844L);
      longArray0[3] = (-1955L);
      longArray0[4] = 0L;
      longArray0[5] = (-921L);
      longArray0[6] = 1611L;
      longArray0[7] = 3175L;
      longArray0[8] = 0L;
      // Undeclared exception!
      try { 
        LongBuffer.wrap(longArray0, 0, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.LongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse(" .G=f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse  .G=f
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse null
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "p@V";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("p@V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse p@V
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        arrayList0.subList(1, 4841);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 4841
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      hashMap0.put((String) null, (Object) null);
      Set<String> set0 = hashMap0.keySet();
      String string0 = "^UtLdgi";
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      hashMap0.putAll(map0);
      clusterPartitionParser_KeyValueMap0.get("^UtLdgi");
      Vector<Object> vector0 = new Vector<Object>(set0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [null, CTT, ART, CNT, PRT, PNT, PLT, AST, BST, CST, EST, HST, JST, IST, AGT, NST, MST, AET, BET, PST, ACT, SST, VST, CAT, ECT, EAT, IET, MIT, NET]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, BitSet> hashMap0 = new HashMap<String, BitSet>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      Object object0 = hashMap0.clone();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap1);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap1);
      hashMap1.getOrDefault(object0, object0);
      ClusterPartitionParser.parse("");
      ClusterPartitionParser.parse("");
      clusterPartitionParser_KeyValueMap1.get("");
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap2 = new ClusterPartitionParser.KeyValueMap(hashMap2);
      hashMap0.remove((Object) "");
      Vector<Object> vector0 = new Vector<Object>();
      ClusterPartitionParser.parse((List<Object>) vector0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap3 = new ClusterPartitionParser.KeyValueMap(hashMap1);
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap4 = new ClusterPartitionParser.KeyValueMap(hashMap3);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap5 = new ClusterPartitionParser.KeyValueMap(hashMap2);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap6 = new ClusterPartitionParser.KeyValueMap((Map<String, Object>) null);
      assertFalse(clusterPartitionParser_KeyValueMap6.equals((Object)clusterPartitionParser_KeyValueMap1));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Partitions partitions0 = ClusterPartitionParser.parse("");
      assertNotNull(partitions0);
      
      Partitions partitions1 = ClusterPartitionParser.parse("");
      assertNotSame(partitions1, partitions0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ClusterPartitionParser.parse((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("2 @/o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse 2 @/o
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put(",", object0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      assertFalse(clusterPartitionParser_KeyValueMap1.equals((Object)clusterPartitionParser_KeyValueMap0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "Gmub'Ez+51";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("Gmub'Ez+51");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse Gmub'Ez+51
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("");
      Vector<Object> vector0 = new Vector<Object>();
      clusterPartitionParser_KeyValueMap0.get("");
      vector0.add((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      hashMap0.put("", vector0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [null]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Object object0 = new Object();
      stack0.add(object0);
      stack0.removeAllElements();
      ClusterPartitionParser.parse((List<Object>) stack0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      ClusterPartitionParser.parse((List<Object>) stack0);
      stack0.clone();
      String string0 = "@L>b(X~?Uplcu{nL!W";
      Object object1 = new Object();
      stack0.add(object1);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("@L>b(X~?Uplcu{nL!W", biFunction0);
      clusterPartitionParser_KeyValueMap0.get("@L>b(X~?Uplcu{nL!W");
      String string1 = "tWk)n.h--";
      clusterPartitionParser_KeyValueMap0.get("tWk)n.h--");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("X]=<Njq):|z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse X]=<Njq):|z
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.entrySet();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)hashMap0.entrySet();
      String string0 = "7(>l5";
      BiFunction<Object, Object, BitSet> biFunction0 = (BiFunction<Object, Object, BitSet>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute("7(>l5", biFunction0);
      String string1 = "loading";
      hashMap0.put("loading", "loading");
      hashMap0.put("loading", set0);
      hashMap0.put("loading", "loading");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("com.google.common.primitives.Shorts$ShortConverter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse com.google.common.primitives.Shorts$ShortConverter
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      Object object0 = clusterPartitionParser_KeyValueMap0.get((String) null);
      assertNull(object0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(hashMap0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [{}]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "fail?";
      int int0 = 0;
      LongBuffer longBuffer0 = LongBuffer.allocate(0);
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      hashMap0.put("fail?", bitSet0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("fail?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse fail?
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [java.lang.Object@26f2746]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("master");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse master
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ClusterPartitionParser.parse((List<Object>) linkedList0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "hw5Pl$32x-D!G:`}U4,";
      clusterPartitionParser_KeyValueMap0.get("hw5Pl$32x-D!G:`}U4,");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("hw5Pl$32x-D!G:`}U4,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse hw5Pl$32x-D!G:`}U4,
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      vector0.add(object0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [java.lang.Object@323c753f]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("health", "health");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "";
      clusterPartitionParser_KeyValueMap1.get("");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("a5gwa/.Ff;xTZ{u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse a5gwa/.Ff;xTZ{u
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) null);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [null]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("[K`{CaUfa`}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [K`{CaUfa`}
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "io.netty.handler.ssl.JdkSslEngine";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("io.netty.handler.ssl.JdkSslEngine");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse io.netty.handler.ssl.JdkSslEngine
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put(":D<L!W_Vj>+", "master");
      hashMap0.put("master", "master");
      hashMap0.put("z", "master");
      String string0 = "n}lqsm";
      hashMap0.put(":D<L!W_Vj>+", "n}lqsm");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse(":qUuzK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse :qUuzK
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("AHQ9~6ytA!`8y$YOP");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap2 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Partitions partitions0 = ClusterPartitionParser.parse((List<Object>) arrayList0);
      assertNotNull(partitions0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "qJ6gTO3";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("qJ6gTO3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse qJ6gTO3
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) vector0;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("O10esPU~5wG8JZCs");
      objectArray0[1] = null;
      objectArray0[2] = (Object) vector0;
      objectArray0[3] = (Object) vector0;
      objectArray0[4] = (Object) vector0;
      objectArray0[5] = (Object) vector0;
      vector0.toArray(objectArray0);
      ClusterPartitionParser.parse((List<Object>) vector0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ClusterPartitionParser.parse((List<Object>) linkedList0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap2 = new ClusterPartitionParser.KeyValueMap(hashMap1);
      assertFalse(clusterPartitionParser_KeyValueMap2.equals((Object)clusterPartitionParser_KeyValueMap0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "";
      Partitions partitions0 = ClusterPartitionParser.parse("");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("");
      hashMap0.put((String) null, (Object) null);
      hashMap0.clone();
      hashMap0.put("com.google.common.primitives.Shorts$ShortConverter", partitions0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap1.get("");
      ClusterPartitionParser.parse("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.stream();
      ClusterPartitionParser.parse((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("io.lettuce.core.models.role.RedisInstance$Role");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse io.lettuce.core.models.role.RedisInstance$Role
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "QV68}N5r+8V";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("QV68}N5r+8V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse QV68}N5r+8V
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = " ";
      clusterPartitionParser_KeyValueMap0.get(" ");
      // Undeclared exception!
      try { 
        BitSet.valueOf((LongBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      ClusterPartitionParser.parse((List<Object>) stack0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "{;v{\\N.'cbi;M;bleB";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("{;v{N.'cbi;M;bleB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse {;v{N.'cbi;M;bleB
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = ">`~wn6MWwMR]Ao#KUN";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse(">`~wn6MWwMR]Ao#KUN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse >`~wn6MWwMR]Ao#KUN
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("handshake");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse handshake
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      BitSet bitSet0 = clusterPartitionParser_KeyValueMap0.get("");
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      vector0.add(object0);
      vector0.iterator();
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [java.lang.Object@48f66cf3]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      ClusterPartitionParser.parse((List<Object>) stack0);
      String string0 = "bMHbA{_ZdX";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("bMHbA{_ZdX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse bMHbA{_ZdX
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashSet<BitSet> hashSet0 = new HashSet<BitSet>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(hashSet0);
      linkedList0.add((Object) "IR_?g<[k!x&+");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [IR_?g<[k!x&+]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      arrayList0.addAll((Collection<?>) treeSet0);
      Object object0 = new Object();
      treeSet0.containsAll(arrayList0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        treeSet0.add(object1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BitSet bitSet0 = new BitSet();
      hashMap0.put("`pwU(C7Di", bitSet0);
      hashMap0.put("W;.", "W;.");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "9u.t=)gjB";
      clusterPartitionParser_KeyValueMap0.get("9u.t=)gjB");
      clusterPartitionParser_KeyValueMap0.get("9u.t=)gjB");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ClusterPartitionParser.parse((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("9u.t=)gjB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse 9u.t=)gjB
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      BitSet bitSet0 = clusterPartitionParser_KeyValueMap0.get((String) null);
      assertNull(bitSet0);
      
      clusterPartitionParser_KeyValueMap0.get((String) null);
      clusterPartitionParser_KeyValueMap0.get("");
      BitSet bitSet1 = clusterPartitionParser_KeyValueMap0.get("reactor.metrics.decorator");
      assertNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      long[] longArray0 = new long[6];
      longArray0[0] = 997L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-206L);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      hashMap0.put((String) null, bitSet0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      BitSet bitSet1 = clusterPartitionParser_KeyValueMap0.get((String) null);
      assertEquals(130, bitSet1.cardinality());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("\\C|e");
      Object object0 = clusterPartitionParser_KeyValueMap0.get((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Map<String, Object> map0 = null;
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap((Map<String, Object>) null);
      String string0 = "(BDtW>]5xC";
      // Undeclared exception!
      try { 
        clusterPartitionParser_KeyValueMap0.get("(BDtW>]5xC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser$KeyValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("noaddr");
      hashMap0.put("zL", (Object) null);
      hashMap0.compute("noaddr", biFunction0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      assertFalse(clusterPartitionParser_KeyValueMap1.equals((Object)clusterPartitionParser_KeyValueMap0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "g9$9s!1'[;h`Em]";
      byte[] byteArray0 = new byte[1];
      BiFunction<Object, Object, BitSet> biFunction0 = (BiFunction<Object, Object, BitSet>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      byteArray0[0] = (byte)114;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte)114, (int) (byte)114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedHashSet<BitSet> linkedHashSet0 = new LinkedHashSet<BitSet>(36, 1.0F);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte) (-126);
      BitSet bitSet0 = new BitSet();
      // Undeclared exception!
      try { 
        bitSet0.get(26379, 36);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex: 26379 > toIndex: 36
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ClusterPartitionParser.parse((List<Object>) arrayList0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.entrySet();
      String string0 = "t4";
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("t4");
      arrayList0.add((Object) null);
      hashMap0.put("t4", "t4");
      hashMap0.getOrDefault("g\"ynM", (Object) null);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      arrayList0.add((Object) "t4");
      clusterPartitionParser_KeyValueMap0.get("g\"ynM");
      arrayList0.add((Object) null);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap2 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [null, t4, null]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ClusterPartitionParser.parse((List<Object>) vector0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = clusterPartitionParser_KeyValueMap0.get("}B`mRoIKPpT0");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BitSet[] bitSetArray0 = new BitSet[7];
      BitSet bitSet0 = new BitSet(0);
      bitSetArray0[0] = bitSet0;
      BitSet bitSet1 = new BitSet();
      bitSetArray0[1] = bitSet1;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      BitSet bitSet2 = BitSet.valueOf(longArray0);
      bitSetArray0[2] = bitSet2;
      BitSet bitSet3 = BitSet.valueOf(longArray0);
      bitSetArray0[3] = bitSet3;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      BitSet bitSet4 = BitSet.valueOf(byteBuffer0);
      bitSetArray0[4] = bitSet4;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      BitSet bitSet5 = BitSet.valueOf(longBuffer0);
      bitSetArray0[5] = bitSet5;
      BitSet bitSet6 = BitSet.valueOf(longBuffer0);
      bitSetArray0[6] = bitSet6;
      arrayList0.toArray(bitSetArray0);
      arrayList0.remove((Object) null);
      ClusterPartitionParser.parse((List<Object>) arrayList0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      LinkedList<BitSet> linkedList0 = clusterPartitionParser_KeyValueMap0.get("");
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "H}!P:w<zDY:B|I\"");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [H}!P:w<zDY:B|I\"]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ClusterPartitionParser.parse((List<Object>) vector0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte) (-71);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      // Undeclared exception!
      try { 
        vector0.insertElementAt(bitSet0, 3577);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3577 > 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      String string0 = "08#";
      stack0.add((Object) "08#");
      stack0.spliterator();
      stack0.add((Object) "08#");
      stack0.add((Object) "08#");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [08#, 08#, 08#]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = ";*nc'XkM=v\"u03sOC";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse(";*nc'XkM=v\"u03sOC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse ;*nc'XkM=v\"u03sOC
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("io.lettuce.core.cluster.models.partitions.RedisClusterNode");
      clusterPartitionParser_KeyValueMap0.get("io.lettuce.core.cluster.models.partitions.RedisClusterNode");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("io.lettuce.core.cluster.models.partitions.RedisClusterNode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse io.lettuce.core.cluster.models.partitions.RedisClusterNode
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      HashMap<String, BitSet> hashMap1 = new HashMap<String, BitSet>();
      BitSet bitSet0 = new BitSet();
      BitSet bitSet1 = bitSet0.get(1, 60);
      hashMap1.replace(" ", bitSet1, bitSet0);
      byte[] byteArray0 = new byte[7];
      hashMap0.values();
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)0;
      BitSet bitSet2 = BitSet.valueOf(byteArray0);
      hashMap1.put("\"}cxd;ND", bitSet2);
      hashMap0.putAll(hashMap1);
      clusterPartitionParser_KeyValueMap0.get(" ");
      Vector<Object> vector0 = new Vector<Object>(2054);
      vector0.add((Object) "5<.,2TCf");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [5<.,2TCf]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse 5
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = null;
      Object object0 = new Object();
      hashMap0.put("E", object0);
      BiFunction<Object, Object, BitSet> biFunction0 = (BiFunction<Object, Object, BitSet>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("kV", biFunction1);
      hashMap0.put("E", (Object) null);
      hashMap0.computeIfPresent("E", biFunction0);
      hashMap0.put((String) null, (Object) null);
      clusterPartitionParser_KeyValueMap0.get((String) null);
      clusterPartitionParser_KeyValueMap0.get((String) null);
      clusterPartitionParser_KeyValueMap0.get("0]nN");
      clusterPartitionParser_KeyValueMap0.get("");
      Stack<Object> stack0 = new Stack<Object>();
      Object object1 = new Object();
      stack0.add(object1);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [java.lang.Object@226ec7eb]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Map<String, Object> map0 = null;
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("'KP_n_QC8tsBA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse 'KP_n_QC8tsBA
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-128);
      hashMap0.put("", "");
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      hashMap0.remove((Object) bitSet0, (Object) bitSet0);
      hashMap0.put(";rwY[u=Awac", "myself");
      Object object0 = new Object();
      hashMap0.put("myself", object0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("myself");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse myself
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "$fnG1`5dK";
      clusterPartitionParser_KeyValueMap0.get("$fnG1`5dK");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("!&_#P/@i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse !&_#P/@i
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      BitSet bitSet0 = clusterPartitionParser_KeyValueMap0.get("io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava3MaybeToMonoAdapter");
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      String string0 = "";
      hashMap0.put("", "");
      BiFunction<Object, Object, BitSet> biFunction0 = (BiFunction<Object, Object, BitSet>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("expectedInputSize must be >= 0 but was %s", object0, biFunction0);
      BitSet bitSet0 = new BitSet();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte)14, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("kS4&(7oL@34OE");
      stack0.add((Object) null);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [null]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      hashMap0.put("", "");
      clusterPartitionParser_KeyValueMap0.get("");
      Vector<Object> vector0 = new Vector<Object>();
      ClusterPartitionParser.parse((List<Object>) vector0);
      String string0 = "com.google.common.base.Converter$ReverseConverter";
      clusterPartitionParser_KeyValueMap0.get("com.google.common.base.Converter$ReverseConverter");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("}J!jNUN%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse }J!jNUN%
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = " 9{!-K58@f6$L*";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse(" 9{!-K58@f6$L*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse  9{!-K58@f6$L*
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = 3013L;
      longArray0[4] = 2862933555777941757L;
      longArray0[5] = 1L;
      int int0 = (-1440);
      // Undeclared exception!
      try { 
        LongBuffer.wrap(longArray0, (-1440), (-1440));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.LongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "O`_ii>*<@";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("O`_ii>*<@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse O`_ii>*<@
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "0M 'xvur1\\aT";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("0M 'xvur1aT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse 0M 'xvur1aT
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Map<String, Object> map0 = null;
      arrayList0.trimToSize();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        clusterPartitionParser_KeyValueMap0.get("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser$KeyValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Object object0 = new Object();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("");
      stack0.add((Object) null);
      stack0.push(object0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [null, java.lang.Object@59dddef4]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("*/+G-]24MY!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse *_/+G-]24MY!
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "\\`S:N]PMo;dcHeHjb{";
      hashMap0.put("`S:N]PMo;dcHeHjb{", "`S:N]PMo;dcHeHjb{");
      hashMap0.put("`S:N]PMo;dcHeHjb{", "`S:N]PMo;dcHeHjb{");
      hashMap0.put("", "");
      hashMap0.entrySet();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      long[] longArray0 = new long[7];
      longArray0[0] = (-2225L);
      longArray0[1] = 0L;
      // Undeclared exception!
      try { 
        arrayList0.removeIf((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      stack0.add((Object) null);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [null]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = clusterPartitionParser_KeyValueMap0.get("_DbN=7");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "Longs.stringConverter()";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("Longs.stringConverter()");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse Longs.stringConverter()
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "Peygh[ar\"Wf1hQ";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("Peygh[ar\"Wf1hQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse Peygh[ar\"Wf1hQ
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      hashMap0.keySet();
      String string0 = null;
      clusterPartitionParser_KeyValueMap0.get((String) null);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse null
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        LongBuffer.wrap((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.LongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava1SingleToFluxAdapter";
      BitSet bitSet0 = new BitSet();
      bitSet0.toByteArray();
      hashMap0.put("", bitSet0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      BiFunction<Object, Object, BitSet> biFunction1 = (BiFunction<Object, Object, BitSet>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava1SingleToFluxAdapter", biFunction1);
      hashMap0.replaceAll(biFunction0);
      clusterPartitionParser_KeyValueMap0.get("io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava1SingleToFluxAdapter");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse null
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("9", "9");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "fail";
      hashMap0.getOrDefault("fail", clusterPartitionParser_KeyValueMap0);
      // Undeclared exception!
      try { 
        hashMap0.computeIfAbsent("fail", (Function<? super String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Partitions partitions0 = ClusterPartitionParser.parse((List<Object>) stack0);
      stack0.add((Object) partitions0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [Partitions []]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      Object object0 = clusterPartitionParser_KeyValueMap0.get("(QcC!,r}Fb=h3");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "com.google.common.collect.ForwardingObject";
      hashMap0.put("com.google.common.collect.ForwardingObject", "com.google.common.collect.ForwardingObject");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string1 = "7_Nw*&&6>zv";
      clusterPartitionParser_KeyValueMap0.get("7_Nw*&&6>zv");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollFirst();
      ClusterPartitionParser.parse((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("7_Nw*&&6>zv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse 7_Nw*&&6>zv
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "endpoint";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("endpoint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse endpoint
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava2SingleToFluxAdapter";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava2SingleToFluxAdapter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava2SingleToFluxAdapter
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = null;
      hashMap0.put((String) null, (Object) null);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        arrayList0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.clone();
      String string0 = "Z _vkd";
      BitSet bitSet0 = new BitSet();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(16384);
      BitSet.valueOf(byteBuffer0);
      hashMap0.put("Z _vkd", bitSet0);
      hashMap0.put("Z _vkd", "Z _vkd");
      int int0 = 24;
      ByteBuffer byteBuffer1 = ByteBuffer.allocate(24);
      BitSet.valueOf(byteBuffer1);
      String string1 = null;
      // Undeclared exception!
      try { 
        byteBuffer1.putFloat(2706, (-109.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      List<Object> list0 = null;
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse null
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "vA3?q693cCnpc(`niZ";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("vA3?q693cCnpc(`niZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse vA3?q693cCnpc(`niZ
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "a\\x6C%S";
      // Undeclared exception!
      try { 
        BitSet.valueOf((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = ":";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse :
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "zfA+K;<5Fw_";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("zfA+K;<5Fw_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse zfA+K;<5Fw_
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "[1K}{x%UJ=";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("[1K}{x%UJ=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [1K}{x%UJ=
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Object object0 = new Object();
      stack0.add(object0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [java.lang.Object@4063bb21]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Object object1 = new Object();
      arrayList0.spliterator();
      arrayList0.add(object1);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [java.lang.Object@2ac7b9dd, java.lang.Object@77a0b517]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.trimToSize();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      ClusterPartitionParser.parse((List<Object>) stack0);
      ClusterPartitionParser.parse((List<Object>) stack0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.entrySet();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      BitSet bitSet0 = clusterPartitionParser_KeyValueMap0.get("");
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("[}LU?eBG~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [}LU?eBG~
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) clusterPartitionParser_KeyValueMap0);
      LinkedHashSet<BitSet> linkedHashSet0 = new LinkedHashSet<BitSet>();
      // Undeclared exception!
      try { 
        arrayList0.addAll(1715, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1715, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      hashMap0.put("onError signaled multiple times", linkedList0);
      clusterPartitionParser_KeyValueMap0.get((String) null);
      // Undeclared exception!
      try { 
        linkedList0.set(0, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test113()  throws Throwable  {
  //     LinkedList<Object> linkedList0 = new LinkedList<Object>();
  //     // Undeclared exception!
  //     try { 
  //       linkedList0.subList((-1543), 0);
  //       fail("Expecting exception: IndexOutOfBoundsException");
  //     
  //     } catch(IndexOutOfBoundsException e) {
  //        //
  //        // fromIndex = -1543
  //        //
  //        verifyException("java.util.SubList", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      BitSet bitSet0 = clusterPartitionParser_KeyValueMap0.get("LI#");
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("requested", (Object) null);
      hashMap0.put("", "");
      hashMap0.put("", (Object) null);
      hashMap0.put("", (Object) null);
      hashMap0.put("", (Object) null);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = null;
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse null
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "\\48cYdW{bx]b ";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)16;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      BitSet.valueOf(byteArray0);
      hashMap0.put("\u00048cYdW{bx]b ", bitSet0);
      clusterPartitionParser_KeyValueMap0.get("hostname");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse null
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.putIfAbsent("", "");
      hashMap0.put("", (Object) null);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("17m]s");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap2 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      LongBuffer longBuffer0 = LongBuffer.allocate(0);
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("reactor.core.publisher.Traces$SharedSecretsCallSiteSupplierFactory$TracingException", bitSet0, biFunction0);
      clusterPartitionParser_KeyValueMap2.get((String) null);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap3 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      BiFunction<Object, Object, BitSet> biFunction1 = (BiFunction<Object, Object, BitSet>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction1);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap4 = new ClusterPartitionParser.KeyValueMap(hashMap1);
      hashMap1.put("17m]s", clusterPartitionParser_KeyValueMap1);
      clusterPartitionParser_KeyValueMap4.get("loading");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("loading");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse loading
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClusterPartitionParser.parse("");
      Map<String, Object> map0 = null;
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        clusterPartitionParser_KeyValueMap0.get("CharMatcher.javaLowerCase()");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser$KeyValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Collection<Object> collection0 = hashMap0.values();
      Object object0 = new Object();
      hashMap0.getOrDefault(collection0, object0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "f*q";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("f*q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse f*q
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      hashMap0.put("", "");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "l2<Y~Mv";
      clusterPartitionParser_KeyValueMap0.get("l2<Y~Mv");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string1 = "Connection disconnected";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("Connection disconnected");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse Connection disconnected
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("Key-Value list must contain an even number of key-value tuples");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("Key-Value list must contain an even number of key-value tuples");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse Key-Value list must contain an even number of key-value tuples
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.entrySet();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "H";
      hashMap0.put("H", "H");
      String string1 = null;
      clusterPartitionParser_KeyValueMap0.get((String) null);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      String string2 = "Am5l:+&^#dDy+!}XwSW";
      clusterPartitionParser_KeyValueMap0.get("Am5l:+&^#dDy+!}XwSW");
      hashMap1.put("H", (Object) null);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) null);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [null]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "+(HeL{``}`";
      long[] longArray0 = new long[8];
      longArray0[0] = 1043L;
      longArray0[1] = 0L;
      longArray0[2] = (-210L);
      longArray0[3] = 1829L;
      longArray0[4] = (-4138L);
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      // Undeclared exception!
      try { 
        bitSet0.get(64, (-2969));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex < 0: -2969
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Stack<BitSet> stack0 = new Stack<BitSet>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      stack0.add(bitSet0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)15;
      longArray0[1] = (long) (byte)15;
      LongBuffer longBuffer1 = LongBuffer.allocate(64);
      BitSet bitSet1 = BitSet.valueOf(longBuffer1);
      stack0.add(bitSet1);
      longArray0[2] = (long) (byte)15;
      longArray0[3] = (long) (byte)15;
      BitSet bitSet2 = BitSet.valueOf(longArray0);
      stack0.add(bitSet2);
      BitSet bitSet3 = BitSet.valueOf(byteArray0);
      bitSet3.stream();
      linkedList0.add((Object) stack0);
      stack0.add(bitSet3);
      linkedList0.addAll((Collection<?>) stack0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [[{}, {}, {0, 1, 2, 3, 64, 65, 66, 67, 128, 129, 130, 131, 192, 193, 194, 195}, {0, 1, 2, 3}], {}, {}, {0, 1, 2, 3, 64, 65, 66, 67, 128, 129, 130, 131, 192, 193, 194, 195}, {0, 1, 2, 3}]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("T");
      stack0.add((Object) null);
      stack0.push((Object) null);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [null, null]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        clusterPartitionParser_KeyValueMap0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser$KeyValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, BitSet> hashMap0 = new HashMap<String, BitSet>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) "l%omh;8hGAW");
      ArrayDeque<BitSet> arrayDeque0 = new ArrayDeque<BitSet>();
      arrayList0.addAll(0, (Collection<?>) arrayDeque0);
      List<Object> list0 = arrayList0.subList(0, 0);
      ClusterPartitionParser.parse(list0);
      clusterPartitionParser_KeyValueMap0.get("role");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap1);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap2 = new ClusterPartitionParser.KeyValueMap(hashMap1);
      Partitions partitions0 = ClusterPartitionParser.parse("");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap3 = new ClusterPartitionParser.KeyValueMap(hashMap1);
      ClusterPartitionParser.parse(list0);
      ClusterPartitionParser.parse(list0);
      Partitions partitions1 = ClusterPartitionParser.parse("");
      assertNotSame(partitions1, partitions0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("nodes", "nodes");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      long[] longArray0 = new long[2];
      longArray0[0] = 1899L;
      longArray0[1] = 3719L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)60;
      BitSet bitSet1 = BitSet.valueOf(byteArray0);
      bitSet0.xor(bitSet1);
      hashMap0.putIfAbsent("5c,}XZE[<^S[bUq", bitSet0);
      hashMap0.put("", (Object) null);
      clusterPartitionParser_KeyValueMap0.get("");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap2 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      Stack<Object> stack0 = new Stack<Object>();
      Partitions partitions0 = ClusterPartitionParser.parse((List<Object>) stack0);
      assertNotNull(partitions0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("W|}4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse W|}4
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "f++1QT";
      clusterPartitionParser_KeyValueMap0.get("f++1QT");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) null);
      String string1 = " ";
      arrayList0.listIterator();
      hashMap0.replace(" ", (Object) "f++1QT");
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [null]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava2ObservableToMaybeAdapter";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava2ObservableToMaybeAdapter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava2ObservableToMaybeAdapter
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.isEmpty();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(treeSet0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      clusterPartitionParser_KeyValueMap0.get("6m");
      linkedList0.add((Object) null);
      linkedList0.add((Object) treeSet0);
      linkedList0.add((Object) treeSet0);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse((List<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse [null, [], []]
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "buckets must be positive: %s";
      clusterPartitionParser_KeyValueMap0.get("buckets must be positive: %s");
      clusterPartitionParser_KeyValueMap0.get("/Ifk9#]JlboPGUxW#I");
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap1 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string1 = "?oBZm5)}Y]5Zs5'I!";
      HashMap<String, BitSet> hashMap1 = new HashMap<String, BitSet>();
      hashMap0.putAll(hashMap1);
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("?oBZm5)}Y]5Zs5'I!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse ?oBZm5)}Y]5Zs5'I!
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "io.lettuce.core.cluster.models.partitions.ClusterPartitionParser$KeyValueMap";
      // Undeclared exception!
      try { 
        ClusterPartitionParser.parse("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser$KeyValueMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse io.lettuce.core.cluster.models.partitions.ClusterPartitionParser$KeyValueMap
         //
         verifyException("io.lettuce.core.cluster.models.partitions.ClusterPartitionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClusterPartitionParser.KeyValueMap clusterPartitionParser_KeyValueMap0 = new ClusterPartitionParser.KeyValueMap(hashMap0);
      String string0 = "";
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        hashMap0.merge("", (Object) null, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
