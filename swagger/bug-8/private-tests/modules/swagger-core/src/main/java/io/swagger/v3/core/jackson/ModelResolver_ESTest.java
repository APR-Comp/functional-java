/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 03 06:03:53 GMT 2023
 */

package io.swagger.v3.core.jackson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JacksonInject;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.StreamReadCapability;
import com.fasterxml.jackson.core.StreamReadFeature;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.format.InputAccessor;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.CoercionInputShape;
import com.fasterxml.jackson.databind.cfg.ConstructorDetector;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.LookupCache;
import io.swagger.v3.core.converter.AnnotatedType;
import io.swagger.v3.core.converter.ModelConverter;
import io.swagger.v3.core.converter.ModelConverterContext;
import io.swagger.v3.core.converter.ModelConverterContextImpl;
import io.swagger.v3.core.jackson.ModelResolver;
import io.swagger.v3.core.jackson.TypeNameResolver;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.extensions.Extension;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.models.SpecVersion;
import io.swagger.v3.oas.models.media.Discriminator;
import io.swagger.v3.oas.models.media.XML;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.text.DateFormat;
import java.time.ZoneId;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Function;
import javax.xml.bind.annotation.XmlAccessorType;
import org.apache.commons.io.file.StandardDeleteOption;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModelResolver_ESTest extends ModelResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      Class<ModelResolver> class0 = ModelResolver.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Empty0, class0, "no", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      Annotation[] annotationArray0 = new Annotation[0];
      Boolean boolean0 = modelResolver0.resolveExclusiveMinimum(annotatedField0, annotationArray0, (Schema) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      objectMapper0.reader();
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      serializationFeatureArray0[8] = serializationFeature0;
      objectMapper0.writer(serializationFeature0, serializationFeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory((SerializerFactory) null);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATES_WITH_CONTEXT_TIME_ZONE;
      ContextAttributes contextAttributes1 = contextAttributes0.withPerCallAttribute(serializationFeature1, serializationFeature1);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultAttributes(contextAttributes1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<ModelResolver> class0 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      Annotation[] annotationArray0 = new Annotation[0];
      modelResolver0.resolveFormat((Annotated) null, annotationArray0, (Schema) null);
      Integer integer0 = modelResolver0.resolveMinLength((Annotated) null, annotationArray0, (Schema) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) arrayType0;
      arrayType0.hasGenericTypes();
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) arrayType0;
      SimpleType simpleType1 = simpleType0.withValueHandler(modelResolver0);
      javaTypeArray0[3] = (JavaType) simpleType1;
      javaTypeArray0[4] = (JavaType) arrayType0;
      javaTypeArray0[5] = (JavaType) arrayType0;
      javaTypeArray0[6] = (JavaType) arrayType0;
      javaTypeArray0[7] = (JavaType) simpleType0;
      javaTypeArray0[8] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[8]);
      MapLikeType mapLikeType0 = mapType0.withKeyType(javaTypeArray0[3]);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getDelegateCreator();
      Annotation[] annotationArray0 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).title();
      modelResolver0.resolveTitle((Annotated) null, (Annotation[]) null, schema0);
      BeanDescription beanDescription0 = null;
      // Undeclared exception!
      try { 
        modelResolver0.findJsonValueType((BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.TRUE;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      ObjectMapper objectMapper3 = objectMapper2.setDateFormat(dateFormat0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType((Type) null);
      AnnotatedType annotatedType1 = annotatedType0.name("OwyrJa0f!fw");
      AnnotatedType annotatedType2 = annotatedType1.jsonViewAnnotation((JsonView) null);
      AnnotatedType annotatedType3 = annotatedType2.skipOverride(true);
      AnnotatedType annotatedType4 = annotatedType3.propertyName("OwyrJa0f!fw");
      Integer integer0 = modelResolver0.resolveMaxItems(annotatedType4, (ArraySchema) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      LinkedList<SimpleModule> linkedList0 = new LinkedList<SimpleModule>();
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) linkedList0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.applyBeanValidatorAnnotations((io.swagger.v3.oas.models.media.Schema) null, (Annotation[]) null, (io.swagger.v3.oas.models.media.Schema) null);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      deserializationFeatureArray0[3] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      deserializationFeatureArray0[4] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      deserializationFeatureArray0[5] = deserializationFeature3;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0, deserializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<Boolean> class0 = Boolean.TYPE;
      boolean boolean0 = modelResolver0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.TRUE;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultLeniency(boolean0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      annotatedType0.getJsonUnwrappedHandler();
      AnnotatedType annotatedType1 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      annotatedType1.setJsonViewAnnotation(jsonView0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      LinkedList<ModelResolver> linkedList0 = new LinkedList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(linkedList0);
      AnnotatedType annotatedType2 = annotatedType1.parent(schema1);
      Vector<ModelConverter> vector0 = new Vector<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(vector0);
      // Undeclared exception!
      try { 
        modelResolver0.resolve(annotatedType2, modelConverterContextImpl0, (Iterator<ModelConverter>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializedString serializedString0 = new SerializedString("Wdt\"w6RZdg,<.@gw");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectMapper objectMapper3 = objectMapper2.setNodeFactory(jsonNodeFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType2 = annotatedType1.skipSchemaName(false);
      annotatedType2.schemaProperty(false);
      // Undeclared exception!
      try { 
        modelResolver0.decorateModelName(annotatedType2, "Wdt\"w6RZdg,<.@gw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema0).maxProperties();
      modelResolver0.resolveMaxProperties((Annotated) null, annotationArray0, schema0);
      Class<ModelResolver> class0 = ModelResolver.class;
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema1 = null;
      modelResolver0._addEnumProps(class0, (io.swagger.v3.oas.models.media.Schema) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null, (Object) modelResolver0, (Object) modelResolver0);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper0);
      ArrayType arrayType1 = arrayType0.withTypeHandler(modelResolver1);
      ArrayType arrayType2 = arrayType1.withContentValueHandler(modelResolver1);
      Class<ModelResolver> class1 = ModelResolver.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructGeneralizedType(arrayType2, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class io.swagger.v3.core.jackson.ModelResolver not a super-type of [array type, component type: [recursive type; UNRESOLVED]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      classLoader0.setDefaultAssertionStatus(false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      NamedType namedType0 = new NamedType(class0, (String) null);
      modelResolver0._subTypeName(namedType0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) externalDocumentation0;
      annotationArray0[1] = (Annotation) externalDocumentation0;
      annotationArray0[2] = (Annotation) externalDocumentation0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveReadOnly((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
      serializationFeatureArray0[4] = serializationFeature1;
      serializationFeatureArray0[5] = serializationFeature0;
      SerializationFeature serializationFeature2 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      serializationFeatureArray0[6] = serializationFeature2;
      serializationFeatureArray0[7] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector1);
      ObjectMapper objectMapper3 = objectMapper2.copy();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      Annotation[] annotationArray0 = new Annotation[2];
      annotationArray0[0] = (Annotation) externalDocumentation0;
      annotationArray0[1] = (Annotation) externalDocumentation0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation1 = modelResolver0.resolveExternalDocumentation((Annotated) null, annotationArray0, schema0);
      assertNull(externalDocumentation1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature1, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<SimpleModule> class0 = SimpleModule.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[2]);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper3);
      ReferenceType referenceType1 = referenceType0.withValueHandler(modelResolver1);
      Object object0 = new Object();
      ReferenceType referenceType2 = referenceType1.withTypeHandler(object0);
      ReferenceType referenceType3 = referenceType2.withContentTypeHandler(object0);
      Stack<ModelConverter> stack0 = new Stack<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(stack0);
      io.swagger.v3.oas.models.media.Schema schema0 = modelResolver0.resolveWrapping(referenceType3, modelConverterContextImpl0, (io.swagger.v3.oas.models.media.Schema) null);
      assertNull(schema0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      XML xML0 = new XML();
      xML0.name("JSON");
      xML0.getExtensions();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '6';
      charArray0[6] = '\"';
      jsonFactory0.createParser(charArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Map<JavaType, String> map0 = modelResolver0._resolvedTypeNames;
      modelResolver0._resolvedTypeNames = map0;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema0).uniqueItems();
      modelResolver0.resolveUniqueItems((AnnotatedType) null, arraySchema0);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      modelResolver0.resolve((AnnotatedType) null, modelConverterContextImpl0, (Iterator<ModelConverter>) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getJsonValueAccessor();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Type type0 = modelResolver0.findJsonValueType(basicBeanDescription0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      // Undeclared exception!
      try { 
        modelResolver0.findJsonValueType((BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.findAndRegisterModules();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      objectMapper2.configure(jsonGenerator_Feature0, true);
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      JavaType javaType0 = null;
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<JsonFactory.Feature> schema0 = new io.swagger.v3.oas.models.media.Schema<JsonFactory.Feature>(specVersion0);
      Class<ModelResolver> class0 = ModelResolver.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      objectMapper2.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      io.swagger.v3.oas.models.media.Schema<JsonFactory.Feature> schema1 = new io.swagger.v3.oas.models.media.Schema<JsonFactory.Feature>();
      schema0.setIf(schema1);
      // Undeclared exception!
      try { 
        modelResolver0.resolveDiscriminatorProperty((JavaType) null, modelConverterContextImpl0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 4);
      Class<SimpleModule> class0 = SimpleModule.class;
      classArray0[0] = class0;
      Class<SimpleModule> class1 = SimpleModule.class;
      classArray0[1] = class1;
      Class<SimpleModule> class2 = SimpleModule.class;
      classArray0[2] = class2;
      Class<SimpleModule> class3 = SimpleModule.class;
      classArray0[3] = class3;
      SimpleModule simpleModule1 = simpleModule0.registerSubtypes(classArray0);
      ObjectMapper objectMapper4 = objectMapper3.registerModule(simpleModule1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).pattern();
      String string0 = modelResolver0.resolvePattern((Annotated) null, (Annotation[]) null, schema0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      io.swagger.v3.oas.models.media.Schema<EnumSet<StreamReadCapability>> schema0 = new io.swagger.v3.oas.models.media.Schema<EnumSet<StreamReadCapability>>();
      schema0.getJsonSchema();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      SpecVersion specVersion0 = SpecVersion.V30;
      schema0.setSpecVersion(specVersion0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(modelResolver0);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      Class<ThaiBuddhistEra> class1 = ThaiBuddhistEra.class;
      simpleType0.isTypeOrSubTypeOf(class1);
      JavaType javaType0 = referenceType2.getReferencedType();
      modelResolver0._isOptionalType(javaType0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializationConfig deserializationConfig0 = null;
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forCreation((DeserializationConfig) null, referenceType0, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector((ConstructorDetector) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory(typeFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<ModelResolver> class0 = ModelResolver.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, (String) null, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).defaultValue();
      // Undeclared exception!
      try { 
        modelResolver0.resolveDefaultValue(annotated0, (Annotation[]) null, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector(annotationIntrospector1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      objectMapper3.reader(deserializationFeature0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<ModelResolver> class0 = ModelResolver.class;
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaTypeArray0[4], javaTypeArray0[3], javaTypeArray0[3]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, javaTypeArray0[3]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      referenceType1.withContentTypeHandler(modelResolver0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).example();
      // Undeclared exception!
      try { 
        modelResolver0.resolveExample((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, " z,k0Ik#7\"%/j");
      objectMapper3.getSerializerProviderInstance();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      typeNameResolver0.setUseFqn(false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema0 = new io.swagger.v3.oas.models.media.Schema<SimpleModule>();
      LinkedList<SimpleModule> linkedList0 = new LinkedList<SimpleModule>();
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema1 = schema0.examples(linkedList0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      AnnotatedType annotatedType0 = new AnnotatedType(mapType0);
      AnnotatedType annotatedType1 = annotatedType0.schemaProperty(false);
      modelResolver0.resolveSchemaMembers(schema1, annotatedType1);
      assertFalse(schema1.getExampleSetFlag());
      assertFalse(schema0.getExampleSetFlag());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper2 = objectMapper1.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory(beanSerializerFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<JsonAutoDetect.Visibility> schema0 = new io.swagger.v3.oas.models.media.Schema<JsonAutoDetect.Visibility>(specVersion0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipSchemaName(true);
      AnnotatedType annotatedType2 = annotatedType1.resolveAsRef(false);
      AnnotatedType annotatedType3 = annotatedType2.propertyName("composed-model-properties-as-sibiling");
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType4 = annotatedType3.jsonViewAnnotation(jsonView0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema0, annotatedType4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      String string0 = "AV p(0P";
      jsonNodeFactory0.textNode("AV p(0P");
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      // Undeclared exception!
      try { 
        modelResolver0.hasHiddenAnnotation((Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, (String) null);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      objectMapper0.setSerializerFactory(serializerFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema0).minProperties();
      modelResolver0.resolveMinProperties((Annotated) null, annotationArray0, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema1).exclusiveMaximum();
      modelResolver0.resolveExclusiveMaximum((Annotated) null, annotationArray0, schema1);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.propertyName((String) null);
      AnnotatedType annotatedType2 = annotatedType1.name("YGCbD^@b77Zx");
      AnnotatedType annotatedType3 = annotatedType2.skipOverride(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      modelResolver0.resolveExtensions(annotatedType3, arraySchema0);
      Class<ModelResolver> class0 = ModelResolver.class;
      modelResolver0.getComposedSchemaReferencedClasses(class0, annotationArray0, (Schema) null);
      io.swagger.v3.oas.models.media.Schema<StreamReadCapability> schema2 = new io.swagger.v3.oas.models.media.Schema<StreamReadCapability>();
      modelResolver0.addRequiredItem(schema2, (String) null);
      ModelConverterContext modelConverterContext0 = null;
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        objectReader1.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl1);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<EnumSet> class0 = EnumSet.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      Annotation[] annotationArray0 = new Annotation[1];
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class1, class0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapLikeType0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std1.getAnnotation(class2);
      annotationArray0[0] = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).deprecated();
      Boolean boolean0 = modelResolver0.resolveDeprecated((Annotated) null, annotationArray0, schema0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider((DefaultSerializerProvider) null);
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = new JsonInclude.Value(jsonInclude0);
      ObjectMapper objectMapper4 = objectMapper3.setDefaultPropertyInclusion(jsonInclude_Value0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      Annotated annotated0 = null;
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) jsonInclude0;
      annotationArray0[1] = (Annotation) jsonInclude0;
      annotationArray0[2] = (Annotation) jsonInclude0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveWriteOnly((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      ObjectMapper objectMapper4 = objectMapper3.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      Class<StreamReadFeature> class0 = StreamReadFeature.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      AnnotationMap annotationMap1 = new AnnotationMap();
      AnnotationMap annotationMap2 = AnnotationMap.merge(annotationMap0, annotationMap1);
      Set<String> set0 = modelResolver0.resolveIgnoredProperties(annotationMap2, (Annotation[]) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      JsonSetter jsonSetter0 = mock(JsonSetter.class, new ViolatedAssumptionAnswer());
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter((PrettyPrinter) null);
      ObjectMapper objectMapper3 = objectMapper2.deactivateDefaultTyping();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipOverride(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      modelResolver0.resolveMaxItems(annotatedType1, arraySchema0);
      Annotation[] annotationArray0 = new Annotation[9];
      annotationArray0[0] = (Annotation) arraySchema0;
      annotationArray0[1] = (Annotation) jsonSetter0;
      annotationArray0[2] = (Annotation) arraySchema0;
      annotationArray0[3] = (Annotation) arraySchema0;
      annotationArray0[4] = (Annotation) jsonSetter0;
      annotationArray0[5] = (Annotation) arraySchema0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class0);
      annotationArray0[6] = null;
      annotationArray0[7] = (Annotation) externalDocumentation0;
      annotationArray0[8] = (Annotation) externalDocumentation0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).minimum();
      BigDecimal bigDecimal0 = modelResolver0.resolveMinimum((Annotated) null, annotationArray0, schema0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      List<Module> list0 = ObjectMapper.findModules();
      LinkedHashSet<Module> linkedHashSet0 = new LinkedHashSet<Module>(list0);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) linkedHashSet0);
      SimpleModule simpleModule0 = new SimpleModule();
      Class<ModelResolver> class0 = ModelResolver.class;
      JsonSerializer<ModelResolver> jsonSerializer0 = (JsonSerializer<ModelResolver>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.addSerializer((Class<? extends ModelResolver>) class0, jsonSerializer0);
      ObjectMapper objectMapper3 = objectMapper2.registerModule(simpleModule1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getWithArgsCreator();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      modelResolver0.resolveAllowableValues((Annotated) null, annotationArray0, schema0);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        modelResolver0.ignore((Annotated) null, (XmlAccessorType) null, (String) null, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
      ArrayList<ModelConverter> arrayList0 = new ArrayList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(arrayList0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      // Undeclared exception!
      try { 
        modelResolver0.resolveWrapping((JavaType) null, modelConverterContextImpl0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonFactory.builder();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, (TypeNameResolver) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ModelResolver> class0 = ModelResolver.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(modelResolver0);
      Object object0 = new Object();
      ArrayType arrayType2 = arrayType1.withContentValueHandler(object0);
      ArrayList<ModelConverter> arrayList0 = new ArrayList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(arrayList0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<StreamReadCapability> schema0 = new io.swagger.v3.oas.models.media.Schema<StreamReadCapability>(specVersion0);
      ArrayList<StreamReadCapability> arrayList1 = new ArrayList<StreamReadCapability>();
      io.swagger.v3.oas.models.media.Schema<StreamReadCapability> schema1 = schema0.examples(arrayList1);
      modelResolver0.resolveDiscriminatorProperty(arrayType2, modelConverterContextImpl0, schema1);
      assertNull(schema1.get$id());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      modelResolver0.addRequiredItem((io.swagger.v3.oas.models.media.Schema) null, "org.joda.time.LocalDate");
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipOverride(false);
      AnnotatedType annotatedType2 = annotatedType1.parent((io.swagger.v3.oas.models.media.Schema) null);
      String string0 = modelResolver0.decorateModelName(annotatedType2, "org.joda.time.LocalDate");
      assertEquals("org.joda.time.LocalDate", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.ALWAYS;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include1);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Value0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      Annotation[] annotationArray0 = new Annotation[9];
      annotationArray0[0] = (Annotation) jsonView0;
      annotationArray0[1] = (Annotation) jsonView0;
      annotationArray0[2] = (Annotation) jsonView0;
      annotationArray0[3] = (Annotation) jsonView0;
      annotationArray0[4] = (Annotation) jsonView0;
      annotationArray0[5] = (Annotation) jsonView0;
      annotationArray0[6] = (Annotation) jsonView0;
      annotationArray0[7] = (Annotation) jsonView0;
      annotationArray0[8] = (Annotation) jsonView0;
      AnnotatedType annotatedType2 = annotatedType1.ctxAnnotations(annotationArray0);
      Integer integer0 = modelResolver0.resolveMinItems(annotatedType2, (ArraySchema) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      modelResolver0.objectMapper();
      Class<JsonAutoDetect.Visibility> class0 = JsonAutoDetect.Visibility.class;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      LinkedList<ModelResolver> linkedList0 = new LinkedList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(linkedList0);
      modelResolver0._addEnumProps(class0, schema1);
      assertNull(schema1.getNullable());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonParser_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ModelResolver> class0 = ModelResolver.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[7] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[4]);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapType0);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ArrayType arrayType1 = arrayType0.withValueHandler(jsonAutoDetect_Visibility0);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      Discriminator discriminator0 = modelResolver0.resolveDiscriminator(arrayType1, modelConverterContextImpl0);
      assertNull(discriminator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ObjectMapper objectMapper3 = objectMapper2.setPolymorphicTypeValidator((PolymorphicTypeValidator) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      modelResolver0.addRequiredItem(schema0, "JSON");
      assertNull(schema0.getContentMediaType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonGenerator_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      AnnotatedType annotatedType2 = annotatedType1.parent(schema0);
      AnnotatedType annotatedType3 = annotatedType2.propertyName("WuR)Fyr.");
      annotatedType2.getJsonUnwrappedHandler();
      AnnotatedType annotatedType4 = annotatedType3.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      Integer integer0 = modelResolver0.resolveMinItems(annotatedType4, arraySchema0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      objectMapper0.missingNode();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      objectMapper2.reader(deserializationFeature0, deserializationFeatureArray0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      objectMapper1.createParser("yyyy-MM-dd Z");
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<ModelResolver> class0 = ModelResolver.class;
      Annotation[] annotationArray0 = new Annotation[1];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.forId(modelResolver0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "yyyy-MM-dd Z", integer0, "");
      CreatorProperty creatorProperty0 = CreatorProperty.construct((PropertyName) null, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, 0, jacksonInject_Value0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      annotationArray0[0] = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema0).allOf();
      doReturn((Class[]) null).when(schema0).anyOf();
      doReturn((Class[]) null).when(schema0).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class0, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      // Undeclared exception!
      try { 
        objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass `null` PolymorphicTypeValidator
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_DELEGATING;
      ObjectMapper objectMapper2 = objectMapper1.setConstructorDetector(constructorDetector0);
      Class<JsonToken> class0 = JsonToken.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectMapper objectMapper4 = objectMapper3.configure(jsonParser_Feature0, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper0.readerForArrayOf(class0);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      objectMapper0.createObjectNode();
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      objectMapper3.configure(serializationFeature0, false);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      JavaType javaType0 = null;
      LinkedHashSet<TypeNameResolver.Options> linkedHashSet0 = new LinkedHashSet<TypeNameResolver.Options>();
      // Undeclared exception!
      try { 
        typeNameResolver0.nameForGenericType((JavaType) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.TypeNameResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultVisibility(jsonAutoDetect_Value0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<JsonToken> class0 = JsonToken.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null);
      AnnotatedType annotatedType0 = new AnnotatedType(arrayType0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType2 = annotatedType1.schemaProperty(false);
      AnnotatedType annotatedType3 = annotatedType2.type(class0);
      annotatedType3.name(" n.'?{N*");
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl((ModelConverter) null);
      TypeReference<JsonToken> typeReference0 = (TypeReference<JsonToken>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper1.readerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      Class<ModelResolver> class0 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<ModelResolver> class1 = ModelResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) modelResolver0, (Object) modelResolver1);
      ArrayType arrayType1 = ArrayType.construct((JavaType) arrayType0, typeBindings0);
      ArrayType arrayType2 = arrayType1.withContentValueHandler(modelResolver1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(arrayType2);
      valueInstantiator_Base0.getDefaultCreator();
      // Undeclared exception!
      try { 
        modelResolver0.hasHiddenAnnotation((Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectMapper0.addHandler(deserializationProblemHandler0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = null;
      PropertyName propertyName0 = PropertyName.construct("CharMatcher.javaIsoControl()");
      ObjectIdGenerator<ModelResolver> objectIdGenerator0 = (ObjectIdGenerator<ModelResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, objectIdGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      BeanDeserializer beanDeserializer0 = null;
      try {
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, objectIdReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      objectMapper0.setNodeFactory(jsonNodeFactory0);
      SerializationFeature serializationFeature1 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      String string0 = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "!!<RMAUQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      Class<ModelResolver> class0 = ModelResolver.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      JsonToken jsonToken0 = decimalNode0.asToken();
      referenceType0.withValueHandler(jsonToken0);
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setMixInResolver((ClassIntrospector.MixInResolver) null);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonGenerator_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      objectMapper2.reader((FormatSchema) null);
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, true);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      objectMapper3.reader(deserializationFeature0, deserializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector((ConstructorDetector) null);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectMapper2.addHandler(deserializationProblemHandler0);
      boolean boolean0 = false;
      JsonParser jsonParser0 = null;
      TypeReference<ModelResolver> typeReference0 = (TypeReference<ModelResolver>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper2.writerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      String string0 = null;
      Boolean boolean0 = new Boolean((String) null);
      objectMapper1.setDefaultMergeable(boolean0);
      // Undeclared exception!
      try { 
        MockDateFormat.getTimeInstance((-901));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -901
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.copy();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, true);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).exclusiveMaximum();
      modelResolver0.resolveExclusiveMaximum((Annotated) null, annotationArray0, schema0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonFactory0.configure(jsonGenerator_Feature1, false);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultLeniency((Boolean) null);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "JSON");
      JsonAutoDetect jsonAutoDetect0 = mock(JsonAutoDetect.class, new ViolatedAssumptionAnswer());
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).creatorVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).fieldVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).getterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).isGetterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).setterVisibility();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.from(jsonAutoDetect0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      AnnotatedType annotatedType0 = new AnnotatedType();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      AnnotatedType annotatedType1 = annotatedType0.parent(schema0);
      AnnotatedType annotatedType2 = annotatedType1.schemaProperty(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      Integer integer0 = modelResolver0.resolveMaxItems(annotatedType2, arraySchema0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      // Undeclared exception!
      try { 
        objectMapper0.enable((JsonGenerator.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      serializationFeatureArray0[3] = serializationFeature1;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0, serializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      Boolean boolean0 = new Boolean(true);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      objectMapper3.writerFor((JavaType) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)4;
      try { 
        objectMapper3.readValue(byteArray0, 0, (int) 4, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('>' (code 62)): expected a valid value (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: (byte[])\">\uFFFD\uFFFD\\u0004\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      typeNameResolver0.setUseFqn(false);
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper2 = objectMapper1.addHandler(deserializationProblemHandler0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonParser_Feature0, false);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      SimpleBeanPropertyFilter simpleBeanPropertyFilter0 = SimpleBeanPropertyFilter.filterOutAllExcept(set0);
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.setDefaultFilter(simpleBeanPropertyFilter0);
      ObjectMapper objectMapper4 = objectMapper3.setFilterProvider(simpleFilterProvider1);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory(typeFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls(modelResolver0);
      objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      MockDate mockDate0 = new MockDate(0, 0, 0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference((Object) modelResolver0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, contentReference0, true);
      int int0 = 3853;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonFactory0.enable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<SimpleModule> class0 = SimpleModule.class;
      int int0 = (-2254);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", "JSON", (-2254), hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoException1.fillInStackTrace();
      sQLClientInfoException0.initCause(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "nm}");
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper2 = objectMapper1.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      SimpleModule simpleModule0 = new SimpleModule();
      Class<ModelResolver> class0 = ModelResolver.class;
      JsonDeserializer<ModelResolver> jsonDeserializer0 = (JsonDeserializer<ModelResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends ModelResolver>) jsonDeserializer0);
      ObjectMapper objectMapper3 = objectMapper2.registerModule(simpleModule1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      Class<ModelResolver> class0 = ModelResolver.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class0);
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      objectMapper1.createNonBlockingByteArrayParser();
      objectMapper2.disable(serializationFeature0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_PROPERTIES_BASED;
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector(constructorDetector0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.copy();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = null;
      try {
        jsonFactoryBuilder0 = new JsonFactoryBuilder((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.TSFBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.from(jsonInclude0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Value0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<ModelResolver>[] classArray0 = (Class<ModelResolver>[]) Array.newInstance(Class.class, 6);
      Class<ModelResolver> class0 = ModelResolver.class;
      classArray0[0] = class0;
      Class<ModelResolver> class1 = ModelResolver.class;
      classArray0[1] = class1;
      Class<ModelResolver> class2 = ModelResolver.class;
      classArray0[2] = class2;
      Class<ModelResolver> class3 = ModelResolver.class;
      classArray0[3] = class3;
      Class<ModelResolver> class4 = ModelResolver.class;
      classArray0[4] = class4;
      Class<ModelResolver> class5 = ModelResolver.class;
      classArray0[5] = class5;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findMethod("enums-as-ref", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<ModelResolver> class0 = ModelResolver.class;
      AnnotationMap annotationMap1 = AnnotationMap.of(class0, (Annotation) null);
      AnnotationMap annotationMap2 = AnnotationMap.merge(annotationMap0, annotationMap1);
      Annotation[] annotationArray0 = new Annotation[0];
      modelResolver0.resolveIgnoredProperties(annotationMap2, annotationArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultAttributes(contextAttributes0);
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<StandardDeleteOption> schema0 = new io.swagger.v3.oas.models.media.Schema<StandardDeleteOption>(specVersion0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType2 = annotatedType1.name("");
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema0, annotatedType2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte) (-1));
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<Vector> class0 = Vector.class;
      TypeFactory.rawClass(class0);
      // Undeclared exception!
      try { 
        typeFactory1.constructRawCollectionType(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1775755374) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.from(jsonInclude0);
      objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation1 = modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      assertNull(externalDocumentation1);
      
      Class<ModelResolver> class0 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getWithArgsCreator();
      Annotation[] annotationArray0 = new Annotation[2];
      annotationArray0[0] = (Annotation) jsonInclude0;
      annotationArray0[1] = (Annotation) externalDocumentation0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      modelResolver0.resolveAllowableValues((Annotated) null, annotationArray0, schema0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.name("Zp8z:~");
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      AnnotatedType annotatedType2 = annotatedType1.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType3 = annotatedType2.ctxAnnotations(annotationArray0);
      boolean boolean0 = modelResolver0.hiddenByJsonView(annotationArray0, annotatedType3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      jsonFactoryBuilder0.highestNonEscapedChar(150);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setLocale((Locale) null);
      Boolean boolean0 = new Boolean("?2wwEj910");
      objectMapper2.setDefaultLeniency(boolean0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "com.fasterxml.jackson.databind.ext.NioPathSerializer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"com.fasterxml.jackson.databind.ext.NioPathSerializer\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      ObjectMapper objectMapper4 = objectMapper3.configure(deserializationFeature0, true);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      Annotation[] annotationArray0 = new Annotation[2];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class0);
      annotationArray0[0] = null;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      annotationMap0.get(class0);
      annotationArray0[1] = null;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.type(class0);
      AnnotatedType annotatedType2 = annotatedType1.skipSchemaName(false);
      AnnotatedType annotatedType3 = annotatedType2.propertyName("");
      boolean boolean1 = modelResolver0.hiddenByJsonView(annotationArray0, annotatedType3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      boolean boolean0 = true;
      int int0 = 0;
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("JSON", "JSON", true, '\"', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 4)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      objectMapper1.reader(contextAttributes0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultVisibility(jsonAutoDetect_Value0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      JsonInclude.Value jsonInclude_Value0 = BeanProperty.EMPTY_INCLUDE;
      Class<JsonInclude> class0 = jsonInclude_Value0.valueFor();
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      annotatedType0.name("JSON");
      AnnotatedType annotatedType1 = annotatedType0.name(",valueFilter=");
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      modelResolver0.resolveMaxItems(annotatedType1, arraySchema0);
      Class<ModelResolver>[] classArray0 = (Class<ModelResolver>[]) Array.newInstance(Class.class, 1);
      Class<ModelResolver> class1 = ModelResolver.class;
      classArray0[0] = class1;
      objectMapper2.registerSubtypes(classArray0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      Annotation[] annotationArray0 = new Annotation[1];
      annotationArray0[0] = (Annotation) arraySchema0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).nullable();
      modelResolver0.resolveNullable((Annotated) null, annotationArray0, schema0);
      modelResolver0.resolveDescription((Annotated) null, annotationArray0, (Schema) null);
      modelResolver0.resolveExample((Annotated) null, annotationArray0, (Schema) null);
      modelResolver0.resolveIgnoredProperties(annotationArray0);
      modelResolver0.resolveMaxProperties((Annotated) null, annotationArray0, (Schema) null);
      modelResolver0.resolveWriteOnly((Annotated) null, annotationArray0, (Schema) null);
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation2 = modelResolver0.resolveExternalDocumentation(externalDocumentation1);
      assertNull(externalDocumentation2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider((DefaultSerializerProvider) null);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectMapper2.addHandler(deserializationProblemHandler0);
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("javax.validation.constraints.Size");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.javax.validation.constraints.Size
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      LinkedList<ModelResolver> linkedList0 = new LinkedList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(linkedList0);
      Class<Float> class0 = Float.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.skipOverride(true);
      AnnotatedType annotatedType2 = annotatedType1.parent(schema1);
      AnnotatedType annotatedType3 = annotatedType2.type(class0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      schema0.setJsonSchema((Map<String, Object>) null);
      AnnotatedType annotatedType4 = annotatedType3.jsonViewAnnotation(jsonView0);
      modelResolver0.resolveSchemaMembers(schema1, annotatedType4);
      assertFalse(schema1.getExampleSetFlag());
      assertFalse(schema0.getExampleSetFlag());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      JavaType javaType0 = null;
      Class<ModelResolver> class0 = ModelResolver.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      Class<StandardDeleteOption> class1 = StandardDeleteOption.class;
      // Undeclared exception!
      try { 
        CollectionLikeType.upgradeFrom(javaTypeArray0[1], (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Nulls nulls0 = Nulls.SET;
      Nulls nulls1 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls1);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.clearProblemHandlers();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      ObjectMapper objectMapper4 = modelResolver0.objectMapper();
      assertSame(objectMapper4, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      jsonFactoryBuilder0.rootValueSeparator(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonFactory1.configure(jsonParser_Feature0, false);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      objectMapper1.configure(deserializationFeature0, true);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "JSON", true, '4', 3460);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo((JsonSetter.Value) null);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      ObjectMapper objectMapper3 = objectMapper2.setMixInResolver((ClassIntrospector.MixInResolver) null);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper4 = objectMapper3.addHandler(deserializationProblemHandler0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      Annotation[] annotationArray0 = new Annotation[1];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class0);
      annotationArray0[0] = null;
      // Undeclared exception!
      try { 
        modelResolver0.hiddenByJsonView(annotationArray0, (AnnotatedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(4939, "JSON", 4939, 2341, 4939, 73, 4939, 2341, 2341, 2341);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 4939
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, true);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      Class<ModelResolver> class0 = ModelResolver.class;
      TreeSet<TypeNameResolver.Options> treeSet0 = new TreeSet<TypeNameResolver.Options>();
      treeSet0.clone();
      Class<ModelResolver> class1 = ModelResolver.class;
      typeNameResolver0.nameForClass(class1, treeSet0);
      typeNameResolver0.nameForClass(class0, treeSet0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
      HashMap<String, StandardDeleteOption> hashMap0 = new HashMap<String, StandardDeleteOption>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Annotation[] annotationArray0 = new Annotation[5];
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<StandardDeleteOption> class0 = StandardDeleteOption.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(66);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      // Undeclared exception!
      try { 
        placeholderForType0.refine(class0, typeBindings0, javaType0, javaTypeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      long long0 = 846L;
      Class<StandardDeleteOption> class0 = StandardDeleteOption.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      typeNameResolver0.setUseFqn(false);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) collectionLikeType0, (JavaType) collectionLikeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class io.swagger.v3.core.jackson.ModelResolver with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonFactory jsonFactory0 = null;
      try {
        jsonFactory0 = new JsonFactory((JsonFactoryBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonFactory0.configure(jsonParser_Feature0, false);
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      objectMapper2.setDefaultAttributes(contextAttributes0);
      try { 
        MockURI.URI("JSON", "", "9[!VOE?U_v%0Gq3", (-1594), "", "Module without defined version", "9[!VOE?U_v%0Gq3");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in hostname at index 9: JSON://@9[!VOE?U_v%0Gq3:-1594?Module%20without%20defined%20version#9[!VOE?U_v%250Gq3
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      // Undeclared exception!
      try { 
        objectMapper0.setConfig((SerializationConfig) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"config\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = true;
      char char0 = 'F';
      int int0 = 343;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, 'F', 343);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.EXPLICIT_ONLY;
      ObjectMapper objectMapper3 = objectMapper2.setConstructorDetector(constructorDetector0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)0;
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArray0);
      jsonFactory0.hasFormat(inputAccessor_Std0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      objectMapper0.addMixIn(class0, class1);
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      InputAccessor.Std inputAccessor_Std1 = new InputAccessor.Std((byte[]) null, 0, 0);
      jsonFactory0.hasFormat(inputAccessor_Std1);
      objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-210), "JSON", (-210), (-210), 0, 0, 1, (-210), (-2896), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -210
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "JSON");
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      JsonGenerator.Feature jsonGenerator_Feature7 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature7;
      JsonGenerator.Feature jsonGenerator_Feature8 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature8;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      HashMap<String, ModelResolver> hashMap0 = new HashMap<String, ModelResolver>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "JSON";
      stringArray0[1] = "pVvO8s43V|$";
      stringArray0[2] = "JSON";
      stringArray0[3] = "pVvO8s43V|$";
      stringArray0[4] = "JSON";
      stringArray0[5] = "pVvO8s43V|$";
      SimpleBeanPropertyFilter simpleBeanPropertyFilter0 = SimpleBeanPropertyFilter.filterOutAllExcept(stringArray0);
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.addFilter("pVvO8s43V|$", simpleBeanPropertyFilter0);
      ObjectMapper objectMapper3 = objectMapper2.setFilterProvider(simpleFilterProvider1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      io.swagger.v3.oas.models.media.Schema<CoercionInputShape> schema0 = new io.swagger.v3.oas.models.media.Schema<CoercionInputShape>();
      LinkedList<CoercionInputShape> linkedList0 = new LinkedList<CoercionInputShape>();
      defaultAccessorNamingStrategy_Provider0.withFirstCharAcceptance(false, false);
      io.swagger.v3.oas.models.media.Schema<CoercionInputShape> schema1 = schema0.examples(linkedList0);
      modelResolver0.addRequiredItem(schema1, "");
      assertSame(schema1, schema0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 1);
      TypeFactory typeFactory1 = typeFactory0.withCache((LookupCache<Object, JavaType>) lRUMap0);
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
      TypeFactory typeFactory3 = typeFactory2.withClassLoader((ClassLoader) null);
      Class<HashMap> class0 = HashMap.class;
      // Undeclared exception!
      try { 
        typeFactory3.constructRawMapType(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1775755374) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      Locale locale0 = Locale.CHINESE;
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      objectMapper2.getPolymorphicTypeValidator();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      modelResolver0.resolveExtensions(annotatedType0, arraySchema0);
      JavaType javaType0 = null;
      Annotation[] annotationArray0 = new Annotation[8];
      annotationArray0[0] = (Annotation) arraySchema0;
      annotationArray0[1] = (Annotation) arraySchema0;
      Class<TypeNameResolver.Options> class0 = TypeNameResolver.Options.class;
      EnumSet<TypeNameResolver.Options> enumSet0 = EnumSet.noneOf(class0);
      TypeNameResolver.Options typeNameResolver_Options0 = TypeNameResolver.Options.SKIP_API_MODEL;
      enumSet0.add(typeNameResolver_Options0);
      TypeNameResolver.Options typeNameResolver_Options1 = TypeNameResolver.Options.SKIP_API_MODEL;
      enumSet0.add(typeNameResolver_Options1);
      // Undeclared exception!
      try { 
        typeNameResolver0.nameForClass((JavaType) null, enumSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.TypeNameResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetterField();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetterMethod();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findAnyGetter();
      Annotation[] annotationArray0 = new Annotation[0];
      String string0 = modelResolver0.resolvePattern((Annotated) null, annotationArray0, (Schema) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonParser_FeatureArray0);
      Nulls nulls0 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultSetterInfo(jsonSetter_Value0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      JavaType javaType0 = dOMDeserializer_DocumentDeserializer0.getValueType();
      javaTypeArray0[0] = null;
      // Undeclared exception!
      try { 
        CollectionLikeType.upgradeFrom(javaType0, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      deserializationFeatureArray0[7] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      deserializationFeatureArray0[8] = deserializationFeature3;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion((JsonInclude.Value) null);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      Class<ModelResolver> class0 = ModelResolver.class;
      // Undeclared exception!
      try { 
        objectMapper0.readValue((String) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"content\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      Class<ModelResolver> class0 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getWithArgsCreator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Empty0, annotationMap0, 21);
      Annotation[] annotationArray0 = new Annotation[4];
      annotationArray0[0] = null;
      annotationArray0[1] = null;
      annotationArray0[2] = null;
      annotationArray0[3] = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(schema0).extensions();
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedParameter0, annotationArray0, schema0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[0] = deserializationFeature1;
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper2);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature4);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      jsonFactory3.enable(jsonGenerator_Feature0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider defaultSerializerProvider0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      // Undeclared exception!
      try { 
        objectMapper1.disable(serializationFeature0, (SerializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      Locale locale0 = Locale.ENGLISH;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      ObjectMapper objectMapper2 = objectMapper1.setPolymorphicTypeValidator((PolymorphicTypeValidator) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      objectMapper2.setNodeFactory(jsonNodeFactory0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ModelResolver> class0 = ModelResolver.class;
      typeFactory0.constructRawMapLikeType(class0);
      // Undeclared exception!
      try { 
        EnumSet.copyOf((Collection<TypeNameResolver.Options>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "JSON");
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      Class<ModelResolver> class0 = ModelResolver.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      modelResolver0.resolveExtensions(annotatedType0, arraySchema0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(modelResolver0);
      typeNameResolver0.findStdName(javaType0);
      AnnotatedType annotatedType1 = annotatedType0.skipSchemaName(true);
      AnnotatedType annotatedType2 = annotatedType1.name("composed-model-properties-as-sibiling");
      AnnotatedType annotatedType3 = annotatedType2.skipOverride(false);
      AnnotatedType annotatedType4 = annotatedType3.propertyName("composed-model-properties-as-sibiling");
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema1).uniqueItems();
      modelResolver0.resolveUniqueItems(annotatedType4, arraySchema1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      Class<ModelResolver> class1 = ModelResolver.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Empty0, class1, "composed-model-properties-as-sibiling", javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap0);
      Annotation[] annotationArray0 = new Annotation[6];
      annotationArray0[0] = (Annotation) arraySchema0;
      annotationArray0[1] = (Annotation) arraySchema1;
      annotationArray0[2] = (Annotation) arraySchema1;
      annotationArray0[3] = (Annotation) arraySchema0;
      annotationArray0[4] = (Annotation) arraySchema0;
      annotationArray0[5] = (Annotation) arraySchema1;
      String string0 = modelResolver0.resolveTitle(annotated0, annotationArray0, (Schema) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      // Undeclared exception!
      try { 
        objectMapper1.enable((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      JsonGenerator.Feature jsonGenerator_Feature7 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature7;
      JsonGenerator.Feature jsonGenerator_Feature8 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature8;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = null;
      try {
        simpleFilterProvider0 = new SimpleFilterProvider((Map<String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Boolean boolean0 = new Boolean(false);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      ObjectMapper objectMapper2 = objectMapper1.addHandler((DeserializationProblemHandler) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      // Undeclared exception!
      try { 
        objectMapper0.enable(serializationFeature0, (SerializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "");
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper2.writerFor(class0);
      // Undeclared exception!
      try { 
        objectMapper0.enable(serializationFeature0, (SerializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      // Undeclared exception!
      try { 
        objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) null, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass `null` PolymorphicTypeValidator
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX;
      serializationFeatureArray0[3] = serializationFeature1;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      ObjectMapper objectMapper4 = objectMapper3.addHandler((DeserializationProblemHandler) null);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      Annotated annotated0 = null;
      Annotation[] annotationArray0 = new Annotation[0];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<HashMap> class0 = HashMap.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructMapType(class0, class1, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1775755374) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<Module> class0 = Module.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<Annotation> class1 = Annotation.class;
      annotationMap1.get(class1);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Annotation[] annotationArray0 = new Annotation[0];
      modelResolver0.resolveIgnoredProperties(annotationCollector_OneAnnotation0, annotationArray0);
      Class<Module> class2 = Module.class;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonFactory0.disable(jsonParser_Feature0);
      modelResolver0.getComposedSchemaReferencedClasses(class2, annotationArray0, (Schema) null);
      io.swagger.v3.oas.models.media.Schema<Module> schema0 = new io.swagger.v3.oas.models.media.Schema<Module>();
      modelResolver0._addEnumProps(class0, schema0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.resolveAsRef(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      Integer integer0 = modelResolver0.resolveMaxItems(annotatedType1, arraySchema0);
      assertNull(integer0);
  }
}
