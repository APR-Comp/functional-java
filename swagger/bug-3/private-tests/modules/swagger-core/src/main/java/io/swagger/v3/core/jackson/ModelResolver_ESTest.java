/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 03 05:42:17 GMT 2023
 */

package io.swagger.v3.core.jackson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.JsonWriteFeature;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultIndenter;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ConstructorDetector;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DatatypeFeature;
import com.fasterxml.jackson.databind.cfg.DatatypeFeatures;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.EnumFeature;
import com.fasterxml.jackson.databind.cfg.JsonNodeFeature;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.PropertyFilter;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.LogicalType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.LookupCache;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import io.swagger.v3.core.converter.AnnotatedType;
import io.swagger.v3.core.converter.ModelConverter;
import io.swagger.v3.core.converter.ModelConverterContext;
import io.swagger.v3.core.converter.ModelConverterContextImpl;
import io.swagger.v3.core.jackson.ModelResolver;
import io.swagger.v3.core.jackson.TypeNameResolver;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.extensions.Extension;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.models.SpecVersion;
import io.swagger.v3.oas.models.media.Discriminator;
import io.swagger.v3.oas.models.media.XML;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.NotActiveException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.text.DateFormat;
import java.time.chrono.HijrahEra;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Function;
import javax.sql.rowset.serial.SerialBlob;
import javax.xml.bind.annotation.XmlAccessorType;
import org.apache.commons.io.file.StandardDeleteOption;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;
import org.slf4j.event.Level;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModelResolver_ESTest extends ModelResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      objectMapper2.findAndRegisterModules();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).pattern();
      modelResolver0.resolvePattern((Annotated) null, (Annotation[]) null, schema0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      annotatedType0.setPropertyName((String) null);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType2 = annotatedType1.resolveAsRef(false);
      annotatedType1.setName("");
      annotatedType2.setName("composed-model-properties-as-sibiling");
      String string0 = modelResolver0.decorateModelName(annotatedType2, (String) null);
      assertNull(string0);
      
      Class<BinaryNode> class0 = BinaryNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, javaType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(modelResolver0);
      ReferenceType referenceType2 = referenceType1.withValueHandler(modelResolver0);
      referenceType2.withStaticTyping();
      ReferenceType referenceType3 = referenceType2.withTypeHandler(modelResolver0);
      Class<ModelResolver> class1 = ModelResolver.class;
      SimpleType.constructUnsafe(class1);
      JavaType javaType1 = referenceType3.getReferencedType();
      boolean boolean0 = modelResolver0.shouldIgnoreClass(javaType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultLeniency(boolean0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      Annotation[] annotationArray0 = null;
      modelResolver0.resolveIgnoredProperties((Annotation[]) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.printf("javax.validation.constraints.Size", (Object[]) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      modelResolver0.resolvePatternProperties(javaType0, (Annotation[]) null, modelConverterContextImpl0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.CANADA_FRENCH;
      locale0.getDisplayLanguage(locale1);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      simpleFilterProvider0.setFailOnUnknownId(false);
      objectMapper0.writer((FilterProvider) simpleFilterProvider0);
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "properties", (Object[]) null);
      objectMapper1.createGenerator((OutputStream) printStream0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema0).allOf();
      doReturn((Class[]) null).when(schema0).anyOf();
      doReturn((Class[]) null).when(schema0).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class0, (Annotation[]) null, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      Class<Void> class0 = Void.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.skipSchemaName(false);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      annotatedType0.name("composed-model-properties-as-sibiling");
      modelResolver0.applyBeanValidatorAnnotations(schema0, (Annotation[]) null, schema0, false);
      AnnotatedType annotatedType2 = annotatedType1.propertyName("i)~hc{");
      annotatedType2.setType(class0);
      AnnotatedType annotatedType3 = annotatedType2.resolveAsRef(false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      objectMapper0.configure(jsonGenerator_Feature0, false);
      AnnotatedType annotatedType4 = annotatedType3.skipJsonIdentity(false);
      annotatedType4.name("CG=+) /C,\"%N0!Xm_^P");
      annotatedType3.skipOverride(false);
      objectMapper0.createNonBlockingByteArrayParser();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema0).uniqueItems();
      modelResolver0.resolveUniqueItems(annotatedType4, arraySchema0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      modelResolver0.resolveXml((Annotated) null, (Annotation[]) null, schema1);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema2).example();
      // Undeclared exception!
      try { 
        modelResolver0.resolveExample((Annotated) null, (Annotation[]) null, schema2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema0).maxProperties();
      Integer integer0 = modelResolver0.resolveMaxProperties((Annotated) null, annotationArray0, schema0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider((FilterProvider) null);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<Enum<MatchStrength>> schema0 = new io.swagger.v3.oas.models.media.Schema<Enum<MatchStrength>>(specVersion0);
      schema0.getExtensions();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(schema1).extensions();
      modelResolver0.resolveExtensions((Annotated) null, (Annotation[]) null, schema1);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema2).format();
      modelResolver0.resolveFormat((Annotated) null, (Annotation[]) null, schema2);
      Annotation[] annotationArray0 = new Annotation[2];
      annotationArray0[0] = (Annotation) schema1;
      annotationArray0[1] = (Annotation) schema2;
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema3).maximum();
      modelResolver0.resolveMaximum((Annotated) null, annotationArray0, schema3);
      Schema schema4 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema4).allowableValues();
      modelResolver0.resolveAllowableValues((Annotated) null, annotationArray0, schema4);
      Schema schema5 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema5).allOf();
      doReturn((Class[]) null).when(schema5).anyOf();
      doReturn((Class[]) null).when(schema5).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class0, (Annotation[]) null, schema5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      ObjectMapper objectMapper3 = objectMapper2.copyWith(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper4 = objectMapper3.setDefaultPropertyInclusion(jsonInclude_Include0);
      objectMapper3.setTimeZone((TimeZone) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getJsonValueAccessor();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findJsonValueAccessor();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).title();
      modelResolver0.resolveTitle((Annotated) null, (Annotation[]) null, schema0);
      Class<ModelResolver> class0 = ModelResolver.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      Class<TextStyle> class1 = TextStyle.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      PropertyName propertyName0 = PropertyName.construct("gV[5<HEiG)Nn}Zv6~");
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(referenceType1, propertyName0, (ObjectIdGenerator<?>) null, false);
      ReferenceType referenceType2 = (ReferenceType)objectIdWriter0.idType;
      JavaType javaType0 = referenceType1.withContentType(referenceType2);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      io.swagger.v3.oas.models.media.Schema schema2 = modelResolver0.resolveWrapping(javaType0, (ModelConverterContext) null, schema1);
      assertNull(schema2.getNullable());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0, serializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      io.swagger.v3.oas.models.media.Schema<Module> schema0 = new io.swagger.v3.oas.models.media.Schema<Module>();
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema0, (AnnotatedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider0, defaultDeserializationContext0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      Vector<ModelConverter> vector0 = new Vector<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(vector0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveDiscriminator((JavaType) null, modelConverterContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable((Boolean) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(637, "JSON");
      ObjectMapper objectMapper3 = objectMapper2.setTimeZone(simpleTimeZone0);
      ObjectMapper objectMapper4 = objectMapper3.deactivateDefaultTyping();
      objectMapper3.mixInCount();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonFactory0.configure(jsonParser_Feature0, true);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema0).minProperties();
      Integer integer0 = modelResolver0.resolveMinProperties((Annotated) null, annotationArray0, schema0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      modelResolver0.resolveExtensions(annotatedType0, (ArraySchema) null);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      Annotation[] annotationArray0 = new Annotation[4];
      annotationArray0[0] = (Annotation) null;
      annotationArray0[1] = (Annotation) null;
      annotationArray0[2] = (Annotation) null;
      annotationArray0[3] = (Annotation) null;
      // Undeclared exception!
      try { 
        modelResolver0.applyBeanValidatorAnnotations(schema0, annotationArray0, schema0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(")N](vn=/i%h},", version0);
      Class<HijrahEra> class0 = HijrahEra.class;
      Class<HijrahEra> class1 = HijrahEra.class;
      SimpleModule simpleModule1 = simpleModule0.setMixInAnnotation(class0, class1);
      ObjectMapper objectMapper3 = objectMapper2.registerModule(simpleModule1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.schemaProperty(false);
      AnnotatedType annotatedType2 = annotatedType1.propertyName("FAIL_ON_NULL_FOR_PRIMITIVES");
      annotatedType1.getJsonUnwrappedHandler();
      AnnotatedType annotatedType3 = annotatedType2.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType4 = annotatedType3.jsonViewAnnotation(jsonView0);
      // Undeclared exception!
      try { 
        modelResolver0.resolve(annotatedType4, (ModelConverterContext) null, (Iterator<ModelConverter>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, true);
      Class<ModelResolver> class0 = ModelResolver.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      modelResolver0.resolveExternalDocumentation((Annotated) null, annotationArray0, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1).example();
      // Undeclared exception!
      try { 
        modelResolver0.resolveExample((Annotated) null, annotationArray0, schema1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).deprecated();
      Boolean boolean0 = modelResolver0.resolveDeprecated((Annotated) null, (Annotation[]) null, schema0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      LinkedHashSet<TypeNameResolver.Options> linkedHashSet0 = new LinkedHashSet<TypeNameResolver.Options>();
      typeNameResolver0.nameForClass(class0, linkedHashSet0);
      AnnotatedType annotatedType0 = new AnnotatedType(javaType0);
      AnnotatedType annotatedType1 = annotatedType0.skipOverride(true);
      AnnotatedType annotatedType2 = annotatedType1.propertyName("enums-as-ref");
      annotatedType2.getJsonUnwrappedHandler();
      annotatedType1.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      annotatedType2.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType3 = annotatedType2.name("composed-model-properties-as-sibiling");
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      modelResolver0.resolveMinItems(annotatedType3, arraySchema0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
      basicBeanDescription0.findJsonValueAccessor();
      Annotation[] annotationArray0 = new Annotation[6];
      annotationArray0[0] = (Annotation) jsonView0;
      annotationArray0[1] = (Annotation) arraySchema0;
      annotationArray0[2] = (Annotation) arraySchema0;
      annotationArray0[3] = (Annotation) jsonView0;
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      Class<Annotation> class1 = Annotation.class;
      annotatedClass0.getAnnotation(class1);
      annotationArray0[4] = null;
      annotationArray0[5] = (Annotation) arraySchema0;
      BigDecimal bigDecimal0 = modelResolver0.resolveMinimum((Annotated) null, annotationArray0, (Schema) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper3);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver1);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<Level> schema0 = new io.swagger.v3.oas.models.media.Schema<Level>(specVersion0);
      LinkedList<Level> linkedList0 = new LinkedList<Level>();
      io.swagger.v3.oas.models.media.Schema<Level> schema1 = schema0.examples(linkedList0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveWrapping((JavaType) null, modelConverterContextImpl0, schema1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectMapper objectMapper2 = objectMapper1.copyWith(jsonFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, (TypeNameResolver) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      // Undeclared exception!
      try { 
        modelResolver0.hasHiddenAnnotation((Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      HashMap<JavaType, String> hashMap0 = new HashMap<JavaType, String>();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      hashMap0.entrySet();
      hashMap0.put(javaType0, "p{H3p^");
      modelResolver0._resolvedTypeNames = (Map<JavaType, String>) hashMap0;
      modelResolver0.objectMapper();
      io.swagger.v3.oas.models.media.Schema<RoundingMode> schema0 = new io.swagger.v3.oas.models.media.Schema<RoundingMode>();
      AnnotatedType annotatedType0 = new AnnotatedType(javaType0);
      modelResolver0.resolveSchemaMembers(schema0, annotatedType0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0.addRequiredItem(schema1, "bind-type");
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      JsonFactoryBuilder jsonFactoryBuilder0 = null;
      try {
        jsonFactoryBuilder0 = new JsonFactoryBuilder((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.TSFBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonSetter jsonSetter0 = mock(JsonSetter.class, new ViolatedAssumptionAnswer());
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      ObjectMapper objectMapper2 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      Nulls nulls0 = Nulls.DEFAULT;
      jsonSetter_Value0.withValueNulls(nulls0);
      ObjectMapper objectMapper3 = objectMapper2.clearProblemHandlers();
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      objectMapper0.writer((PrettyPrinter) null);
      JsonSetter.Value.merge(jsonSetter_Value0, jsonSetter_Value0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      AnnotationIntrospectorPair annotationIntrospectorPair0 = (AnnotationIntrospectorPair)modelResolver0._intr;
      objectMapper0.setAnnotationIntrospector(annotationIntrospectorPair0);
      serializationFeatureArray0[0] = serializationFeature0;
      ObjectMapper objectMapper4 = objectMapper3.enable(serializationFeature0, serializationFeatureArray0);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper4);
      Class<Module> class0 = Module.class;
      NamedType namedType0 = new NamedType(class0, "enums-as-ref");
      modelResolver1._subTypeName(namedType0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema0).uniqueItems();
      modelResolver1.resolveUniqueItems((AnnotatedType) null, arraySchema0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(schema0).description();
      modelResolver1.resolveDescription((Annotated) null, (Annotation[]) null, schema0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      objectMapper3.reader(jsonNodeFactory0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema1).nullable();
      modelResolver1.resolveNullable((Annotated) null, (Annotation[]) null, schema1);
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        modelResolver1.ignore((Annotated) null, xmlAccessorType0, (String) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector(annotationIntrospector0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<ModelResolver> class0 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "enums-as-ref", mapLikeType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      Integer integer0 = modelResolver0.resolveMinProperties(annotatedField0, (Annotation[]) null, (Schema) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      ObjectMapper objectMapper3 = objectMapper2.addHandler((DeserializationProblemHandler) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      ArrayList<ModelConverter> arrayList0 = new ArrayList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(arrayList0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<SpecVersion> schema0 = new io.swagger.v3.oas.models.media.Schema<SpecVersion>(specVersion0);
      io.swagger.v3.oas.models.media.Schema<SpecVersion> schema1 = schema0.examples((List<SpecVersion>) null);
      // Undeclared exception!
      try { 
        modelResolver0.resolveDiscriminatorProperty((JavaType) null, modelConverterContextImpl0, schema1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      Version version0 = new Version(2, 0, 2, ")c", ")c", "JSON");
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
      SimpleModule simpleModule0 = new SimpleModule("JSON", version0);
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(schema0).multipleOf();
      modelResolver0.resolveMultipleOf((Annotated) null, annotationArray0, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1).example();
      // Undeclared exception!
      try { 
        modelResolver0.resolveExample((Annotated) null, annotationArray0, schema1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeFactory.rawClass(class0);
      annotatedType0.setSkipOverride(false);
      AnnotatedType annotatedType1 = annotatedType0.type(class1);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      annotatedType1.getJsonUnwrappedHandler();
      annotatedType1.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType2 = annotatedType1.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType3 = annotatedType2.name("p{c@{:p");
      AnnotatedType annotatedType4 = annotatedType3.resolveAsRef(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      modelResolver0.resolveMaxItems(annotatedType4, arraySchema0);
      Class<ModelResolver> class2 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class2, "enums-as-ref", simpleType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      AnnotatedField annotatedField1 = annotatedField0.withAnnotations(annotationMap0);
      Annotation[] annotationArray0 = new Annotation[7];
      annotationArray0[0] = (Annotation) arraySchema0;
      annotationArray0[1] = (Annotation) arraySchema0;
      annotationArray0[2] = (Annotation) jsonView0;
      annotationArray0[3] = (Annotation) arraySchema0;
      annotationArray0[4] = (Annotation) jsonView0;
      annotationArray0[5] = (Annotation) jsonView0;
      annotationArray0[6] = (Annotation) jsonView0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).defaultValue();
      // Undeclared exception!
      try { 
        modelResolver0.resolveDefaultValue(annotatedField1, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      Class<ModelResolver>[] classArray0 = (Class<ModelResolver>[]) Array.newInstance(Class.class, 3);
      Class<ModelResolver> class0 = ModelResolver.class;
      classArray0[0] = class0;
      Class<ModelResolver> class1 = ModelResolver.class;
      classArray0[1] = class1;
      Class<ModelResolver> class2 = ModelResolver.class;
      classArray0[2] = class2;
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializerFactoryConfig serializerFactoryConfig0 = beanSerializerFactory0.getFactoryConfig();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
      objectMapper0.setSerializerFactory(serializerFactory0);
      objectMapper0.registerSubtypes(classArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      objectMapper0.writer(serializationFeature0, serializationFeatureArray0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      objectMapper0.findAndRegisterModules();
      objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      modelResolver0.objectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MatchStrength> class3 = MatchStrength.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType0 = typeFactory0.constructParametricType(class3, javaTypeArray0);
      modelResolver0._isOptionalType(javaType0);
      ArrayList<ModelConverter> arrayList0 = new ArrayList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(arrayList0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      ArrayList<ModelResolver> arrayList1 = new ArrayList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(arrayList1);
      io.swagger.v3.oas.models.media.Schema schema2 = modelResolver0.resolveWrapping(javaType0, modelConverterContextImpl0, schema1);
      assertNull(schema2.getMaxProperties());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = objectMapper0.copy();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[8];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_HEX_UPPER_CASE;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.USE_FAST_DOUBLE_WRITER;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      JsonGenerator.Feature jsonGenerator_Feature7 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature7;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      Nulls nulls0 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forContentNulls(nulls0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultSetterInfo(jsonSetter_Value0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      io.swagger.v3.oas.models.media.Schema<Module> schema0 = new io.swagger.v3.oas.models.media.Schema<Module>();
      Class<Module> class0 = Module.class;
      objectMapper0.writerFor(class0);
      AnnotatedType annotatedType1 = annotatedType0.parent(schema0);
      modelResolver0.resolveUniqueItems(annotatedType1, (ArraySchema) null);
      Class<ModelResolver> class1 = ModelResolver.class;
      modelResolver0._addEnumProps(class1, schema0);
      assertNull(schema0.getPattern());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      Locale locale0 = Locale.US;
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper3.readerWithView(class0);
      typeNameResolver0.setUseFqn(false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class1 = ModelResolver.class;
      objectMapper1.writerWithView(class1);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      Annotation[] annotationArray0 = new Annotation[6];
      annotationArray0[0] = (Annotation) externalDocumentation0;
      annotationArray0[1] = (Annotation) externalDocumentation0;
      annotationArray0[2] = (Annotation) externalDocumentation0;
      annotationArray0[3] = (Annotation) externalDocumentation0;
      annotationArray0[4] = (Annotation) externalDocumentation0;
      annotationArray0[5] = (Annotation) externalDocumentation0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      XML xML0 = modelResolver0.resolveXml((Annotated) null, annotationArray0, schema0);
      assertNull(xML0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ConstructorDetector constructorDetector0 = ConstructorDetector.EXPLICIT_ONLY;
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector(constructorDetector0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      JsonGenerator.Feature jsonGenerator_Feature7 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature7;
      JsonGenerator.Feature jsonGenerator_Feature8 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature8;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      Class<SimpleModule> class0 = SimpleModule.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema0).allOf();
      doReturn((Class[]) null).when(schema0).anyOf();
      doReturn((Class[]) null).when(schema0).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class0, (Annotation[]) null, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      Annotation[] annotationArray0 = new Annotation[0];
      // Undeclared exception!
      try { 
        modelResolver0.hiddenByJsonView(annotationArray0, (AnnotatedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl1);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper2 = objectMapper1.addHandler(deserializationProblemHandler0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(180, 180);
      TypeFactory typeFactory1 = typeFactory0.withCache((LookupCache<Object, JavaType>) lRUMap0);
      ObjectMapper objectMapper3 = objectMapper2.setTypeFactory(typeFactory1);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      objectMapper3.setDefaultAttributes(contextAttributes0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      String string0 = "";
      modelResolver0.addRequiredItem(schema0, "");
      AnnotatedType annotatedType0 = new AnnotatedType();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      Class<JsonGenerator.Feature> class0 = JsonGenerator.Feature.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0);
      Class<ModelResolver> class1 = ModelResolver.class;
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) collectionLikeType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings1, (Object) modelResolver0, (Object) modelResolver0);
      AnnotatedType annotatedType2 = annotatedType1.type(arrayType0);
      AnnotatedType annotatedType3 = annotatedType2.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      annotatedType3.skipOverride(false);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("composed-model-properties-as-sibiling", (String) null, false, 'D', (-537));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      schema0.getEnum();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples((List<ModelResolver>) null);
      modelResolver0.addRequiredItem(schema1, (String) null);
      assertNull(schema1.getReadOnly());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultAttributes(contextAttributes0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, false);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<StandardDeleteOption> class1 = StandardDeleteOption.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
      JavaType javaType0 = typeFactory1.constructParametricType(class0, typeBindings0);
      Map<String, io.swagger.v3.oas.models.media.Schema> map0 = (Map<String, io.swagger.v3.oas.models.media.Schema>)modelResolver0.resolveSchemaProperties(javaType0, (Annotation[]) null, (ModelConverterContext) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone((TimeZone) null);
      TreeSet<Module> treeSet0 = new TreeSet<Module>();
      TreeSet<Module> treeSet1 = new TreeSet<Module>((SortedSet<Module>) treeSet0);
      objectMapper1.registerModules((Iterable<? extends Module>) treeSet1);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, false);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      objectMapper2.missingNode();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      objectMapper3.createObjectNode();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<Void> class0 = Void.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.resolveAsRef(true);
      AnnotatedType annotatedType2 = annotatedType1.skipOverride(true);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      LinkedList<ModelResolver> linkedList0 = new LinkedList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(linkedList0);
      AnnotatedType annotatedType3 = annotatedType2.parent(schema1);
      AnnotatedType annotatedType4 = annotatedType3.name("bind-type");
      Integer integer0 = modelResolver0.resolveMinItems(annotatedType4, (ArraySchema) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, true);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Annotation[] annotationArray0 = new Annotation[0];
      AnnotatedType annotatedType0 = new AnnotatedType();
      annotatedType0.getJsonUnwrappedHandler();
      AnnotatedType annotatedType1 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      AnnotatedType annotatedType2 = annotatedType1.parent(schema0);
      AnnotatedType annotatedType3 = annotatedType2.skipJsonIdentity(true);
      AnnotatedType annotatedType4 = annotatedType3.ctxAnnotations(annotationArray0);
      boolean boolean0 = modelResolver0.hiddenByJsonView(annotationArray0, annotatedType4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.empty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      Class<Nulls> class0 = Nulls.class;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      AnnotatedType annotatedType1 = annotatedType0.parent(schema0);
      annotatedType1.skipSchemaName(true);
      modelResolver0.decorateModelName(annotatedType1, "javax.validation.constraints.Max");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.getSuperClass();
      // Undeclared exception!
      try { 
        modelResolver0._isOptionalType((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper0.writerWithView(class0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Boolean boolean0 = Boolean.TRUE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      objectMapper3.disable(jsonParser_FeatureArray0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.type((Type) null);
      AnnotatedType annotatedType2 = annotatedType1.skipJsonIdentity(true);
      AnnotatedType annotatedType3 = annotatedType2.resolveAsRef(true);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType4 = annotatedType3.jsonViewAnnotation(jsonView0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema0, annotatedType4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      EnumFeature enumFeature0 = EnumFeature.BOGUS_FEATURE;
      objectMapper1.missingNode();
      ObjectMapper objectMapper3 = objectMapper2.configure((DatatypeFeature) enumFeature0, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      beanDeserializerBuilder0.getBuildMethod();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).example();
      // Undeclared exception!
      try { 
        modelResolver0.resolveExample((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      Annotation[] annotationArray0 = new Annotation[0];
      // Undeclared exception!
      try { 
        modelResolver0.resolveIgnoredProperties((Annotations) null, annotationArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0, locale0);
      ObjectMapper objectMapper2 = objectMapper1.setDateFormat(dateFormat0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultSetterInfo((JsonSetter.Value) null);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveReadOnly((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultAttributes(contextAttributes0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper2 = objectMapper1.copyWith(jsonFactory0);
      Discriminator discriminator0 = new Discriminator();
      discriminator0.getExtensions();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedType1, (ArraySchema) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      LogicalType logicalType0 = LogicalType.DateTime;
      objectMapper0.createNonBlockingByteArrayParser();
      objectMapper0.clearProblemHandlers();
      objectMapper0.setNodeFactory((JsonNodeFactory) null);
      objectMapper0.coercionConfigFor(logicalType0);
      objectMapper0.deactivateDefaultTyping();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.RequiredMode) null).when(schema0).requiredMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveRequiredMode(schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0, locale0);
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory(beanSerializerFactory0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<JsonFormat.Shape> class0 = JsonFormat.Shape.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class1);
      objectMapper2.setTypeFactory((TypeFactory) null);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class1, (Annotation) null);
      Annotation[] annotationArray0 = new Annotation[7];
      annotationArray0[0] = null;
      annotationArray0[1] = null;
      annotationArray0[2] = null;
      annotationArray0[3] = null;
      annotationArray0[4] = null;
      annotationArray0[5] = null;
      annotationArray0[6] = null;
      modelResolver0.resolveIgnoredProperties(annotationCollector_TwoAnnotations0, annotationArray0);
      Class<ModelResolver> class2 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getDefaultCreator();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveWriteOnly((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0._addEnumProps(class0, schema0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getJsonValueAccessor();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Annotation[] annotationArray0 = null;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema1).exclusiveMinimum();
      modelResolver0.resolveExclusiveMinimum((Annotated) null, (Annotation[]) null, schema1);
      modelResolver0.findJsonValueType(basicBeanDescription0);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema2).exclusiveMaximum();
      modelResolver0.resolveExclusiveMaximum((Annotated) null, (Annotation[]) null, schema2);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.schemaProperty(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema0).uniqueItems();
      modelResolver0.resolveUniqueItems(annotatedType1, arraySchema0);
      modelResolver0.shouldIgnoreClass((Type) null);
      Stack<ModelResolver> stack0 = new Stack<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema3 = schema0.examples(stack0);
      Schema schema4 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema4).defaultValue();
      doReturn((String) null, (String) null).when(schema4).description();
      doReturn((String) null).when(schema4).format();
      doReturn((String) null).when(schema4).title();
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema3, (Annotated) null, (Annotation[]) null, schema4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency((Boolean) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      modelResolver0.objectMapper();
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.schemaProperty(false);
      annotatedType1.getJsonUnwrappedHandler();
      AnnotatedType annotatedType2 = annotatedType1.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType3 = annotatedType2.skipJsonIdentity(false);
      AnnotatedType annotatedType4 = annotatedType3.name("enums-as-ref");
      String string0 = modelResolver0.decorateModelName(annotatedType4, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, true);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper4 = objectMapper3.setPropertyNamingStrategy(propertyNamingStrategy0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      schema0.getEnum();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples((List<ModelResolver>) null);
      schema1.propertyNames(schema0);
      Annotation[] annotationArray0 = new Annotation[0];
      modelResolver0.applyBeanValidatorAnnotations(schema1, annotationArray0, schema1, true);
      modelResolver0.resolveIgnoredProperties(annotationArray0);
      Annotation[] annotationArray1 = new Annotation[1];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class0);
      annotationArray1[0] = null;
      // Undeclared exception!
      try { 
        modelResolver0.resolveIgnoredProperties((Annotations) null, annotationArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.empty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      ObjectMapper objectMapper2 = objectMapper1.setConstructorDetector((ConstructorDetector) null);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0, serializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Schema.RequiredMode schema_RequiredMode0 = modelResolver0.resolveRequiredMode((Schema) null);
      assertEquals(Schema.RequiredMode.AUTO, schema_RequiredMode0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.copyWith((JsonFactory) null);
      HashMap<String, Module> hashMap0 = new HashMap<String, Module>();
      HashMap<String, Module> hashMap1 = new HashMap<String, Module>(hashMap0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap1);
      ObjectMapper objectMapper3 = objectMapper2.setFilterProvider(simpleFilterProvider0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      ObjectMapper objectMapper4 = objectMapper3.configure(jsonGenerator_Feature0, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, (TypeNameResolver) null);
      Class<ModelResolver> class0 = ModelResolver.class;
      PropertyName propertyName0 = new PropertyName("xO>%F$Js^");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1828));
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, collectionLikeType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Annotation[] annotationArray0 = new Annotation[7];
      annotationArray0[0] = null;
      annotationArray0[1] = null;
      annotationArray0[2] = null;
      annotationArray0[3] = null;
      annotationArray0[4] = null;
      annotationArray0[5] = null;
      annotationArray0[6] = null;
      Set<String> set0 = modelResolver0.resolveIgnoredProperties(annotationMap0, annotationArray0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.setDefaultFilter((SimpleBeanPropertyFilter) null);
      ObjectMapper objectMapper3 = objectMapper2.setFilterProvider(simpleFilterProvider1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      io.swagger.v3.oas.models.media.ArraySchema arraySchema0 = new io.swagger.v3.oas.models.media.ArraySchema();
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      io.swagger.v3.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      io.swagger.v3.oas.models.media.Schema<Object> schema1 = arraySchema1.examples(arrayList0);
      modelResolver0.addRequiredItem(schema1, "JSON");
      assertNull(schema1.getContentMediaType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultAttributes((ContextAttributes) null);
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ObjectMapper objectMapper4 = modelResolver0.objectMapper();
      assertSame(objectMapper3, objectMapper4);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.addRequiredItem((io.swagger.v3.oas.models.media.Schema) null, "JSON");
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<ModelResolver> class0 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forSerialization((SerializationConfig) null, simpleType0, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, true);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper3 = objectMapper2.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      Class<JsonReadFeature> class0 = JsonReadFeature.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper4 = objectMapper3.addMixIn(class0, class1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      AnnotatedType annotatedType0 = new AnnotatedType(class1);
      AnnotatedType annotatedType1 = new AnnotatedType();
      annotatedType1.getJsonUnwrappedHandler();
      AnnotatedType annotatedType2 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType3 = annotatedType2.name("u(e[T#;~");
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema0).uniqueItems();
      Boolean boolean0 = modelResolver0.resolveUniqueItems(annotatedType3, arraySchema0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<JsonReadFeature> class1 = JsonReadFeature.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver1 = new ModelResolver(objectMapper0, typeNameResolver0);
      MapType mapType1 = mapType0.withValueHandler(modelResolver1);
      ModelResolver modelResolver2 = new ModelResolver(objectMapper1);
      MapLikeType mapLikeType0 = mapType1.withContentValueHandler(modelResolver2);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler((Object) null);
      modelResolver0.shouldIgnoreClass(class1);
      mapLikeType1.withValueHandler((Object) null);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      modelResolver0.resolveDiscriminator(mapLikeType1, modelConverterContextImpl0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipJsonIdentity(false);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType2 = annotatedType1.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType3 = annotatedType2.skipOverride(false);
      annotatedType1.setPropertyName("");
      annotatedType2.setSkipSchemaName(true);
      AnnotatedType annotatedType4 = annotatedType3.resolveAsRef(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      Integer integer0 = modelResolver2.resolveMaxItems(annotatedType4, arraySchema0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      typeNameResolver0.setUseFqn(false);
      JavaType javaType0 = null;
      HashSet<TypeNameResolver.Options> hashSet0 = new HashSet<TypeNameResolver.Options>();
      TypeNameResolver.Options typeNameResolver_Options0 = TypeNameResolver.Options.SKIP_API_MODEL;
      hashSet0.add(typeNameResolver_Options0);
      // Undeclared exception!
      try { 
        typeNameResolver0.nameForGenericType((JavaType) null, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.TypeNameResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      HashSet<Module> hashSet0 = new HashSet<Module>(0);
      ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<? extends Module>) hashSet0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper2 = objectMapper1.addHandler(deserializationProblemHandler0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipSchemaName(false);
      AnnotatedType annotatedType2 = annotatedType1.name("composed-model-properties-as-sibiling");
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType3 = annotatedType2.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType4 = annotatedType3.resolveAsRef(false);
      annotatedType1.propertyName("JSON");
      annotatedType3.propertyName("enums-as-ref");
      JsonView jsonView1 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView1).value();
      annotatedType4.jsonViewAnnotation(jsonView1);
      // Undeclared exception!
      try { 
        modelResolver0.decorateModelName(annotatedType4, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TimeZone timeZone0 = TimeZone.getDefault();
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      objectMapper1.disable(jsonGenerator_FeatureArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "JSON");
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      schema1.getEnum();
      schema0.examples((List<ModelResolver>) null);
      AnnotatedType annotatedType0 = new AnnotatedType();
      annotatedType0.skipOverride(false);
      Class<JsonFormat.Shape> class0 = JsonFormat.Shape.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = javaType0;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.ESCAPE_NON_ASCII;
      jsonFactoryBuilder0.disable(jsonWriteFeature0);
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.createNonBlockingByteArrayParser();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      EnumFeature enumFeature0 = EnumFeature.BOGUS_FEATURE;
      objectMapper0.mixInCount();
      objectMapper1.configure((DatatypeFeature) enumFeature0, true);
      jsonFactoryBuilder0.rootValueSeparator("[[#*(I#MqBV8PY,");
      // Undeclared exception!
      try { 
        EnumFeature.valueOf("JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.databind.cfg.EnumFeature.JSON
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_PROPERTIES_BASED;
      objectMapper1.setConstructorDetector(constructorDetector0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("JSON", "o)|/", false, '0', Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 4)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      // Undeclared exception!
      try { 
        objectMapper1.disable(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setDateFormat((DateFormat) null);
      ConstructorDetector constructorDetector0 = ConstructorDetector.EXPLICIT_ONLY;
      ObjectMapper objectMapper3 = objectMapper2.setConstructorDetector(constructorDetector0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      objectMapper0.setLocale((Locale) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructCalendar((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      // Undeclared exception!
      try { 
        objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) null, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass `null` PolymorphicTypeValidator
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      objectMapper1.mixInCount();
      JsonNodeFeature jsonNodeFeature0 = JsonNodeFeature.WRITE_NULL_PROPERTIES;
      Class<ModelResolver> class0 = ModelResolver.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      objectMapper1.canSerialize(class0, atomicReference0);
      ObjectMapper.findModules();
      ObjectMapper objectMapper3 = objectMapper2.configure((DatatypeFeature) jsonNodeFeature0, true);
      objectMapper3.getPolymorphicTypeValidator();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<ModelResolver> class1 = ModelResolver.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3375);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(referenceType0, referenceType0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) collectionLikeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class io.swagger.v3.core.jackson.ModelResolver with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultAttributes(contextAttributes0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<ModelResolver> class0 = ModelResolver.class;
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.ANY;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) jsonFormat_Shape0);
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, placeholderForType0, placeholderForType0);
      placeholderForType0.withHandlersFrom(mapLikeType0);
      StringReader stringReader0 = new StringReader("");
      // Undeclared exception!
      try { 
        stringReader0.mark((-1202));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.copy();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL;
      serializationFeatureArray0[0] = serializationFeature1;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      ObjectMapper.findModules();
      ObjectMapper objectMapper3 = objectMapper2.findAndRegisterModules();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.name("Can't check class {}, {}");
      AnnotatedType annotatedType2 = annotatedType1.resolveAsRef(false);
      Class<ModelResolver> class0 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      AnnotatedType annotatedType3 = annotatedType2.type(collectionLikeType0);
      AnnotatedType annotatedType4 = annotatedType3.schemaProperty(false);
      ArrayList<ModelConverter> arrayList0 = new ArrayList<ModelConverter>();
      JsonNodeFeature jsonNodeFeature0 = JsonNodeFeature.WRITE_NULL_PROPERTIES;
      objectMapper0.configure((DatatypeFeature) jsonNodeFeature0, false);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(arrayList0);
      jsonFactoryBuilder0.outputDecorator((OutputDecorator) null);
      ModelResolver.NOT_NULL_ANNOTATIONS = modelResolver0.NOT_NULL_ANNOTATIONS;
      annotatedType0.skipOverride(true);
      Iterator<ModelConverter> iterator0 = modelConverterContextImpl0.getConverters();
      modelResolver0.resolve(annotatedType4, modelConverterContextImpl0, iterator0);
      Discriminator discriminator0 = modelResolver0.resolveDiscriminator(simpleType0, modelConverterContextImpl0);
      assertNull(discriminator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[8];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      JsonGenerator.Feature jsonGenerator_Feature7 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature7;
      objectMapper0.disable(jsonGenerator_FeatureArray0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultAttributes((ContextAttributes) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = null;
      try {
        jsonFactoryBuilder0 = new JsonFactoryBuilder((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.TSFBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.ITALY;
      objectMapper0.setLocale(locale0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-245), (String) null, (-1124), (-1124), (-245), 711, 2384, 711, 0, (-1124));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFeature jsonNodeFeature0 = JsonNodeFeature.READ_NULL_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.configure((DatatypeFeature) jsonNodeFeature0, true);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonFormat.Shape> class0 = JsonFormat.Shape.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, javaType0, javaType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getDelegateCreator();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).exclusiveMinimum();
      Boolean boolean0 = modelResolver0.resolveExclusiveMinimum((Annotated) null, (Annotation[]) null, schema0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<MatchStrength> schema0 = new io.swagger.v3.oas.models.media.Schema<MatchStrength>(specVersion0);
      schema0.getJsonSchema();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.NATURAL;
      // Undeclared exception!
      try { 
        injectableValues_Std0.addValue("bind-type", (Object) jsonFormat_Shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.InjectableValues$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = null;
      try {
        jsonFactory0 = new JsonFactory((JsonFactoryBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      objectMapper0.configure(jsonGenerator_Feature0, true);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("number", "Q@^", true, '\\', (-3345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 3)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper3 = objectMapper2.registerModules(moduleArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<JsonFormat.Shape> class1 = JsonFormat.Shape.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class1);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      EnumFeature enumFeature0 = EnumFeature.BOGUS_FEATURE;
      objectMapper3.configure((DatatypeFeature) enumFeature0, false);
      JsonParser jsonParser0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Nulls nulls0 = Nulls.SET;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      // Undeclared exception!
      try { 
        objectMapper1.createParser(charArray0, (-549), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (-549) and/or 'len' (0) arguments for `char[]` of length 3
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      TypeReference<ModelResolver> typeReference0 = (TypeReference<ModelResolver>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      try { 
        objectMapper0.convertValue((Object) modelResolver0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      // Undeclared exception!
      try { 
        objectMapper0.enable((JsonGenerator.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createParser("s]&");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_HEX_UPPER_CASE;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      objectMapper0.disable(jsonGenerator_FeatureArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("H+Yd~fIgP7pQ?eW~");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      objectMapper0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, (Map<String, JsonNode>) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "s]&";
      stringArray0[1] = "H+Yd~fIgP7pQ?eW~";
      // Undeclared exception!
      try { 
        objectNode0.retain(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      // Undeclared exception!
      try { 
        objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) null, objectMapper_DefaultTyping0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass `null` PolymorphicTypeValidator
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy(propertyNamingStrategy0);
      ObjectMapper objectMapper4 = objectMapper3.copy();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(modelResolver0);
      HashMap<ModelResolver, ModelResolver> hashMap0 = new HashMap<ModelResolver, ModelResolver>();
      ContextAttributes contextAttributes2 = contextAttributes1.withSharedAttributes(hashMap0);
      ContextAttributes contextAttributes3 = contextAttributes2.withPerCallAttribute(modelResolver0, hashMap0);
      MatchStrength matchStrength0 = MatchStrength.FULL_MATCH;
      ContextAttributes contextAttributes4 = contextAttributes3.withSharedAttribute(hashMap0, matchStrength0);
      objectMapper0.reader(contextAttributes4);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile((File) null, "com.google.common.reflect.Types$JavaVersion");
      TypeReference<ModelResolver> typeReference0 = (TypeReference<ModelResolver>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      try { 
        objectMapper1.readValue((File) mockFile0, typeReference0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)27;
      bufferedOutputStream0.write(byteArray0);
      JsonGenerator jsonGenerator0 = objectMapper0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, (TypeNameResolver) null);
      try { 
        objectMapper0.writeValue(jsonGenerator0, (Object) modelResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class io.swagger.v3.core.jackson.ModelResolver and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      objectMapper1.deactivateDefaultTyping();
      SubtypeResolver subtypeResolver0 = stdSubtypeResolver0.copy();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(subtypeResolver0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.schemaProperty(true);
      AnnotatedType annotatedType2 = annotatedType1.name("javax.validation.constraints.Size");
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      AnnotatedType annotatedType3 = annotatedType2.parent(schema0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2565);
      placeholderForType0.getContentType();
      AnnotatedType annotatedType4 = annotatedType3.type((Type) null);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      Integer integer0 = modelResolver0.resolveMinItems(annotatedType4, arraySchema0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      defaultAccessorNamingStrategy_Provider0.withBuilderPrefix("javax.validation.constraints.Max");
      ObjectMapper objectMapper2 = objectMapper1.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      TreeSet<Module> treeSet0 = new TreeSet<Module>();
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<? extends Module>) treeSet0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipOverride(false);
      AnnotatedType annotatedType2 = annotatedType1.skipSchemaName(true);
      AnnotatedType annotatedType3 = annotatedType2.skipJsonIdentity(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      modelResolver0.resolveExtensions(annotatedType3, arraySchema0);
      Annotation[] annotationArray0 = new Annotation[2];
      annotationArray0[0] = (Annotation) arraySchema0;
      annotationArray0[1] = (Annotation) arraySchema0;
      // Undeclared exception!
      try { 
        modelResolver0.resolveIgnoredProperties((Annotations) null, annotationArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Nulls nulls0 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forContentNulls(nulls0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[8];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.USE_FAST_DOUBLE_WRITER;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      JsonGenerator.Feature jsonGenerator_Feature7 = JsonGenerator.Feature.USE_FAST_DOUBLE_WRITER;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature7;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonGenerator_FeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl1);
      Class<ModelResolver> class0 = ModelResolver.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.findValueSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory(serializerFactory0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping(class0, (Class<? extends ModelResolver>) class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add mapping from class to itself
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      SerializationConfig serializationConfig0 = null;
      // Undeclared exception!
      try { 
        objectMapper1.setConfig((SerializationConfig) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"config\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory(typeFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      Class<JsonWriteFeature> class0 = JsonWriteFeature.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      serializationFeatureArray0[1] = serializationFeature1;
      objectMapper1.canDeserialize((JavaType) mapLikeType0);
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0, serializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<JsonWriteFeature> schema0 = new io.swagger.v3.oas.models.media.Schema<JsonWriteFeature>(specVersion0);
      long long0 = 1975L;
      JsonAutoDetect.Value.noOverrides();
      // Undeclared exception!
      try { 
        JsonAutoDetect.Value.from((JsonAutoDetect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.annotation.JsonAutoDetect$Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      JsonAutoDetect.Value jsonAutoDetect_Value1 = JsonAutoDetect.Value.merge(jsonAutoDetect_Value0, jsonAutoDetect_Value0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      jsonAutoDetect_Value0.withCreatorVisibility(jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultIndenter defaultIndenter0 = new DefaultIndenter("", "");
      defaultPrettyPrinter0.indentObjectsWith(defaultIndenter0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      TypeReference<ModelResolver> typeReference0 = (TypeReference<ModelResolver>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        objectMapper3.readValue(byteArray0, (int)  (-12), (int) 110, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (-12) and/or 'len' (110) arguments for `byte[]` of length 6
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnySetterField();
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getAnySetterMethod();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findAnySetterAccessor();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      XML xML0 = new XML();
      xML0.getExtensions();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_PROPERTIES_BASED;
      ConstructorDetector constructorDetector1 = constructorDetector0.withRequireAnnotation(true);
      ObjectMapper objectMapper3 = objectMapper2.setConstructorDetector(constructorDetector1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      // Undeclared exception!
      try { 
        objectMapper1.activateDefaultTypingAsProperty((PolymorphicTypeValidator) null, objectMapper_DefaultTyping0, "nw~6,zcpfO/lgw@>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass `null` PolymorphicTypeValidator
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      Version version0 = new Version((-3453), (-3453), 8000, "<a$Vg=B}J.C~mg@rp'", "", "");
      SimpleModule simpleModule0 = new SimpleModule("<a$Vg=B}J.C~mg@rp'", version0);
      Class<JsonWriteFeature> class0 = JsonWriteFeature.class;
      JsonDeserializer<JsonWriteFeature> jsonDeserializer0 = (JsonDeserializer<JsonWriteFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends JsonWriteFeature>) jsonDeserializer0);
      ObjectMapper objectMapper3 = objectMapper2.registerModule(simpleModule1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        MockDateFormat.getDateInstance(2858, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2858
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setDateFormat((DateFormat) null);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class1);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation1 = modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      assertNull(externalDocumentation1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue(86L, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copyWith((JsonFactory) null);
      Locale locale0 = Locale.JAPAN;
      objectMapper1.setLocale(locale0);
      io.swagger.v3.oas.models.media.Schema<Enum<MatchStrength>> schema0 = new io.swagger.v3.oas.models.media.Schema<Enum<MatchStrength>>();
      schema0.getExtensions();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      Class<JsonWriteFeature> class0 = JsonWriteFeature.class;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, (TypeNameResolver) null);
      // Undeclared exception!
      try { 
        injectableValues_Std0.addValue((Class<?>) class0, (Object) modelResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.InjectableValues$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      Class<JsonWriteFeature> class0 = JsonWriteFeature.class;
      typeNameResolver0.getNameOfClass(class0);
      typeNameResolver0.setUseFqn(false);
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      jsonFactory0._getBufferRecycler();
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      objectMapper1.configure(deserializationFeature0, true);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("zn+}", "zn+}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"zn+}\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      // Undeclared exception!
      try { 
        JsonNodeFeature.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      objectMapper0.configure(jsonParser_Feature0, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsonFactory jsonFactory0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "G5C1k'$Wth#9hY-";
      stringArray0[1] = "JSON";
      stringArray0[2] = "G5C1k'$Wth#9hY-";
      stringArray0[3] = "G5C1k'$Wth#9hY-";
      SimpleBeanPropertyFilter simpleBeanPropertyFilter0 = SimpleBeanPropertyFilter.serializeAllExcept(stringArray0);
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.addFilter("G5C1k'$Wth#9hY-", (PropertyFilter) simpleBeanPropertyFilter0);
      ObjectMapper objectMapper4 = objectMapper3.setFilterProvider(simpleFilterProvider1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      Class<StandardDeleteOption> class0 = StandardDeleteOption.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        TypeBindings.create(class1, javaType0, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class io.swagger.v3.core.jackson.ModelResolver with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      TypeNameResolver typeNameResolver0 = null;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, (TypeNameResolver) null);
      io.swagger.v3.oas.models.media.Schema<LongNode> schema0 = new io.swagger.v3.oas.models.media.Schema<LongNode>();
      Stack<LongNode> stack0 = new Stack<LongNode>();
      schema0.examples(stack0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "5Sv,[8E");
      objectMapper0.getPolymorphicTypeValidator();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      objectMapper3.writer(serializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.ctxAnnotations((Annotation[]) null);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema0).uniqueItems();
      modelResolver0.resolveUniqueItems(annotatedType1, arraySchema0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      Stack<ModelResolver> stack0 = new Stack<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(stack0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<ModelResolver> class0 = ModelResolver.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, (AnnotationMap) null);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema2).defaultValue();
      doReturn((String) null, (String) null).when(schema2).description();
      doReturn((String) null).when(schema2).format();
      doReturn((String) null).when(schema2).title();
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema1, annotatedField0, (Annotation[]) null, schema2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      LinkedHashSet<TypeNameResolver.Options> linkedHashSet0 = new LinkedHashSet<TypeNameResolver.Options>();
      // Undeclared exception!
      try { 
        typeNameResolver0.nameForGenericType((JavaType) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.TypeNameResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.KOREA;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      objectMapper1.configure(deserializationFeature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      InputStream inputStream0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<LongNode> class0 = LongNode.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSuperClass();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.constructSpecializedType((JavaType) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0, deserializationFeatureArray0);
      ObjectMapper objectMapper4 = objectMapper3.disable(deserializationFeature0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0, deserializationFeatureArray0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      ObjectMapper objectMapper4 = objectMapper3.disable(jsonGenerator_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
      Locale locale0 = Locale.CHINESE;
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.resolveIgnoredProperties((Annotation[]) null);
      Class<ModelResolver> class0 = ModelResolver.class;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<HashMap<JsonFormat.Shape, ModelResolver>> schema1 = new io.swagger.v3.oas.models.media.Schema<HashMap<JsonFormat.Shape, ModelResolver>>();
      schema1.getPrefixItems();
      schema0.setAnyOf((List<io.swagger.v3.oas.models.media.Schema>) null);
      io.swagger.v3.oas.models.media.Schema schema2 = schema0.maxItems((Integer) null);
      modelResolver0._addEnumProps(class0, schema0);
      modelResolver0.resolveMaximum((Annotated) null, (Annotation[]) null, (Schema) null);
      modelResolver0.resolveMaxProperties((Annotated) null, (Annotation[]) null, (Schema) null);
      modelResolver0.shouldIgnoreClass(class0);
      modelResolver0.applyBeanValidatorAnnotations(schema1, (Annotation[]) null, schema2, true);
      Vector<ModelResolver> vector0 = new Vector<ModelResolver>(658);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema3 = schema0.examples(vector0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipOverride(false);
      AnnotatedType annotatedType2 = annotatedType1.schemaProperty(true);
      AnnotatedType annotatedType3 = annotatedType2.type(class0);
      AnnotatedType annotatedType4 = annotatedType3.parent(schema3);
      modelResolver0.resolveSchemaMembers(schema3, annotatedType4);
      Class<ModelResolver> class1 = ModelResolver.class;
      modelResolver0.getComposedSchemaReferencedClasses(class1, (Annotation[]) null, (Schema) null);
      List<String> list0 = modelResolver0.resolveRequiredProperties((Annotated) null, (Annotation[]) null, (Schema) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultAttributes(contextAttributes0);
      Class<ModelResolver> class0 = ModelResolver.class;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      Class<ConstructorDetector.SingleArgConstructor> class1 = ConstructorDetector.SingleArgConstructor.class;
      objectMapper1.addMixIn(class0, class1);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      ContentReference contentReference0 = ContentReference.rawReference(false, (Object) modelResolver0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, contentReference0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 248);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, bufferedInputStream0, objectReader0, byteQuadsCanonicalizer1, byteArray0, 1, (byte)0, 2147, false);
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      objectMapper1.clearProblemHandlers();
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "JSON", 0, "", uRLStreamHandler0);
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        objectMapper1.readValue(uRL0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.empty();
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES;
      jsonFormat_Features0.get(jsonFormat_Feature0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultLeniency((Boolean) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      Annotation[] annotationArray0 = new Annotation[1];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class0);
      annotationArray0[0] = null;
      // Undeclared exception!
      try { 
        modelResolver0.resolvePatternProperties((JavaType) null, annotationArray0, (ModelConverterContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ConstructorDetector constructorDetector0 = ConstructorDetector.EXPLICIT_ONLY;
      ConstructorDetector.SingleArgConstructor constructorDetector_SingleArgConstructor0 = ConstructorDetector.SingleArgConstructor.HEURISTIC;
      constructorDetector0.withSingleArgMode(constructorDetector_SingleArgConstructor0);
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector(constructorDetector0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      ObjectMapper objectMapper3 = objectMapper2.copy();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TimeZone timeZone0 = TimeZone.getDefault();
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, true);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0, deserializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.TAIWAN;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory(typeFactory0);
      locale0.getDisplayVariant();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      objectMapper2.enable(deserializationFeature0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      byte[] byteArray0 = new byte[0];
      objectMapper0.setTypeFactory(typeFactory0);
      ByteArrayBuilder byteArrayBuilder0 = ByteArrayBuilder.fromInitial(byteArray0, 1458);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      SerialBlob serialBlob0 = new SerialBlob(byteArrayBuilder0.NO_BYTES);
      serialBlob0.getBinaryStream();
      try { 
        objectOutputStream0.writeFields();
        fail("Expecting exception: NotActiveException");
      
      } catch(NotActiveException e) {
         //
         // no current PutField object
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      ObjectMapper objectMapper3 = objectMapper2.setTypeFactory(typeFactory1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory2 = typeFactory0.withClassLoader(classLoader0);
      Class<ModelResolver> class0 = ModelResolver.class;
      ArrayType arrayType0 = typeFactory2.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withTypeHandler(modelResolver0);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper0);
      ArrayType arrayType2 = arrayType1.withValueHandler(modelResolver1);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver1);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ConstructorDetector.SingleArgConstructor> schema0 = new io.swagger.v3.oas.models.media.Schema<ConstructorDetector.SingleArgConstructor>(specVersion0);
      modelResolver0.resolveDiscriminatorProperty(arrayType2, modelConverterContextImpl0, schema0);
      assertNull(schema0.getNullable());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      Module[] moduleArray0 = new Module[1];
      SimpleModule simpleModule0 = new SimpleModule();
      moduleArray0[0] = (Module) simpleModule0;
      ObjectMapper objectMapper3 = objectMapper2.registerModules(moduleArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      JsonGenerator.Feature jsonGenerator_Feature7 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature7;
      JsonGenerator.Feature jsonGenerator_Feature8 = JsonGenerator.Feature.WRITE_HEX_UPPER_CASE;
      jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature8;
      objectMapper1.disable(jsonGenerator_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      JsonInclude.Value[] jsonInclude_ValueArray0 = new JsonInclude.Value[0];
      JsonInclude.Value.mergeAll(jsonInclude_ValueArray0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion((JsonInclude.Value) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      Class<ConstructorDetector.SingleArgConstructor> class0 = ConstructorDetector.SingleArgConstructor.class;
      objectMapper0.readerForMapOf(class0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      Class<ConstructorDetector.SingleArgConstructor> class1 = ConstructorDetector.SingleArgConstructor.class;
      objectMapper1.canSerialize(class1);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      typeNameResolver0.setUseFqn(false);
      byte[] byteArray0 = new byte[0];
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      JavaType javaType0 = defaultSerializerProvider_Impl1.constructSpecializedType(collectionLikeType1, class0);
      TypeNameResolver.Options[] typeNameResolver_OptionsArray0 = new TypeNameResolver.Options[8];
      TypeNameResolver.Options typeNameResolver_Options0 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[0] = typeNameResolver_Options0;
      TypeNameResolver.Options typeNameResolver_Options1 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[1] = typeNameResolver_Options1;
      TypeNameResolver.Options typeNameResolver_Options2 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[2] = typeNameResolver_Options2;
      TypeNameResolver.Options typeNameResolver_Options3 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[3] = typeNameResolver_Options3;
      TypeNameResolver.Options typeNameResolver_Options4 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[4] = typeNameResolver_Options4;
      TypeNameResolver.Options typeNameResolver_Options5 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[5] = typeNameResolver_Options5;
      TypeNameResolver.Options typeNameResolver_Options6 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[6] = typeNameResolver_Options6;
      TypeNameResolver.Options typeNameResolver_Options7 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[7] = typeNameResolver_Options7;
      typeNameResolver0.nameForType(javaType0, typeNameResolver_OptionsArray0);
      TypeReference<ModelResolver> typeReference0 = (TypeReference<ModelResolver>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readValue(byteArray0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL;
      // Undeclared exception!
      try { 
        objectMapper0.disable(serializationFeature0, (SerializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector(annotationIntrospector0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper4 = objectMapper3.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) collectionLikeType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "composed-model-properties-as-sibiling", collectionLikeType1);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(schema0).extensions();
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedField0, (Annotation[]) null, schema0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = new Boolean("");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      TimeZone timeZone0 = TimeZone.getDefault();
      ObjectMapper objectMapper2 = objectMapper1.setTimeZone(timeZone0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ModelResolver.enumsAsRef = false;
      // Undeclared exception!
      try { 
        modelResolver0.findJsonValueType((BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      Class<ModelResolver> class0 = ModelResolver.class;
      TypeNameResolver.Options typeNameResolver_Options0 = TypeNameResolver.Options.SKIP_API_MODEL;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFeature jsonNodeFeature0 = JsonNodeFeature.WRITE_NULL_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.configure((DatatypeFeature) jsonNodeFeature0, true);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      // Undeclared exception!
      try { 
        objectMapper1.activateDefaultTypingAsProperty((PolymorphicTypeValidator) null, objectMapper_DefaultTyping0, "^@O1UB<y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass `null` PolymorphicTypeValidator
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectMapper objectMapper3 = objectMapper2.setNodeFactory(jsonNodeFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.name("composed-model-properties-as-sibiling");
      AnnotatedType annotatedType2 = annotatedType1.schemaProperty(true);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema0 = new io.swagger.v3.oas.models.media.Schema<SimpleModule>(specVersion0);
      AnnotatedType annotatedType3 = annotatedType2.parent(schema0);
      AnnotatedType annotatedType4 = annotatedType3.propertyName((String) null);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedType4, arraySchema0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      PriorityQueue<SimpleModule> priorityQueue0 = new PriorityQueue<SimpleModule>();
      PriorityQueue<SimpleModule> priorityQueue1 = new PriorityQueue<SimpleModule>(priorityQueue0);
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<? extends Module>) priorityQueue1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = modelResolver0.resolveExternalDocumentation((ExternalDocumentation) null);
      assertNull(externalDocumentation0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      File file0 = MockFile.createTempFile("w36Mi_a*", "com.fasterxml.jackson.core.JsonParser");
      TypeReference<Enum<TokenFilter.Inclusion>> typeReference0 = (TypeReference<Enum<TokenFilter.Inclusion>>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readValue(file0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      AnnotationIntrospector.nopInstance();
      TokenFilter.Inclusion tokenFilter_Inclusion0 = TokenFilter.Inclusion.INCLUDE_NON_NULL;
      Class<TokenFilter.Inclusion> class0 = TokenFilter.Inclusion.class;
      try { 
        objectMapper1.convertValue((Object) tokenFilter_Inclusion0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.core.filter.TokenFilter$Inclusion` from String \"com.fasterxml.jackson.core.io.SerializedString@0000000070\": not one of the values accepted for Enum class: [INCLUDE_NON_NULL, INCLUDE_ALL_AND_PATH, ONLY_INCLUDE_ALL]
         //  at [Source: UNKNOWN; byte offset: #UNKNOWN]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      Nulls nulls0 = Nulls.SET;
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls1);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultSetterInfo(jsonSetter_Value0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      objectMapper3.getSerializerProviderInstance();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TokenFilter.Inclusion tokenFilter_Inclusion0 = TokenFilter.Inclusion.ONLY_INCLUDE_ALL;
      JavaType javaType1 = resolvedRecursiveType0.withValueHandler(tokenFilter_Inclusion0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DatatypeFeatures datatypeFeatures0 = DatatypeFeatures.defaultFeatures();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0, datatypeFeatures0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      SerializationConfig serializationConfig1 = serializationConfig0.with(contextAttributes0);
      SerializationConfig serializationConfig2 = serializationConfig1.with((SubtypeResolver) null);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_MISSING_VALUES;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      SerializationConfig serializationConfig3 = serializationConfig2.withoutFeatures(formatFeatureArray0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      SerializationConfig serializationConfig4 = serializationConfig3.withoutFeatures(jsonGenerator_FeatureArray0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      Class<TokenFilter.Inclusion> class1 = TokenFilter.Inclusion.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Empty0, class1, "", resolvedRecursiveType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class2 = Annotation.class;
      annotationMap0.get(class2);
      AnnotationMap annotationMap1 = AnnotationMap.of(class1, (Annotation) null);
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Empty0, (Field) null, annotationMap1);
      AnnotatedField annotatedField1 = annotatedField0.withAnnotations(annotationMap1);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.findPropertyTypeSerializer(javaType1, serializationConfig4, annotatedField1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleModule simpleModule0 = new SimpleModule();
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_HEX_UPPER_CASE;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<TokenFilter.Inclusion> class0 = TokenFilter.Inclusion.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "enums-as-ref", simpleType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap1);
      modelResolver0.hasHiddenAnnotation(annotatedField0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.name("enums-as-ref");
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      AnnotatedType annotatedType2 = annotatedType1.parent(schema0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      modelResolver0.resolveMinItems(annotatedType2, arraySchema0);
      assertEquals("SimpleModule-1", simpleModule0.getModuleName());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Locale locale0 = Locale.UK;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper3 = objectMapper2.addHandler(deserializationProblemHandler0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedType0, arraySchema0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultVisibility(jsonAutoDetect_Value0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      // Undeclared exception!
      try { 
        objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass `null` PolymorphicTypeValidator
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      EnumFeature enumFeature0 = EnumFeature.BOGUS_FEATURE;
      objectMapper0.configure((DatatypeFeature) enumFeature0, true);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(schema0).maxLength();
      Annotation[] annotationArray0 = new Annotation[2];
      annotationArray0[0] = (Annotation) schema0;
      annotationArray0[1] = (Annotation) schema0;
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipJsonIdentity(false);
      AnnotatedType annotatedType2 = annotatedType1.name("javax.validation.constraints.DecimalMin");
      Annotation[] annotationArray1 = new Annotation[0];
      AnnotatedType annotatedType3 = annotatedType2.ctxAnnotations(annotationArray1);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      AnnotatedType annotatedType4 = annotatedType3.jsonViewAnnotation(jsonView0);
      modelResolver0.hiddenByJsonView(annotationArray0, annotatedType4);
      modelResolver0.resolveMaxLength((Annotated) null, (Annotation[]) null, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(schema1).description();
      String string0 = modelResolver0.resolveDescription((Annotated) null, (Annotation[]) null, schema1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      Comparator<Module> comparator0 = (Comparator<Module>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Module> treeSet0 = new TreeSet<Module>(comparator0);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) treeSet0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.USE_FAST_DOUBLE_PARSER;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonParser_FeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      Class<Integer> class0 = Integer.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.skipOverride(false);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType2 = annotatedType1.jsonViewAnnotation(jsonView0);
      annotatedType2.getJsonUnwrappedHandler();
      annotatedType2.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType3 = annotatedType2.skipSchemaName(true);
      AnnotatedType annotatedType4 = annotatedType3.type(class0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      modelResolver0.resolveExtensions(annotatedType4, arraySchema0);
      Annotation[] annotationArray0 = new Annotation[2];
      annotationArray0[0] = (Annotation) arraySchema0;
      annotationArray0[1] = (Annotation) jsonView0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).requiredProperties();
      modelResolver0.resolveRequiredProperties((Annotated) null, annotationArray0, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1).example();
      // Undeclared exception!
      try { 
        modelResolver0.resolveExample((Annotated) null, annotationArray0, schema1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      DefaultAccessorNamingStrategy.FirstCharBasedValidator.forFirstNameRule(false, false);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider1 = defaultAccessorNamingStrategy_Provider0.withBaseNameValidator((DefaultAccessorNamingStrategy.BaseNameValidator) null);
      ObjectMapper objectMapper3 = objectMapper2.setAccessorNaming(defaultAccessorNamingStrategy_Provider1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDelegateCreator();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(schema0).maxLength();
      Integer integer0 = modelResolver0.resolveMaxLength((Annotated) null, (Annotation[]) null, schema0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("JSON");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.from(jsonInclude0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Value0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      // Undeclared exception!
      try { 
        objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) null, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass `null` PolymorphicTypeValidator
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_DELEGATING;
      objectMapper0.setConstructorDetector(constructorDetector0);
      String string0 = null;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("GI", (String) null, false, '[', 2213);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JsonFactory jsonFactory0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0, deserializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      assertFalse(ModelResolver.enumsAsRef);
  }
}
