/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 03 05:36:11 GMT 2023
 */

package io.swagger.v3.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.StreamWriteFeature;
import com.fasterxml.jackson.core.type.WritableTypeId;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DatatypeFeatures;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import io.swagger.v3.core.converter.ModelConverters;
import io.swagger.v3.core.jackson.ModelResolver;
import io.swagger.v3.core.util.Json;
import io.swagger.v3.core.util.Json31;
import io.swagger.v3.jaxrs2.DefaultParameterExtension;
import io.swagger.v3.jaxrs2.Reader;
import io.swagger.v3.jaxrs2.ResolvedParameter;
import io.swagger.v3.jaxrs2.ext.OpenAPIExtension;
import io.swagger.v3.jaxrs2.ext.OpenAPIExtensions;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.extensions.Extension;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.integration.SwaggerConfiguration;
import io.swagger.v3.oas.integration.api.OpenAPIConfiguration;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.Operation;
import io.swagger.v3.oas.models.PathItem;
import io.swagger.v3.oas.models.Paths;
import io.swagger.v3.oas.models.SpecVersion;
import io.swagger.v3.oas.models.callbacks.Callback;
import io.swagger.v3.oas.models.examples.Example;
import io.swagger.v3.oas.models.headers.Header;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.links.Link;
import io.swagger.v3.oas.models.media.Content;
import io.swagger.v3.oas.models.media.Discriminator;
import io.swagger.v3.oas.models.media.Encoding;
import io.swagger.v3.oas.models.media.MediaType;
import io.swagger.v3.oas.models.media.Schema;
import io.swagger.v3.oas.models.media.XML;
import io.swagger.v3.oas.models.parameters.Parameter;
import io.swagger.v3.oas.models.parameters.RequestBody;
import io.swagger.v3.oas.models.responses.ApiResponses;
import io.swagger.v3.oas.models.security.OAuthFlow;
import io.swagger.v3.oas.models.security.OAuthFlows;
import io.swagger.v3.oas.models.security.Scopes;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import io.swagger.v3.oas.models.servers.ServerVariable;
import io.swagger.v3.oas.models.servers.ServerVariables;
import io.swagger.v3.oas.models.tags.Tag;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.lang.reflect.WildcardType;
import java.math.BigDecimal;
import java.net.Proxy;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.format.TextStyle;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.enterprise.context.BeforeDestroyed;
import javax.enterprise.context.Initialized;
import javax.enterprise.inject.New;
import javax.enterprise.inject.Typed;
import javax.ws.rs.Consumes;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Application;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jboss.weld.util.reflection.GenericArrayTypeImpl;
import org.jboss.weld.util.reflection.ParameterizedTypeImpl;
import org.jboss.weld.util.reflection.WildcardTypeImpl;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reader_ESTest extends Reader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      OpenAPI openAPI1 = openAPI0.schemaRequirement("", (SecurityScheme) null);
      HashMap<String, PathItem> hashMap0 = new HashMap<String, PathItem>();
      OpenAPI openAPI2 = openAPI1.webhooks(hashMap0);
      PathItem pathItem0 = new PathItem();
      pathItem0.getServers();
      OpenAPI openAPI3 = openAPI2.servers((List<Server>) null);
      ArrayDeque<Tag> arrayDeque0 = new ArrayDeque<Tag>();
      Vector<Tag> vector0 = new Vector<Tag>(arrayDeque0);
      OpenAPI openAPI4 = openAPI3.tags(vector0);
      Reader reader0 = new Reader(openAPI4);
      SpecVersion specVersion1 = SpecVersion.V30;
      openAPI2.jsonSchemaDialect("p");
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*/*";
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(consumes0).value();
      Content content0 = reader0.processContent((Content) null, schema0, consumes0, consumes0);
      assertFalse(content0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Vector<String> vector0 = new Vector<String>();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.ignoredRoutes(vector0);
      swaggerConfiguration0.getModelConverterClasses();
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.resourceClasses((Set<String>) null);
      Boolean boolean0 = Boolean.TRUE;
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.readAllResources(boolean0);
      swaggerConfiguration3.setReaderClass("");
      Reader reader0 = new Reader(swaggerConfiguration3);
      Long long0 = new Long(3530L);
      swaggerConfiguration2.setCacheTTL(long0);
      reader0.getOperationId("");
      reader0.ignoreOperationPath("", "*/*");
      vector0.add("");
      ApiResponse[] apiResponseArray0 = new ApiResponse[8];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(apiResponse0).useReturnTypeSchema();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponse0;
      apiResponseArray0[2] = apiResponse0;
      apiResponseArray0[3] = apiResponse0;
      apiResponseArray0[4] = apiResponse0;
      apiResponseArray0[5] = apiResponse0;
      apiResponseArray0[6] = apiResponse0;
      apiResponseArray0[7] = apiResponse0;
      Schema<PathItem> schema0 = new Schema<PathItem>();
      schema0.addPatternProperty("@type", (Schema) null);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.resolveResponseSchemaFromReturnType((Operation) null, apiResponseArray0, schema0, produces0, produces0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Reader reader0 = new Reader();
      Components components0 = reader0.getComponents();
      assertNotNull(components0);
      
      RequestBody requestBody0 = new RequestBody();
      MediaType mediaType0 = new MediaType();
      Header header0 = new Header();
      header0.getExamples();
      MediaType mediaType1 = mediaType0.examples((Map<String, Example>) null);
      ServerVariable serverVariable0 = new ServerVariable();
      serverVariable0.getExtensions();
      MediaType mediaType2 = mediaType1.extensions((Map<String, Object>) null);
      Encoding encoding0 = new Encoding();
      Boolean boolean0 = Boolean.FALSE;
      Encoding encoding1 = encoding0.allowReserved(boolean0);
      MediaType mediaType3 = mediaType2.addEncoding("BA38Db4nI(A^:YIv", encoding1);
      mediaType3.getExtensions();
      requestBody0.setExtensions((Map<String, Object>) null);
      components0.addRequestBodies("*/*", requestBody0);
      reader0.ignoreOperationPath("Map", "#/components/schemas/");
      reader0.ignoreOperationPathStrict("Map", "seSyIAVr");
      Parameter parameter0 = new Parameter();
      Schema<PathItem> schema0 = new Schema<PathItem>();
      Parameter parameter1 = parameter0.schema(schema0);
      Parameter parameter2 = parameter1.extensions((Map<String, Object>) null);
      Operation operation0 = new Operation();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse("", apiResponse0);
      Operation operation1 = operation0.responses(apiResponses1);
      OpenAPI openAPI0 = new OpenAPI();
      openAPI0.getSecurity();
      Operation operation2 = operation1.security((List<SecurityRequirement>) null);
      Callback callback0 = new Callback();
      Callback callback1 = callback0.extensions((Map<String, Object>) null);
      Operation operation3 = operation2.addCallback("%s_%d", callback1);
      Operation operation4 = operation3.operationId("%s_%d");
      Vector<Parameter> vector0 = new Vector<Parameter>();
      Annotation[] annotationArray0 = new Annotation[1];
      annotationArray0[0] = (Annotation) null;
      Class<Parameter> class0 = Parameter.class;
      NamedType namedType0 = new NamedType(class0);
      Class<?> class1 = namedType0.getType();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      reader0.processRequestBody(parameter2, operation4, (Consumes) null, (Consumes) null, vector0, annotationArray0, class1, jsonView0, map0);
      assertNull(parameter2.getRequired());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Reader reader0 = new Reader((OpenAPIConfiguration) null);
      boolean boolean0 = reader0.ignoreOperationPathStrict("Unexpected error invoking beforeScan listener [", "/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Operation operation0 = new Operation();
      operation0.getSecurity();
      OpenAPI openAPI1 = openAPI0.security((List<SecurityRequirement>) null);
      Vector<Tag> vector0 = new Vector<Tag>();
      OpenAPI openAPI2 = openAPI1.tags(vector0);
      Paths paths0 = new Paths();
      OpenAPI openAPI3 = openAPI2.paths(paths0);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Reader reader0 = new Reader(swaggerConfiguration0);
      Set<Tag> set0 = reader0.getOpenApiTags();
      Components components0 = new Components();
      Components components1 = components0.addLinks((String) null, (Link) null);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components2 = components1.examples(hashMap0);
      RequestBody requestBody0 = new RequestBody();
      Components components3 = components2.addRequestBodies("*/*", requestBody0);
      Reader reader1 = new Reader(openAPI3, paths0, set0, components3, swaggerConfiguration0);
      Class<Object> class0 = Object.class;
      reader1.read(class0);
      io.swagger.v3.oas.annotations.Parameter[] parameterArray0 = new io.swagger.v3.oas.annotations.Parameter[6];
      io.swagger.v3.oas.annotations.Parameter parameter0 = mock(io.swagger.v3.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn((io.swagger.v3.oas.annotations.media.Content[]) null).when(parameter0).content();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader1.getParametersListFromAnnotation(parameterArray0, consumes0, consumes0, operation0, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Reader reader0 = new Reader();
      Class<PathItem> class0 = PathItem.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(class0, typeArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(genericArrayTypeImpl0, typeArray0, typeArray0[1]);
      Stack<Annotation> stack0 = new Stack<Annotation>();
      Operation operation0 = new Operation();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Operation operation1 = operation0.tags(linkedList0);
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      openAPI0.getServers();
      Operation operation2 = operation1.servers((List<Server>) null);
      Operation operation3 = operation2.parameters((List<Parameter>) null);
      Operation operation4 = operation3.deprecated((Boolean) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.getParameters(parameterizedTypeImpl0, stack0, operation4, consumes0, consumes1, jsonView0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jboss.weld.util.reflection.GenericArrayTypeImpl cannot be cast to java.lang.Class
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.trace(operation0);
      OpenAPI openAPI1 = openAPI0.addWebhooks("*/*", pathItem1);
      Paths paths0 = new Paths();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Reader reader0 = new Reader(swaggerConfiguration0);
      Set<Tag> set0 = reader0.getOpenApiTags();
      Components components0 = new Components();
      components0.getCallbacks();
      Components components1 = components0.callbacks((Map<String, Callback>) null);
      Components components2 = components1.addRequestBodies("META-INF/maven/", (RequestBody) null);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components3 = components2.requestBodies(hashMap0);
      Reader reader1 = new Reader(openAPI1, paths0, set0, components3);
      Class<Tag> class0 = Tag.class;
      OpenAPI openAPI2 = reader1.read(class0);
      assertFalse(openAPI2.equals((Object)openAPI1));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Reader reader0 = new Reader((OpenAPI) null);
      io.swagger.v3.oas.annotations.Parameter[] parameterArray0 = new io.swagger.v3.oas.annotations.Parameter[1];
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Operation operation0 = new Operation();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      reader0.resolveEmptyContent(produces0, produces0);
      // Undeclared exception!
      try { 
        reader0.getParametersListFromAnnotation(parameterArray0, consumes0, consumes0, operation0, jsonView0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Reader reader0 = new Reader();
      Application application0 = new Application();
      Set<Class<?>> set0 = application0.getClasses();
      reader0.setApplication(application0);
      Class<PathItem> class0 = PathItem.class;
      RequestBody requestBody0 = new RequestBody();
      RequestBody requestBody1 = requestBody0.$ref("");
      Boolean boolean0 = Boolean.valueOf("Unexpected error invoking afterScan listener [");
      RequestBody requestBody2 = requestBody1.required(boolean0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      securityScheme0.getExtensions();
      RequestBody requestBody3 = requestBody2.extensions((Map<String, Object>) null);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Content content0 = reader0.resolveEmptyContent(produces0, produces0);
      RequestBody requestBody4 = requestBody3.content(content0);
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse("mMiM<|IJI^P", apiResponse0);
      ApiResponses apiResponses2 = apiResponses1.extensions((Map<String, Object>) null);
      ApiResponses apiResponses3 = apiResponses2.extensions((Map<String, Object>) null);
      apiResponses2.put("", apiResponse0);
      apiResponses2.put("Tv", apiResponse0);
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      reader0.read((Class<?>) class0, ">r", (String) null, true, requestBody4, apiResponses3, (Set<String>) null, (List<Parameter>) linkedList0, set0);
      Paths paths0 = reader0.getPaths();
      assertTrue(paths0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Paths paths0 = new Paths();
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      Components components1 = components0.addPathItem("", (PathItem) null);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.defaultResponseCode("config");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.openAPI((OpenAPI) null);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.convertToOpenAPI31((Boolean) null);
      components0.pathItems(paths0);
      Reader reader0 = new Reader((OpenAPI) null, paths0, treeSet0, components1, swaggerConfiguration3);
      reader0.ignoreOperationPathStrict("string", "#/components/schemas/");
      Class<PathItem> class0 = PathItem.class;
      reader0.read(class0);
      Operation operation0 = new Operation();
      Server server0 = new Server();
      Operation operation1 = operation0.addServersItem(server0);
      Operation operation2 = operation1.description("gd");
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.deprecated((Boolean) null);
      Operation operation3 = operation2.addParametersItem(parameter1);
      ApiResponses apiResponses0 = new ApiResponses();
      paths0.getExtensions();
      ApiResponses apiResponses1 = apiResponses0.extensions((Map<String, Object>) null);
      ApiResponses apiResponses2 = apiResponses1.extensions((Map<String, Object>) null);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      ApiResponses apiResponses3 = apiResponses2.addApiResponse("R~Cjj4dN:A]zSM", apiResponse0);
      Operation operation4 = operation3.responses(apiResponses3);
      io.swagger.v3.oas.annotations.Operation operation5 = mock(io.swagger.v3.oas.annotations.Operation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(operation5).deprecated();
      doReturn((String) null).when(operation5).description();
      doReturn((Extension[]) null).when(operation5).extensions();
      doReturn((ExternalDocumentation) null).when(operation5).externalDocs();
      doReturn((String) null).when(operation5).operationId();
      doReturn((io.swagger.v3.oas.annotations.Parameter[]) null).when(operation5).parameters();
      doReturn((io.swagger.v3.oas.annotations.parameters.RequestBody) null).when(operation5).requestBody();
      doReturn((ApiResponse[]) null).when(operation5).responses();
      doReturn((io.swagger.v3.oas.annotations.security.SecurityRequirement[]) null).when(operation5).security();
      doReturn((io.swagger.v3.oas.annotations.servers.Server[]) null).when(operation5).servers();
      doReturn((String) null).when(operation5).summary();
      doReturn((String[]) null).when(operation5).tags();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.setOperationObjectFromApiOperationAnnotation(operation4, operation5, produces0, produces0, consumes0, consumes1, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Reader reader0 = new Reader();
      reader0.getOperationId("dKb}xPK");
      Class<Typed.Literal> class0 = Typed.Literal.class;
      Initialized.Literal initialized_Literal0 = Initialized.Literal.of(class0);
      Class<? extends Annotation> class1 = initialized_Literal0.value();
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      Operation operation0 = new Operation();
      ArrayList<Parameter> arrayList1 = new ArrayList<Parameter>();
      arrayList1.trimToSize();
      Operation operation1 = operation0.parameters(arrayList1);
      Parameter parameter0 = new Parameter();
      Boolean boolean0 = Boolean.valueOf(true);
      Parameter parameter1 = parameter0.explode(boolean0);
      Schema<Typed.Literal> schema0 = new Schema<Typed.Literal>();
      Parameter parameter2 = parameter1.schema(schema0);
      arrayList1.add(parameter0);
      Parameter.StyleEnum parameter_StyleEnum0 = Parameter.StyleEnum.MATRIX;
      operation1.setParameters(arrayList1);
      Parameter parameter3 = parameter2.style(parameter_StyleEnum0);
      Parameter.StyleEnum parameter_StyleEnum1 = Parameter.StyleEnum.SIMPLE;
      Parameter parameter4 = parameter3.style(parameter_StyleEnum1);
      Parameter parameter5 = parameter3.name("");
      arrayList1.add(parameter5);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(consumes0).value();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      reader0.getParameters(class1, arrayList0, operation1, consumes0, consumes0, jsonView0);
      JsonView jsonView1 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      reader0.getParameters(class0, arrayList0, operation0, (Consumes) null, (Consumes) null, jsonView1);
      reader0.getOpenAPI();
      reader0.processContent((Content) null, schema0, (Consumes) null, (Consumes) null);
      reader0.getOpenApiTags();
      reader0.getComponents();
      Annotation[] annotationArray0 = new Annotation[7];
      annotationArray0[0] = (Annotation) consumes0;
      annotationArray0[1] = (Annotation) jsonView0;
      annotationArray0[2] = (Annotation) consumes0;
      annotationArray0[3] = (Annotation) null;
      annotationArray0[4] = (Annotation) initialized_Literal0;
      annotationArray0[5] = (Annotation) consumes0;
      annotationArray0[6] = (Annotation) jsonView0;
      JsonView jsonView2 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      reader0.processRequestBody(parameter3, operation0, (Consumes) null, (Consumes) null, arrayList1, annotationArray0, class1, jsonView2, hashMap0);
      assertSame(parameter3, parameter4);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Reader reader0 = new Reader();
      Application application0 = new Application();
      application0.getSingletons();
      Map<String, Object> map0 = application0.getProperties();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.defaultResponseCode("default response");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.scannerClass("*/*");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.readerClass("*/*");
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      ConfigOverrides configOverrides1 = configOverrides0.copy();
      configOverrides1.getDefaultMergeable();
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.prettyPrint((Boolean) null);
      Set<Class<?>> set0 = application0.getClasses();
      swaggerConfiguration0.getModelConverterClasses();
      SwaggerConfiguration swaggerConfiguration5 = swaggerConfiguration4.resourceClasses((Set<String>) null);
      reader0.config = (OpenAPIConfiguration) swaggerConfiguration5;
      reader0.setApplication(application0);
      reader0.getPaths();
      reader0.ignoreOperationPathStrict("\"EWW!+ACDC9gdslhM", "\"EWW!+ACDC9gdslhM");
      Class<Proxy.Type> class0 = Proxy.Type.class;
      RequestBody requestBody0 = new RequestBody();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse("default response", apiResponse0);
      ApiResponses apiResponses2 = apiResponses1.addApiResponse("default response", apiResponse0);
      ApiResponses apiResponses3 = apiResponses2.extensions(map0);
      ApiResponses apiResponses4 = apiResponses3.addApiResponse("/", apiResponse0);
      Stack<Parameter> stack0 = new Stack<Parameter>();
      reader0.read((Class<?>) class0, "", "", false, requestBody0, apiResponses4, (Set<String>) null, (List<Parameter>) stack0, set0);
      Class<PathItem> class1 = PathItem.class;
      // Undeclared exception!
      try { 
        reader0.read(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.id(",LUd+");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.scannerClass("fa:T}@k]PqN@5P");
      Reader reader0 = new Reader(swaggerConfiguration2);
      Parameter parameter0 = new Parameter();
      Tag tag0 = new Tag();
      tag0.getExtensions();
      Parameter parameter1 = parameter0.extensions((Map<String, Object>) null);
      Boolean boolean0 = Boolean.TRUE;
      Parameter parameter2 = parameter1.allowReserved(boolean0);
      Parameter parameter3 = parameter2.required(boolean0);
      Parameter parameter4 = parameter3.$ref("*/*");
      Operation operation0 = new Operation();
      Callback callback0 = new Callback();
      Operation operation1 = operation0.addCallback("kb=)", callback0);
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      Operation operation2 = operation1.servers(linkedList0);
      Operation operation3 = operation2.description("options");
      Operation operation4 = operation3.addParametersItem(parameter3);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.trace(operation2);
      ArrayList<Parameter> arrayList0 = new ArrayList<Parameter>();
      PathItem pathItem2 = pathItem1.parameters(arrayList0);
      PathItem pathItem3 = pathItem2.description("4qm~`&4JQ~zX");
      List<Parameter> list0 = pathItem3.getParameters();
      Annotation[] annotationArray0 = new Annotation[4];
      Class<PathItem> class0 = PathItem.class;
      New.Literal new_Literal0 = New.Literal.of(class0);
      annotationArray0[0] = (Annotation) new_Literal0;
      annotationArray0[1] = (Annotation) consumes0;
      annotationArray0[2] = (Annotation) consumes0;
      BeforeDestroyed.Literal beforeDestroyed_Literal0 = BeforeDestroyed.Literal.SESSION;
      annotationArray0[3] = (Annotation) beforeDestroyed_Literal0;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      MediaType mediaType0 = new MediaType();
      Example example0 = new Example();
      MediaType mediaType1 = mediaType0.addExamples("options", example0);
      parameter1.getExamples();
      MediaType mediaType2 = mediaType1.examples((Map<String, Example>) null);
      mediaType2.getEncoding();
      reader0.processRequestBody(parameter4, operation4, consumes0, consumes0, list0, annotationArray0, class0, jsonView0, (Map<String, Encoding>) null);
      assertSame(operation0, operation4);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.sortOutput((Boolean) null);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.id("I7FhOo*@2wJ29mt");
      swaggerConfiguration1.prettyPrint((Boolean) null);
      Schema<JsonToken> schema0 = new Schema<JsonToken>();
      schema0.getTypes();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.modelConverterClasses((Set<String>) null);
      swaggerConfiguration3.setConvertToOpenAPI31((Boolean) null);
      Reader reader0 = new Reader(swaggerConfiguration3);
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.schema(schema0);
      Parameter parameter2 = parameter1.description("default response");
      Parameter parameter3 = parameter2.in("");
      Parameter.StyleEnum parameter_StyleEnum0 = Parameter.StyleEnum.LABEL;
      Parameter parameter4 = parameter3.style(parameter_StyleEnum0);
      Operation operation0 = new Operation();
      Server server0 = new Server();
      Server server1 = server0.url(".tKC#A|9p/");
      Operation operation1 = operation0.addServersItem(server1);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      ArrayList<Parameter> arrayList0 = new ArrayList<Parameter>();
      Annotation[] annotationArray0 = new Annotation[4];
      annotationArray0[0] = (Annotation) consumes0;
      annotationArray0[1] = (Annotation) consumes0;
      annotationArray0[2] = (Annotation) consumes0;
      annotationArray0[3] = (Annotation) consumes0;
      Class<PathItem> class0 = PathItem.class;
      Vector<String> vector0 = new Vector<String>();
      Vector<JavaType> vector1 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((List<String>) vector0, (List<JavaType>) vector1);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler((Object) null);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      // Undeclared exception!
      try { 
        reader0.processRequestBody(parameter4, operation1, consumes0, consumes0, arrayList0, annotationArray0, javaType0, jsonView0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test014()  throws Throwable  {
  //     OpenAPI openAPI0 = new OpenAPI();
  //     OpenAPI openAPI1 = openAPI0.schemaRequirement("$m/0AEu", (SecurityScheme) null);
  //     Server server0 = new Server();
  //     ServerVariables serverVariables0 = new ServerVariables();
  //     ServerVariable serverVariable0 = new ServerVariable();
  //     ServerVariables serverVariables1 = serverVariables0.addServerVariable("$m/0AEu", serverVariable0);
  //     Server server1 = server0.variables(serverVariables1);
  //     OpenAPI openAPI2 = openAPI1.addServersItem(server1);
  //     Reader reader0 = new Reader(openAPI2);
  //     Class<PathItem> class0 = PathItem.class;
  //     OpenAPI openAPI3 = reader0.read(class0);
  //     assertNotSame(openAPI0, openAPI3);
  // }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Reader reader0 = new Reader();
      Class<PathItem> class0 = PathItem.class;
      reader0.read(class0);
      reader0.ignoreOperationPath("", "W']T0!aSCPn");
      Application application0 = new Application();
      Set<Class<?>> set0 = application0.getClasses();
      reader0.setApplication(application0);
      reader0.getComponents();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      Encoding encoding0 = new Encoding();
      encoding0.getHeaders();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.headers((Map<String, Header>) null);
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(" $;BnrfFU4", apiResponse1);
      Server server0 = new Server();
      Server server1 = server0.description("#/components/schemas/");
      server1.getExtensions();
      ApiResponses apiResponses2 = apiResponses1.extensions((Map<String, Object>) null);
      Set<String> set1 = ZoneId.getAvailableZoneIds();
      Vector<Parameter> vector0 = new Vector<Parameter>(1023);
      OpenAPI openAPI0 = reader0.read((Class<?>) class0, "valueOf", "", true, (RequestBody) null, apiResponses2, set1, (List<Parameter>) vector0, set0);
      assertEquals(SpecVersion.V30, openAPI0.getSpecVersion());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      OpenAPI openAPI1 = openAPI0.jsonSchemaDialect("\"U8V");
      openAPI1.getSecurity();
      OpenAPI openAPI2 = openAPI1.security((List<SecurityRequirement>) null);
      Paths paths0 = new Paths();
      OAuthFlows oAuthFlows0 = new OAuthFlows();
      oAuthFlows0.getExtensions();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      OpenAPI openAPI3 = openAPI2.paths(paths1);
      Paths paths2 = paths1.addPathItem("\"U8V", (PathItem) null);
      paths1.toString();
      Paths paths3 = paths2.extensions((Map<String, Object>) null);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      Components components1 = components0.addResponses("a,|}i(v;)>}J*A8xb8>", (io.swagger.v3.oas.models.responses.ApiResponse) null);
      Components components2 = components1.addPathItem("\"U8V", (PathItem) null);
      components2.getCallbacks();
      Components components3 = components2.callbacks((Map<String, Callback>) null);
      Reader reader0 = new Reader(openAPI3, paths3, treeSet0, components3);
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI4 = reader0.read(class0);
      assertFalse(openAPI4.equals((Object)openAPI1));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Paths paths0 = new Paths();
      Server server0 = new Server();
      server0.getExtensions();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      PathItem pathItem0 = new PathItem();
      Paths paths2 = paths1.addPathItem("", pathItem0);
      PathItem pathItem1 = pathItem0.description("awctw");
      Paths paths3 = paths2.addPathItem("", pathItem1);
      Paths paths4 = paths3.addPathItem("", pathItem1);
      Paths paths5 = paths4.extensions((Map<String, Object>) null);
      Components components0 = new Components();
      Components components1 = components0.pathItems(paths4);
      Operation operation0 = new Operation();
      operation0.getCallbacks();
      Components components2 = components1.callbacks((Map<String, Callback>) null);
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>();
      Components components3 = components2.links(hashMap0);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.alwaysResolveAppPath((Boolean) null);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.openAPI((OpenAPI) null);
      Boolean boolean0 = Boolean.valueOf("#/components/schemas/");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.prettyPrint(boolean0);
      Reader reader0 = new Reader((OpenAPI) null, paths5, (Set<Tag>) null, components3, swaggerConfiguration3);
      Class<PathItem> class0 = PathItem.class;
      // Undeclared exception!
      try { 
        reader0.read(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Reader reader0 = new Reader();
      reader0.config = null;
      Application application0 = new Application();
      Map<String, Object> map0 = application0.getProperties();
      Set<Class<?>> set0 = application0.getClasses();
      reader0.setApplication(application0);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      reader0.resolveEmptyContent(produces0, produces0);
      reader0.setApplication(application0);
      reader0.ignoreOperationPathStrict("`1j$Q]dw{", "`1j$Q]dw{");
      reader0.ignoreOperationPathStrict("`1j$Q]dw{", "`1j$Q]dw{");
      application0.getProperties();
      reader0.ignoreOperationPath("", "");
      reader0.getPaths();
      String string0 = "";
      reader0.getOperationId("");
      // Undeclared exception!
      try { 
        reader0.read(set0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Reader reader0 = new Reader();
      Operation operation0 = new Operation();
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem("default response", pathItem0);
      Operation operation1 = operation0.addCallback("default response", callback1);
      Contact contact0 = new Contact();
      contact0.getExtensions();
      Operation operation2 = operation1.extensions((Map<String, Object>) null);
      RequestBody requestBody0 = new RequestBody();
      RequestBody requestBody1 = requestBody0.$ref("[");
      Operation operation3 = operation2.requestBody(requestBody1);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponses apiResponses1 = apiResponses0.extensions((Map<String, Object>) null);
      ApiResponses apiResponses2 = apiResponses1.extensions((Map<String, Object>) null);
      Operation operation4 = operation3.responses(apiResponses2);
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(apiResponse0).useReturnTypeSchema();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponse0;
      apiResponseArray0[2] = apiResponse0;
      Schema<PathItem> schema0 = new Schema<PathItem>();
      Object object0 = new Object();
      schema0.setExample(object0);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      reader0.resolveResponseSchemaFromReturnType(operation4, apiResponseArray0, schema0, produces0, produces0);
      reader0.setApplication((Application) null);
      reader0.getOpenAPI();
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces1).value();
      reader0.resolveEmptyContent(produces1, produces1);
      Parameter parameter0 = new Parameter();
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      pathItem0.getParameters();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      Class<JsonAutoDetect> class0 = jsonAutoDetect_Value0.valueFor();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.schema(schema0);
      Components components0 = new Components();
      components0.getExamples();
      MediaType mediaType2 = mediaType1.examples((Map<String, Example>) null);
      mediaType1.getEncoding();
      MediaType mediaType3 = mediaType2.encoding((Map<String, Encoding>) null);
      mediaType3.getEncoding();
      reader0.processRequestBody(parameter0, operation0, consumes0, consumes1, (List<Parameter>) null, apiResponseArray0, class0, jsonView0, (Map<String, Encoding>) null);
      assertNull(operation0.getDeprecated());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI1 = openAPI0.addWebhooks((String) null, pathItem0);
      Server server0 = new Server();
      OpenAPI openAPI2 = openAPI1.addServersItem(server0);
      OpenAPI openAPI3 = openAPI2.specVersion(specVersion0);
      Paths paths0 = new Paths();
      Paths paths1 = paths0.addPathItem((String) null, pathItem0);
      Paths paths2 = paths1.addPathItem((String) null, pathItem0);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      paths1.putIfAbsent((String) null, pathItem0);
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies("com.fasterxml.jackson.databind.deser.impl.InnerClassProperty", requestBody0);
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters("com.fasterxml.jackson.databind.deser.impl.InnerClassProperty", parameter0);
      components0.getLinks();
      Info info0 = new Info();
      Info info1 = info0.termsOfService((String) null);
      Encoding encoding0 = new Encoding();
      Header header0 = new Header();
      Encoding encoding1 = encoding0.addHeader("J>t-V$s~Y>c}", header0);
      Boolean boolean0 = Boolean.valueOf("7GtC");
      Encoding encoding2 = encoding1.explode(boolean0);
      encoding2.getExtensions();
      info0.extensions((Map<String, Object>) null);
      Info info2 = info1.description("#/components/schemas/");
      Contact contact0 = new Contact();
      Info info3 = info2.contact(contact0);
      info3.getExtensions();
      paths1.extensions((Map<String, Object>) null);
      Components components3 = components2.links((Map<String, Link>) null);
      Reader reader0 = new Reader(openAPI3, paths2, treeSet0, components3);
      reader0.getOpenApiTags();
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI4 = reader0.read(class0);
      assertNotSame(openAPI2, openAPI4);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Vector<Server> vector0 = new Vector<Server>();
      OpenAPI openAPI1 = openAPI0.servers(vector0);
      PathItem pathItem0 = new PathItem();
      vector0.trimToSize();
      OpenAPI openAPI2 = openAPI1.path("Reading defaults from %s for %s%n", pathItem0);
      Operation operation0 = new Operation();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Operation operation1 = operation0.callbacks(hashMap0);
      Operation operation2 = operation1.deprecated((Boolean) null);
      Stack<Parameter> stack0 = new Stack<Parameter>();
      Operation operation3 = operation2.parameters(stack0);
      Schema<PathItem> schema0 = new Schema<PathItem>();
      schema0.getExternalDocs();
      operation3.externalDocs((io.swagger.v3.oas.models.ExternalDocumentation) null);
      operation3.setCallbacks(hashMap0);
      Operation operation4 = operation3.summary("Reading defaults from %s for %s%n");
      pathItem0.setHead(operation4);
      OpenAPI openAPI3 = openAPI2.openapi("");
      Reader reader0 = new Reader(openAPI3);
      String string0 = reader0.getOperationId("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = reader0.resolveApplicationPath();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI1 = openAPI0.specVersion(specVersion0);
      Server server0 = new Server();
      OpenAPI openAPI2 = openAPI1.addServersItem(server0);
      OpenAPI openAPI3 = openAPI2.openapi("");
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>(0);
      Components components0 = new Components();
      Link link0 = new Link();
      Components components1 = components0.addLinks("", link0);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      openAPI1.setWebhooks((Map<String, PathItem>) null);
      Components components2 = components1.addResponses("`H \"", apiResponse0);
      components2.getRequestBodies();
      Components components3 = components2.requestBodies((Map<String, RequestBody>) null);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      components1.setCallbacks(hashMap0);
      linkedHashSet0.stream();
      Reader reader0 = new Reader(openAPI3, (Paths) null, linkedHashSet0, components3);
      reader0.getComponents();
      Class<io.swagger.v3.oas.models.ExternalDocumentation> class0 = io.swagger.v3.oas.models.ExternalDocumentation.class;
      OpenAPI openAPI4 = reader0.read(class0);
      assertFalse(openAPI4.equals((Object)openAPI1));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Reader reader0 = new Reader();
      reader0.getOperationId("Cannot access contents of TextNode as binary due to broken Base64 encoding: %s");
      Operation operation0 = new Operation();
      reader0.resolveApplicationPath();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Operation operation1 = operation0.tags(linkedList0);
      RequestBody requestBody0 = new RequestBody();
      Operation operation2 = operation1.requestBody(requestBody0);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      Server server0 = new Server();
      server0.getExtensions();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation1 = externalDocumentation0.extensions((Map<String, Object>) null);
      Operation operation3 = operation2.externalDocs(externalDocumentation1);
      Operation operation4 = operation3.description("9Rb#137[5i4xqhA");
      io.swagger.v3.oas.annotations.Operation operation5 = mock(io.swagger.v3.oas.annotations.Operation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(operation5).deprecated();
      doReturn((String) null).when(operation5).description();
      doReturn((Extension[]) null).when(operation5).extensions();
      doReturn((String) null).when(operation5).operationId();
      doReturn((io.swagger.v3.oas.annotations.Parameter[]) null).when(operation5).parameters();
      doReturn((io.swagger.v3.oas.annotations.parameters.RequestBody) null).when(operation5).requestBody();
      doReturn((ApiResponse[]) null).when(operation5).responses();
      doReturn((io.swagger.v3.oas.annotations.security.SecurityRequirement[]) null).when(operation5).security();
      doReturn((io.swagger.v3.oas.annotations.servers.Server[]) null).when(operation5).servers();
      doReturn((String) null).when(operation5).summary();
      doReturn((String[]) null).when(operation5).tags();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.setOperationObjectFromApiOperationAnnotation(operation4, operation5, produces0, produces0, consumes0, consumes0, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Paths paths0 = new Paths();
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Components components0 = new Components();
      PathItem pathItem0 = new PathItem();
      Components components1 = components0.addPathItem("G?X`vAaDX", pathItem0);
      RequestBody requestBody0 = new RequestBody();
      Components components2 = components1.addRequestBodies("%]2M[", requestBody0);
      Header header0 = new Header();
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      Header header1 = header0.schema(schema0);
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.in("com.fasterxml.jackson.databind.cfg.CoercionAction");
      Components components3 = components0.addParameters("bind-type", parameter1);
      components3.getSchemas();
      schema0.setPatternProperties((Map<String, Schema>) null);
      Components components4 = components2.addHeaders("%]2M[", header1);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.userDefinedOptions((Map<String, Object>) null);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.id("");
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.ignoredRoutes(linkedBlockingQueue0);
      Reader reader0 = new Reader((OpenAPI) null, paths0, linkedHashSet0, components4, swaggerConfiguration3);
      reader0.getOpenAPI();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Content content0 = reader0.resolveEmptyContent(produces0, produces0);
      assertEquals(1, content0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Reader reader0 = new Reader();
      reader0.getComponents();
      Operation operation0 = new Operation();
      Operation operation1 = operation0.operationId("*/*");
      FloatNode floatNode0 = FloatNode.valueOf(0.75F);
      List<String> list0 = floatNode0.findValuesAsText("L&azPB1|4L:'");
      Operation operation2 = operation1.tags(list0);
      RequestBody requestBody0 = new RequestBody();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Boolean boolean0 = Boolean.TRUE;
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.readAllResources(boolean0);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.resourcePackages(set0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.id(" (Xd$#Sw!W-:6+4I7G");
      swaggerConfiguration2.readerClass("default response");
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.ignoredRoutes(list0);
      reader0.setConfiguration(swaggerConfiguration4);
      RequestBody requestBody1 = requestBody0.description("C)}ZE#}Qe0M7oi,@");
      Operation operation3 = operation2.requestBody(requestBody1);
      Operation operation4 = operation3.description("");
      io.swagger.v3.oas.annotations.Operation operation5 = mock(io.swagger.v3.oas.annotations.Operation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(operation5).deprecated();
      doReturn((String) null).when(operation5).description();
      doReturn((Extension[]) null).when(operation5).extensions();
      doReturn((ExternalDocumentation) null).when(operation5).externalDocs();
      doReturn((String) null).when(operation5).operationId();
      doReturn((io.swagger.v3.oas.annotations.Parameter[]) null).when(operation5).parameters();
      doReturn((io.swagger.v3.oas.annotations.parameters.RequestBody) null).when(operation5).requestBody();
      doReturn((ApiResponse[]) null).when(operation5).responses();
      doReturn((io.swagger.v3.oas.annotations.security.SecurityRequirement[]) null).when(operation5).security();
      doReturn((io.swagger.v3.oas.annotations.servers.Server[]) null).when(operation5).servers();
      doReturn((String) null).when(operation5).summary();
      doReturn((String[]) null).when(operation5).tags();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.setOperationObjectFromApiOperationAnnotation(operation4, operation5, produces0, produces1, consumes0, consumes1, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Reader reader0 = new Reader();
      LinkedTransferQueue<DefaultParameterExtension> linkedTransferQueue0 = new LinkedTransferQueue<DefaultParameterExtension>();
      ArrayList<OpenAPIExtension> arrayList0 = new ArrayList<OpenAPIExtension>(linkedTransferQueue0);
      OpenAPIExtensions.setExtensions(arrayList0);
      reader0.getPaths();
      reader0.resolveApplicationPath();
      reader0.ignoreOperationPathStrict("CSy9G@tJ#", "CSy9G@tJ#");
      Class<PathItem> class0 = PathItem.class;
      reader0.read(class0);
      reader0.getComponents();
      reader0.ignoreOperationPathStrict("r}ygPUjz", "/94bq2*sW");
      Operation operation0 = new Operation();
      Boolean boolean0 = new Boolean(false);
      Operation operation1 = operation0.deprecated(boolean0);
      Operation operation2 = operation1.requestBody((RequestBody) null);
      Operation operation3 = operation2.operationId("(^0>0S}e@$xvHq");
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      Stack<String> stack0 = new Stack<String>();
      List<String> list0 = floatNode0.findValuesAsText("#/components/schemas/", (List<String>) stack0);
      Operation operation4 = operation3.tags(list0);
      io.swagger.v3.oas.annotations.Operation operation5 = mock(io.swagger.v3.oas.annotations.Operation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(operation5).deprecated();
      doReturn((String) null).when(operation5).description();
      doReturn((Extension[]) null).when(operation5).extensions();
      doReturn((ExternalDocumentation) null).when(operation5).externalDocs();
      doReturn((String) null).when(operation5).operationId();
      doReturn((io.swagger.v3.oas.annotations.Parameter[]) null).when(operation5).parameters();
      doReturn((io.swagger.v3.oas.annotations.parameters.RequestBody) null).when(operation5).requestBody();
      doReturn((ApiResponse[]) null).when(operation5).responses();
      doReturn((io.swagger.v3.oas.annotations.security.SecurityRequirement[]) null).when(operation5).security();
      doReturn((io.swagger.v3.oas.annotations.servers.Server[]) null).when(operation5).servers();
      doReturn((String) null).when(operation5).summary();
      doReturn((String[]) null).when(operation5).tags();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.setOperationObjectFromApiOperationAnnotation(operation4, operation5, produces0, produces0, consumes0, consumes0, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      OpenAPI openAPI1 = openAPI0.externalDocs(externalDocumentation0);
      Stack<Server> stack0 = new Stack<Server>();
      OpenAPI openAPI2 = openAPI1.servers(stack0);
      Info info0 = new Info();
      Info info1 = info0.summary("Zl#");
      OpenAPI openAPI3 = openAPI2.info(info1);
      Paths paths0 = new Paths();
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples("Zl#", example0);
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components2 = components1.headers(hashMap0);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.$ref("Zl#");
      Components components3 = components2.addResponses("Zl#", apiResponse1);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.filterClass("NqZ`P{L/");
      Reader reader0 = new Reader(openAPI3, paths0, treeSet0, components3, swaggerConfiguration1);
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI4 = reader0.read(class0);
      assertSame(openAPI4, openAPI3);
  }

  // @Test(timeout = 4000)
  // public void test028()  throws Throwable  {
  //     OpenAPI openAPI0 = new OpenAPI();
  //     OpenAPI openAPI1 = openAPI0.schema("taCj|tU{}(FG:Elvp", (Schema) null);
  //     ArrayList<Server> arrayList0 = new ArrayList<Server>();
  //     OpenAPI openAPI2 = openAPI1.servers(arrayList0);
  //     PathItem pathItem0 = new PathItem();
  //     PathItem pathItem1 = pathItem0.description("taCj|tU{}(FG:Elvp");
  //     OpenAPI openAPI3 = openAPI2.path("taCj|tU{}(FG:Elvp", pathItem1);
  //     Tag tag0 = new Tag();
  //     io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
  //     Tag tag1 = tag0.externalDocs(externalDocumentation0);
  //     tag1.setDescription("B_'5tnD~Qq(WZs;V");
  //     Tag tag2 = tag1.name("taCj|tU{}(FG:Elvp");
  //     openAPI3.equals(tag2);
  //     Reader reader0 = new Reader(openAPI3);
  //     SpecVersion specVersion0 = SpecVersion.V30;
  //     openAPI2.setSpecVersion(specVersion0);
  //     Class<Tag> class0 = Tag.class;
  //     reader0.read(class0);
  //     reader0.getOperationId("options");
  //     Class<PathItem> class1 = PathItem.class;
  //     OpenAPI openAPI4 = reader0.read(class1);
  //     assertFalse(openAPI4.equals((Object)openAPI2));
  // }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Paths paths0 = new Paths();
      OpenAPI openAPI1 = openAPI0.paths(paths0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme securityScheme1 = securityScheme0.openIdConnectUrl("1KQq(");
      OAuthFlows oAuthFlows0 = new OAuthFlows();
      Link link0 = new Link();
      securityScheme0.setBearerFormat("7\"2-%@zZlS;");
      link0.getExtensions();
      OAuthFlows oAuthFlows1 = oAuthFlows0.extensions((Map<String, Object>) null);
      OAuthFlow oAuthFlow0 = new OAuthFlow();
      OAuthFlows oAuthFlows2 = oAuthFlows1.clientCredentials(oAuthFlow0);
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      operation0.getServers();
      PathItem pathItem1 = pathItem0.servers((List<Server>) null);
      PathItem pathItem2 = pathItem1.extensions((Map<String, Object>) null);
      PathItem pathItem3 = pathItem2.$ref("1KQq(");
      PathItem pathItem4 = pathItem3.put(operation0);
      oAuthFlows1.addExtension31("7\"2-%@zZlS;", pathItem4);
      oAuthFlows2.addExtension31("1KQq(", openAPI1);
      Object object0 = new Object();
      oAuthFlows0.addExtension("", object0);
      SecurityScheme securityScheme2 = securityScheme1.flows(oAuthFlows2);
      openAPI0.schemaRequirement("7\"2-%@zZlS;", securityScheme2);
      Encoding encoding0 = new Encoding();
      encoding0.getExtensions();
      OpenAPI openAPI2 = openAPI1.extensions((Map<String, Object>) null);
      Vector<Tag> vector0 = new Vector<Tag>();
      OpenAPI openAPI3 = openAPI2.tags(vector0);
      Reader reader0 = new Reader(openAPI3);
      reader0.getPaths();
      reader0.getPaths();
      String string0 = reader0.getOperationId("9;Db");
      assertEquals("9;Db", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Reader reader0 = new Reader((OpenAPI) null);
      reader0.getOpenApiTags();
      Parameter parameter0 = new Parameter();
      Boolean boolean0 = Boolean.valueOf(true);
      Parameter parameter1 = parameter0.allowReserved(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Parameter parameter2 = parameter1.explode(boolean1);
      Link link0 = new Link();
      link0.getExtensions();
      Parameter parameter3 = parameter2.extensions((Map<String, Object>) null);
      Parameter parameter4 = parameter3.$ref("default response");
      Operation operation0 = new Operation();
      Operation operation1 = operation0.extensions((Map<String, Object>) null);
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      Operation operation2 = operation1.parameters(linkedList0);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Operation operation3 = operation2.callbacks(hashMap0);
      Callback callback0 = new Callback();
      Callback callback1 = callback0.extensions((Map<String, Object>) null);
      PathItem pathItem0 = new PathItem();
      Callback callback2 = callback1.addPathItem("", pathItem0);
      Operation operation4 = operation3.addCallback("*/*", callback2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Annotation[] annotationArray0 = new Annotation[2];
      annotationArray0[0] = (Annotation) consumes1;
      Class<MediaType> class0 = MediaType.class;
      New.Literal new_Literal0 = New.Literal.of(class0);
      annotationArray0[1] = (Annotation) new_Literal0;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      MediaType mediaType0 = new MediaType();
      HashMap<String, Example> hashMap1 = new HashMap<String, Example>();
      MediaType mediaType1 = mediaType0.examples(hashMap1);
      MediaType mediaType2 = mediaType1.extensions((Map<String, Object>) null);
      Example example0 = new Example();
      Example example1 = example0.extensions((Map<String, Object>) null);
      MediaType mediaType3 = mediaType2.addExamples("default response", example1);
      mediaType3.getEncoding();
      reader0.processRequestBody(parameter4, operation4, consumes0, consumes1, linkedList0, annotationArray0, class0, jsonView0, (Map<String, Encoding>) null);
      assertSame(operation2, operation4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.objectMapperProcessorClass("=exJJ6-wZt(52lb.");
      Boolean boolean0 = Boolean.FALSE;
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.openAPI31(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.sortOutput(boolean1);
      Reader reader0 = new Reader(swaggerConfiguration3);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*/*";
      stringArray0[1] = "/";
      stringArray0[2] = "*/*";
      stringArray0[3] = "/";
      stringArray0[4] = "*/*";
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      ArrayList<PathItem> arrayList0 = new ArrayList<PathItem>();
      Schema<PathItem> schema1 = schema0.examples(arrayList0);
      schema1.getExclusiveMaximum();
      swaggerConfiguration1.openAPI31((Boolean) null);
      swaggerConfiguration0.sortOutput(boolean1);
      stringArray0[5] = "*/*";
      stringArray0[6] = "/";
      linkedBlockingQueue0.toArray(stringArray0);
      swaggerConfiguration2.setIgnoredRoutes(linkedBlockingQueue0);
      Long long0 = new Long((-1L));
      swaggerConfiguration3.setCacheTTL(long0);
      swaggerConfiguration3.convertToOpenAPI31(boolean1);
      boolean boolean2 = reader0.ignoreOperationPathStrict("/", "m0I!^");
      assertFalse(boolean2);
      
      swaggerConfiguration2.setFilterClass("/");
      swaggerConfiguration1.readerClass("m0I!^");
      String string0 = reader0.getOperationId("post");
      assertEquals("post", string0);
      assertNotNull(string0);
      
      reader0.getOpenAPI();
      assertTrue(boolean0.equals((Object)boolean2));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Info info0 = new Info();
      OpenAPI openAPI1 = openAPI0.info(info0);
      SpecVersion specVersion1 = SpecVersion.V30;
      OpenAPI openAPI2 = openAPI1.specVersion(specVersion1);
      Paths paths0 = new Paths();
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.scannerClass("_JX&UrN^z\"XWvRr");
      Boolean boolean0 = Boolean.valueOf(true);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.readAllResources(boolean0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.openAPI31(boolean0);
      openAPI1.toString();
      Reader reader0 = new Reader(openAPI2, paths0, treeSet0, (Components) null, swaggerConfiguration3);
      reader0.getOpenApiTags();
      Class<PathItem> class0 = PathItem.class;
      reader0.read(class0);
      reader0.getOpenAPI();
      reader0.getOpenApiTags();
      Contact contact0 = new Contact();
      Parameter parameter0 = new Parameter();
      parameter0.getExtensions();
      Contact contact1 = contact0.extensions((Map<String, Object>) null);
      Contact contact2 = contact1.email("*/*");
      Contact contact3 = contact2.url("default response");
      info0.contact(contact3);
      reader0.ignoreOperationPathStrict("io.swagger.v3.jaxrs2.Reader", ")['YJ<`JMF/(/VbX");
      reader0.getComponents();
      reader0.getOpenApiTags();
      boolean boolean1 = reader0.ignoreOperationPathStrict("_JX&UrN^z\"XWvRr", "");
      reader0.resolveApplicationPath();
      assertEquals("3.1.0", openAPI2.getOpenapi());
      assertFalse(boolean0.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SecurityScheme securityScheme0 = new SecurityScheme();
      OpenAPI openAPI1 = openAPI0.schemaRequirement("l,7-a9}3`.JKZ", securityScheme0);
      openAPI1.getServers();
      OpenAPI openAPI2 = openAPI1.servers((List<Server>) null);
      openAPI2.setSecurity((List<SecurityRequirement>) null);
      OpenAPI openAPI3 = openAPI2.addServersItem((Server) null);
      ArrayList<Tag> arrayList0 = new ArrayList<Tag>();
      OpenAPI openAPI4 = openAPI3.tags(arrayList0);
      Reader reader0 = new Reader(openAPI4);
      Class<PathItem> class0 = PathItem.class;
      reader0.read(class0);
      reader0.ignoreOperationPathStrict("l,7-a9}3`.JKZ", "l,7-a9}3`.JKZ");
      Operation operation0 = new Operation();
      Operation operation1 = operation0.security((List<SecurityRequirement>) null);
      Operation operation2 = operation1.servers((List<Server>) null);
      Operation operation3 = operation2.operationId("*/*");
      Link link0 = new Link();
      Link link1 = link0.addParameter("path", "*/*");
      Link link2 = link1.requestBody(class0);
      Link link3 = link2.server((Server) null);
      Map<String, String> map0 = link3.getParameters();
      reader0.applyPathParamsPatterns(operation3, map0);
      assertSame(operation3, operation2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Reader reader0 = new Reader((OpenAPI) null);
      reader0.getOpenApiTags();
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI0 = reader0.read(class0);
      assertNull(openAPI0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      OpenAPI openAPI1 = openAPI0.jsonSchemaDialect((String) null);
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      pathItem0.getExtensions();
      Callback callback1 = callback0.extensions((Map<String, Object>) null);
      callback1.getExtensions();
      OpenAPI openAPI2 = openAPI1.extensions((Map<String, Object>) null);
      OpenAPI openAPI3 = openAPI2.path("", pathItem0);
      Tag tag0 = new Tag();
      Tag tag1 = tag0.name("|{O|/n30DI_G(ARrc3");
      Tag tag2 = tag1.description("|{O|/n30DI_G(ARrc3");
      openAPI1.addTagsItem(tag2);
      Paths paths0 = new Paths();
      openAPI3.toString();
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Tag tag3 = tag1.name((String) null);
      linkedHashSet0.add(tag3);
      Reader reader0 = new Reader(openAPI3, paths0, linkedHashSet0, (Components) null);
      reader0.getComponents();
      openAPI2.paths(paths0);
      Application application0 = new Application();
      reader0.setApplication(application0);
      io.swagger.v3.oas.annotations.Parameter[] parameterArray0 = new io.swagger.v3.oas.annotations.Parameter[0];
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Operation operation0 = new Operation();
      RequestBody requestBody0 = new RequestBody();
      Operation operation1 = operation0.requestBody(requestBody0);
      ApiResponses apiResponses0 = new ApiResponses();
      Operation operation2 = operation1.responses(apiResponses0);
      Vector<Parameter> vector0 = new Vector<Parameter>();
      Operation operation3 = operation2.parameters(vector0);
      openAPI1.getSecurity();
      Operation operation4 = operation3.security((List<SecurityRequirement>) null);
      Optional<List<Parameter>> optional0 = reader0.getParametersListFromAnnotation(parameterArray0, consumes0, consumes1, operation4, (JsonView) null);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Reader reader0 = new Reader();
      Class<PathItem> class0 = PathItem.class;
      Vector<String> vector0 = new Vector<String>();
      ModelResolver.NOT_NULL_ANNOTATIONS = (List<String>) vector0;
      reader0.isMethodOverridden((Method) null, class0);
      reader0.getOperationId("");
      Class<PathItem> class1 = PathItem.class;
      reader0.isMethodOverridden((Method) null, class1);
      Class<JsonEncoding> class2 = JsonEncoding.class;
      reader0.isMethodOverridden((Method) null, class2);
      Stack<Parameter> stack0 = new Stack<Parameter>();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      LinkedList<SecurityRequirement> linkedList0 = new LinkedList<SecurityRequirement>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Operation operation0 = new Operation();
      LinkedList<SecurityRequirement> linkedList1 = new LinkedList<SecurityRequirement>();
      Operation operation1 = operation0.security(linkedList1);
      RequestBody requestBody0 = new RequestBody();
      Operation operation2 = operation1.requestBody(requestBody0);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      Operation operation3 = operation2.externalDocs(externalDocumentation0);
      operation3.getServers();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>(4363, 499.7F);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.links(hashMap0);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.$ref("");
      ApiResponses apiResponses1 = apiResponses0.addApiResponse("(wJ!<S_g51>6s872[WQ", apiResponse2);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ApiResponse[] apiResponseArray0 = new ApiResponse[8];
      ApiResponse apiResponse3 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse3;
      apiResponseArray0[1] = apiResponse3;
      apiResponseArray0[2] = apiResponse3;
      apiResponseArray0[3] = apiResponse3;
      apiResponseArray0[4] = apiResponse3;
      apiResponseArray0[5] = apiResponse3;
      apiResponseArray0[6] = apiResponse3;
      apiResponseArray0[7] = apiResponse3;
      // Undeclared exception!
      try { 
        reader0.parseMethod((Method) null, (List<Parameter>) stack0, produces0, produces0, consumes0, consumes0, (List<SecurityRequirement>) linkedList0, (Optional<io.swagger.v3.oas.models.ExternalDocumentation>) null, (Set<String>) treeSet0, (List<Server>) null, false, requestBody0, apiResponses1, jsonView0, apiResponseArray0, (AnnotatedMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Paths paths0 = new Paths();
      paths0.getExtensions();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Components components0 = new Components();
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components1 = components0.headers(hashMap0);
      Components components2 = components1.pathItems(paths0);
      Reader reader0 = new Reader((OpenAPI) null, paths1, linkedHashSet0, components2, (OpenAPIConfiguration) null);
      Header header0 = new Header();
      Example example0 = new Example();
      Header header1 = header0.addExample("*/*", example0);
      Boolean boolean0 = new Boolean(true);
      Header header2 = header1.deprecated(boolean0);
      Tag tag0 = new Tag();
      Tag tag1 = tag0.name("");
      Header header3 = header2.example(tag1);
      header3.setExplode(boolean0);
      header3.setRequired(boolean0);
      Header header4 = header3.explode(boolean0);
      components1.addHeaders((String) null, header4);
      Content content0 = new Content();
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      components0.setSecuritySchemes(hashMap1);
      Schema<PathItem> schema0 = new Schema<PathItem>();
      Vector<PathItem> vector0 = new Vector<PathItem>(512, 512);
      Schema<PathItem> schema1 = schema0.examples(vector0);
      reader0.processContent(content0, schema1, (Consumes) null, (Consumes) null);
      boolean boolean1 = reader0.ignoreOperationPathStrict("io.swagger.v3.oas.integration.ContextUtils", "io.swagger.v3.oas.integration.ContextUtils");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Reader reader0 = new Reader();
      Application application0 = new Application();
      Set<Class<?>> set0 = application0.getClasses();
      reader0.setApplication(application0);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      reader0.resolveEmptyContent(produces0, produces0);
      // Undeclared exception!
      try { 
        reader0.read(set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Info info0 = new Info();
      OpenAPI openAPI1 = openAPI0.info(info0);
      LinkedList<Tag> linkedList0 = new LinkedList<Tag>();
      OpenAPI openAPI2 = openAPI1.tags(linkedList0);
      OpenAPI openAPI3 = openAPI2.path("", (PathItem) null);
      Paths paths0 = new Paths();
      Paths paths1 = paths0.addPathItem(",UV6Jsg7\"#KCU", (PathItem) null);
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Boolean boolean0 = Boolean.TRUE;
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.convertToOpenAPI31(boolean0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.objectMapperProcessorClass("");
      paths1.toString();
      swaggerConfiguration0.readerClass("");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.resourcePackages((Set<String>) null);
      Reader reader0 = new Reader(openAPI3, paths1, linkedHashSet0, (Components) null, swaggerConfiguration3);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      reader0.resolveEmptyContent(produces0, produces0);
      reader0.getOpenAPI();
      // Undeclared exception!
      try { 
        reader0.getOperationId((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      String string0 = "~W']4_L/G";
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.objectMapperProcessorClass("~W']4_L/G");
      Reader reader0 = new Reader(swaggerConfiguration1);
      Json.mapper();
      Class<String> class0 = String.class;
      reader0.read(class0);
      Application application0 = new Application();
      Class<String> class1 = String.class;
      // Undeclared exception!
      reader0.read(class1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI1 = openAPI0.specVersion(specVersion0);
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem("", pathItem0);
      Components components0 = new Components();
      components0.getExtensions();
      Paths paths2 = paths1.extensions((Map<String, Object>) null);
      Paths paths3 = paths2.addPathItem("#/components/schemas/", pathItem0);
      Header header0 = new Header();
      Header header1 = header0.extensions((Map<String, Object>) null);
      Example example0 = new Example();
      components0.equals(pathItem0);
      Header header2 = header1.addExample("#/components/schemas/", example0);
      Header header3 = header2.description("#/components/schemas/");
      Map<String, Example> map0 = header0.getExamples();
      Header header4 = header3.examples(map0);
      components0.addHeaders("", header4);
      Paths paths4 = paths3.extensions((Map<String, Object>) null);
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Tag tag0 = new Tag();
      hashSet0.add(tag0);
      Reader reader0 = new Reader(openAPI1, paths4, hashSet0, components0);
      reader0.getOperationId("#/components/schemas/");
      reader0.getOperationId("8+h)\"`V");
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI2 = reader0.read(class0);
      assertEquals("3.0.1", openAPI2.getOpenapi());
      
      Application application0 = new Application();
      application0.getClasses();
      reader0.setApplication(application0);
      String string0 = reader0.getOperationId("`CGx!!:o_>");
      assertNotNull(string0);
      assertEquals("`CGx!!:o_>", string0);
      assertFalse(openAPI1.equals((Object)openAPI2));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      externalDocumentation0.addExtension31("{7EWYx7)5R+>lm}S%Qn", "{7EWYx7)5R+>lm}S%Qn");
      OpenAPI openAPI1 = openAPI0.externalDocs(externalDocumentation0);
      SpecVersion specVersion1 = SpecVersion.V31;
      OpenAPI openAPI2 = openAPI1.specVersion(specVersion1);
      Components components0 = new Components();
      components0.getSecuritySchemes();
      Components components1 = components0.securitySchemes((Map<String, SecurityScheme>) null);
      OpenAPI openAPI3 = openAPI2.components(components1);
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem("#/components/schemas/", pathItem0);
      paths1.put((String) null, pathItem0);
      Paths paths2 = paths1.addPathItem("", pathItem0);
      paths1.put("{7EWYx7)5R+>lm}S%Qn", pathItem0);
      Stack<Server> stack0 = new Stack<Server>();
      stack0.add((Server) null);
      pathItem0.setServers(stack0);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Reader reader0 = new Reader(swaggerConfiguration0);
      Set<Tag> set0 = reader0.getOpenApiTags();
      Reader reader1 = new Reader(openAPI3, paths2, set0, components0, swaggerConfiguration0);
      reader1.getPaths();
      reader1.resolveApplicationPath();
      Application application0 = new Application();
      Set<Class<?>> set1 = application0.getClasses();
      reader1.setApplication(application0);
      Info info0 = new Info();
      Info info1 = info0.title("E}B)2H<6L'");
      Info info2 = info1.description("");
      info2.getExtensions();
      Info info3 = info2.extensions((Map<String, Object>) null);
      info3.getExtensions();
      OpenAPI openAPI4 = reader0.read(set1, (Map<String, Object>) null);
      assertFalse(openAPI4.equals((Object)openAPI0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Reader reader0 = new Reader();
      String string0 = "";
      reader0.getOperationId("");
      reader0.getOpenApiTags();
      Operation operation0 = new Operation();
      Stack<SecurityRequirement> stack0 = new Stack<SecurityRequirement>();
      Operation operation1 = operation0.security(stack0);
      PathItem pathItem0 = new PathItem();
      pathItem0.setPut(operation0);
      pathItem0.getServers();
      Operation operation2 = operation1.servers((List<Server>) null);
      Operation operation3 = operation2.operationId("default response");
      FloatNode floatNode0 = FloatNode.valueOf((-786.77F));
      Stack<String> stack1 = new Stack<String>();
      List<String> list0 = floatNode0.findValuesAsText((String) null, (List<String>) stack1);
      Operation operation4 = operation3.tags(list0);
      io.swagger.v3.oas.annotations.Operation operation5 = mock(io.swagger.v3.oas.annotations.Operation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(operation5).deprecated();
      doReturn((String) null).when(operation5).description();
      doReturn((Extension[]) null).when(operation5).extensions();
      doReturn((ExternalDocumentation) null).when(operation5).externalDocs();
      doReturn((String) null).when(operation5).operationId();
      doReturn((io.swagger.v3.oas.annotations.Parameter[]) null).when(operation5).parameters();
      doReturn((io.swagger.v3.oas.annotations.parameters.RequestBody) null).when(operation5).requestBody();
      doReturn((ApiResponse[]) null).when(operation5).responses();
      doReturn((io.swagger.v3.oas.annotations.security.SecurityRequirement[]) null).when(operation5).security();
      doReturn((io.swagger.v3.oas.annotations.servers.Server[]) null).when(operation5).servers();
      doReturn((String) null).when(operation5).summary();
      doReturn((String[]) null).when(operation5).tags();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      pathItem0.options(operation3);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.setOperationObjectFromApiOperationAnnotation(operation4, operation5, produces0, produces1, consumes0, consumes0, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Paths paths0 = new Paths();
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Reader reader0 = new Reader((OpenAPI) null, paths0, hashSet0, (Components) null, (OpenAPIConfiguration) null);
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(apiResponse0).useReturnTypeSchema();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponse0;
      apiResponseArray0[2] = apiResponse0;
      apiResponseArray0[3] = apiResponse0;
      paths0.keySet();
      apiResponseArray0[4] = apiResponse0;
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      schema0.setTitle("");
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      reader0.resolveResponseSchemaFromReturnType((Operation) null, apiResponseArray0, schema0, produces0, produces0);
      Parameter parameter0 = new Parameter();
      Content content0 = reader0.processContent((Content) null, schema0, (Consumes) null, (Consumes) null);
      Parameter parameter1 = parameter0.content(content0);
      Parameter parameter2 = parameter1.description("");
      Parameter parameter3 = parameter2.schema(schema0);
      Example example0 = new Example();
      Example example1 = example0.description(" not supported for non-JSON backend");
      example1.getExtensions();
      Parameter parameter4 = parameter3.extensions((Map<String, Object>) null);
      ArrayList<Parameter> arrayList0 = new ArrayList<Parameter>();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<StreamWriteFeature> class0 = StreamWriteFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.delete((Operation) null);
      ArrayType arrayType2 = arrayType1.withContentValueHandler(pathItem1);
      ArrayType arrayType3 = arrayType2.withTypeHandler((Object) null);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.processRequestBody(parameter4, (Operation) null, (Consumes) null, (Consumes) null, arrayList0, apiResponseArray0, arrayType3, jsonView0, (Map<String, Encoding>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Reader reader0 = new Reader((OpenAPI) null);
      // Undeclared exception!
      try { 
        reader0.isOperationHidden((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI1 = openAPI0.addWebhooks("", pathItem0);
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI2 = openAPI1.specVersion(specVersion0);
      Stack<Tag> stack0 = new Stack<Tag>();
      OpenAPI openAPI3 = openAPI2.tags(stack0);
      Paths paths0 = new Paths();
      Paths paths1 = paths0.addPathItem("", pathItem0);
      Paths paths2 = paths1.addPathItem("", pathItem0);
      Paths paths3 = paths2.addPathItem("", pathItem0);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components1 = components0.parameters(hashMap0);
      components0.getHeaders();
      Components components2 = components1.headers((Map<String, Header>) null);
      Tag tag0 = new Tag();
      tag0.getExtensions();
      Components components3 = components2.extensions((Map<String, Object>) null);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.openAPI(openAPI3);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.ignoredRoutes(priorityQueue0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.skipResolveAppPath((Boolean) null);
      Reader reader0 = new Reader(openAPI3, paths3, treeSet0, components3, swaggerConfiguration3);
      Class<io.swagger.v3.oas.models.ExternalDocumentation> class0 = io.swagger.v3.oas.models.ExternalDocumentation.class;
      OpenAPI openAPI4 = reader0.read(class0);
      assertEquals("3.0.1", openAPI4.getOpenapi());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Paths paths0 = new Paths();
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Components components0 = new Components();
      Components components1 = components0.schemas((Map<String, Schema>) null);
      Encoding encoding0 = new Encoding();
      encoding0.getExtensions();
      Components components2 = components1.extensions((Map<String, Object>) null);
      ApiResponses apiResponses0 = new ApiResponses();
      Components components3 = components2.responses(apiResponses0);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.filterClass("***");
      Boolean boolean0 = new Boolean(false);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.openAPI31(boolean0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.userDefinedOptions((Map<String, Object>) null);
      Reader reader0 = new Reader(openAPI0, paths0, hashSet0, components3, swaggerConfiguration3);
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI1 = reader0.read(class0);
      assertEquals("3.0.1", openAPI1.getOpenapi());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      ArrayList<SecurityRequirement> arrayList0 = new ArrayList<SecurityRequirement>();
      OpenAPI openAPI1 = openAPI0.security(arrayList0);
      Components components0 = new Components();
      OpenAPI openAPI2 = openAPI1.components(components0);
      Server server0 = new Server();
      HashMap<String, PathItem> hashMap0 = new HashMap<String, PathItem>();
      openAPI0.setWebhooks(hashMap0);
      Server server1 = server0.description("Bracketed IPv6 address must contain closing bracket");
      OpenAPI openAPI3 = openAPI2.addServersItem(server1);
      Reader reader0 = new Reader(openAPI3);
      Stack<Parameter> stack0 = new Stack<Parameter>();
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Optional<io.swagger.v3.oas.models.ExternalDocumentation> optional0 = Optional.empty();
      UnaryOperator<io.swagger.v3.oas.models.ExternalDocumentation> unaryOperator0 = UnaryOperator.identity();
      Function<Object, io.swagger.v3.oas.models.ExternalDocumentation> function0 = (Function<Object, io.swagger.v3.oas.models.ExternalDocumentation>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, io.swagger.v3.oas.models.ExternalDocumentation> function1 = unaryOperator0.compose((Function<? super Object, ? extends io.swagger.v3.oas.models.ExternalDocumentation>) function0);
      Optional<io.swagger.v3.oas.models.ExternalDocumentation> optional1 = optional0.map((Function<? super io.swagger.v3.oas.models.ExternalDocumentation, ? extends io.swagger.v3.oas.models.ExternalDocumentation>) function1);
      Stack<Server> stack1 = new Stack<Server>();
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse("", apiResponse0);
      ApiResponses apiResponses2 = apiResponses1.addApiResponse("default", apiResponse0);
      Header header0 = new Header();
      header0.getExtensions();
      ApiResponses apiResponses3 = apiResponses2.extensions((Map<String, Object>) null);
      ApiResponses apiResponses4 = apiResponses3.extensions((Map<String, Object>) null);
      ApiResponses apiResponses5 = apiResponses4.addApiResponse("X?M", apiResponse0);
      ApiResponses apiResponses6 = apiResponses5.extensions((Map<String, Object>) null);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      ApiResponse apiResponse1 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse1;
      apiResponseArray0[1] = apiResponse1;
      apiResponseArray0[2] = apiResponse1;
      apiResponseArray0[3] = apiResponse1;
      apiResponseArray0[4] = apiResponse1;
      apiResponseArray0[5] = apiResponse1;
      apiResponseArray0[6] = apiResponse1;
      // Undeclared exception!
      try { 
        reader0.parseMethod((Method) null, (List<Parameter>) stack0, (Produces) null, (Produces) null, consumes0, (Consumes) null, (List<SecurityRequirement>) arrayList0, optional1, (Set<String>) null, (List<Server>) stack1, true, (RequestBody) null, apiResponses6, jsonView0, apiResponseArray0, (AnnotatedMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI1 = openAPI0.path("MIME-NO-LINEFEEDS", pathItem0);
      OpenAPI openAPI2 = openAPI1.addWebhooks("path", pathItem0);
      Paths paths0 = new Paths();
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Components components0 = new Components();
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies("path", requestBody0);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      HashMap<String, Parameter> hashMap1 = new HashMap<String, Parameter>(hashMap0);
      Components components2 = components1.parameters(hashMap1);
      Link link0 = new Link();
      Link link1 = link0.addParameter("#/components/schemas/", "#/components/schemas/");
      Components components3 = components2.addLinks("", link1);
      Reader reader0 = new Reader(openAPI2, paths0, hashSet0, components3);
      boolean boolean0 = reader0.ignoreOperationPathStrict("#/components/schemas/", "#/components/schemas/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      OpenAPI openAPI1 = openAPI0.schema("F}UO-8+BjwEQ[WG&", schema0);
      ArrayList<Tag> arrayList0 = new ArrayList<Tag>();
      OpenAPI openAPI2 = openAPI1.tags(arrayList0);
      Stack<SecurityRequirement> stack0 = new Stack<SecurityRequirement>();
      OpenAPI openAPI3 = openAPI2.security(stack0);
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Components components0 = new Components();
      Components components1 = components0.responses((Map<String, io.swagger.v3.oas.models.responses.ApiResponse>) null);
      Reader reader0 = new Reader(openAPI3, (Paths) null, linkedHashSet0, components1);
      io.swagger.v3.oas.annotations.Parameter[] parameterArray0 = null;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Operation operation0 = new Operation();
      operation0.getParameters();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      Optional<io.swagger.v3.oas.models.ExternalDocumentation> optional0 = Optional.of(externalDocumentation0);
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      RequestBody requestBody0 = new RequestBody();
      Content content0 = new Content();
      RequestBody requestBody1 = requestBody0.content(content0);
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse("", apiResponse0);
      ApiResponses apiResponses2 = apiResponses1.addApiResponse("bind-type", apiResponse0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      ApiResponse apiResponse1 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse1;
      // Undeclared exception!
      try { 
        reader0.parseMethod((Method) null, (List<Parameter>) null, produces0, produces0, consumes0, consumes1, (List<SecurityRequirement>) stack0, optional0, set0, (List<Server>) linkedList0, true, requestBody1, apiResponses2, jsonView0, apiResponseArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Reader reader0 = new Reader();
      reader0.getPaths();
      reader0.getOpenApiTags();
      reader0.resolveApplicationPath();
      OpenAPI openAPI0 = reader0.getOpenAPI();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.scannerClass("*/*");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.openAPI(openAPI0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.defaultResponseCode("");
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      schema0.getExclusiveMaximum();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.isTypeId((AnnotatedMember) null);
      Schema schema1 = schema0.booleanSchemaValue((Boolean) null);
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.convertToOpenAPI31((Boolean) null);
      schema0.not(schema1);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      schema0.addAllOfItem(schema1);
      swaggerConfiguration4.setIgnoredRoutes(linkedHashSet0);
      swaggerConfiguration1.getResourceClasses();
      swaggerConfiguration1.openAPI(openAPI0);
      swaggerConfiguration4.setModelConverterClassess((Set<String>) null);
      reader0.setConfiguration(swaggerConfiguration4);
      Class<PathItem> class0 = PathItem.class;
      reader0.read(class0);
      OpenAPI openAPI1 = reader0.read(class0);
      assertEquals("3.0.1", openAPI1.getOpenapi());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Reader reader0 = new Reader();
      Application application0 = new Application();
      application0.getClasses();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      reader0.resolveEmptyContent(produces0, produces0);
      application0.getProperties();
      reader0.setApplication(application0);
      reader0.setApplication(application0);
      reader0.ignoreOperationPathStrict("", "{dr}M/{W`i@i;d{vS:%");
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces1).value();
      reader0.resolveEmptyContent(produces1, produces1);
      // Undeclared exception!
      try { 
        reader0.resolveApplicationPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Reader reader0 = new Reader(openAPI0);
      Stack<Annotation> stack0 = new Stack<Annotation>();
      Operation operation0 = new Operation();
      operation0.getExtensions();
      Operation operation1 = operation0.extensions((Map<String, Object>) null);
      Operation operation2 = operation1.addTagsItem("default response");
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.getParameters((Type) null, stack0, operation2, consumes0, (Consumes) null, (JsonView) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Boolean boolean0 = Boolean.TRUE;
      swaggerConfiguration0.openAPI31(boolean0);
      Long long0 = new Long((-9223372036854775808L));
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.cacheTTL(long0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.defaultResponseCode("Unexpected class definition: {}");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.resourceClasses((Set<String>) null);
      String string0 = "get";
      swaggerConfiguration3.id("get");
      Reader reader0 = new Reader(swaggerConfiguration3);
      swaggerConfiguration3.setOpenAPI31(boolean0);
      Class<StreamWriteFeature> class0 = StreamWriteFeature.class;
      reader0.isMethodOverridden((Method) null, class0);
      reader0.getComponents();
      Stack<Parameter> stack0 = new Stack<Parameter>();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.parseMethod((Method) null, (List<Parameter>) stack0, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Boolean boolean0 = new Boolean("~");
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.readAllResources(boolean0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.defaultResponseCode("@3b^zF4E");
      Info info0 = new Info();
      info0.getExtensions();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.userDefinedOptions((Map<String, Object>) null);
      Reader reader0 = new Reader(swaggerConfiguration3);
      Class<Integer> class0 = Integer.TYPE;
      Vector<Annotation> vector0 = new Vector<Annotation>();
      Operation operation0 = new Operation();
      OpenAPI openAPI0 = new OpenAPI();
      openAPI0.getSecurity();
      Operation operation1 = operation0.security((List<SecurityRequirement>) null);
      RequestBody requestBody0 = new RequestBody();
      Operation operation2 = operation1.requestBody(requestBody0);
      Operation operation3 = operation2.addTagsItem("@3b^zF4E");
      Parameter parameter0 = new Parameter();
      Boolean boolean1 = Boolean.FALSE;
      Parameter parameter1 = parameter0.allowEmptyValue(boolean1);
      Parameter parameter2 = parameter1.extensions((Map<String, Object>) null);
      Operation operation4 = operation3.addParametersItem(parameter2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes1).value();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      // Undeclared exception!
      try { 
        reader0.getParameters(class0, vector0, operation4, consumes0, consumes1, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Reader reader0 = new Reader();
      Parameter parameter0 = new Parameter();
      Boolean boolean0 = Boolean.FALSE;
      Parameter parameter1 = parameter0.allowEmptyValue(boolean0);
      Link link0 = new Link();
      link0.getExtensions();
      Parameter parameter2 = parameter1.extensions((Map<String, Object>) null);
      Parameter parameter3 = parameter2.schema((Schema) null);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Content content0 = reader0.resolveEmptyContent(produces0, produces0);
      parameter3.content(content0);
      Operation operation0 = new Operation();
      Consumes consumes0 = null;
      Stack<Parameter> stack0 = new Stack<Parameter>();
      Annotation[] annotationArray0 = new Annotation[7];
      annotationArray0[0] = (Annotation) null;
      annotationArray0[1] = (Annotation) null;
      annotationArray0[2] = (Annotation) produces0;
      annotationArray0[3] = (Annotation) produces0;
      annotationArray0[4] = (Annotation) null;
      annotationArray0[5] = (Annotation) produces0;
      annotationArray0[6] = (Annotation) null;
      parameter2.setContent(content0);
      // Undeclared exception!
      try { 
        reader0.getSubResourceWithJaxRsSubresourceLocatorSpecs((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Reader reader0 = new Reader();
      Scopes scopes0 = new Scopes();
      scopes0.put("default response", "trace");
      ModelConverters.getInstance(true);
      scopes0.put("*/*", (String) null);
      scopes0.put("Cannot set maxNestingDepth to a negative value", "");
      Scopes scopes1 = scopes0.addString("default response", "*/*");
      Object object0 = new Object();
      scopes1.get(object0);
      scopes1.put("default response", "default response");
      // Undeclared exception!
      try { 
        reader0.applyPathParamsPatterns((Operation) null, scopes1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SecurityScheme securityScheme0 = new SecurityScheme();
      OpenAPI openAPI1 = openAPI0.schemaRequirement("", securityScheme0);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      OpenAPI openAPI2 = openAPI1.externalDocs(externalDocumentation0);
      Components components0 = new Components();
      OpenAPI openAPI3 = openAPI2.components(components0);
      Reader reader0 = new Reader(openAPI3);
      Callback callback0 = new Callback();
      Callback callback1 = callback0.$ref("Lm g*TC'");
      components0.pathItems(callback1);
      reader0.resolveApplicationPath();
      openAPI3.addExtension31("", securityScheme0);
      io.swagger.v3.oas.annotations.Operation operation0 = mock(io.swagger.v3.oas.annotations.Operation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(operation0).deprecated();
      doReturn((String) null).when(operation0).description();
      doReturn((String) null).when(operation0).operationId();
      doReturn((String) null).when(operation0).summary();
      doReturn((String[]) null).when(operation0).tags();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Tag tag0 = new Tag();
      openAPI1.addTagsItem(tag0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.setOperationObjectFromApiOperationAnnotation((Operation) null, operation0, produces0, produces0, consumes0, consumes0, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Info info0 = new Info();
      OpenAPI openAPI1 = openAPI0.info(info0);
      Components components0 = new Components();
      OpenAPI openAPI2 = openAPI1.components(components0);
      Server server0 = new Server();
      Server server1 = server0.url("#/components/schemas/");
      OpenAPI openAPI3 = openAPI2.addServersItem(server1);
      Reader reader0 = new Reader(openAPI3);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      reader0.resolveEmptyContent(produces0, produces0);
      io.swagger.v3.oas.annotations.Parameter[] parameterArray0 = new io.swagger.v3.oas.annotations.Parameter[2];
      io.swagger.v3.oas.annotations.Parameter parameter0 = mock(io.swagger.v3.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn((io.swagger.v3.oas.annotations.media.Content[]) null).when(parameter0).content();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Operation operation0 = new Operation();
      Vector<SecurityRequirement> vector0 = new Vector<SecurityRequirement>();
      Operation operation1 = operation0.security(vector0);
      SecurityRequirement securityRequirement0 = new SecurityRequirement();
      SecurityRequirement securityRequirement1 = securityRequirement0.addList("mUOGs", "#/components/schemas/");
      SecurityRequirement securityRequirement2 = securityRequirement1.addList("rO^8&f;E");
      SecurityRequirement securityRequirement3 = securityRequirement2.addList("0P~K_/21T ");
      Operation operation2 = operation1.addSecurityItem(securityRequirement3);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation1 = externalDocumentation0.description("l");
      Operation operation3 = operation2.externalDocs(externalDocumentation1);
      ServerVariable serverVariable0 = new ServerVariable();
      ServerVariable serverVariable1 = serverVariable0.addEnumItem("mUOGs");
      List<String> list0 = serverVariable1.getEnum();
      Operation operation4 = operation3.tags(list0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.getParametersListFromAnnotation(parameterArray0, consumes0, consumes0, operation4, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.scannerClass((String) null);
      Reader reader0 = new Reader(swaggerConfiguration1);
      Application application0 = new Application();
      application0.getClasses();
      reader0.setApplication(application0);
      reader0.ignoreOperationPathStrict("\"~q&iJ9ky", (String) null);
      Operation operation0 = new Operation();
      Vector<Parameter> vector0 = new Vector<Parameter>();
      Operation operation1 = operation0.parameters(vector0);
      Contact contact0 = new Contact();
      contact0.getExtensions();
      Operation operation2 = operation1.extensions((Map<String, Object>) null);
      Operation operation3 = operation2.addTagsItem("r/'FLY6L_u/HO]+Dc.4");
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation1 = externalDocumentation0.url((String) null);
      Operation operation4 = operation3.externalDocs(externalDocumentation1);
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(apiResponse0).useReturnTypeSchema();
      apiResponseArray0[0] = apiResponse0;
      Schema<PathItem> schema0 = new Schema<PathItem>();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      reader0.resolveResponseSchemaFromReturnType(operation4, apiResponseArray0, schema0, produces0, produces0);
      Class<JsonToken> class0 = JsonToken.class;
      // Undeclared exception!
      try { 
        reader0.read(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI1 = openAPI0.addWebhooks("jo{s-G#L J!", pathItem0);
      Server server0 = new Server();
      OpenAPI openAPI2 = openAPI1.addServersItem(server0);
      OpenAPI openAPI3 = openAPI2.path("", pathItem0);
      Paths paths0 = new Paths();
      Reader reader0 = new Reader();
      Set<Tag> set0 = reader0.getOpenApiTags();
      Components components0 = new Components();
      components0.getLinks();
      Components components1 = components0.links((Map<String, Link>) null);
      Components components2 = components1.addPathItem("", pathItem0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme securityScheme1 = securityScheme0.openIdConnectUrl("#/components/schemas/");
      Components components3 = components2.addSecuritySchemes("", securityScheme1);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Locale locale0 = Locale.forLanguageTag("");
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.resourceClasses(set1);
      Boolean boolean0 = new Boolean("}.t\"%u");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.openAPI31(boolean0);
      Set<String> set2 = locale0.getUnicodeLocaleAttributes();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.modelConverterClasses(set2);
      Reader reader1 = new Reader(openAPI3, paths0, set0, components3, swaggerConfiguration3);
      Schema<JsonToken> schema0 = new Schema<JsonToken>();
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader1.processContent((Content) null, schema0, consumes0, consumes1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.modelConverterClasses(linkedHashSet0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.scannerClass("`nQLeJ|\"UqIQ2R");
      linkedHashSet0.add("`nQLeJ|\"UqIQ2R");
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      configOverrides0.getDefaultLeniency();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.skipResolveAppPath((Boolean) null);
      Reader reader0 = new Reader(swaggerConfiguration3);
      reader0.setConfiguration(swaggerConfiguration0);
      Operation operation0 = new Operation();
      SecurityRequirement securityRequirement0 = new SecurityRequirement();
      Operation operation1 = operation0.addSecurityItem(securityRequirement0);
      Schema<io.swagger.v3.oas.models.ExternalDocumentation> schema0 = new Schema<io.swagger.v3.oas.models.ExternalDocumentation>();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      reader0.resolveResponseSchemaFromReturnType(operation1, (ApiResponse[]) null, schema0, produces0, produces0);
      String string0 = reader0.resolveApplicationPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Paths paths0 = new Paths();
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples((String) null, example0);
      MediaType mediaType0 = new MediaType();
      mediaType0.getExamples();
      components0.addExtension("/", (Object) null);
      Components components2 = components1.examples((Map<String, Example>) null);
      components2.getParameters();
      Components components3 = components2.parameters((Map<String, Parameter>) null);
      Reader reader0 = new Reader(openAPI0, paths0, linkedHashSet0, components3);
      reader0.getOpenApiTags();
      PathItem pathItem0 = new PathItem();
      Server server0 = new Server();
      PathItem pathItem1 = pathItem0.addServersItem(server0);
      openAPI0.getServers();
      PathItem pathItem2 = pathItem1.servers((List<Server>) null);
      Operation operation0 = new Operation();
      Operation operation1 = operation0.description("#/components/schemas/");
      PathItem pathItem3 = pathItem2.head(operation1);
      PathItem pathItem4 = pathItem3.put(operation0);
      components3.addPathItem("default response", pathItem4);
      reader0.getComponents();
      reader0.getComponents();
      boolean boolean0 = reader0.ignoreOperationPath("com.fasterxml.jackson.annotation.JsonSetter$Value", "Db}\"");
      assertFalse(boolean0);
      
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI1 = reader0.read(class0);
      assertEquals("3.0.1", openAPI1.getOpenapi());
      assertFalse(openAPI1.equals((Object)openAPI0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Paths paths0 = new Paths();
      Components components0 = new Components();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      XML xML0 = new XML();
      xML0.getExtensions();
      Components components2 = components1.extensions((Map<String, Object>) null);
      Link link0 = new Link();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      link0.setParameters(map0);
      Link link1 = link0.extensions((Map<String, Object>) null);
      components1.addCallbacks("delete", (Callback) null);
      Components components3 = components2.addLinks("delete", link1);
      Reader reader0 = new Reader((OpenAPI) null, paths0, (Set<Tag>) null, components3);
      components3.setRequestBodies(hashMap0);
      boolean boolean0 = reader0.ignoreOperationPath("#/components/schemas/", "delete");
      assertFalse(boolean0);
      
      xML0.toString();
      reader0.getOperationId("+");
      String string0 = reader0.getOperationId("+");
      assertEquals("+", string0);
      assertNotNull(string0);
      
      Operation operation0 = new Operation();
      LinkedList<SecurityRequirement> linkedList0 = new LinkedList<SecurityRequirement>();
      Operation operation1 = operation0.security(linkedList0);
      operation1.getTags();
      Operation operation2 = operation1.tags((List<String>) null);
      Operation operation3 = operation2.description((String) null);
      RequestBody requestBody0 = new RequestBody();
      Boolean boolean1 = Boolean.TRUE;
      RequestBody requestBody1 = requestBody0.required(boolean1);
      Operation operation4 = operation3.requestBody(requestBody1);
      reader0.applyPathParamsPatterns(operation4, map0);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.id("trying extension {}");
      Boolean boolean0 = new Boolean(false);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.prettyPrint(boolean0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.resourcePackages((Set<String>) null);
      swaggerConfiguration3.objectMapperProcessorClass("tvme");
      swaggerConfiguration2.convertToOpenAPI31(boolean0);
      swaggerConfiguration3.resourceClasses((Set<String>) null);
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.alwaysResolveAppPath(boolean0);
      Schema<PathItem> schema0 = new Schema<PathItem>();
      schema0.getExclusiveMaximum();
      swaggerConfiguration0.skipResolveAppPath((Boolean) null);
      Reader reader0 = new Reader(swaggerConfiguration4);
      reader0.getOperationId("tvme");
      swaggerConfiguration0.openAPI31(boolean0);
      Class<PathItem> class0 = PathItem.class;
      swaggerConfiguration3.setReaderClass("tvme");
      OpenAPI openAPI0 = reader0.read(class0);
      reader0.ignoreOperationPath("V*Cz[S0", "V*Cz[S0");
      reader0.ignoreOperationPath("bind-type", "trying extension {}");
      reader0.isMethodOverridden((Method) null, class0);
      reader0.setConfiguration((OpenAPIConfiguration) null);
      reader0.resolveApplicationPath();
      Vector<Parameter> vector0 = new Vector<Parameter>();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      openAPI0.getSecurity();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      Optional<io.swagger.v3.oas.models.ExternalDocumentation> optional0 = Optional.ofNullable(externalDocumentation0);
      Vector<Server> vector1 = new Vector<Server>();
      RequestBody requestBody0 = new RequestBody();
      Reader reader1 = new Reader(openAPI0);
      Content content0 = reader1.resolveEmptyContent(produces0, produces0);
      RequestBody requestBody1 = requestBody0.content(content0);
      RequestBody requestBody2 = requestBody1.$ref("tvme");
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponse0;
      apiResponseArray0[2] = apiResponse0;
      apiResponseArray0[3] = apiResponse0;
      apiResponseArray0[4] = apiResponse0;
      apiResponseArray0[5] = apiResponse0;
      // Undeclared exception!
      try { 
        reader0.parseMethod((Class<?>) class0, (Method) null, (List<Parameter>) vector0, produces0, produces0, consumes0, consumes0, (List<SecurityRequirement>) null, optional0, (Set<String>) null, (List<Server>) vector1, true, requestBody2, (ApiResponses) null, jsonView0, apiResponseArray0, (AnnotatedMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI1 = openAPI0.path("=9", pathItem0);
      OpenAPI openAPI2 = openAPI1.paths((Paths) null);
      Tag tag0 = new Tag();
      Info info0 = new Info();
      openAPI2.info(info0);
      openAPI2.schemaRequirement("=9", (SecurityScheme) null);
      Tag tag1 = tag0.description("U.3d8r$mXf:!ou`VX");
      OpenAPI openAPI3 = openAPI2.addTagsItem(tag1);
      Reader reader0 = new Reader(openAPI3);
      reader0.getPaths();
      Reader reader1 = new Reader();
      SpecVersion specVersion1 = SpecVersion.V30;
      Schema<Annotation> schema0 = new Schema<Annotation>(specVersion1);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      Schema<Annotation> schema1 = schema0.examples(vector0);
      Content content0 = reader1.processContent((Content) null, schema1, (Consumes) null, (Consumes) null);
      reader0.processContent(content0, schema1, (Consumes) null, (Consumes) null);
      Application application0 = new Application();
      reader0.setApplication(application0);
      Operation operation0 = new Operation();
      RequestBody requestBody0 = new RequestBody();
      RequestBody requestBody1 = requestBody0.description("");
      XML xML0 = new XML();
      xML0.getExtensions();
      RequestBody requestBody2 = requestBody1.extensions((Map<String, Object>) null);
      Operation operation1 = operation0.requestBody(requestBody2);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      reader1.applyPathParamsPatterns(operation1, hashMap0);
      Set<Tag> set0 = reader1.getOpenApiTags();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Reader reader0 = new Reader();
      io.swagger.v3.oas.annotations.Parameter[] parameterArray0 = new io.swagger.v3.oas.annotations.Parameter[0];
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Operation operation0 = new Operation();
      Application application0 = new Application();
      Map<String, Object> map0 = application0.getProperties();
      Operation operation1 = operation0.extensions(map0);
      Operation operation2 = operation1.callbacks((Map<String, Callback>) null);
      operation1.callbacks((Map<String, Callback>) null);
      Operation operation3 = operation2.description((String) null);
      Operation operation4 = operation3.operationId("default response");
      operation4.extensions(map0);
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.options(operation1);
      PathItem pathItem2 = pathItem1.description("*/*");
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      PathItem pathItem3 = pathItem2.parameters(linkedList0);
      List<Parameter> list0 = pathItem3.getParameters();
      operation2.parameters(list0);
      LinkedList<Parameter> linkedList1 = new LinkedList<Parameter>();
      operation1.parameters(linkedList1);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      reader0.getParametersListFromAnnotation(parameterArray0, consumes0, consumes0, operation4, jsonView0);
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView1 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      reader0.getParametersListFromAnnotation(parameterArray0, consumes1, consumes1, operation1, jsonView1);
      reader0.getOpenAPI();
      reader0.ignoreOperationPath("", "");
      Paths paths0 = reader0.getPaths();
      assertEquals(0, paths0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.resourceClasses(linkedHashSet0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.defaultResponseCode("k8}<%1<K^I");
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Boolean boolean0 = Boolean.FALSE;
      swaggerConfiguration2.setReadAllResources(boolean0);
      openAPI0.getWebhooks();
      OpenAPI openAPI1 = openAPI0.webhooks((Map<String, PathItem>) null);
      openAPI1.setWebhooks((Map<String, PathItem>) null);
      swaggerConfiguration1.defaultResponseCode("k8}<%1<K^I");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.openAPI(openAPI1);
      Reader reader0 = new Reader(swaggerConfiguration3);
      reader0.getOpenApiTags();
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI2 = reader0.read(class0);
      boolean boolean1 = reader0.ignoreOperationPath("k8}<%1<K^I", "");
      assertTrue(openAPI1.equals((Object)openAPI2));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Operation operation0 = new Operation();
      operation0.getSecurity();
      OpenAPI openAPI1 = openAPI0.security((List<SecurityRequirement>) null);
      Server server0 = new Server();
      OpenAPI openAPI2 = openAPI1.addServersItem(server0);
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI3 = openAPI2.specVersion(specVersion0);
      Paths paths0 = new Paths();
      Contact contact0 = new Contact();
      contact0.getExtensions();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks("", callback0);
      Components components2 = components1.securitySchemes((Map<String, SecurityScheme>) null);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components3 = components2.parameters(hashMap0);
      Reader reader0 = new Reader(openAPI3, paths1, treeSet0, components3);
      reader0.getComponents();
      operation0.setOperationId("problem handler tried to resolve into non-subtype: ");
      boolean boolean0 = reader0.ignoreOperationPath("com.fasterxml.jackson.core.JsonToken", "Q:[2(/f&");
      assertFalse(boolean0);
      
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI4 = reader0.read(class0);
      assertEquals("3.0.1", openAPI4.getOpenapi());
      assertFalse(openAPI4.equals((Object)openAPI1));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Reader reader0 = new Reader(openAPI0);
      Operation operation0 = new Operation();
      Vector<Server> vector0 = new Vector<Server>();
      Operation operation1 = operation0.servers(vector0);
      io.swagger.v3.oas.annotations.Operation operation2 = mock(io.swagger.v3.oas.annotations.Operation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(operation2).deprecated();
      doReturn((String) null).when(operation2).description();
      doReturn((Extension[]) null).when(operation2).extensions();
      doReturn((ExternalDocumentation) null).when(operation2).externalDocs();
      doReturn((String) null).when(operation2).operationId();
      doReturn((io.swagger.v3.oas.annotations.Parameter[]) null).when(operation2).parameters();
      doReturn((io.swagger.v3.oas.annotations.parameters.RequestBody) null).when(operation2).requestBody();
      doReturn((ApiResponse[]) null).when(operation2).responses();
      doReturn((io.swagger.v3.oas.annotations.security.SecurityRequirement[]) null).when(operation2).security();
      doReturn((io.swagger.v3.oas.annotations.servers.Server[]) null).when(operation2).servers();
      doReturn((String) null).when(operation2).summary();
      doReturn((String[]) null).when(operation2).tags();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.setOperationObjectFromApiOperationAnnotation(operation1, operation2, produces0, produces0, consumes0, consumes0, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem("", pathItem0);
      Callback callback0 = new Callback();
      Callback callback1 = callback0.$ref("");
      Callback callback2 = callback1.extensions((Map<String, Object>) null);
      Callback callback3 = callback2.extensions((Map<String, Object>) null);
      callback3.getExtensions();
      Paths paths2 = paths1.extensions((Map<String, Object>) null);
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Components components0 = new Components();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses("", apiResponse0);
      Components components2 = components1.extensions((Map<String, Object>) null);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse("", apiResponse0);
      Components components3 = components2.responses(apiResponses1);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components4 = components3.parameters(hashMap0);
      Reader reader0 = new Reader(openAPI0, paths2, hashSet0, components4);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Reader reader0 = new Reader();
      boolean boolean0 = reader0.ignoreOperationPathStrict("", "@!9dgKLC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Reader reader0 = new Reader((OpenAPIConfiguration) null);
      reader0.setConfiguration((OpenAPIConfiguration) null);
      Operation operation0 = new Operation();
      ApiResponses apiResponses0 = new ApiResponses();
      Discriminator discriminator0 = new Discriminator();
      discriminator0.getExtensions();
      ApiResponses apiResponses1 = apiResponses0.extensions((Map<String, Object>) null);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      Link link0 = new Link();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.addLink("", link0);
      Content content0 = new Content();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.content(content0);
      Components components0 = new Components();
      components0.getHeaders();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse3 = apiResponse2.headers((Map<String, Header>) null);
      Header header0 = new Header();
      Header header1 = header0.required((Boolean) null);
      Example example0 = new Example();
      Header header2 = header1.addExample("r", example0);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse4 = apiResponse3.addHeaderObject("", header2);
      apiResponses0.put("", apiResponse4);
      Operation operation1 = operation0.responses(apiResponses1);
      discriminator0.setMapping((Map<String, String>) null);
      io.swagger.v3.oas.annotations.Operation operation2 = mock(io.swagger.v3.oas.annotations.Operation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(operation2).deprecated();
      doReturn((String) null).when(operation2).description();
      doReturn((String) null).when(operation2).operationId();
      doReturn((String) null).when(operation2).summary();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = null;
      // Undeclared exception!
      try { 
        reader0.setOperationObjectFromApiOperationAnnotation(operation1, operation2, produces0, produces0, consumes0, consumes0, (JsonView) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem("", pathItem0);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      externalDocumentation0.getExtensions();
      Paths paths2 = paths1.extensions((Map<String, Object>) null);
      Paths paths3 = paths2.extensions((Map<String, Object>) null);
      Paths paths4 = paths3.extensions((Map<String, Object>) null);
      Paths paths5 = paths4.extensions((Map<String, Object>) null);
      Paths paths6 = paths5.addPathItem(":$(|rwFiZ`S];(F5d", pathItem0);
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Components components0 = new Components();
      components0.getCallbacks();
      Components components1 = components0.callbacks((Map<String, Callback>) null);
      components0.getRequestBodies();
      Components components2 = components1.requestBodies((Map<String, RequestBody>) null);
      Parameter parameter0 = new Parameter();
      Components components3 = components2.addParameters("#/components/schemas/", parameter0);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Long long0 = new Long(1L);
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.cacheTTL(long0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.objectMapperProcessorClass("");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.convertToOpenAPI31((Boolean) null);
      Reader reader0 = new Reader((OpenAPI) null, paths6, hashSet0, components3, swaggerConfiguration3);
      Components components4 = reader0.getComponents();
      assertSame(components4, components1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Components components0 = new Components();
      OpenAPI openAPI1 = openAPI0.components(components0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme securityScheme1 = securityScheme0.scheme("s");
      OpenAPI openAPI2 = openAPI1.schemaRequirement("#/components/schemas/", securityScheme1);
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI3 = openAPI2.specVersion(specVersion0);
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem("#/components/schemas/", pathItem0);
      Paths paths2 = paths1.addPathItem("#/components/schemas/", pathItem0);
      Paths paths3 = paths2.addPathItem((String) null, pathItem0);
      Link link0 = new Link();
      link0.getExtensions();
      Paths paths4 = paths3.extensions((Map<String, Object>) null);
      Paths paths5 = paths4.addPathItem("nU{`HJH", pathItem0);
      SpecVersion specVersion1 = SpecVersion.V31;
      OpenAPI openAPI4 = new OpenAPI(specVersion1);
      OpenAPI openAPI5 = openAPI4.webhooks(paths0);
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.scannerClass((String) null);
      Reader reader0 = new Reader(openAPI5, paths4, linkedHashSet0, components0, swaggerConfiguration1);
      Set<Tag> set0 = reader0.getOpenApiTags();
      Reader reader1 = new Reader(openAPI3, paths5, set0, components0, swaggerConfiguration0);
      assertFalse(reader1.equals((Object)reader0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Tag tag0 = new Tag();
      OpenAPI openAPI1 = openAPI0.addTagsItem(tag0);
      Components components0 = new Components();
      OpenAPI openAPI2 = openAPI1.components(components0);
      SecurityRequirement securityRequirement0 = new SecurityRequirement();
      SecurityRequirement securityRequirement1 = securityRequirement0.addList("#/components/schemas/", "#/components/schemas/");
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<JsonToken> schema0 = new Schema<JsonToken>(specVersion0);
      schema0.getRequired();
      SecurityRequirement securityRequirement2 = securityRequirement1.addList("#/components/schemas/", (List<String>) null);
      OpenAPI openAPI3 = openAPI2.addSecurityItem(securityRequirement2);
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.post(operation0);
      pathItem0.getParameters();
      PathItem pathItem2 = pathItem1.parameters((List<Parameter>) null);
      OpenAPI openAPI4 = openAPI3.addWebhooks("bI-N@+XU,M", pathItem2);
      Reader reader0 = new Reader(openAPI4);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      OpenAPI openAPI1 = openAPI0.jsonSchemaDialect("Cannot construct AnnotatedMethod with null Method");
      XML xML0 = new XML();
      xML0.getExtensions();
      OpenAPI openAPI2 = openAPI1.extensions((Map<String, Object>) null);
      Tag tag0 = new Tag();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      Tag tag1 = tag0.externalDocs(externalDocumentation0);
      OpenAPI openAPI3 = openAPI2.addTagsItem(tag1);
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme securityScheme1 = securityScheme0.openIdConnectUrl(":");
      SecurityScheme.In securityScheme_In0 = SecurityScheme.In.QUERY;
      SecurityScheme securityScheme2 = securityScheme1.in(securityScheme_In0);
      OpenAPI openAPI4 = openAPI3.schemaRequirement("Cannot construct AnnotatedMethod with null Method", securityScheme2);
      Reader reader0 = new Reader(openAPI4);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI1 = openAPI0.path("m`0nDu=a]q{qxi", pathItem0);
      Info info0 = new Info();
      OpenAPI openAPI2 = openAPI1.info(info0);
      ArrayList<Tag> arrayList0 = new ArrayList<Tag>();
      OpenAPI openAPI3 = openAPI2.tags(arrayList0);
      Reader reader0 = new Reader(openAPI3);
      Application application0 = new Application();
      reader0.setApplication(application0);
      Content content0 = reader0.resolveEmptyContent((Produces) null, (Produces) null);
      io.swagger.v3.oas.annotations.Parameter[] parameterArray0 = new io.swagger.v3.oas.annotations.Parameter[7];
      io.swagger.v3.oas.annotations.Parameter parameter0 = mock(io.swagger.v3.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn((io.swagger.v3.oas.annotations.media.Content[]) null).when(parameter0).content();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Operation operation0 = new Operation();
      Operation operation1 = operation0.summary("m`0nDu=a]q{qxi");
      Boolean boolean0 = Boolean.valueOf(false);
      Operation operation2 = operation1.deprecated(boolean0);
      RequestBody requestBody0 = new RequestBody();
      Operation operation3 = operation2.requestBody(requestBody0);
      Parameter parameter1 = new Parameter();
      pathItem0.getExtensions();
      Parameter parameter2 = parameter1.extensions((Map<String, Object>) null);
      Parameter parameter3 = parameter2.content(content0);
      Operation operation4 = operation3.addParametersItem(parameter3);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.getParametersListFromAnnotation(parameterArray0, consumes0, consumes1, operation4, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      String string0 = "Could not clone mediaType";
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.id("Could not clone mediaType");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.defaultResponseCode("Could not clone mediaType");
      Boolean boolean0 = Boolean.valueOf(false);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.convertToOpenAPI31(boolean0);
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.scannerClass("Could not clone mediaType");
      swaggerConfiguration4.getModelConverterClasses();
      SwaggerConfiguration swaggerConfiguration5 = swaggerConfiguration3.resourcePackages((Set<String>) null);
      String string1 = "#[4(RTFD]uto[|SJGp";
      swaggerConfiguration5.defaultResponseCode("#[4(RTFD]uto[|SJGp");
      Reader reader0 = new Reader(swaggerConfiguration5);
      io.swagger.v3.oas.annotations.Operation operation0 = mock(io.swagger.v3.oas.annotations.Operation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(operation0).deprecated();
      doReturn((String) null).when(operation0).description();
      doReturn((String) null).when(operation0).operationId();
      doReturn((String) null).when(operation0).summary();
      doReturn((String[]) null).when(operation0).tags();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.setOperationObjectFromApiOperationAnnotation((Operation) null, operation0, produces0, produces0, consumes0, consumes1, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI1 = openAPI0.path((String) null, pathItem0);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      OpenAPI openAPI2 = openAPI1.externalDocs(externalDocumentation0);
      Paths paths0 = new Paths();
      Paths paths1 = paths0.addPathItem("k}[XCc;-:gJ)|V@", pathItem0);
      openAPI2.webhooks(paths1);
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme.In securityScheme_In0 = SecurityScheme.In.COOKIE;
      SecurityScheme securityScheme1 = securityScheme0.in(securityScheme_In0);
      securityScheme0.toString();
      securityScheme0.openIdConnectUrl("Okw,lR&&QLJ&7");
      OpenAPI openAPI3 = openAPI2.schemaRequirement("<&)(6!1", securityScheme1);
      Reader reader0 = new Reader(openAPI3);
      reader0.getOpenAPI();
      Schema<PathItem> schema0 = new Schema<PathItem>();
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.processContent((Content) null, schema0, consumes0, consumes1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem("cp65001", pathItem0);
      Paths paths2 = paths1.addPathItem("cp65001", pathItem0);
      Tag tag0 = new Tag();
      tag0.getExtensions();
      Paths paths3 = paths2.extensions((Map<String, Object>) null);
      Paths paths4 = paths3.addPathItem("cp65001", pathItem0);
      Reader reader0 = new Reader();
      Set<Tag> set0 = reader0.getOpenApiTags();
      Components components0 = new Components();
      Components components1 = components0.extensions((Map<String, Object>) null);
      Example example0 = new Example();
      Components components2 = components1.addExamples("", example0);
      Components components3 = components2.addSchemas("", (Schema) null);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.defaultResponseCode("VhHb@T");
      Boolean boolean0 = Boolean.FALSE;
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.skipResolveAppPath(boolean0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.openAPI31(boolean0);
      Reader reader1 = new Reader((OpenAPI) null, paths4, set0, components3, swaggerConfiguration3);
      boolean boolean1 = reader1.ignoreOperationPathStrict("ZCLEzSTQ2y", "default response");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      OpenAPI openAPI1 = openAPI0.externalDocs(externalDocumentation0);
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      OpenAPI openAPI2 = openAPI1.schema("[[V", schema0);
      Info info0 = new Info();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(101);
      Info info1 = info0.extensions(hashMap0);
      OpenAPI openAPI3 = openAPI2.info(info1);
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.get(operation0);
      Paths paths1 = paths0.addPathItem("bind-type", pathItem1);
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Components components0 = new Components();
      Components components1 = components0.schemas((Map<String, Schema>) null);
      Components components2 = components1.addSchemas("bind-type", schema0);
      HashMap<String, Link> hashMap1 = new HashMap<String, Link>();
      Components components3 = components2.links(hashMap1);
      Reader reader0 = new Reader(openAPI3, paths1, hashSet0, components3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Operation operation0 = new Operation();
      operation0.getSecurity();
      OpenAPI openAPI1 = openAPI0.security((List<SecurityRequirement>) null);
      OpenAPI openAPI2 = openAPI1.specVersion(specVersion0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      securityScheme0.getExtensions();
      OpenAPI openAPI3 = openAPI2.extensions((Map<String, Object>) null);
      OpenAPI openAPI4 = openAPI3.addServersItem((Server) null);
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Components components0 = new Components();
      Components components1 = components0.addPathItem("", (PathItem) null);
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      schema0.getPatternProperties();
      Components components2 = components1.schemas((Map<String, Schema>) null);
      Header header0 = new Header();
      Header header1 = header0.example((Object) null);
      Components components3 = components2.addHeaders("#/components/schemas/", header1);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      Reader reader0 = new Reader();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Content content0 = reader0.resolveEmptyContent(produces0, produces0);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.content(content0);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.addLink("default response", (Link) null);
      Components components4 = components3.addResponses("bind-type", apiResponse2);
      Reader reader1 = new Reader(openAPI4, (Paths) null, linkedHashSet0, components4);
      assertFalse(reader1.equals((Object)reader0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      OpenAPI openAPI1 = openAPI0.schemaRequirement("", (SecurityScheme) null);
      Components components0 = new Components();
      components0.getExtensions();
      OpenAPI openAPI2 = openAPI1.extensions((Map<String, Object>) null);
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.delete(operation0);
      OpenAPI openAPI3 = openAPI2.path("#/components/schemas/", pathItem1);
      Paths paths0 = new Paths();
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Reader reader0 = new Reader(openAPI3, paths0, linkedHashSet0, components0);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Content content0 = reader0.resolveEmptyContent(produces0, produces0);
      Schema<Example> schema0 = new Schema<Example>();
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.processContent(content0, schema0, consumes0, consumes1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Reader reader0 = new Reader();
      PathItem pathItem0 = new PathItem();
      pathItem0.getParameters();
      // Undeclared exception!
      try { 
        reader0.parseMethod((Method) null, (List<Parameter>) null, (JsonView) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Reader reader0 = new Reader();
      reader0.getPaths();
      Application application0 = new Application();
      application0.getClasses();
      application0.getProperties();
      reader0.setApplication(application0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Reader reader0 = new Reader();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.objectMapperProcessorClass("");
      Schema<JsonToken> schema0 = new Schema<JsonToken>();
      schema0.getTypes();
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.resourcePackages((Set<String>) null);
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<PathItem> schema1 = new Schema<PathItem>(specVersion0);
      schema1.getExclusiveMinimum();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.convertToOpenAPI31((Boolean) null);
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.defaultResponseCode("bind-type");
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.empty();
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      jsonFormat_Features0.get(jsonFormat_Feature0);
      SwaggerConfiguration swaggerConfiguration5 = swaggerConfiguration4.skipResolveAppPath((Boolean) null);
      reader0.config = (OpenAPIConfiguration) swaggerConfiguration5;
      Components components0 = reader0.getComponents();
      assertNotNull(components0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Boolean boolean0 = new Boolean(false);
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.skipResolveAppPath(boolean0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.readerClass("");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.ignoredRoutes((Collection<String>) null);
      Reader reader0 = new Reader(swaggerConfiguration3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapLikeType0);
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.trace(operation0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(pathItem1);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0, defaultBaseTypeLimitingValidator0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingTypeId(arrayType1, classNameIdResolver0, "{o;u>R+$J?tJ3@+-DHO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.readerClass("ALLOW_MISSING_VALUES");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.scannerClass("ALLOW_MISSING_VALUES");
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Paths paths0 = new Paths();
      OpenAPI openAPI1 = openAPI0.webhooks(paths0);
      Components components0 = new Components();
      OpenAPI openAPI2 = openAPI1.components(components0);
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI3 = openAPI2.path("O42bm%u{FR,h6", pathItem0);
      openAPI1.setJsonSchemaDialect("#/components/schemas/");
      SecurityRequirement securityRequirement0 = new SecurityRequirement();
      SecurityRequirement securityRequirement1 = securityRequirement0.addList(".YJ{", "ALLOW_MISSING_VALUES");
      SecurityRequirement securityRequirement2 = securityRequirement1.addList("io.swagger.v3.oas.models.security.OAuthFlows");
      SecurityRequirement securityRequirement3 = securityRequirement2.addList("ALLOW_MISSING_VALUES", "FETG");
      OpenAPI openAPI4 = openAPI3.addSecurityItem(securityRequirement3);
      swaggerConfiguration1.setOpenAPI(openAPI4);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.defaultResponseCode("APjs3^$vQ'7KzO%D9");
      Reader reader0 = new Reader(swaggerConfiguration3);
      reader0.setConfiguration(swaggerConfiguration1);
      io.swagger.v3.oas.annotations.Parameter[] parameterArray0 = new io.swagger.v3.oas.annotations.Parameter[5];
      io.swagger.v3.oas.annotations.Parameter parameter0 = mock(io.swagger.v3.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Vector<Parameter> vector0 = new Vector<Parameter>();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.parseMethod((Method) null, (List<Parameter>) vector0, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Reader reader0 = new Reader();
      reader0.getOperationId("javax.ws.rs.");
      Class<Example> class0 = Example.class;
      reader0.read(class0);
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.processContent((Content) null, schema0, consumes0, consumes1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Reader reader0 = new Reader((OpenAPI) null);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Boolean boolean0 = Boolean.TRUE;
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.alwaysResolveAppPath(boolean0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.readerClass("default response");
      swaggerConfiguration2.objectMapperProcessorClass("*/*");
      try { 
        Long.decode("*/*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*_/*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      openAPI0.getServers();
      OpenAPI openAPI1 = openAPI0.servers((List<Server>) null);
      Contact contact0 = new Contact();
      contact0.getExtensions();
      OpenAPI openAPI2 = openAPI1.extensions((Map<String, Object>) null);
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.patch(operation0);
      OpenAPI openAPI3 = openAPI2.path("void", pathItem1);
      Paths paths0 = new Paths();
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      TreeSet<Tag> treeSet1 = new TreeSet<Tag>((SortedSet<Tag>) treeSet0);
      Components components0 = new Components();
      components0.getRequestBodies();
      Components components1 = components0.requestBodies((Map<String, RequestBody>) null);
      Header header0 = new Header();
      Components components2 = components1.addHeaders("#/components/schemas/", header0);
      Components components3 = components2.extensions((Map<String, Object>) null);
      pathItem1.setGet(operation0);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.userDefinedOptions((Map<String, Object>) null);
      Reader reader0 = new Reader(openAPI3, paths0, treeSet1, components3, swaggerConfiguration1);
      Scopes scopes0 = new Scopes();
      Scopes scopes1 = scopes0.addString("#874CJ^A>KHL:g7y|", "#/components/schemas/");
      reader0.applyPathParamsPatterns(operation0, scopes1);
      paths0.addExtension("#874CJ^A>KHL:g7y|", pathItem0);
      reader0.ignoreOperationPathStrict("void", "");
      reader0.ignoreOperationPath("    externalDocs: ", "#/components/schemas/");
      Application application0 = new Application();
      reader0.setApplication(application0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SecurityScheme securityScheme0 = new SecurityScheme();
      OpenAPI openAPI1 = openAPI0.schemaRequirement((String) null, securityScheme0);
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI2 = openAPI1.path("M|A", pathItem0);
      Paths paths0 = new Paths();
      Paths paths1 = paths0.addPathItem("M|A", pathItem0);
      Paths paths2 = paths1.addPathItem((String) null, pathItem0);
      OAuthFlow oAuthFlow0 = new OAuthFlow();
      oAuthFlow0.getExtensions();
      Paths paths3 = paths2.extensions((Map<String, Object>) null);
      Paths paths4 = paths3.extensions((Map<String, Object>) null);
      OpenAPI openAPI3 = openAPI2.paths(paths4);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      Header header0 = new Header();
      Components components1 = components0.addHeaders("->", header0);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      apiResponse0.getLinks();
      Components components2 = components1.links((Map<String, Link>) null);
      Components components3 = components2.examples((Map<String, Example>) null);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      HashSet<String> hashSet0 = new HashSet<String>();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.resourceClasses(hashSet0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.ignoredRoutes(hashSet0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.userDefinedOptions((Map<String, Object>) null);
      Reader reader0 = new Reader(openAPI3, paths2, treeSet0, components3, swaggerConfiguration3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayBlockingQueue> class0 = ArrayBlockingQueue.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      Class<?> class1 = valueInstantiator_Base0.getValueClass();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Operation operation0 = new Operation();
      LinkedList<Parameter> linkedList1 = new LinkedList<Parameter>();
      Operation operation1 = operation0.parameters(linkedList1);
      Server server0 = new Server();
      Operation operation2 = operation1.addServersItem(server0);
      operation0.getCallbacks();
      Operation operation3 = operation2.callbacks((Map<String, Callback>) null);
      Operation operation4 = operation3.extensions((Map<String, Object>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(consumes0).value();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ResolvedParameter resolvedParameter0 = reader0.getParameters(class1, linkedList0, operation4, consumes0, consumes0, jsonView0);
      assertNotNull(resolvedParameter0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      OpenAPI openAPI1 = openAPI0.openapi((String) null);
      Vector<SecurityRequirement> vector0 = new Vector<SecurityRequirement>();
      OpenAPI openAPI2 = openAPI1.security(vector0);
      openAPI1.getWebhooks();
      openAPI2.webhooks((Map<String, PathItem>) null);
      Paths paths0 = new Paths();
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      Server server0 = new Server();
      Server server1 = server0.description((String) null);
      Header header0 = new Header();
      header0.getExtensions();
      Server server2 = server1.extensions((Map<String, Object>) null);
      ServerVariables serverVariables0 = new ServerVariables();
      Server server3 = server2.variables(serverVariables0);
      server3.getExtensions();
      components0.extensions((Map<String, Object>) null);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components1 = components0.addSecuritySchemes((String) null, securityScheme0);
      HashMap<String, io.swagger.v3.oas.models.responses.ApiResponse> hashMap0 = new HashMap<String, io.swagger.v3.oas.models.responses.ApiResponse>(0);
      components1.responses(hashMap0);
      Parameter parameter0 = new Parameter();
      parameter0.getExamples();
      HashMap<String, Example> hashMap1 = null;
      try {
        hashMap1 = new HashMap<String, Example>((Map<? extends String, ? extends Example>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Paths paths0 = new Paths();
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Components components0 = new Components();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      apiResponse0.getHeaders();
      Components components1 = components0.headers((Map<String, Header>) null);
      components1.getSecuritySchemes();
      Components components2 = components1.securitySchemes((Map<String, SecurityScheme>) null);
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>();
      PathItem pathItem0 = new PathItem();
      paths0.put("", pathItem0);
      Components components3 = components2.links(hashMap0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse("S^Wj'+<^'^mY", apiResponse0);
      Components components4 = components3.responses(apiResponses1);
      Reader reader0 = new Reader((OpenAPI) null, paths0, linkedHashSet0, components4);
      Content content0 = new Content();
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.processContent(content0, schema0, consumes0, consumes1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Paths paths0 = new Paths();
      RequestBody requestBody0 = new RequestBody();
      requestBody0.getExtensions();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      OpenAPI openAPI1 = openAPI0.paths(paths1);
      requestBody0.setExtensions((Map<String, Object>) null);
      OpenAPI openAPI2 = openAPI1.openapi("");
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI3 = openAPI2.path("", pathItem0);
      Reader reader0 = new Reader(openAPI3);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Boolean boolean0 = new Boolean(true);
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.skipResolveAppPath(boolean0);
      swaggerConfiguration0.setObjectMapperProcessorClass("*/*");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.sortOutput(boolean0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.openAPI31(boolean0);
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.id("*/*");
      HashSet<String> hashSet0 = new HashSet<String>();
      swaggerConfiguration1.scannerClass("");
      String string0 = reader0.getOperationId("multipart/form-data");
      assertEquals("multipart/form-data", string0);
      assertNotNull(string0);
      
      hashSet0.add("ISHC(4G_6+7");
      swaggerConfiguration4.modelConverterClasses(hashSet0);
      reader0.setConfiguration(swaggerConfiguration4);
      Class<PathItem> class0 = PathItem.class;
      reader0.read(class0);
      reader0.setConfiguration(swaggerConfiguration2);
      OpenAPI openAPI4 = reader0.getOpenAPI();
      assertEquals("3.1.0", openAPI4.getOpenapi());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI1 = openAPI0.specVersion(specVersion0);
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI2 = openAPI1.path("", pathItem0);
      OpenAPI openAPI3 = openAPI2.jsonSchemaDialect((String) null);
      Reader reader0 = new Reader(openAPI3);
      String string0 = reader0.getOperationId("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Json31.mapper();
      reader0.resolveApplicationPath();
      Initialized.Literal initialized_Literal0 = Initialized.Literal.CONVERSATION;
      Class<? extends Annotation> class0 = initialized_Literal0.value();
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      Schema<Parameter> schema0 = new Schema<Parameter>(specVersion0);
      arrayList0.add((Annotation) initialized_Literal0);
      openAPI0.schema("", schema0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes1).value();
      reader0.getParameters(class0, arrayList0, (Operation) null, consumes0, consumes1, (JsonView) null);
      boolean boolean0 = reader0.ignoreOperationPathStrict((String) null, "iUmu3v#2$}or8*UpQ_s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      OpenAPI openAPI1 = openAPI0.schemaRequirement("net.bytebuddy.build.Plugin$ForElementMatcher", (SecurityScheme) null);
      OpenAPI openAPI2 = openAPI1.openapi("net.bytebuddy.build.Plugin$ForElementMatcher");
      Tag tag0 = new Tag();
      Server server0 = new Server();
      server0.getExtensions();
      Tag tag1 = tag0.extensions((Map<String, Object>) null);
      OpenAPI openAPI3 = openAPI2.addTagsItem(tag1);
      openAPI1.getSecurity();
      OpenAPI openAPI4 = openAPI3.security((List<SecurityRequirement>) null);
      Paths paths0 = new Paths();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      PathItem pathItem0 = new PathItem();
      Stack<Server> stack0 = new Stack<Server>();
      PathItem pathItem1 = pathItem0.servers(stack0);
      PathItem pathItem2 = pathItem1.addServersItem(server0);
      Paths paths2 = paths1.addPathItem("net.bytebuddy.build.Plugin$ForElementMatcher", pathItem2);
      Reader reader0 = new Reader(openAPI0);
      Set<Tag> set0 = reader0.getOpenApiTags();
      Reader reader1 = new Reader(openAPI4, paths2, set0, (Components) null);
      Json.mapper();
      boolean boolean0 = reader1.ignoreOperationPathStrict("net.bytebuddy.build.Plugin$ForElementMatcher", "");
      assertFalse(boolean0);
      
      reader0.getComponents();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SpecVersion specVersion1 = SpecVersion.V30;
      Schema<JsonToken> schema0 = new Schema<JsonToken>(specVersion1);
      schema0.getTypes();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.resourceClasses((Set<String>) null);
      Boolean boolean1 = new Boolean(false);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.openAPI31(boolean1);
      Boolean boolean2 = Boolean.valueOf("default response");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.readAllResources(boolean2);
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.openAPI(openAPI4);
      reader0.setConfiguration(swaggerConfiguration4);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.defaultResponseCode("");
      Boolean boolean0 = new Boolean("");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.sortOutput(boolean0);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.ignoredRoutes(priorityQueue0);
      Long long0 = new Long(93L);
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.cacheTTL(long0);
      Reader reader0 = new Reader(swaggerConfiguration4);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Reader reader0 = new Reader();
      ModelConverters.getInstance(true);
      Components components0 = reader0.getComponents();
      assertNotNull(components0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem("getApplication", pathItem0);
      Operation operation0 = new Operation();
      operation0.getExtensions();
      Paths paths2 = paths1.extensions((Map<String, Object>) null);
      Paths paths3 = paths2.extensions((Map<String, Object>) null);
      Paths paths4 = paths3.extensions((Map<String, Object>) null);
      Paths paths5 = paths4.extensions((Map<String, Object>) null);
      Paths paths6 = paths5.addPathItem("getApplication", pathItem0);
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Components components0 = new Components();
      components0.getRequestBodies();
      Components components1 = components0.requestBodies((Map<String, RequestBody>) null);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      HashMap<String, Parameter> hashMap1 = new HashMap<String, Parameter>(hashMap0);
      Components components2 = components1.parameters(hashMap1);
      components1.getSecuritySchemes();
      Components components3 = components2.securitySchemes((Map<String, SecurityScheme>) null);
      Reader reader0 = new Reader(openAPI0, paths6, hashSet0, components3);
      boolean boolean0 = reader0.ignoreOperationPath((String) null, "#/components/schemas/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Boolean boolean0 = Boolean.valueOf("W^>]Q.Io/Q Hsd:oq");
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.skipResolveAppPath(boolean0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.sortOutput(boolean0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.scannerClass("W^>]Q.Io/Q Hsd:oq");
      Reader reader0 = new Reader(swaggerConfiguration3);
      reader0.ignoreOperationPathStrict("W^>]Q.Io/Q Hsd:oq", (String) null);
      reader0.getOpenApiTags();
      reader0.setConfiguration(swaggerConfiguration2);
      io.swagger.v3.oas.annotations.Parameter[] parameterArray0 = new io.swagger.v3.oas.annotations.Parameter[5];
      io.swagger.v3.oas.annotations.Parameter parameter0 = mock(io.swagger.v3.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn((io.swagger.v3.oas.annotations.media.Content[]) null).when(parameter0).content();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Operation operation0 = new Operation();
      Operation operation1 = operation0.deprecated(boolean0);
      Operation operation2 = operation1.description("*/*");
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      OAuthFlow oAuthFlow0 = new OAuthFlow();
      oAuthFlow0.getExtensions();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation1 = externalDocumentation0.extensions((Map<String, Object>) null);
      Operation operation3 = operation2.externalDocs(externalDocumentation1);
      Stack<String> stack0 = new Stack<String>();
      Operation operation4 = operation3.tags(stack0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.getParametersListFromAnnotation(parameterArray0, consumes0, consumes0, operation4, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Components components0 = new Components();
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem((String) null, pathItem0);
      Components components1 = components0.addCallbacks((String) null, callback1);
      Example example0 = new Example();
      Components components2 = components1.addExamples("EAGER_DESERIALIZER_FETCH", example0);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components3 = components2.parameters(hashMap0);
      Components components4 = components3.pathItems(callback0);
      Reader reader0 = new Reader(openAPI0, (Paths) null, hashSet0, components4);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      openAPI0.getTags();
      OpenAPI openAPI1 = openAPI0.tags((List<Tag>) null);
      Schema<PathItem> schema0 = new Schema<PathItem>();
      schema0.getJsonSchema();
      OpenAPI openAPI2 = openAPI1.extensions((Map<String, Object>) null);
      Paths paths0 = new Paths();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      Info info0 = new Info();
      info0.getExtensions();
      Paths paths2 = paths1.extensions((Map<String, Object>) null);
      Paths paths3 = paths2.extensions((Map<String, Object>) null);
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Components components0 = new Components();
      Components components1 = components0.requestBodies((Map<String, RequestBody>) null);
      Reader reader0 = new Reader(openAPI2, paths3, linkedHashSet0, components1);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      reader0.resolveEmptyContent(produces0, produces0);
      String string0 = reader0.getOperationId("i3");
      assertEquals("i3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = reader0.ignoreOperationPath("head", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Reader reader0 = new Reader();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      reader0.resolveEmptyContent(produces0, produces0);
      Parameter parameter0 = new Parameter();
      Boolean boolean0 = Boolean.FALSE;
      Parameter parameter1 = parameter0.required(boolean0);
      Example example0 = new Example();
      Parameter parameter2 = parameter1.addExample(" at indices ", example0);
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>(2, 712.0419F);
      Parameter parameter3 = parameter2.examples(hashMap0);
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<String> schema0 = new Schema<String>(specVersion0);
      parameter3.schema(schema0);
      Operation operation0 = null;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.patch((Operation) null);
      pathItem1.getParameters();
      Annotation[] annotationArray0 = new Annotation[0];
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme securityScheme1 = securityScheme0.openIdConnectUrl("IbQ&ymP02PBkO");
      SecurityScheme securityScheme2 = securityScheme1.name("IbQ&ymP02PBkO");
      SecurityScheme.Type securityScheme_Type0 = SecurityScheme.Type.OPENIDCONNECT;
      SecurityScheme securityScheme3 = securityScheme2.type(securityScheme_Type0);
      SecurityScheme securityScheme4 = securityScheme3.$ref("IbQ&ymP02PBkO");
      securityScheme4.setDescription("J+[pM*HUL5}e");
      openAPI0.schemaRequirement("IbQ&ymP02PBkO", securityScheme4);
      Paths paths0 = new Paths();
      OpenAPI openAPI1 = openAPI0.paths(paths0);
      Components components0 = new Components();
      Schema<String> schema0 = new Schema<String>();
      SpecVersion specVersion1 = SpecVersion.V31;
      Schema<JsonToken> schema1 = new Schema<JsonToken>(specVersion1);
      schema1.getRequired();
      Schema<String> schema2 = schema0.examples((List<String>) null);
      schema2.$schema("J+[pM*HUL5}e");
      components0.addSchemas(" KUSs2.%KVUOX:8}", schema2);
      OpenAPI openAPI2 = openAPI1.components(components0);
      OpenAPI openAPI3 = openAPI2.webhooks(paths0);
      openAPI3.setPaths(paths0);
      Reader reader0 = new Reader(openAPI3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI1 = openAPI0.path("%s_%d", pathItem0);
      SecurityRequirement securityRequirement0 = new SecurityRequirement();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SecurityRequirement securityRequirement1 = securityRequirement0.addList("%s_%d", (List<String>) arrayList0);
      OpenAPI openAPI2 = openAPI1.addSecurityItem(securityRequirement1);
      OpenAPI openAPI3 = openAPI2.jsonSchemaDialect("");
      Paths paths0 = new Paths();
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      schema0.getJsonSchema();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      ShortNode shortNode0 = new ShortNode((short)1019);
      BigDecimal bigDecimal0 = shortNode0.decimalValue();
      schema0.setExclusiveMinimumValue(bigDecimal0);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Reader reader0 = new Reader(openAPI3, paths1, treeSet0, (Components) null);
      Operation operation0 = new Operation();
      Operation operation1 = operation0.operationId("*/*");
      Operation operation2 = operation1.summary("*/*");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      reader0.applyPathParamsPatterns(operation2, hashMap0);
      assertNull(operation2.getDescription());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      SpecVersion specVersion1 = SpecVersion.V30;
      OpenAPI openAPI1 = openAPI0.specVersion(specVersion1);
      openAPI1.setOpenapi("");
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      OpenAPI openAPI2 = openAPI1.externalDocs(externalDocumentation0);
      Reader reader0 = new Reader(openAPI2);
      Paths paths0 = new Paths();
      String string0 = "";
      ArrayList<OpenAPIExtension> arrayList0 = new ArrayList<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(arrayList0);
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem("", pathItem0);
      // Undeclared exception!
      try { 
        paths1.computeIfAbsent("v=kqaQ>6<0Ss", (Function<? super String, ? extends PathItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      swaggerConfiguration0.getResourceClasses();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.resourceClasses((Set<String>) null);
      Boolean boolean0 = Boolean.valueOf(true);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.convertToOpenAPI31(boolean0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.openAPI31(boolean0);
      Reader reader0 = new Reader(swaggerConfiguration3);
      boolean boolean1 = reader0.ignoreOperationPathStrict(".t~y3rcmQ@l]", ".t~y3rcmQ@l]");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Paths paths0 = new Paths();
      OpenAPI openAPI1 = openAPI0.webhooks(paths0);
      OpenAPI openAPI2 = openAPI1.jsonSchemaDialect("pw");
      Components components0 = new Components();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      apiResponse0.getLinks();
      Components components1 = components0.links((Map<String, Link>) null);
      components1.getSecuritySchemes();
      Components components2 = components1.securitySchemes((Map<String, SecurityScheme>) null);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components3 = components2.parameters(hashMap0);
      RequestBody requestBody0 = new RequestBody();
      RequestBody requestBody1 = requestBody0.$ref("#/components/schemas/");
      RequestBody requestBody2 = requestBody1.description("");
      Components components4 = components3.addRequestBodies("#/components/schemas/", requestBody2);
      openAPI2.setComponents(components4);
      Schema<io.swagger.v3.oas.models.ExternalDocumentation> schema0 = new Schema<io.swagger.v3.oas.models.ExternalDocumentation>();
      OpenAPI openAPI3 = openAPI2.schema("pw", schema0);
      LinkedList<Tag> linkedList0 = new LinkedList<Tag>();
      openAPI3.setTags(linkedList0);
      Reader reader0 = new Reader(openAPI3);
      OpenAPI openAPI4 = reader0.getOpenAPI();
      assertEquals("3.0.1", openAPI4.getOpenapi());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      openAPI0.getServers();
      OpenAPI openAPI1 = openAPI0.servers((List<Server>) null);
      HashMap<String, PathItem> hashMap0 = new HashMap<String, PathItem>();
      openAPI1.webhooks(hashMap0);
      Reader reader0 = new Reader(openAPI1);
      Schema<io.swagger.v3.oas.models.ExternalDocumentation> schema0 = new Schema<io.swagger.v3.oas.models.ExternalDocumentation>();
      openAPI1.schema("3.1.0", schema0);
      reader0.getPaths();
      reader0.getPaths();
      reader0.getOpenAPI();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      reader0.resolveEmptyContent(produces0, produces0);
      reader0.ignoreOperationPath("", "");
      Operation operation0 = new Operation();
      Scopes scopes0 = new Scopes();
      reader0.applyPathParamsPatterns(operation0, scopes0);
      assertNull(operation0.getDescription());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.filterClass("Y`AbyE");
      Boolean boolean0 = Boolean.TRUE;
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.skipResolveAppPath(boolean0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.convertToOpenAPI31((Boolean) null);
      Reader reader0 = new Reader(swaggerConfiguration3);
      String string0 = reader0.resolveApplicationPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.scannerClass("20zaFgL");
      Boolean boolean0 = Boolean.FALSE;
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.sortOutput(boolean0);
      Schema<JsonToken> schema0 = new Schema<JsonToken>();
      schema0.getTypes();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.resourcePackages((Set<String>) null);
      swaggerConfiguration3.readerClass("20zaFgL");
      Reader reader0 = new Reader(swaggerConfiguration3);
      Integer integer0 = new Integer(5);
      schema0.maxProperties(integer0);
      Application application0 = new Application();
      reader0.setApplication(application0);
      boolean boolean1 = reader0.ignoreOperationPath((String) null, "20zaFgL");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI1 = openAPI0.addWebhooks("Cnl?<)RrU'&`N.D", pathItem0);
      Paths paths0 = new Paths();
      OpenAPI openAPI2 = openAPI1.paths(paths0);
      OpenAPI openAPI3 = openAPI2.webhooks(paths0);
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Components components0 = new Components();
      Components components1 = components0.pathItems(paths0);
      Server server0 = new Server();
      PathItem pathItem1 = pathItem0.addServersItem(server0);
      Components components2 = components1.addPathItem("#/components/schemas/", pathItem1);
      components0.getRequestBodies();
      Components components3 = components2.requestBodies((Map<String, RequestBody>) null);
      Reader reader0 = new Reader(openAPI3, paths0, linkedHashSet0, components3);
      boolean boolean0 = reader0.ignoreOperationPathStrict((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SecurityScheme securityScheme0 = new SecurityScheme();
      OpenAPI openAPI1 = openAPI0.schemaRequirement("repeatOn", securityScheme0);
      Tag tag0 = new Tag();
      OpenAPI openAPI2 = openAPI1.addTagsItem(tag0);
      Components components0 = new Components();
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      Components components1 = components0.addSchemas("repeatOn", schema0);
      OpenAPI openAPI3 = openAPI2.components(components1);
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem("com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator", pathItem0);
      XML xML0 = new XML();
      xML0.getExtensions();
      Paths paths2 = paths1.extensions((Map<String, Object>) null);
      Paths paths3 = paths2.extensions((Map<String, Object>) null);
      Paths paths4 = paths3.addPathItem("com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator", pathItem0);
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.readerClass("bind-type");
      Boolean boolean0 = new Boolean(true);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.alwaysResolveAppPath(boolean0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.userDefinedOptions((Map<String, Object>) null);
      Reader reader0 = new Reader(openAPI3, paths4, linkedHashSet0, components0, swaggerConfiguration3);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI1 = openAPI0.specVersion(specVersion0);
      OpenAPI openAPI2 = openAPI1.jsonSchemaDialect("");
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem("", pathItem0);
      Paths paths2 = paths1.addPathItem("", pathItem0);
      OpenAPI openAPI3 = openAPI2.paths(paths2);
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Components components0 = new Components();
      Header header0 = new Header();
      Components components1 = components0.addHeaders("", header0);
      components1.getParameters();
      Components components2 = components0.parameters((Map<String, Parameter>) null);
      components0.getRequestBodies();
      Components components3 = components2.requestBodies((Map<String, RequestBody>) null);
      Components components4 = components3.addLinks("#/components/schemas/", (Link) null);
      Reader reader0 = new Reader(openAPI3, paths2, hashSet0, components4);
      Paths paths3 = reader0.getPaths();
      assertSame(paths0, paths3);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Reader reader0 = new Reader();
      Parameter parameter0 = new Parameter();
      Operation operation0 = new Operation();
      Boolean boolean0 = new Boolean(true);
      Operation operation1 = operation0.deprecated(boolean0);
      Server server0 = new Server();
      Operation operation2 = operation1.addServersItem(server0);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Operation operation3 = operation2.callbacks(hashMap0);
      Vector<String> vector0 = new Vector<String>(0, 0);
      Operation operation4 = operation3.tags(vector0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      operation2.getParameters();
      Annotation[] annotationArray0 = new Annotation[0];
      Class<io.swagger.v3.oas.models.ExternalDocumentation> class0 = io.swagger.v3.oas.models.ExternalDocumentation.class;
      NamedType namedType0 = new NamedType(class0);
      Class<?> class1 = namedType0.getType();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      MediaType mediaType0 = new MediaType();
      Application application0 = new Application();
      Map<String, Object> map0 = application0.getProperties();
      MediaType mediaType1 = mediaType0.extensions(map0);
      MediaType mediaType2 = mediaType1.example(hashMap0);
      MediaType mediaType3 = mediaType2.schema((Schema) null);
      mediaType3.getEncoding();
      reader0.processRequestBody(parameter0, operation4, consumes0, consumes0, (List<Parameter>) null, annotationArray0, class1, jsonView0, (Map<String, Encoding>) null);
      Class<PathItem> class2 = PathItem.class;
      reader0.read(class2);
      Paths paths0 = reader0.getPaths();
      assertEquals(0, paths0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      ArrayList<Server> arrayList0 = new ArrayList<Server>();
      OpenAPI openAPI1 = openAPI0.servers(arrayList0);
      OpenAPI openAPI2 = openAPI1.tags((List<Tag>) null);
      Tag tag0 = new Tag();
      OpenAPI openAPI3 = openAPI2.addTagsItem(tag0);
      Server server0 = new Server();
      ServerVariables serverVariables0 = new ServerVariables();
      Server server1 = server0.variables(serverVariables0);
      Server server2 = server1.url("trace");
      Server server3 = server2.description("trace");
      ServerVariable serverVariable0 = new ServerVariable();
      FloatNode floatNode0 = new FloatNode(0.0F);
      List<String> list0 = floatNode0.findValuesAsText("Failed to create ReaderListener");
      ServerVariable serverVariable1 = serverVariable0._enum(list0);
      serverVariable1.getExtensions();
      floatNode0.asText((String) null);
      Server server4 = server3.extensions((Map<String, Object>) null);
      openAPI3.addServersItem(server4);
      Reader reader0 = new Reader(openAPI3);
      SpecVersion specVersion0 = SpecVersion.V30;
      openAPI3.setSpecVersion(specVersion0);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Content content0 = reader0.resolveEmptyContent(produces0, produces0);
      assertFalse(content0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Reader reader0 = new Reader();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Content content0 = reader0.resolveEmptyContent(produces0, produces0);
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      Schema<PathItem> schema1 = new Schema<PathItem>(specVersion0);
      schema0.set$ref("default response");
      schema0.then(schema1);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      // Undeclared exception!
      try { 
        reader0.processContent(content0, schema0, consumes0, consumes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      Operation operation0 = new Operation();
      operation0.getSecurity();
      OpenAPI openAPI1 = openAPI0.security((List<SecurityRequirement>) null);
      Components components0 = new Components();
      OpenAPI openAPI2 = openAPI1.components(components0);
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.options(operation0);
      pathItem1.getServers();
      OpenAPI openAPI3 = openAPI2.servers((List<Server>) null);
      Paths paths0 = new Paths();
      Paths paths1 = paths0.addPathItem("Uwir~}o+*gIugzsuGe", pathItem1);
      RequestBody requestBody0 = new RequestBody();
      requestBody0.getExtensions();
      Paths paths2 = paths1.extensions((Map<String, Object>) null);
      PathItem pathItem2 = pathItem1.delete(operation0);
      Paths paths3 = paths2.addPathItem((String) null, pathItem2);
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Reader reader0 = new Reader(openAPI3, paths3, linkedHashSet0, components0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Reader reader0 = new Reader();
      Operation operation0 = new Operation();
      RequestBody requestBody0 = new RequestBody();
      Operation operation1 = operation0.requestBody(requestBody0);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      Operation operation2 = operation1.externalDocs(externalDocumentation0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      securityScheme0.getExtensions();
      requestBody0.extensions((Map<String, Object>) null);
      Operation operation3 = operation2.addCallback("*/*", (Callback) null);
      Operation operation4 = operation3.operationId("*/*");
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(apiResponse0).useReturnTypeSchema();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponse0;
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      reader0.resolveResponseSchemaFromReturnType(operation4, apiResponseArray0, schema0, produces0, produces0);
      Schema<PathItem> schema1 = new Schema<PathItem>();
      Server server0 = new Server();
      Server server1 = server0.description(">=zc}Cah:w");
      operation3.addServersItem(server1);
      ArrayList<PathItem> arrayList0 = new ArrayList<PathItem>();
      Schema<PathItem> schema2 = schema1.examples(arrayList0);
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      reader0.resolveResponseSchemaFromReturnType(operation4, apiResponseArray0, schema2, produces1, produces1);
      reader0.getPaths();
      SpecVersion specVersion1 = SpecVersion.V30;
      Schema<PathItem> schema3 = new Schema<PathItem>(specVersion1);
      Produces produces2 = mock(Produces.class, new ViolatedAssumptionAnswer());
      reader0.resolveResponseSchemaFromReturnType(operation1, apiResponseArray0, schema3, produces2, produces2);
      Set<Tag> set0 = reader0.getOpenApiTags();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Reader reader0 = new Reader();
      boolean boolean0 = reader0.ignoreOperationPathStrict("8M'HbA#f3N~", "8M'HbA#f3N~");
      reader0.getOpenAPI();
      boolean boolean1 = reader0.ignoreOperationPathStrict("8M'HbA#f3N~", "11\"xu");
      assertFalse(boolean1);
      
      reader0.getPaths();
      reader0.ignoreOperationPath("8M'HbA#f3N~", "8M'HbA#f3N~");
      boolean boolean2 = reader0.ignoreOperationPath("", "8M'HbA#f3N~");
      assertFalse(boolean2 == boolean0);
      
      String string0 = reader0.getOperationId("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Components components0 = reader0.getComponents();
      assertNotNull(components0);
      
      String string1 = reader0.resolveApplicationPath();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Reader reader0 = new Reader();
      // Undeclared exception!
      try { 
        reader0.getSubResourceWithJaxRsSubresourceLocatorSpecs((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Reader reader0 = new Reader();
      reader0.setConfiguration((OpenAPIConfiguration) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Reader reader0 = new Reader();
      reader0.resolveApplicationPath();
      reader0.ignoreOperationPath((String) null, (String) null);
      reader0.getOperationId("");
      io.swagger.v3.oas.annotations.Parameter[] parameterArray0 = new io.swagger.v3.oas.annotations.Parameter[6];
      io.swagger.v3.oas.annotations.Parameter parameter0 = mock(io.swagger.v3.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn((io.swagger.v3.oas.annotations.media.Content[]) null).when(parameter0).content();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Operation operation0 = new Operation();
      ArrayList<Parameter> arrayList0 = new ArrayList<Parameter>();
      Operation operation1 = operation0.parameters(arrayList0);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      Operation operation2 = operation1.externalDocs(externalDocumentation0);
      Operation operation3 = operation2.operationId("");
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      apiResponse0.addExtension("W=/i @EERX", externalDocumentation0);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.description("9;EaE");
      apiResponses0.put("com.fasterxml.jackson.databind.ser.std.NumberSerializers", apiResponse1);
      Operation operation4 = operation3.responses(apiResponses0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.getParametersListFromAnnotation(parameterArray0, consumes0, (Consumes) null, operation4, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      OpenAPI openAPI1 = openAPI0.jsonSchemaDialect("");
      SecurityRequirement securityRequirement0 = new SecurityRequirement();
      OpenAPI openAPI2 = openAPI1.addSecurityItem(securityRequirement0);
      openAPI2.getTags();
      OpenAPI openAPI3 = openAPI2.tags((List<Tag>) null);
      Paths paths0 = new Paths();
      License license0 = new License();
      license0.getExtensions();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      Components components1 = components0.extensions((Map<String, Object>) null);
      Components components2 = components1.pathItems(paths1);
      Link link0 = new Link();
      Link link1 = link0.extensions((Map<String, Object>) null);
      Components components3 = components2.addLinks("", link1);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.id("");
      Boolean boolean0 = Boolean.valueOf(false);
      swaggerConfiguration1.skipResolveAppPath(boolean0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.readerClass("#/components/schemas/");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.userDefinedOptions((Map<String, Object>) null);
      Reader reader0 = new Reader(openAPI3, paths1, treeSet0, components3, swaggerConfiguration3);
      Application application0 = new Application();
      reader0.setApplication(application0);
      // Undeclared exception!
      try { 
        reader0.resolveApplicationPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Paths paths0 = new Paths();
      Components components0 = new Components();
      Header header0 = new Header();
      Components components1 = components0.addHeaders((String) null, header0);
      PathItem pathItem0 = new PathItem();
      Components components2 = components1.addPathItem("(+<N", pathItem0);
      Components components3 = components2.pathItems(paths0);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Schema<ForkJoinTask<PathItem>> schema0 = new Schema<ForkJoinTask<PathItem>>();
      schema0.getRequired();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.ignoredRoutes((Collection<String>) null);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.id("^34Yc");
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<PathItem> schema1 = new Schema<PathItem>(specVersion0);
      schema1.getReadOnly();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.sortOutput((Boolean) null);
      Reader reader0 = new Reader((OpenAPI) null, paths0, (Set<Tag>) null, components3, swaggerConfiguration3);
      Method method0 = null;
      Operation operation0 = new Operation();
      Operation operation1 = operation0.description("java.");
      Operation operation2 = operation1.tags((List<String>) null);
      LinkedList<SecurityRequirement> linkedList0 = new LinkedList<SecurityRequirement>();
      Operation operation3 = operation2.security(linkedList0);
      operation3.getParameters();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      Schema<JsonToken> schema2 = new Schema<JsonToken>();
      schema2.getExtensions();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation1 = externalDocumentation0.extensions((Map<String, Object>) null);
      Optional.ofNullable(externalDocumentation1);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      LinkedList<Server> linkedList1 = new LinkedList<Server>();
      boolean boolean0 = false;
      RequestBody requestBody0 = new RequestBody();
      requestBody0.description("#/components/schemas/");
      Content content0 = new Content();
      // Undeclared exception!
      try { 
        reader0.processContent(content0, schema0, consumes0, consumes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Reader reader0 = new Reader();
      boolean boolean0 = reader0.ignoreOperationPath("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI1 = openAPI0.path("com.fasterxml.jackson.databind.node.BooleanNode", pathItem0);
      Tag tag0 = new Tag();
      OpenAPI openAPI2 = openAPI1.addTagsItem(tag0);
      OpenAPI openAPI3 = openAPI2.addWebhooks("YH~.W\ts:7-`6%i", pathItem0);
      Paths paths0 = new Paths();
      Paths paths1 = paths0.addPathItem("com.fasterxml.jackson.databind.node.BooleanNode", pathItem0);
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Components components0 = new Components();
      Operation operation0 = new Operation();
      operation0.getCallbacks();
      Components components1 = components0.callbacks((Map<String, Callback>) null);
      Components components2 = components1.addLinks("#/components/schemas/", (Link) null);
      Components components3 = components2.addSecuritySchemes("#/components/schemas/", (SecurityScheme) null);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Boolean boolean0 = Boolean.valueOf(true);
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.openAPI31(boolean0);
      Boolean boolean1 = new Boolean("");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.readAllResources(boolean1);
      Long long0 = new Long(3295L);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.cacheTTL(long0);
      Reader reader0 = new Reader(openAPI3, paths1, linkedHashSet0, components3, swaggerConfiguration3);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Paths paths0 = new Paths();
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Components components0 = new Components();
      Components components1 = components0.addResponses("", (io.swagger.v3.oas.models.responses.ApiResponse) null);
      RequestBody requestBody0 = new RequestBody();
      Boolean boolean0 = new Boolean(true);
      RequestBody requestBody1 = requestBody0.required(boolean0);
      Components components2 = components1.addRequestBodies("#/components/schemas/", requestBody1);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      swaggerConfiguration0.getModelConverterClasses();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.resourcePackages((Set<String>) null);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.resourceClasses((Set<String>) null);
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      schema0.getExclusiveMinimum();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.convertToOpenAPI31((Boolean) null);
      Reader reader0 = new Reader((OpenAPI) null, paths0, hashSet0, components2, swaggerConfiguration3);
      Class<PathItem> class0 = PathItem.class;
      // Undeclared exception!
      try { 
        reader0.read(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.filterClass("");
      Long long0 = new Long(825L);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.cacheTTL(long0);
      swaggerConfiguration2.id("getApplication");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.skipResolveAppPath((Boolean) null);
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.prettyPrint((Boolean) null);
      Reader reader0 = new Reader(swaggerConfiguration4);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Reader reader0 = new Reader();
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(apiResponse0).useReturnTypeSchema();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponse0;
      apiResponseArray0[2] = apiResponse0;
      apiResponseArray0[3] = apiResponse0;
      apiResponseArray0[4] = apiResponse0;
      apiResponseArray0[5] = apiResponse0;
      apiResponseArray0[6] = apiResponse0;
      Schema<io.swagger.v3.oas.models.ExternalDocumentation> schema0 = new Schema<io.swagger.v3.oas.models.ExternalDocumentation>();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      reader0.resolveResponseSchemaFromReturnType((Operation) null, apiResponseArray0, schema0, produces0, produces0);
      assertNull(schema0.get$anchor());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Reader reader0 = new Reader();
      WildcardType wildcardType0 = WildcardTypeImpl.defaultInstance();
      Operation operation0 = new Operation();
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Stack<Parameter> stack0 = new Stack<Parameter>();
      operation0.setParameters(stack0);
      operation0.summary("");
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.getParameters(wildcardType0, (List<Annotation>) null, operation0, consumes0, consumes0, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.DefaultParameterExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Reader reader0 = new Reader(openAPI0);
      io.swagger.v3.oas.annotations.Operation operation0 = mock(io.swagger.v3.oas.annotations.Operation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(operation0).deprecated();
      doReturn((String) null).when(operation0).description();
      doReturn((String) null).when(operation0).operationId();
      doReturn((String) null).when(operation0).summary();
      doReturn((String[]) null).when(operation0).tags();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.setOperationObjectFromApiOperationAnnotation((Operation) null, operation0, produces0, produces0, consumes0, consumes0, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.trace(operation0);
      Paths paths1 = paths0.addPathItem("", pathItem1);
      Paths paths2 = paths1.addPathItem("bv[[|8$", pathItem1);
      Reader reader0 = new Reader();
      Set<Tag> set0 = reader0.getOpenApiTags();
      Components components0 = new Components();
      Header header0 = new Header();
      Components components1 = components0.addHeaders("default response", header0);
      ApiResponses apiResponses0 = new ApiResponses();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse("#/components/schemas/", apiResponse0);
      Discriminator discriminator0 = new Discriminator();
      discriminator0.getExtensions();
      ApiResponses apiResponses2 = apiResponses1.extensions((Map<String, Object>) null);
      Components components2 = components1.responses(apiResponses2);
      Components components3 = components2.addResponses("n%)iF&s0x`tf", apiResponse0);
      apiResponse0.getLinks();
      Components components4 = components3.links((Map<String, Link>) null);
      Reader reader1 = new Reader((OpenAPI) null, paths2, set0, components4, (OpenAPIConfiguration) null);
      assertFalse(reader1.equals((Object)reader0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      SecurityRequirement securityRequirement0 = new SecurityRequirement();
      SecurityRequirement securityRequirement1 = securityRequirement0.addList("A");
      SecurityRequirement securityRequirement2 = securityRequirement1.addList((String) null, (List<String>) null);
      SecurityRequirement securityRequirement3 = securityRequirement2.addList("A");
      OpenAPI openAPI1 = openAPI0.addSecurityItem(securityRequirement3);
      Tag tag0 = new Tag();
      OpenAPI openAPI2 = openAPI1.addTagsItem(tag0);
      Components components0 = new Components();
      components0.getPathItems();
      OpenAPI openAPI3 = openAPI2.webhooks((Map<String, PathItem>) null);
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem((String) null, pathItem0);
      Paths paths2 = paths1.addPathItem("%s_%d", pathItem0);
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.put(operation0);
      Paths paths3 = paths2.addPathItem(")7", pathItem1);
      Paths paths4 = paths3.extensions((Map<String, Object>) null);
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      MediaType mediaType0 = new MediaType();
      mediaType0.getExamples();
      Components components1 = components0.examples((Map<String, Example>) null);
      Reader reader0 = new Reader(openAPI3, paths2, linkedHashSet0, components1);
      Set<Tag> set0 = reader0.getOpenApiTags();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.scannerClass("#/components/schemas/");
      Boolean boolean0 = new Boolean((String) null);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.sortOutput(boolean0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.skipResolveAppPath(boolean0);
      Reader reader1 = new Reader(openAPI3, paths4, set0, components0, swaggerConfiguration3);
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI4 = reader0.read(class0);
      assertEquals("3.0.1", openAPI4.getOpenapi());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      OpenAPI openAPI1 = openAPI0.openapi((String) null);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples("", example0);
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters("", parameter0);
      Callback callback0 = new Callback();
      Callback callback1 = callback0.$ref("");
      PathItem pathItem0 = new PathItem();
      Callback callback2 = callback1.addPathItem("javax.ws.rs.", pathItem0);
      callback0.getExtensions();
      Callback callback3 = callback2.extensions((Map<String, Object>) null);
      Callback callback4 = callback3.addPathItem("$Br]uyw9az#eMC7Fhr", pathItem0);
      Components components3 = components2.addCallbacks("!", callback4);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components4 = components3.requestBodies(hashMap0);
      Reader reader0 = new Reader(openAPI1, (Paths) null, treeSet0, components4);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Reader reader0 = new Reader(openAPI0);
      reader0.getComponents();
      reader0.ignoreOperationPath("#/components/schemas/", "");
      Content content0 = new Content();
      Schema<PathItem> schema0 = new Schema<PathItem>();
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      // Undeclared exception!
      try { 
        reader0.processContent(content0, schema0, consumes0, consumes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      ArrayList<Tag> arrayList0 = new ArrayList<Tag>();
      OpenAPI openAPI1 = openAPI0.tags(arrayList0);
      openAPI0.setJsonSchemaDialect("");
      Components components0 = new Components();
      OpenAPI openAPI2 = openAPI1.components(components0);
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.options(operation0);
      components0.getRequestBodies();
      components0.requestBodies((Map<String, RequestBody>) null);
      OpenAPI openAPI3 = openAPI2.path("#/components/schemas/", pathItem1);
      operation0.getSecurity();
      openAPI2.security((List<SecurityRequirement>) null);
      Paths paths0 = new Paths();
      HashSet<Tag> hashSet0 = new HashSet<Tag>(arrayList0);
      Reader reader0 = new Reader(openAPI3, paths0, hashSet0, components0);
      reader0.getOperationId("patch");
      reader0.getPaths();
      reader0.getOpenAPI();
      reader0.ignoreOperationPathStrict("patch", "patch");
      Content content0 = new Content();
      SpecVersion specVersion1 = SpecVersion.V31;
      Schema<io.swagger.v3.oas.models.ExternalDocumentation> schema0 = new Schema<io.swagger.v3.oas.models.ExternalDocumentation>(specVersion1);
      Vector<io.swagger.v3.oas.models.ExternalDocumentation> vector0 = new Vector<io.swagger.v3.oas.models.ExternalDocumentation>();
      Schema<io.swagger.v3.oas.models.ExternalDocumentation> schema1 = schema0.examples(vector0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      // Undeclared exception!
      try { 
        reader0.processContent(content0, schema1, consumes0, consumes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.cacheTTL((Long) null);
      Boolean boolean0 = Boolean.TRUE;
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.sortOutput(boolean0);
      swaggerConfiguration2.scannerClass("Multiple 'any-setter' methods defined (%s vs %s)");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.filterClass("Multiple 'any-setter' methods defined (%s vs %s)");
      Reader reader0 = new Reader(swaggerConfiguration3);
      Operation operation0 = new Operation();
      SecurityRequirement securityRequirement0 = new SecurityRequirement();
      SecurityRequirement securityRequirement1 = securityRequirement0.addList("e~70}\"_'VM4#f{On2do");
      SecurityRequirement securityRequirement2 = securityRequirement1.addList((String) null);
      Operation operation1 = operation0.addSecurityItem(securityRequirement2);
      Callback callback0 = new Callback();
      Operation operation2 = operation1.addCallback("e~70}\"_'VM4#f{On2do", callback0);
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(apiResponse0).useReturnTypeSchema();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponse0;
      apiResponseArray0[2] = apiResponse0;
      apiResponseArray0[3] = apiResponse0;
      apiResponseArray0[4] = apiResponse0;
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<io.swagger.v3.oas.models.ExternalDocumentation> schema0 = new Schema<io.swagger.v3.oas.models.ExternalDocumentation>(specVersion0);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      reader0.resolveResponseSchemaFromReturnType(operation2, apiResponseArray0, schema0, produces0, produces0);
      Operation operation3 = new Operation();
      ApiResponse[] apiResponseArray1 = new ApiResponse[3];
      swaggerConfiguration2.id("void");
      ApiResponse apiResponse1 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(apiResponse1).useReturnTypeSchema();
      apiResponseArray1[0] = apiResponse1;
      apiResponseArray1[1] = apiResponse1;
      apiResponseArray1[2] = apiResponse1;
      Schema<io.swagger.v3.oas.models.ExternalDocumentation> schema1 = new Schema<io.swagger.v3.oas.models.ExternalDocumentation>();
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      reader0.resolveResponseSchemaFromReturnType(operation3, apiResponseArray1, schema1, produces1, produces1);
      assertFalse(operation3.equals((Object)operation1));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<io.swagger.v3.oas.models.ExternalDocumentation> schema0 = new Schema<io.swagger.v3.oas.models.ExternalDocumentation>(specVersion0);
      SpecVersion specVersion1 = SpecVersion.V30;
      Schema<PathItem> schema1 = new Schema<PathItem>(specVersion1);
      schema1.getPatternProperties();
      schema0.setPatternProperties((Map<String, Schema>) null);
      OpenAPI openAPI1 = openAPI0.schema("string", schema0);
      openAPI1.schema("F#R", schema0);
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.post(operation0);
      OpenAPI openAPI2 = openAPI1.addWebhooks("bind-type", pathItem1);
      Reader reader0 = new Reader(openAPI2);
      reader0.resolveApplicationPath();
      Application application0 = new Application();
      reader0.setApplication(application0);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Content content0 = reader0.resolveEmptyContent(produces0, produces0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      // Undeclared exception!
      try { 
        reader0.processContent(content0, schema0, consumes0, consumes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Reader reader0 = new Reader((OpenAPIConfiguration) null);
      reader0.getPaths();
      String string0 = reader0.getOperationId("Could not clone mediaType");
      assertNotNull(string0);
      assertEquals("Could not clone mediaType", string0);
      
      boolean boolean0 = reader0.ignoreOperationPath("Could not clone mediaType", "Could not clone mediaType");
      assertFalse(boolean0);
      
      reader0.getOpenApiTags();
      Parameter parameter0 = new Parameter();
      Boolean boolean1 = Boolean.TRUE;
      Parameter parameter1 = parameter0.allowEmptyValue(boolean1);
      Parameter parameter2 = parameter1.description("Could not clone mediaType");
      Parameter parameter3 = parameter2.name("*/*");
      Parameter parameter4 = parameter3.deprecated(boolean1);
      Operation operation0 = new Operation();
      PathItem pathItem0 = new PathItem();
      pathItem0.getServers();
      Operation operation1 = operation0.servers((List<Server>) null);
      Operation operation2 = operation1.description("+V");
      Vector<Parameter> vector0 = new Vector<Parameter>();
      Operation operation3 = operation2.parameters(vector0);
      Server server0 = new Server();
      Info info0 = new Info();
      info0.getExtensions();
      Server server1 = server0.extensions((Map<String, Object>) null);
      Server server2 = server1.description("Could not clone mediaType");
      Operation operation4 = operation3.addServersItem(server2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Annotation[] annotationArray0 = new Annotation[1];
      annotationArray0[0] = (Annotation) consumes0;
      Class<PathItem> class0 = PathItem.class;
      Class<PathItem> class1 = PathItem.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, class0);
      Class<?> class2 = objectIdGenerator_IdKey0.scope;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.extensions((Map<String, Object>) null);
      mediaType1.getEncoding();
      reader0.processRequestBody(parameter4, operation4, consumes0, consumes0, vector0, annotationArray0, class2, jsonView0, (Map<String, Encoding>) null);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Reader reader0 = new Reader();
      ApiResponse[] apiResponseArray0 = new ApiResponse[8];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(apiResponse0).useReturnTypeSchema();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponse0;
      apiResponseArray0[2] = apiResponse0;
      apiResponseArray0[3] = apiResponse0;
      apiResponseArray0[4] = apiResponse0;
      apiResponseArray0[5] = apiResponse0;
      apiResponseArray0[6] = apiResponse0;
      apiResponseArray0[7] = apiResponse0;
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      reader0.resolveResponseSchemaFromReturnType((Operation) null, apiResponseArray0, schema0, (Produces) null, (Produces) null);
      String string0 = reader0.resolveApplicationPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      swaggerConfiguration0.scannerClass("");
      Boolean boolean0 = Boolean.valueOf("MTh`Hv\"WE");
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.openAPI31(boolean0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.alwaysResolveAppPath(boolean0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.prettyPrint(boolean0);
      Reader reader0 = new Reader(swaggerConfiguration3);
      reader0.ignoreOperationPath("<*[,+rq", "Could not clone mediaType");
      Class<io.swagger.v3.oas.models.ExternalDocumentation> class0 = io.swagger.v3.oas.models.ExternalDocumentation.class;
      reader0.read(class0);
      boolean boolean1 = reader0.ignoreOperationPath("%s_%d", "MTh`Hv\"WE");
      assertFalse(boolean1);
      
      Discriminator discriminator0 = new Discriminator();
      discriminator0.getExtensions();
      swaggerConfiguration3.setUserDefinedOptions((Map<String, Object>) null);
      OpenAPI openAPI0 = reader0.getOpenAPI();
      assertEquals("3.0.1", openAPI0.getOpenapi());
      
      String string0 = reader0.getOperationId("%s_%d");
      assertNotNull(string0);
      assertEquals("%s_%d", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      swaggerConfiguration0.getUserDefinedOptions();
      OpenAPI openAPI1 = openAPI0.extensions((Map<String, Object>) null);
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem("o_8|4vKaf-JK}K|q", pathItem0);
      OpenAPI openAPI2 = openAPI1.paths(paths1);
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme securityScheme1 = securityScheme0.scheme("4+>p|L8U");
      OpenAPI openAPI3 = openAPI2.schemaRequirement("o_8|4vKaf-JK}K|q", securityScheme1);
      Reader reader0 = new Reader();
      Set<Tag> set0 = reader0.getOpenApiTags();
      Components components0 = new Components();
      Callback callback0 = new Callback();
      Callback callback1 = callback0.extensions((Map<String, Object>) null);
      Components components1 = components0.addCallbacks("default response", callback1);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      apiResponse0.getLinks();
      Components components2 = components1.links((Map<String, Link>) null);
      Components components3 = components2.addResponses(";9Ot*!T", apiResponse0);
      Reader reader1 = new Reader(openAPI3, paths1, set0, components3);
      io.swagger.v3.oas.annotations.Parameter[] parameterArray0 = new io.swagger.v3.oas.annotations.Parameter[8];
      io.swagger.v3.oas.annotations.Parameter parameter0 = mock(io.swagger.v3.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn((io.swagger.v3.oas.annotations.media.Content[]) null).when(parameter0).content();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      parameterArray0[7] = parameter0;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Operation operation0 = new Operation();
      Vector<SecurityRequirement> vector0 = new Vector<SecurityRequirement>();
      Operation operation1 = operation0.security(vector0);
      Operation operation2 = operation1.addTagsItem("");
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader1.getParametersListFromAnnotation(parameterArray0, consumes0, consumes1, operation2, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Reader reader0 = new Reader();
      Application application0 = new Application();
      Set<Class<?>> set0 = application0.getClasses();
      reader0.setApplication(application0);
      // Undeclared exception!
      try { 
        reader0.read(set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SecurityScheme securityScheme0 = new SecurityScheme();
      OpenAPI openAPI1 = openAPI0.schemaRequirement("Fca@Py!nbz:l1b`", securityScheme0);
      Schema<io.swagger.v3.oas.models.ExternalDocumentation> schema0 = new Schema<io.swagger.v3.oas.models.ExternalDocumentation>();
      OpenAPI openAPI2 = openAPI1.schema("com.fasterxml.jackson.databind.deser.BeanDeserializerFactory", schema0);
      Callback callback0 = new Callback();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Callback callback1 = callback0.extensions(hashMap0);
      OpenAPI openAPI3 = openAPI2.webhooks(callback1);
      Components components0 = new Components();
      Components components1 = components0.extensions(hashMap0);
      RequestBody requestBody0 = new RequestBody();
      Components components2 = components1.addRequestBodies("]", requestBody0);
      OpenAPI openAPI4 = openAPI3.components(components2);
      Reader reader0 = new Reader(openAPI4);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Reader reader0 = new Reader();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Json31.mapper();
      String string0 = "=7!|";
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.id("=7!|");
      swaggerConfiguration1.userDefinedOptions((Map<String, Object>) null);
      Long long0 = new Long((-126L));
      BaseSettings baseSettings0 = null;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = null;
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DatatypeFeatures datatypeFeatures0 = DatatypeFeatures.defaultFeatures();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0, datatypeFeatures0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-718));
      // Undeclared exception!
      try { 
        serializationConfig0.introspectClassAnnotations((JavaType) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI1 = openAPI0.specVersion(specVersion0);
      Paths paths0 = new Paths();
      OAuthFlow oAuthFlow0 = new OAuthFlow();
      oAuthFlow0.getExtensions();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      OpenAPI openAPI2 = openAPI1.paths(paths1);
      Server server0 = new Server();
      ServerVariables serverVariables0 = new ServerVariables();
      ServerVariable serverVariable0 = new ServerVariable();
      ServerVariables serverVariables1 = serverVariables0.addServerVariable((String) null, serverVariable0);
      Server server1 = server0.variables(serverVariables1);
      openAPI2.addServersItem(server1);
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Components components0 = new Components();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses("Kv", apiResponse0);
      Link link0 = new Link();
      Components components2 = components1.addLinks((String) null, link0);
      Map<String, Object> map0 = null;
      components2.extensions((Map<String, Object>) null);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      try { 
        Long.valueOf("~{@Z@HC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~{@Z@HC\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Reader reader0 = new Reader();
      ModelConverters.getInstance(true);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces1).value();
      reader0.resolveEmptyContent(produces1, produces1);
      reader0.resolveEmptyContent(produces0, produces0);
      reader0.getOperationId((String) null);
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI0 = reader0.read(class0);
      assertEquals("3.0.1", openAPI0.getOpenapi());
      
      reader0.resolveApplicationPath();
      boolean boolean0 = reader0.ignoreOperationPathStrict("z^HnBUJG", "GZ\"aM/");
      assertFalse(boolean0);
      
      String string0 = reader0.getOperationId("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.resourceClasses((Set<String>) null);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.cacheTTL((Long) null);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.filterClass("z^HnBUJG");
      Boolean boolean1 = Boolean.valueOf(true);
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.alwaysResolveAppPath(boolean1);
      reader0.setConfiguration(swaggerConfiguration4);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Reader reader0 = new Reader();
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI0 = reader0.read(class0);
      assertEquals("3.0.1", openAPI0.getOpenapi());
      
      Json31.mapper();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Content content0 = reader0.resolveEmptyContent(produces0, (Produces) null);
      boolean boolean0 = reader0.ignoreOperationPath("$$A>", "$$A>");
      assertFalse(boolean0);
      
      Operation operation0 = new Operation();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      Operation operation1 = operation0.externalDocs(externalDocumentation0);
      ApiResponses apiResponses0 = new ApiResponses();
      Operation operation2 = operation1.responses(apiResponses0);
      Operation operation3 = operation2.description("$$A>");
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<JsonToken> schema0 = new Schema<JsonToken>(specVersion0);
      schema0.getRequired();
      Operation operation4 = operation3.tags((List<String>) null);
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(apiResponse0).useReturnTypeSchema();
      apiResponseArray0[0] = apiResponse0;
      reader0.resolveResponseSchemaFromReturnType(operation4, apiResponseArray0, schema0, (Produces) null, (Produces) null);
      Parameter parameter0 = new Parameter();
      Boolean boolean1 = new Boolean(false);
      Parameter parameter1 = parameter0.explode(boolean1);
      Parameter.StyleEnum parameter_StyleEnum0 = Parameter.StyleEnum.LABEL;
      Parameter parameter2 = parameter1.style(parameter_StyleEnum0);
      Parameter parameter3 = parameter2.required(boolean1);
      Parameter parameter4 = parameter3.content(content0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      reader0.processRequestBody(parameter4, operation2, consumes0, consumes0, linkedList0, apiResponseArray0, class0, jsonView0, hashMap0);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      PathItem pathItem0 = new PathItem();
      OpenAPI openAPI1 = openAPI0.path("JsonIncludeProperties.Value(included=%s)", pathItem0);
      openAPI1.getSecurity();
      OpenAPI openAPI2 = openAPI1.security((List<SecurityRequirement>) null);
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI3 = openAPI2.specVersion(specVersion0);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components1 = components0.addSecuritySchemes("W56:~^55eI^", securityScheme0);
      RequestBody requestBody0 = new RequestBody();
      Components components2 = components1.addRequestBodies("VALUE_TRUE", requestBody0);
      Callback callback0 = new Callback();
      Components components3 = components2.addCallbacks("JsonIncludeProperties.Value(included=%s)", callback0);
      Reader reader0 = new Reader(openAPI3, (Paths) null, treeSet0, components3);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Boolean boolean0 = Boolean.FALSE;
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.sortOutput(boolean0);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.scannerClass((String) null);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.prettyPrint(boolean0);
      Reader reader0 = new Reader(swaggerConfiguration3);
      swaggerConfiguration2.getResourcePackages();
      swaggerConfiguration3.modelConverterClasses((Set<String>) null);
      reader0.ignoreOperationPath((String) null, (String) null);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Content content0 = reader0.resolveEmptyContent(produces0, produces0);
      Schema<PathItem> schema0 = new Schema<PathItem>();
      Schema<PathItem> schema1 = new Schema<PathItem>();
      schema0.additionalItems(schema1);
      Stack<PathItem> stack0 = new Stack<PathItem>();
      Schema<PathItem> schema2 = schema0.examples(stack0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      // Undeclared exception!
      try { 
        reader0.processContent(content0, schema2, consumes0, consumes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Reader reader0 = new Reader();
      reader0.resolveApplicationPath();
      reader0.getOpenApiTags();
      Application application0 = new Application();
      reader0.setApplication(application0);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Content content0 = reader0.resolveEmptyContent(produces0, produces0);
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      ArrayList<PathItem> arrayList0 = new ArrayList<PathItem>();
      Schema<PathItem> schema1 = schema0.examples(arrayList0);
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      operation0.getServers();
      PathItem pathItem1 = pathItem0.servers((List<Server>) null);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Operation operation1 = operation0.callbacks(hashMap0);
      PathItem pathItem2 = pathItem1.options(operation1);
      arrayList0.add(pathItem2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      // Undeclared exception!
      try { 
        reader0.processContent(content0, schema1, consumes0, consumes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI1 = openAPI0.specVersion(specVersion0);
      Tag tag0 = new Tag();
      OpenAPI openAPI2 = openAPI1.addTagsItem(tag0);
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      LinkedList<PathItem> linkedList0 = new LinkedList<PathItem>();
      Schema<PathItem> schema1 = schema0.examples(linkedList0);
      schema1.getExternalDocs();
      OpenAPI openAPI3 = openAPI2.externalDocs((io.swagger.v3.oas.models.ExternalDocumentation) null);
      Paths paths0 = new Paths();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Long long0 = new Long(0L);
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.cacheTTL(long0);
      swaggerConfiguration1.getUserDefinedOptions();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Components components0 = new Components();
      Components components1 = components0.pathItems(paths0);
      Example example0 = new Example();
      Components components2 = components1.addExamples("", example0);
      Components components3 = components2.addSchemas("", schema0);
      components1.getCallbacks();
      Components components4 = components3.callbacks((Map<String, Callback>) null);
      Reader reader0 = new Reader(openAPI3, paths1, hashSet0, components4, swaggerConfiguration0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      externalDocumentation0.getExtensions();
      OpenAPI openAPI1 = openAPI0.extensions((Map<String, Object>) null);
      openAPI1.getServers();
      OpenAPI openAPI2 = openAPI1.servers((List<Server>) null);
      LinkedList<SecurityRequirement> linkedList0 = new LinkedList<SecurityRequirement>();
      OpenAPI openAPI3 = openAPI2.security(linkedList0);
      Tag tag0 = new Tag();
      OpenAPI openAPI4 = openAPI3.addTagsItem(tag0);
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.delete(operation0);
      PathItem pathItem2 = pathItem1.get(operation0);
      Paths paths1 = paths0.addPathItem("7!%t}.NUP05\"!PCRg\"", pathItem2);
      Components components0 = new Components();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses("", apiResponse0);
      Header header0 = new Header();
      Components components2 = components1.addHeaders("", header0);
      components0.getCallbacks();
      Components components3 = components2.callbacks((Map<String, Callback>) null);
      Example example0 = new Example();
      Example example1 = example0.externalValue("");
      Example example2 = example1.extensions((Map<String, Object>) null);
      Components components4 = components3.addExamples("", example2);
      Reader reader0 = new Reader(openAPI4, paths1, (Set<Tag>) null, components4);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Stack<Tag> stack0 = new Stack<Tag>();
      OpenAPI openAPI1 = openAPI0.tags(stack0);
      Stack<SecurityRequirement> stack1 = new Stack<SecurityRequirement>();
      OpenAPI openAPI2 = openAPI1.security(stack1);
      OpenAPI openAPI3 = openAPI2.jsonSchemaDialect("o?aG.apK");
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem((String) null, pathItem0);
      Link link0 = new Link();
      link0.getExtensions();
      Paths paths2 = paths1.extensions((Map<String, Object>) null);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses("h!Y6gQ;|xFsch)F{!", apiResponse0);
      Components components2 = components1.responses((Map<String, io.swagger.v3.oas.models.responses.ApiResponse>) null);
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      Components components3 = components2.addSchemas((String) null, schema0);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.sortOutput((Boolean) null);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.userDefinedOptions((Map<String, Object>) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.resourceClasses(linkedHashSet0);
      Reader reader0 = new Reader(openAPI3, paths2, treeSet0, components3, swaggerConfiguration3);
      Paths paths3 = reader0.getPaths();
      assertSame(paths3, paths1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Reader reader0 = new Reader((OpenAPIConfiguration) null);
      ModelConverters.getInstance(true);
      reader0.ignoreOperationPath("", "");
      reader0.getComponents();
      reader0.getOpenAPI();
      ModelConverters.getInstance(false);
      reader0.ignoreOperationPath("ALLOW_NON_NUMERIC_NUMBERS", "~g|i7iS-E$$");
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      Content content0 = reader0.resolveEmptyContent(produces0, produces0);
      reader0.ignoreOperationPath("", "");
      reader0.setConfiguration((OpenAPIConfiguration) null);
      reader0.ignoreOperationPath("", "2)!e/-)Of0p^& wRU_");
      reader0.getPaths();
      SpecVersion specVersion0 = SpecVersion.V31;
      MediaType mediaType0 = new MediaType();
      OAuthFlows oAuthFlows0 = new OAuthFlows();
      oAuthFlows0.getExtensions();
      MediaType mediaType1 = mediaType0.extensions((Map<String, Object>) null);
      Object object0 = new Object();
      MediaType mediaType2 = mediaType1.example(object0);
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      MediaType mediaType3 = mediaType2.encoding(hashMap0);
      Encoding encoding0 = new Encoding();
      encoding0.getHeaders();
      Encoding encoding1 = encoding0.headers((Map<String, Header>) null);
      Encoding.StyleEnum encoding_StyleEnum0 = Encoding.StyleEnum.SPACE_DELIMITED;
      Encoding encoding2 = encoding1.style(encoding_StyleEnum0);
      MediaType mediaType4 = mediaType3.addEncoding("Insensitive", encoding2);
      content0.addMediaType("*/*", mediaType4);
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      ArrayList<PathItem> arrayList0 = new ArrayList<PathItem>();
      Schema<PathItem> schema1 = schema0.examples(arrayList0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes0).value();
      // Undeclared exception!
      try { 
        reader0.processContent(content0, schema1, consumes0, consumes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      OpenAPI openAPI1 = openAPI0.openapi("g#");
      Server server0 = new Server();
      OpenAPI openAPI2 = openAPI1.addServersItem(server0);
      PathItem pathItem0 = new PathItem();
      Parameter parameter0 = new Parameter();
      PathItem pathItem1 = pathItem0.addParametersItem(parameter0);
      pathItem1.getServers();
      PathItem pathItem2 = pathItem0.servers((List<Server>) null);
      OpenAPI openAPI3 = openAPI2.path("g#", pathItem2);
      Paths paths0 = new Paths();
      Paths paths1 = paths0.addPathItem("g#", pathItem1);
      PathItem pathItem3 = pathItem1.get((Operation) null);
      Paths paths2 = paths1.addPathItem((String) null, pathItem3);
      Encoding encoding0 = new Encoding();
      encoding0.getExtensions();
      Paths paths3 = paths2.extensions((Map<String, Object>) null);
      Paths paths4 = paths3.extensions((Map<String, Object>) null);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Reader reader0 = new Reader(swaggerConfiguration0);
      Set<Tag> set0 = reader0.getOpenApiTags();
      Components components0 = new Components();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      Components components1 = components0.addResponses("9/o?wan7s$,<", apiResponse0);
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Components components2 = components1.headers(hashMap0);
      components1.getParameters();
      Components components3 = components2.parameters((Map<String, Parameter>) null);
      Reader reader1 = new Reader(openAPI3, paths4, set0, components3);
      Paths paths5 = reader1.getPaths();
      assertSame(paths1, paths5);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Paths paths0 = new Paths();
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Tag tag0 = new Tag();
      Object object0 = new Object();
      tag0.addExtension("", object0);
      Tag tag1 = tag0.description("%s_%d");
      treeSet0.lower(tag1);
      TreeSet<Tag> treeSet1 = new TreeSet<Tag>((SortedSet<Tag>) treeSet0);
      PathItem pathItem0 = new PathItem();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      PathItem pathItem1 = pathItem0.parameters(linkedList0);
      Operation operation0 = new Operation();
      PathItem pathItem2 = pathItem1.trace(operation0);
      pathItem1.getExtensions();
      PathItem pathItem3 = pathItem2.extensions((Map<String, Object>) null);
      PathItem pathItem4 = pathItem3.description("apply");
      paths0.put("apply", pathItem4);
      Reader reader0 = new Reader((OpenAPI) null, paths0, treeSet1, (Components) null);
      reader0.ignoreOperationPath("", "");
      Paths paths1 = reader0.getPaths();
      assertSame(paths1, paths0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      SpecVersion specVersion1 = SpecVersion.V30;
      Schema<io.swagger.v3.oas.models.ExternalDocumentation> schema0 = new Schema<io.swagger.v3.oas.models.ExternalDocumentation>(specVersion1);
      OpenAPI openAPI1 = openAPI0.schema("Numeric value (%s) out of range of Java byte", schema0);
      Operation operation0 = new Operation();
      operation0.getSecurity();
      OpenAPI openAPI2 = openAPI1.security((List<SecurityRequirement>) null);
      PathItem pathItem0 = new PathItem();
      Server server0 = new Server();
      PathItem pathItem1 = pathItem0.addServersItem(server0);
      List<Server> list0 = pathItem1.getServers();
      OpenAPI openAPI3 = openAPI2.servers(list0);
      Paths paths0 = new Paths();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Paths paths1 = paths0.extensions(hashMap0);
      Paths paths2 = paths1.addPathItem("Numeric value (%s) out of range of Java byte", pathItem0);
      Paths paths3 = paths2.addPathItem("", pathItem1);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      HashMap<String, io.swagger.v3.oas.models.responses.ApiResponse> hashMap1 = new HashMap<String, io.swagger.v3.oas.models.responses.ApiResponse>();
      Components components1 = components0.responses(hashMap1);
      Components components2 = components1.addResponses("R^}o\"/1m|hA1fwF2p[", (io.swagger.v3.oas.models.responses.ApiResponse) null);
      Components components3 = components2.securitySchemes((Map<String, SecurityScheme>) null);
      MediaType mediaType0 = new MediaType();
      mediaType0.getExamples();
      Components components4 = components3.examples((Map<String, Example>) null);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.readerClass("#/components/schemas/");
      Boolean boolean0 = Boolean.valueOf(false);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.skipResolveAppPath(boolean0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.alwaysResolveAppPath(boolean0);
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.id("#/components/schemas/");
      Reader reader0 = new Reader(openAPI3, paths3, treeSet0, components4, swaggerConfiguration4);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.readerClass((String) null);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.modelConverterClasses(set0);
      OpenAPI openAPI0 = new OpenAPI();
      swaggerConfiguration1.setScannerClass("void");
      Schema<PathItem> schema0 = new Schema<PathItem>();
      OpenAPI openAPI1 = openAPI0.schema("void", schema0);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      openAPI1.externalDocs(externalDocumentation0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.openAPI(openAPI1);
      swaggerConfiguration3.setFilterClass((String) null);
      Reader reader0 = new Reader(swaggerConfiguration3);
      Class<TextStyle> class0 = TextStyle.class;
      Json.mapper();
      reader0.read(class0);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      reader0.resolveEmptyContent(produces0, produces0);
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces1).value();
      reader0.resolveEmptyContent(produces1, produces1);
      Method method0 = null;
      ArrayList<Parameter> arrayList0 = new ArrayList<Parameter>();
      Produces produces2 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = null;
      Stack<SecurityRequirement> stack0 = new Stack<SecurityRequirement>();
      Optional<io.swagger.v3.oas.models.ExternalDocumentation> optional0 = Optional.ofNullable(externalDocumentation0);
      Function<io.swagger.v3.oas.models.ExternalDocumentation, Optional<io.swagger.v3.oas.models.ExternalDocumentation>> function0 = (Function<io.swagger.v3.oas.models.ExternalDocumentation, Optional<io.swagger.v3.oas.models.ExternalDocumentation>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(io.swagger.v3.oas.models.ExternalDocumentation.class));
      // Undeclared exception!
      try { 
        optional0.flatMap((Function<? super io.swagger.v3.oas.models.ExternalDocumentation, Optional<io.swagger.v3.oas.models.ExternalDocumentation>>) function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.openAPI(openAPI0);
      Schema<PathItem> schema0 = new Schema<PathItem>();
      schema0.getUniqueItems();
      swaggerConfiguration0.sortOutput((Boolean) null);
      Boolean boolean0 = new Boolean("");
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme securityScheme1 = securityScheme0.scheme("n2`n2w }^4{}UJ{9z");
      Contact contact0 = new Contact();
      contact0.getExtensions();
      SecurityScheme securityScheme2 = securityScheme1.extensions((Map<String, Object>) null);
      SecurityScheme.In securityScheme_In0 = SecurityScheme.In.COOKIE;
      SecurityScheme securityScheme3 = securityScheme2.in(securityScheme_In0);
      SecurityScheme securityScheme4 = securityScheme3.description("bind-type");
      openAPI0.schemaRequirement("", securityScheme4);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.alwaysResolveAppPath(boolean0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.resourceClasses(set0);
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.readAllResources(boolean0);
      swaggerConfiguration4.modelConverterClasses(set0);
      swaggerConfiguration3.modelConverterClasses(set0);
      Reader reader0 = new Reader(swaggerConfiguration4);
      swaggerConfiguration4.defaultResponseCode("bind-type");
      reader0.getOpenAPI();
      boolean boolean1 = reader0.ignoreOperationPathStrict((String) null, (String) null);
      assertTrue(boolean1);
      
      reader0.resolveApplicationPath();
      String string0 = reader0.getOperationId("bind-type");
      assertEquals("bind-type", string0);
      assertNotNull(string0);
      
      reader0.getComponents();
      Application application0 = new Application();
      reader0.setApplication(application0);
      reader0.getOpenAPI();
      reader0.getOpenAPI();
      assertFalse(boolean0.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      OpenAPI openAPI1 = openAPI0.jsonSchemaDialect("");
      Components components0 = new Components();
      Components components1 = components0.addResponses("", (io.swagger.v3.oas.models.responses.ApiResponse) null);
      components1.getPathItems();
      OpenAPI openAPI2 = openAPI1.webhooks((Map<String, PathItem>) null);
      Reader reader0 = new Reader(openAPI2);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Info info0 = new Info();
      OpenAPI openAPI1 = openAPI0.info(info0);
      Paths paths0 = new Paths();
      openAPI0.getExtensions();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      PathItem pathItem0 = new PathItem();
      Paths paths2 = paths1.addPathItem(">^", pathItem0);
      Paths paths3 = paths2.extensions((Map<String, Object>) null);
      OpenAPI openAPI2 = openAPI1.paths(paths3);
      openAPI1.getServers();
      OpenAPI openAPI3 = openAPI2.servers((List<Server>) null);
      Reader reader0 = new Reader();
      Set<Tag> set0 = reader0.getOpenApiTags();
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      components0.equals((Object) null);
      pathItem0.summary("0rqJ");
      paths3.put(">^", pathItem0);
      Components components1 = components0.responses(apiResponses0);
      Components components2 = components1.addPathItem("#/components/schemas/", pathItem0);
      Components components3 = components2.requestBodies((Map<String, RequestBody>) null);
      components3.setRequestBodies((Map<String, RequestBody>) null);
      Reader reader1 = new Reader(openAPI3, paths3, set0, components3);
      reader1.getOpenAPI();
      components2.setResponses(apiResponses0);
      boolean boolean0 = reader0.ignoreOperationPath("default response", "[");
      assertFalse(boolean0);
  }

  // @Test(timeout = 4000)
  // public void test166()  throws Throwable  {
  //     Reader reader0 = new Reader();
  //     reader0.getOperationId("scZvB");
  //     Operation operation0 = new Operation();
  //     io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
  //     Operation operation1 = operation0.externalDocs(externalDocumentation0);
  //     Operation operation2 = operation1.operationId("scZvB");
  //     Parameter parameter0 = new Parameter();
  //     Schema<Object> schema0 = new Schema<Object>();
  //     Parameter parameter1 = parameter0.schema(schema0);
  //     Operation operation3 = operation2.addParametersItem(parameter1);
  //     Vector<SecurityRequirement> vector0 = new Vector<SecurityRequirement>();
  //     SpecVersion specVersion0 = SpecVersion.V30;
  //     Schema<Class<WritableTypeId.Inclusion>> schema1 = new Schema<Class<WritableTypeId.Inclusion>>(specVersion0);
  //     Stack<Class<WritableTypeId.Inclusion>> stack0 = new Stack<Class<WritableTypeId.Inclusion>>();
  //     stack0.removeAll(vector0);
  //     Schema<Class<WritableTypeId.Inclusion>> schema2 = schema1.examples(stack0);
  //     schema2.getAllOf();
  //     schema0.prefixItems((List<Schema>) null);
  //     Operation operation4 = operation3.security(vector0);
  //     Map<String, String> map0 = ZoneId.SHORT_IDS;
  //     reader0.applyPathParamsPatterns(operation4, map0);
  //     Method method0 = null;
  //     PathItem pathItem0 = new PathItem();
  //     PathItem pathItem1 = pathItem0.options(operation0);
  //     PathItem pathItem2 = pathItem1.get(operation1);
  //     PathItem pathItem3 = pathItem2.trace(operation4);
  //     pathItem3.getParameters();
  //     JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
  //     // Undeclared exception!
  //     try { 
  //       reader0.parseMethod((Method) null, (List<Parameter>) null, jsonView0);
  //       fail("Expecting exception: NullPointerException");
  //     
  //     } catch(NullPointerException e) {
  //        //
  //        // no message in exception (getMessage() returned null)
  //        //
  //        verifyException("io.swagger.v3.jaxrs2.Reader", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      SecurityRequirement securityRequirement0 = new SecurityRequirement();
      OpenAPI openAPI1 = openAPI0.addSecurityItem(securityRequirement0);
      PathItem pathItem0 = new PathItem();
      openAPI1.openapi("^H98R(J4Ulgx%e,87");
      OpenAPI openAPI2 = openAPI1.addWebhooks((String) null, pathItem0);
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<Object> schema0 = new Schema<Object>(specVersion0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Schema<Object> schema1 = schema0.examples(arrayList0);
      OpenAPI openAPI3 = openAPI2.schema("Failed to create ReaderListener", schema1);
      OpenAPI openAPI4 = openAPI3.openapi("bind-type");
      Reader reader0 = new Reader(openAPI4);
      reader0.getOperationId((String) null);
      pathItem0.getExtensions();
      openAPI3.setExtensions((Map<String, Object>) null);
      io.swagger.v3.oas.annotations.Operation operation0 = mock(io.swagger.v3.oas.annotations.Operation.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(operation0).deprecated();
      doReturn((String) null).when(operation0).description();
      doReturn((String) null).when(operation0).operationId();
      doReturn((String) null).when(operation0).summary();
      doReturn((String[]) null).when(operation0).tags();
      Application application0 = new Application();
      reader0.setApplication(application0);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.setOperationObjectFromApiOperationAnnotation((Operation) null, operation0, produces0, produces0, (Consumes) null, (Consumes) null, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      OpenAPI openAPI1 = openAPI0.jsonSchemaDialect((String) null);
      Info info0 = new Info();
      OpenAPI openAPI2 = openAPI1.info(info0);
      OpenAPI openAPI3 = openAPI2.addServersItem((Server) null);
      Paths paths0 = new Paths();
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Components components0 = new Components();
      components0.getSchemas();
      Components components1 = components0.schemas((Map<String, Schema>) null);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components2 = components1.parameters(hashMap0);
      Header header0 = new Header();
      Schema<Object> schema0 = new Schema<Object>();
      Header header1 = header0.schema(schema0);
      Components components3 = components2.addHeaders("delete", header1);
      Reader reader0 = new Reader(openAPI3, paths0, linkedHashSet0, components3);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Reader reader0 = new Reader();
      reader0.resolveApplicationPath();
      String string0 = reader0.getOperationId((String) null);
      assertNull(string0);
      
      boolean boolean0 = reader0.ignoreOperationPathStrict("", "com.fasterxml.jackson.databind.cfg.ContextAttributes");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      OpenAPI openAPI1 = openAPI0.externalDocs(externalDocumentation0);
      Schema<PathItem> schema0 = new Schema<PathItem>();
      Object object0 = new Object();
      externalDocumentation0.addExtension31("delete", object0);
      OpenAPI openAPI2 = openAPI1.schema("dJEm5?", schema0);
      PathItem pathItem0 = new PathItem();
      pathItem0.getServers();
      OpenAPI openAPI3 = openAPI2.servers((List<Server>) null);
      OpenAPI openAPI4 = openAPI3.addWebhooks("dJEm5?", pathItem0);
      Reader reader0 = new Reader(openAPI4);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Annotation[] annotationArray0 = new Annotation[5];
      annotationArray0[0] = (Annotation) consumes1;
      annotationArray0[1] = (Annotation) consumes1;
      annotationArray0[2] = (Annotation) consumes0;
      annotationArray0[3] = (Annotation) consumes1;
      annotationArray0[4] = (Annotation) consumes1;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.schema(schema0);
      mediaType1.getEncoding();
      // Undeclared exception!
      try { 
        reader0.processRequestBody((Parameter) null, (Operation) null, consumes0, consumes1, (List<Parameter>) null, annotationArray0, (Type) null, jsonView0, (Map<String, Encoding>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      apiResponse0.getExtensions();
      OpenAPI openAPI1 = openAPI0.extensions((Map<String, Object>) null);
      OpenAPI openAPI2 = openAPI1.openapi("(kHZ3O~F!6");
      OpenAPI openAPI3 = openAPI2.specVersion(specVersion0);
      Reader reader0 = new Reader(openAPI3);
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.delete(operation0);
      PathItem pathItem2 = pathItem1.summary("");
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      PathItem pathItem3 = pathItem2.servers(linkedList0);
      Stack<Parameter> stack0 = new Stack<Parameter>();
      PathItem pathItem4 = pathItem3.parameters(stack0);
      openAPI1.path("*/*", pathItem4);
      reader0.ignoreOperationPath("(kHZ3O~F!6", (String) null);
      reader0.getComponents();
      Paths paths0 = reader0.getPaths();
      assertTrue(paths0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      JsonFormat.Feature[] jsonFormat_FeatureArray0 = new JsonFormat.Feature[1];
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      jsonFormat_FeatureArray0[0] = jsonFormat_Feature0;
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.construct(jsonFormat_FeatureArray0, jsonFormat_FeatureArray0);
      swaggerConfiguration0.readerClass("");
      Boolean boolean0 = Boolean.valueOf("");
      JsonFormat.Features jsonFormat_Features1 = JsonFormat.Features.empty();
      jsonFormat_Features0.withOverrides(jsonFormat_Features1);
      swaggerConfiguration0.convertToOpenAPI31(boolean0);
      jsonFormat_Features0.get(jsonFormat_Feature0);
      JsonFormat.Feature jsonFormat_Feature1 = JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      jsonFormat_Features0.get(jsonFormat_Feature1);
      swaggerConfiguration0.openAPI31((Boolean) null);
      Reader reader0 = new Reader(swaggerConfiguration0);
      reader0.resolveApplicationPath();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces1).value();
      reader0.resolveEmptyContent(produces0, produces1);
      reader0.ignoreOperationPath("", "WRITE_NULL_MAP_VALUES");
      OpenAPI openAPI0 = reader0.getOpenAPI();
      assertEquals("3.0.1", openAPI0.getOpenapi());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      openAPI0.getTags();
      OpenAPI openAPI1 = openAPI0.tags((List<Tag>) null);
      SpecVersion specVersion0 = SpecVersion.V30;
      OpenAPI openAPI2 = openAPI1.specVersion(specVersion0);
      Server server0 = new Server();
      server0.getExtensions();
      Server server1 = server0.extensions((Map<String, Object>) null);
      OpenAPI openAPI3 = openAPI2.addServersItem(server1);
      Schema<PathItem> schema0 = new Schema<PathItem>();
      OpenAPI openAPI4 = openAPI3.schema("Y^#V", schema0);
      HashSet<Tag> hashSet0 = new HashSet<Tag>();
      Components components0 = new Components();
      Link link0 = new Link();
      Components components1 = components0.addLinks("zd[shsD-DCDBn0\"?Aui", link0);
      PathItem pathItem0 = new PathItem();
      Components components2 = components1.addPathItem("getApplication", pathItem0);
      Components components3 = components2.extensions((Map<String, Object>) null);
      Header header0 = new Header();
      Boolean boolean0 = Boolean.FALSE;
      Header header1 = header0.deprecated(boolean0);
      Header header2 = header1.example("Y^#V");
      Components components4 = components3.addHeaders("class LinkParameter {\n", header2);
      Reader reader0 = new Reader(openAPI4, (Paths) null, hashSet0, components4);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      openAPI0.getServers();
      OpenAPI openAPI1 = openAPI0.servers((List<Server>) null);
      PathItem pathItem0 = new PathItem();
      openAPI0.getServers();
      PathItem pathItem1 = pathItem0.servers((List<Server>) null);
      OpenAPI openAPI2 = openAPI1.addWebhooks("", pathItem1);
      Paths paths0 = new Paths();
      Tag tag0 = new Tag();
      tag0.getExtensions();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      Paths paths2 = paths1.extensions((Map<String, Object>) null);
      Reader reader0 = new Reader(openAPI1);
      Set<Tag> set0 = reader0.getOpenApiTags();
      Components components0 = new Components();
      io.swagger.v3.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.v3.oas.models.responses.ApiResponse();
      apiResponse0.getLinks();
      Components components1 = components0.links((Map<String, Link>) null);
      Schema<PathItem> schema0 = new Schema<PathItem>();
      schema0.getPatternProperties();
      Components components2 = components1.schemas((Map<String, Schema>) null);
      Link link0 = new Link();
      Components components3 = components0.addLinks("com.fasterxml.jackson.annotation.JsonProperty$Access", link0);
      components3.getCallbacks();
      Components components4 = components2.callbacks((Map<String, Callback>) null);
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.readerClass("w>Lhq`j&:Bv");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.userDefinedOptions((Map<String, Object>) null);
      Boolean boolean0 = Boolean.valueOf("#/components/schemas/");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.sortOutput(boolean0);
      Reader reader1 = new Reader(openAPI2, paths2, set0, components4, swaggerConfiguration3);
      Components components5 = reader1.getComponents();
      assertSame(components5, components0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      OpenAPI openAPI1 = openAPI0.webhooks((Map<String, PathItem>) null);
      OpenAPI openAPI2 = openAPI1.schemaRequirement(") has not properly overridden method 'withAdditionalSerializers': cannot instantiate subtype with additional serializer definitions", (SecurityScheme) null);
      OpenAPI openAPI3 = openAPI2.openapi(") has not properly overridden method 'withAdditionalSerializers': cannot instantiate subtype with additional serializer definitions");
      LinkedList<Tag> linkedList0 = new LinkedList<Tag>();
      OpenAPI openAPI4 = openAPI3.tags(linkedList0);
      Reader reader0 = new Reader(openAPI4);
      reader0.resolveApplicationPath();
      License license0 = new License();
      license0.getExtensions();
      openAPI4.extensions((Map<String, Object>) null);
      boolean boolean0 = reader0.ignoreOperationPath("3.v79O_yM", "3.v79O_yM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      swaggerConfiguration0.getUserDefinedOptions();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.userDefinedOptions((Map<String, Object>) null);
      swaggerConfiguration1.readerClass("org.apache.commons.io.file.StandardDeleteOption");
      try { 
        Long.valueOf("org.apache.commons.io.file.StandardDeleteOption");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.io.file.StandardDeleteOption\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      OpenAPI openAPI1 = openAPI0.openapi("org.glassfish.jersey.logging.LoggingInterceptor$RedactHeaderPredicate");
      OpenAPI openAPI2 = openAPI1.addSecurityItem((SecurityRequirement) null);
      Paths paths0 = new Paths();
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Reader reader0 = new Reader(openAPI1, paths0, treeSet0, components0, swaggerConfiguration0);
      Set<Tag> set0 = reader0.getOpenApiTags();
      Reader reader1 = new Reader(openAPI2, paths0, set0, components0);
      assertFalse(reader1.equals((Object)reader0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Reader reader0 = new Reader();
      Application application0 = new Application();
      application0.getClasses();
      reader0.setApplication(application0);
      TypeFactory.defaultInstance();
      Class<PathItem> class0 = PathItem.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class io.swagger.v3.oas.models.PathItem with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.scannerClass("v");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.filterClass("path");
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.empty();
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
      jsonFormat_Features0.get(jsonFormat_Feature0);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.sortOutput((Boolean) null);
      HashMap<PathItem, String> hashMap0 = new HashMap<PathItem, String>();
      Collection<String> collection0 = hashMap0.values();
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.ignoredRoutes(collection0);
      Reader reader0 = new Reader(swaggerConfiguration4);
      swaggerConfiguration4.setIgnoredRoutes(collection0);
      reader0.resolveApplicationPath();
      reader0.ignoreOperationPathStrict("'2[", "v");
      Application application0 = new Application();
      reader0.setApplication(application0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Reader reader0 = new Reader();
      Parameter parameter0 = new Parameter();
      Info info0 = new Info();
      info0.getExtensions();
      Parameter parameter1 = parameter0.extensions((Map<String, Object>) null);
      Boolean boolean0 = new Boolean(true);
      Parameter parameter2 = parameter1.required(boolean0);
      Parameter parameter3 = parameter2.allowEmptyValue(boolean0);
      parameter3.$ref("*/*");
      Vector<Parameter> vector0 = new Vector<Parameter>();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.parseMethod((Method) null, (List<Parameter>) vector0, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Info info0 = new Info();
      OpenAPI openAPI1 = openAPI0.info(info0);
      XML xML0 = new XML();
      xML0.getExtensions();
      OpenAPI openAPI2 = openAPI1.extensions((Map<String, Object>) null);
      Paths paths0 = new Paths();
      PathItem pathItem0 = new PathItem();
      Paths paths1 = paths0.addPathItem("%s_%d", pathItem0);
      Paths paths2 = paths1.extensions((Map<String, Object>) null);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components1 = components0.callbacks(hashMap0);
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      Components components2 = components1.addSchemas("#/components/schemas/", schema0);
      Components components3 = components2.examples((Map<String, Example>) null);
      Reader reader0 = new Reader(openAPI2, paths2, treeSet0, components3);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Schema<JsonToken> schema0 = new Schema<JsonToken>();
      schema0.getTypes();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.modelConverterClasses((Set<String>) null);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.objectMapperProcessorClass("bind-type");
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.resourceClasses((Set<String>) null);
      schema0.dependentRequired((Map<String, List<String>>) null);
      SwaggerConfiguration swaggerConfiguration4 = swaggerConfiguration3.resourcePackages((Set<String>) null);
      Reader reader0 = new Reader(swaggerConfiguration4);
      reader0.resolveApplicationPath();
      Class<PathItem> class0 = PathItem.class;
      OpenAPI openAPI0 = reader0.read(class0);
      assertEquals("3.0.1", openAPI0.getOpenapi());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Reader reader0 = new Reader();
      Application application0 = new Application();
      application0.getClasses();
      Set<Class<?>> set0 = application0.getClasses();
      reader0.setApplication(application0);
      Map<String, Object> map0 = application0.getProperties();
      // Undeclared exception!
      try { 
        reader0.read(set0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      OpenAPI openAPI1 = openAPI0.addTagsItem((Tag) null);
      Schema<PathItem> schema0 = new Schema<PathItem>();
      openAPI1.schema("", schema0);
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI2 = openAPI1.specVersion(specVersion0);
      PathItem pathItem0 = new PathItem();
      Parameter parameter0 = new Parameter();
      PathItem pathItem1 = pathItem0.addParametersItem(parameter0);
      OpenAPI openAPI3 = openAPI2.addWebhooks("", pathItem1);
      Paths paths0 = new Paths();
      Server server0 = new Server();
      server0.getExtensions();
      Paths paths1 = paths0.extensions((Map<String, Object>) null);
      Paths paths2 = paths1.addPathItem("Sa9@\":", pathItem0);
      Paths paths3 = paths2.extensions((Map<String, Object>) null);
      TreeSet<Tag> treeSet0 = new TreeSet<Tag>();
      Components components0 = new Components();
      Header header0 = new Header();
      header0.getExamples();
      Components components1 = components0.examples((Map<String, Example>) null);
      Reader reader0 = new Reader(openAPI3, paths3, treeSet0, components1);
      Class<PathItem> class0 = PathItem.class;
      reader0.read(class0);
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(produces0).value();
      reader0.resolveEmptyContent(produces0, produces0);
      Class<Object> class1 = Object.class;
      reader0.read(class1);
      reader0.resolveApplicationPath();
      assertEquals("3.0.1", openAPI3.getOpenapi());
      assertEquals("3.0.1", openAPI0.getOpenapi());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.filterClass("-D%#0.::HyK3iN~>j");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      swaggerConfiguration1.setResourcePackages(treeSet0);
      Boolean boolean0 = new Boolean("*/*");
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.convertToOpenAPI31(boolean0);
      Tag tag0 = new Tag();
      tag0.getExtensions();
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.userDefinedOptions((Map<String, Object>) null);
      Reader reader0 = new Reader(swaggerConfiguration3);
      swaggerConfiguration3.setIgnoredRoutes(treeSet0);
      boolean boolean1 = reader0.ignoreOperationPathStrict("Parser of type ", "*/*");
      swaggerConfiguration3.resourceClasses(treeSet0);
      reader0.resolveApplicationPath();
      boolean boolean2 = reader0.ignoreOperationPathStrict("Parser of type ", "");
      assertTrue(boolean2 == boolean1);
      
      reader0.setConfiguration(swaggerConfiguration3);
      Schema<PathItem> schema0 = new Schema<PathItem>();
      LinkedList<PathItem> linkedList0 = new LinkedList<PathItem>();
      Schema<PathItem> schema1 = schema0.examples(linkedList0);
      schema1.getExternalDocs();
      tag0.setExternalDocs((io.swagger.v3.oas.models.ExternalDocumentation) null);
      reader0.getPaths();
      reader0.getOpenAPI();
      assertTrue(boolean0.equals((Object)boolean2));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      OpenAPI openAPI0 = new OpenAPI();
      Vector<SecurityRequirement> vector0 = new Vector<SecurityRequirement>();
      OpenAPI openAPI1 = openAPI0.security(vector0);
      openAPI0.getTags();
      OpenAPI openAPI2 = openAPI1.tags((List<Tag>) null);
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<PathItem> schema0 = new Schema<PathItem>(specVersion0);
      ArrayList<PathItem> arrayList0 = new ArrayList<PathItem>();
      Schema<PathItem> schema1 = schema0.examples(arrayList0);
      OpenAPI openAPI3 = openAPI2.schema(";W>([/U!!2B*J!{", schema1);
      Vector<Server> vector1 = new Vector<Server>();
      OpenAPI openAPI4 = openAPI3.servers(vector1);
      Paths paths0 = new Paths();
      LinkedHashSet<Tag> linkedHashSet0 = new LinkedHashSet<Tag>();
      Reader reader0 = new Reader(openAPI4, paths0, linkedHashSet0, (Components) null);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Reader reader0 = new Reader();
      reader0.getOpenAPI();
      io.swagger.v3.oas.annotations.Parameter[] parameterArray0 = new io.swagger.v3.oas.annotations.Parameter[7];
      io.swagger.v3.oas.annotations.Parameter parameter0 = mock(io.swagger.v3.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn((io.swagger.v3.oas.annotations.media.Content[]) null).when(parameter0).content();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Operation operation0 = new Operation();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Operation operation1 = operation0.tags(linkedList0);
      ArrayList<SecurityRequirement> arrayList0 = new ArrayList<SecurityRequirement>();
      Operation operation2 = operation1.security(arrayList0);
      Operation operation3 = operation2.description("*/*");
      Operation operation4 = operation3.externalDocs((io.swagger.v3.oas.models.ExternalDocumentation) null);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reader0.getParametersListFromAnnotation(parameterArray0, consumes0, consumes0, operation4, jsonView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SpecVersion specVersion0 = SpecVersion.V31;
      OpenAPI openAPI0 = new OpenAPI(specVersion0);
      openAPI0.getTags();
      OpenAPI openAPI1 = openAPI0.tags((List<Tag>) null);
      Callback callback0 = new Callback();
      Callback callback1 = callback0.$ref("%P.D>_u*Wx`7");
      OpenAPI openAPI2 = openAPI1.webhooks(callback1);
      OpenAPI openAPI3 = openAPI2.specVersion(specVersion0);
      Reader reader0 = new Reader();
      Set<Tag> set0 = reader0.getOpenApiTags();
      Components components0 = new Components();
      SwaggerConfiguration swaggerConfiguration0 = new SwaggerConfiguration();
      Boolean boolean0 = Boolean.FALSE;
      SwaggerConfiguration swaggerConfiguration1 = swaggerConfiguration0.openAPI31(boolean0);
      Boolean boolean1 = new Boolean(true);
      SwaggerConfiguration swaggerConfiguration2 = swaggerConfiguration1.sortOutput(boolean1);
      SwaggerConfiguration swaggerConfiguration3 = swaggerConfiguration2.convertToOpenAPI31(boolean1);
      Reader reader1 = new Reader(openAPI3, (Paths) null, set0, components0, swaggerConfiguration3);
      assertFalse(reader1.equals((Object)reader0));
  }
}
