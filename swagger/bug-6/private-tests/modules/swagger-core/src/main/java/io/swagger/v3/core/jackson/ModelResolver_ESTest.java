/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 03 05:55:54 GMT 2023
 */

package io.swagger.v3.core.jackson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.CoercionConfigs;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ConstructorDetector;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.PropertyFilter;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.LogicalType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.LookupCache;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.google.common.collect.BoundType;
import io.swagger.v3.core.converter.AnnotatedType;
import io.swagger.v3.core.converter.ModelConverter;
import io.swagger.v3.core.converter.ModelConverterContext;
import io.swagger.v3.core.converter.ModelConverterContextImpl;
import io.swagger.v3.core.jackson.ModelResolver;
import io.swagger.v3.core.jackson.TypeNameResolver;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.extensions.Extension;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.models.SpecVersion;
import io.swagger.v3.oas.models.media.Discriminator;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.URI;
import java.text.DateFormat;
import java.time.DayOfWeek;
import java.time.Month;
import java.time.chrono.HijrahEra;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceConfigurationError;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Function;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModelResolver_ESTest extends ModelResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
      JsonSetter jsonSetter0 = mock(JsonSetter.class, new ViolatedAssumptionAnswer());
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      JsonSetter.Value jsonSetter_Value1 = JsonSetter.Value.merge(jsonSetter_Value0, jsonSetter_Value0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultSetterInfo(jsonSetter_Value1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getJsonValueAccessor();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      beanDeserializerBuilder0.getBuildMethod();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(schema0).maxLength();
      modelResolver0.resolveMaxLength((Annotated) null, annotationArray0, schema0);
      modelResolver0.objectMapper();
      modelResolver0.findJsonValueType(basicBeanDescription0);
      AnnotatedType annotatedType0 = new AnnotatedType((Type) null);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema0).uniqueItems();
      Boolean boolean0 = modelResolver0.resolveUniqueItems(annotatedType0, arraySchema0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      AnnotatedType annotatedType2 = annotatedType1.parent(schema0);
      annotatedType0.getJsonUnwrappedHandler();
      AnnotatedType annotatedType3 = annotatedType2.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType4 = annotatedType3.resolveAsRef(false);
      // Undeclared exception!
      try { 
        modelResolver0.hiddenByJsonView((Annotation[]) null, annotatedType4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<Void> class0 = Void.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.propertyName("hcTY&@K8)`");
      annotatedType0.getJsonUnwrappedHandler();
      AnnotatedType annotatedType2 = annotatedType1.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      AnnotatedType annotatedType3 = annotatedType2.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType4 = annotatedType3.type(class0);
      ArrayList<ModelConverter> arrayList0 = new ArrayList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(arrayList0);
      // Undeclared exception!
      try { 
        modelResolver0.resolve(annotatedType4, modelConverterContextImpl0, (Iterator<ModelConverter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonParser_Feature2, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      // Undeclared exception!
      try { 
        modelResolver0.resolveIgnoredProperties((Annotations) null, (Annotation[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      objectMapper0.isEnabled(jsonFactory_Feature0);
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider((FilterProvider) null);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "Oieo2 H5$A</@=");
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultAttributes(contextAttributes0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper4 = objectMapper3.disable(serializationFeature0, serializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      Annotation[] annotationArray0 = new Annotation[0];
      // Undeclared exception!
      try { 
        modelResolver0.hiddenByJsonView(annotationArray0, (AnnotatedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      objectMapper1.writer(serializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      annotationIntrospector1.findRootName((AnnotatedClass) null);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).exclusiveMaximum();
      modelResolver0.resolveExclusiveMaximum((Annotated) null, annotationArray0, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema1).allowableValues();
      modelResolver0.resolveAllowableValues((Annotated) null, annotationArray0, schema1);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema2 = new io.swagger.v3.oas.models.media.Schema<SimpleModule>(specVersion0);
      Vector<SimpleModule> vector0 = new Vector<SimpleModule>(3471);
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema3 = schema2.examples(vector0);
      modelResolver0.applyBeanValidatorAnnotations(schema3, annotationArray0, schema3);
      assertNull(schema3.getFormat());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      Class<LogicalType> class2 = LogicalType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withContentValueHandler(modelResolver0);
      MapType mapType2 = mapType1.withStaticTyping();
      mapType2.getTypeName();
      MapType mapType3 = mapType2.withKeyValueHandler((Object) null);
      MapType mapType4 = mapType3.withKeyType(simpleType0);
      Annotation[] annotationArray0 = new Annotation[0];
      Vector<ModelConverter> vector0 = new Vector<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(vector0);
      modelResolver0.resolveSchemaProperties(mapType4, annotationArray0, modelConverterContextImpl0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveReadOnly((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "^>G1u0(&HeZr");
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping1 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping1);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(686);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Empty0, class0, "enums-as-ref", placeholderForType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Empty0, (Field) null, annotationMap0);
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      doReturn((XmlAccessType) null).when(xmlAccessorType0).value();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        modelResolver0.ignore(annotatedField0, xmlAccessorType0, "^>G1u0(&HeZr", treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      objectMapper3.disable(jsonGenerator_FeatureArray0);
      Annotation[] annotationArray0 = null;
      modelResolver0.resolveIgnoredProperties((Annotation[]) null);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      modelResolver0.resolveAllowableValues((Annotated) null, (Annotation[]) null, schema0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipJsonIdentity(true);
      AnnotatedType annotatedType2 = annotatedType1.jsonViewAnnotation((JsonView) null);
      AnnotatedType annotatedType3 = annotatedType2.name("enums-as-ref");
      AnnotatedType annotatedType4 = annotatedType3.ctxAnnotations((Annotation[]) null);
      // Undeclared exception!
      try { 
        modelResolver0.resolve(annotatedType4, (ModelConverterContext) null, (Iterator<ModelConverter>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper4 = objectMapper3.setDefaultPropertyInclusion(jsonInclude_Include0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      Class<SimpleModule> class0 = SimpleModule.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Empty0, class0, "I%rr", javaType0);
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations((AnnotationMap) null);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      modelResolver0.resolveAllowableValues(annotated0, (Annotation[]) null, schema0);
      modelResolver0.resolveExtensions(annotated0, (Annotation[]) null, (Schema) null);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      LinkedList<ModelResolver> linkedList0 = new LinkedList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema2 = schema1.examples(linkedList0);
      modelResolver0.resolveSchemaMembers(schema2, virtualAnnotatedMember0, (Annotation[]) null, (Schema) null);
      List<String> list0 = modelResolver0.resolveRequiredProperties(virtualAnnotatedMember0, (Annotation[]) null, (Schema) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      ObjectMapper objectMapper4 = objectMapper3.disable(serializationFeature0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      typeNameResolver0.setUseFqn(false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("enums-as-ref");
      objectMapper2.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      JavaType javaType0 = resolvedRecursiveType0.withContentType((JavaType) null);
      boolean boolean0 = modelResolver0._isOptionalType(javaType0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "p/u6[", javaType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      boolean boolean1 = modelResolver0.hasHiddenAnnotation(annotatedField0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector(annotationIntrospector0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      annotationIntrospector0.findContentDeserializer((Annotated) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema0).minLength();
      modelResolver0.resolveMinLength((Annotated) null, (Annotation[]) null, schema0);
      modelResolver0.resolveXml((Annotated) null, (Annotation[]) null, (Schema) null);
      modelResolver0.resolveDefaultValue((Annotated) null, (Annotation[]) null, (Schema) null);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      Class<ModelResolver> class0 = ModelResolver.class;
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<JsonEncoding> schema1 = new io.swagger.v3.oas.models.media.Schema<JsonEncoding>(specVersion0);
      ArrayList<JsonEncoding> arrayList0 = new ArrayList<JsonEncoding>();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      arrayList0.add(jsonEncoding0);
      PriorityQueue<JsonEncoding> priorityQueue0 = new PriorityQueue<JsonEncoding>();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      priorityQueue0.add(jsonEncoding1);
      arrayList0.addAll((Collection<? extends JsonEncoding>) priorityQueue0);
      io.swagger.v3.oas.models.media.Schema<JsonEncoding> schema2 = schema1.examples(arrayList0);
      modelResolver0._addEnumProps(class0, schema2);
      modelResolver0.resolveTitle((Annotated) null, (Annotation[]) null, (Schema) null);
      modelResolver0.resolveExclusiveMinimum((Annotated) null, (Annotation[]) null, (Schema) null);
      modelResolver0.resolveSchemaMembers(schema1, (Annotated) null, (Annotation[]) null, (Schema) null);
      modelResolver0.resolvePattern((Annotated) null, (Annotation[]) null, (Schema) null);
      modelResolver0.resolveMaxLength((Annotated) null, (Annotation[]) null, (Schema) null);
      modelResolver0.resolveDeprecated((Annotated) null, (Annotation[]) null, (Schema) null);
      Boolean boolean0 = modelResolver0.resolveReadOnly((Annotated) null, (Annotation[]) null, (Schema) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      Class<ConstructorDetector.SingleArgConstructor> class0 = ConstructorDetector.SingleArgConstructor.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      Annotation[] annotationArray0 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(schema0).multipleOf();
      modelResolver0.resolveMultipleOf((Annotated) null, (Annotation[]) null, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1).maximum();
      modelResolver0.resolveMaximum((Annotated) null, (Annotation[]) null, schema1);
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation((JsonView) null);
      io.swagger.v3.oas.models.media.Schema<ConstructorDetector.SingleArgConstructor> schema2 = new io.swagger.v3.oas.models.media.Schema<ConstructorDetector.SingleArgConstructor>();
      annotatedType1.jsonViewAnnotation((JsonView) null);
      AnnotatedType annotatedType2 = annotatedType1.parent(schema2);
      annotatedType2.setSkipOverride(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      LinkedList<ConstructorDetector.SingleArgConstructor> linkedList0 = new LinkedList<ConstructorDetector.SingleArgConstructor>();
      io.swagger.v3.oas.models.media.Schema<ConstructorDetector.SingleArgConstructor> schema3 = schema2.examples(linkedList0);
      schema2.setUnevaluatedProperties(schema3);
      modelResolver0.resolveMaxItems(annotatedType2, arraySchema0);
      Schema schema4 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema4).defaultValue();
      doReturn((String) null, (String) null).when(schema4).description();
      doReturn((String) null).when(schema4).format();
      doReturn((String) null).when(schema4).title();
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema2, (Annotated) null, (Annotation[]) null, schema4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      deserializationFeatureArray0[1] = deserializationFeature1;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonParser_FeatureArray0);
      objectMapper3.getSerializerProviderInstance();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      // Undeclared exception!
      try { 
        modelResolver0.findJsonValueType((BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultMergeable((Boolean) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Annotated annotated0 = null;
      Annotation[] annotationArray0 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      modelResolver0.resolveExternalDocumentation((Annotated) null, (Annotation[]) null, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema1).minProperties();
      modelResolver0.resolveMinProperties((Annotated) null, (Annotation[]) null, schema1);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema2).minimum();
      modelResolver0.resolveMinimum((Annotated) null, (Annotation[]) null, schema2);
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema3).title();
      modelResolver0.resolveTitle((Annotated) null, (Annotation[]) null, schema3);
      Schema schema4 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema4).minLength();
      modelResolver0.resolveMinLength((Annotated) null, (Annotation[]) null, schema4);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      JsonParser jsonParser0 = objectMapper3.createParser(byteArray0, (int) (byte)0, 1378);
      try { 
        objectMapper1.readTree(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00D0' (code 208)): Expected space separating root-level values
         //  at [Source: (byte[])\"6\uFFFD\\u001C\uFFFD#\\u0016\\u0000\\u0000\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<Module> class1 = Module.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[0]);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType1);
      valueInstantiator_Base0.getWithArgsCreator();
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        modelResolver0.ignore((Annotated) null, xmlAccessorType0, "", set0, (BeanPropertyDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      AnnotatedType annotatedType0 = new AnnotatedType();
      annotatedType0.getJsonUnwrappedHandler();
      AnnotatedType annotatedType1 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      annotatedType0.setPropertyName("JSON");
      AnnotatedType annotatedType2 = annotatedType1.skipOverride(false);
      jsonFactory0.createParser("");
      AnnotatedType annotatedType3 = annotatedType2.skipSchemaName(false);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      annotatedType3.setSchemaProperty(false);
      Annotation[] annotationArray0 = new Annotation[9];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class0);
      annotationArray0[0] = null;
      annotationArray0[1] = (Annotation) jsonView0;
      annotationArray0[2] = (Annotation) jsonView0;
      annotationArray0[3] = (Annotation) jsonView0;
      annotationArray0[4] = (Annotation) jsonView0;
      annotationArray0[5] = (Annotation) jsonView0;
      annotationArray0[6] = (Annotation) jsonView0;
      annotationArray0[7] = (Annotation) jsonView0;
      annotationArray0[8] = (Annotation) jsonView0;
      annotatedType2.ctxAnnotations(annotationArray0);
      AnnotatedType annotatedType4 = annotatedType3.jsonViewAnnotation(jsonView0);
      // Undeclared exception!
      try { 
        modelResolver0.decorateModelName(annotatedType4, "##default");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      TimeZone timeZone0 = TimeZone.getTimeZone("_#~");
      ObjectMapper objectMapper2 = objectMapper1.setTimeZone(timeZone0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, ":Nkl!G32eC");
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<BooleanNode> class0 = BooleanNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotatedType annotatedType0 = new AnnotatedType(simpleType0);
      AnnotatedType annotatedType1 = new AnnotatedType();
      annotatedType1.getJsonUnwrappedHandler();
      AnnotatedType annotatedType2 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType3 = annotatedType2.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType4 = annotatedType3.skipOverride(false);
      AnnotatedType annotatedType5 = annotatedType4.resolveAsRef(false);
      modelResolver0.decorateModelName(annotatedType5, (String) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Annotation[] annotationArray0 = new Annotation[5];
      annotationArray0[0] = (Annotation) jsonView0;
      annotationArray0[1] = (Annotation) jsonView0;
      annotationArray0[2] = (Annotation) jsonView0;
      annotationArray0[3] = (Annotation) jsonView0;
      annotationArray0[4] = (Annotation) jsonView0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).requiredProperties();
      List<String> list0 = modelResolver0.resolveRequiredProperties((Annotated) null, annotationArray0, schema0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.GERMAN;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      Boolean boolean0 = Boolean.valueOf("C{+nFQk&Fm`*");
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      SerializedString serializedString0 = (SerializedString)JsonFactory.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(defaultPrettyPrinter1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<ModelResolver> class0 = ModelResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      typeBindings0.getBoundType(0);
      LinkedList<ModelConverter> linkedList0 = new LinkedList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(linkedList0);
      // Undeclared exception!
      try { 
        modelResolver0.resolvePatternProperties((JavaType) null, (Annotation[]) null, modelConverterContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      ObjectMapper objectMapper3 = objectMapper2.setDateFormat(dateFormat0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      boolean boolean0 = modelResolver0._isOptionalType(placeholderForType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 292);
      ObjectNode objectNode0 = arrayNode0.insertObject(5364);
      Long long0 = new Long(292);
      ObjectNode objectNode1 = objectNode0.put("L", long0);
      ObjectNode objectNode2 = objectNode1.removeAll();
      objectMapper0.treeAsTokens(objectNode2);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector(annotationIntrospector1);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Annotation[] annotationArray0 = new Annotation[0];
      beanSerializerBuilder0.getClassInfo();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).pattern();
      modelResolver0.resolvePattern((Annotated) null, annotationArray0, schema0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.getClassAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonGenerator_FeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      ObjectMapper objectMapper4 = objectMapper3.configure(jsonGenerator_Feature0, true);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).defaultValue();
      // Undeclared exception!
      try { 
        modelResolver0.resolveDefaultValue((Annotated) null, (Annotation[]) null, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<Locale.Category> class0 = Locale.Category.class;
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) modelResolver0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectMapper.findModules();
      objectMapper2.reader(deserializationFeature1);
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std1);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper3, typeNameResolver0);
      Annotation[] annotationArray0 = new Annotation[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)69;
      objectMapper2.createParser(byteArray0, 546, (-3333));
      modelResolver1.resolveExample((Annotated) null, annotationArray0, (Schema) null);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipOverride(false);
      AnnotatedType annotatedType2 = annotatedType1.name("composed-model-properties-as-sibiling");
      AnnotatedType annotatedType3 = annotatedType2.type(class0);
      AnnotatedType annotatedType4 = annotatedType3.skipSchemaName(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      modelResolver1.resolveMaxItems(annotatedType4, arraySchema0);
      List<String> list0 = modelResolver0.resolveRequiredProperties((Annotated) null, annotationArray0, (Schema) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone((TimeZone) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, (TypeNameResolver) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper0);
      CollectionType collectionType1 = collectionType0.withValueHandler(modelResolver1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      CollectionLikeType collectionLikeType0 = collectionType1.withContentTypeHandler(jsonFactory_Feature0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(modelResolver0);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      Discriminator discriminator0 = modelResolver0.resolveDiscriminator(collectionLikeType1, modelConverterContextImpl0);
      assertNull(discriminator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultAttributes((ContextAttributes) null);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(49);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      JavaType javaType0 = referenceType0.getAnchorType();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl((List<ModelConverter>) null);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      io.swagger.v3.oas.models.media.Schema schema1 = modelResolver0.resolveWrapping(javaType0, modelConverterContextImpl0, schema0);
      assertFalse(schema1.getExampleSetFlag());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonParser_Feature0, false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      modelResolver0._addEnumProps(class0, schema0);
      assertNull(schema0.getBooleanSchemaValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper4 = objectMapper3.enable(deserializationFeature1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      // Undeclared exception!
      try { 
        modelResolver0.decorateModelName((AnnotatedType) null, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ObjectMapper objectMapper1 = objectMapper0.setMixInResolver(simpleMixInResolver0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      ObjectMapper objectMapper3 = objectMapper2.setConstructorDetector((ConstructorDetector) null);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      modelResolver0.addRequiredItem((io.swagger.v3.oas.models.media.Schema) null, "JSON");
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues((InjectableValues) null);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      SimpleBeanPropertyFilter simpleBeanPropertyFilter0 = SimpleBeanPropertyFilter.serializeAllExcept((Set<String>) null);
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.setDefaultFilter((PropertyFilter) simpleBeanPropertyFilter0);
      simpleFilterProvider1.addFilter("javax.validation.constraints.DecimalMax", simpleBeanPropertyFilter0);
      ObjectMapper objectMapper3 = objectMapper2.setFilterProvider(simpleFilterProvider1);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      modelResolver0.resolveIgnoredProperties(annotationCollector_OneAnnotation0, (Annotation[]) null);
      AnnotatedType annotatedType0 = new AnnotatedType(class1);
      AnnotatedType annotatedType1 = annotatedType0.resolveAsRef(false);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      AnnotatedType annotatedType2 = annotatedType1.parent(schema0);
      AnnotatedType annotatedType3 = annotatedType2.skipSchemaName(false);
      AnnotatedType annotatedType4 = annotatedType3.skipJsonIdentity(true);
      Boolean boolean0 = modelResolver0.resolveUniqueItems(annotatedType4, (ArraySchema) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper3 = objectMapper2.setTypeFactory(typeFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(schema0).extensions();
      Map<String, Object> map0 = modelResolver0.resolveExtensions((Annotated) null, (Annotation[]) null, schema0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0, serializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Annotation[] annotationArray0 = new Annotation[0];
      Class<Short> class0 = Short.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema0 = new io.swagger.v3.oas.models.media.Schema<SimpleModule>();
      AnnotatedType annotatedType1 = annotatedType0.parent(schema0);
      AnnotatedType annotatedType2 = annotatedType1.ctxAnnotations(annotationArray0);
      AnnotatedType annotatedType3 = annotatedType2.propertyName("enums-as-ref");
      AnnotatedType annotatedType4 = annotatedType3.resolveAsRef(false);
      boolean boolean0 = modelResolver0.hiddenByJsonView(annotationArray0, annotatedType4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "", "JSON");
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.USE_DEFAULTS;
      Class<TokenFilter.Inclusion> class0 = TokenFilter.Inclusion.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include1, class0, class1);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, true);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultAttributes(contextAttributes0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<ModelResolver> class2 = ModelResolver.class;
      Annotation[] annotationArray0 = new Annotation[0];
      modelResolver0.getComposedSchemaReferencedClasses(class2, annotationArray0, (Schema) null);
      AnnotatedType annotatedType0 = new AnnotatedType(class2);
      AnnotatedType annotatedType1 = annotatedType0.resolveAsRef(false);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<TokenFilter.Inclusion> schema0 = new io.swagger.v3.oas.models.media.Schema<TokenFilter.Inclusion>(specVersion0);
      AnnotatedType annotatedType2 = annotatedType1.parent(schema0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType3 = annotatedType2.jsonViewAnnotation(jsonView0);
      annotatedType0.setName("composed-model-properties-as-sibiling");
      AnnotatedType annotatedType4 = annotatedType3.skipJsonIdentity(true);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      modelResolver0.resolveMinItems(annotatedType4, arraySchema0);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveDiscriminator((JavaType) null, modelConverterContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonParser_FeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      Vector<ModelConverter> vector0 = new Vector<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(vector0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      Vector<ModelResolver> vector1 = new Vector<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(vector1);
      // Undeclared exception!
      try { 
        modelResolver0.resolveWrapping((JavaType) null, modelConverterContextImpl0, schema1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.resolveMaxItems((AnnotatedType) null, (ArraySchema) null);
      Annotation[] annotationArray0 = new Annotation[2];
      annotationArray0[0] = (Annotation) null;
      annotationArray0[1] = (Annotation) null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).example();
      // Undeclared exception!
      try { 
        modelResolver0.resolveExample((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Y0fVk6`*3ru$QXd");
      ObjectMapper objectMapper2 = objectMapper1.setTimeZone(timeZone0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      modelResolver0.addRequiredItem(schema0, "");
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = new Boolean("+P{");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultLeniency(boolean0);
      LinkedHashSet<SimpleModule> linkedHashSet0 = new LinkedHashSet<SimpleModule>(12, 12);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) linkedHashSet0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      ConstructorDetector constructorDetector0 = ConstructorDetector.DEFAULT;
      objectMapper2.setConstructorDetector(constructorDetector0);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)85;
      objectMapper3.createParser(byteArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<SimpleModule> class0 = SimpleModule.class;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples((List<ModelResolver>) null);
      modelResolver0._addEnumProps(class0, schema1);
      Class<SimpleModule> class1 = SimpleModule.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentTypeHandler((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TimeZone timeZone0 = TimeZone.getDefault();
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, false);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      modelResolver0.resolveMaxItems((AnnotatedType) null, arraySchema0);
      Class<ModelResolver> class0 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getWithArgsCreator();
      Annotation[] annotationArray0 = new Annotation[7];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      annotationArray0[0] = null;
      annotationArray0[1] = (Annotation) arraySchema0;
      annotationArray0[2] = (Annotation) arraySchema0;
      annotationArray0[3] = (Annotation) arraySchema0;
      annotationArray0[4] = (Annotation) arraySchema0;
      annotationArray0[5] = (Annotation) arraySchema0;
      annotationArray0[6] = (Annotation) arraySchema0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      modelResolver0.resolveXml((Annotated) null, annotationArray0, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema1).deprecated();
      Boolean boolean0 = modelResolver0.resolveDeprecated((Annotated) null, annotationArray0, schema1);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonParser_FeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.deactivateDefaultTyping();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipJsonIdentity(false);
      AnnotatedType annotatedType2 = annotatedType1.propertyName("enums-as-ref");
      AnnotatedType annotatedType3 = annotatedType2.schemaProperty(false);
      Integer integer0 = modelResolver0.resolveMinItems(annotatedType3, (ArraySchema) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Discriminator discriminator0 = new Discriminator();
      discriminator0.getExtensions();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      discriminator0.setPropertyName((String) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, true);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, ",");
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      Annotation[] annotationArray0 = new Annotation[0];
      modelResolver0.applyBeanValidatorAnnotations(schema0, annotationArray0, schema0);
      assertNull(schema0.getTitle());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, true);
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      ObjectMapper objectMapper3 = objectMapper2.setDateFormat(dateFormat0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      modelResolver0.resolveExternalDocumentation((Annotated) null, (Annotation[]) null, schema0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      LinkedList<ModelResolver> linkedList0 = new LinkedList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema2 = schema1.examples(linkedList0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.parent(schema2);
      AnnotatedType annotatedType2 = annotatedType1.skipJsonIdentity(true);
      AnnotatedType annotatedType3 = annotatedType2.name("composed-model-properties-as-sibiling");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TokenFilter.Inclusion> class0 = TokenFilter.Inclusion.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(linkedList0);
      AnnotatedType annotatedType4 = annotatedType3.type(collectionLikeType1);
      modelResolver0.resolveSchemaMembers(schema2, annotatedType4);
      assertFalse(schema2.getExampleSetFlag());
      assertFalse(schema1.getExampleSetFlag());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      HashMap<String, ModelResolver> hashMap0 = new HashMap<String, ModelResolver>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper2 = objectMapper1.addHandler(deserializationProblemHandler0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<ModelResolver> class0 = ModelResolver.class;
      MockFile mockFile0 = new MockFile("JSON", "void");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<IOCase> class1 = IOCase.class;
      typeBindings0.asKey(class1);
      ArrayList<ModelConverter> arrayList0 = new ArrayList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(arrayList0);
      modelResolver0.resolvePatternProperties(resolvedRecursiveType0, (Annotation[]) null, modelConverterContextImpl0);
      Class<ModelResolver> class2 = ModelResolver.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema0).allOf();
      doReturn((Class[]) null).when(schema0).anyOf();
      doReturn((Class[]) null).when(schema0).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class2, (Annotation[]) null, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "JSON");
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper4 = objectMapper3.setDefaultPropertyInclusion(jsonInclude_Include0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      modelResolver0.resolveExtensions(annotatedType0, arraySchema0);
      Boolean boolean0 = modelResolver0.resolveReadOnly((Annotated) null, (Annotation[]) null, (Schema) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      serializationFeatureArray0[0] = serializationFeature1;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      serializationFeatureArray0[8] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.from((JsonInclude) null);
      JsonInclude.Value jsonInclude_Value1 = JsonInclude.Value.merge(jsonInclude_Value0, jsonInclude_Value0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Value1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext0);
      beanDeserializerBuilder0.getBuildMethod();
      Annotation[] annotationArray0 = new Annotation[7];
      annotationArray0[0] = (Annotation) null;
      annotationArray0[1] = (Annotation) null;
      annotationArray0[2] = (Annotation) null;
      annotationArray0[3] = (Annotation) null;
      annotationArray0[4] = (Annotation) null;
      annotationArray0[5] = (Annotation) null;
      annotationArray0[6] = (Annotation) null;
      List<String> list0 = modelResolver0.resolveAllowableValues((Annotated) null, annotationArray0, (Schema) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      Class<ModelResolver> class0 = ModelResolver.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipJsonIdentity(false);
      AnnotatedType annotatedType2 = annotatedType1.skipSchemaName(false);
      AnnotatedType annotatedType3 = annotatedType2.resolveAsRef(true);
      AnnotatedType annotatedType4 = annotatedType3.jsonViewAnnotation((JsonView) null);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema0).uniqueItems();
      Boolean boolean0 = modelResolver0.resolveUniqueItems(annotatedType4, arraySchema0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ConstructorDetector constructorDetector0 = ConstructorDetector.DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector(constructorDetector0);
      Class<Month> class0 = Month.class;
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL;
      objectMapper0.disable(serializationFeature0);
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonParser_Feature0, false);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      Class<ModelResolver> class2 = ModelResolver.class;
      HashSet<TypeNameResolver.Options> hashSet0 = new HashSet<TypeNameResolver.Options>();
      objectMapper3.configure(serializationFeature0, false);
      typeNameResolver0.nameForClass(class2, hashSet0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      modelResolver0.shouldIgnoreClass(class1);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveAccessMode((BeanPropertyDefinition) null, (JavaType) null, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0, deserializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      Stack<ModelResolver> stack0 = new Stack<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(stack0);
      AnnotatedType annotatedType0 = new AnnotatedType((Type) null);
      AnnotatedType annotatedType1 = annotatedType0.parent(schema0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType2 = annotatedType1.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType3 = annotatedType2.skipJsonIdentity(false);
      AnnotatedType annotatedType4 = annotatedType3.skipSchemaName(false);
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema1, annotatedType4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy(propertyNamingStrategy0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<Integer> class0 = Integer.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      AnnotatedType annotatedType1 = annotatedType0.parent(schema0);
      annotatedType1.schemaProperty(true);
      AnnotatedType annotatedType2 = annotatedType1.skipJsonIdentity(true);
      AnnotatedType annotatedType3 = annotatedType2.name(";>xYzC");
      AnnotatedType annotatedType4 = annotatedType3.type(class0);
      annotatedType3.setResolveAsRef(false);
      modelResolver0.decorateModelName(annotatedType4, "o2[SCN6_<Md\"5 Q");
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      modelResolver0.resolveExtensions(annotatedType4, arraySchema0);
      // Undeclared exception!
      try { 
        modelResolver0._isOptionalType((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      objectMapper0.setSerializerFactory(serializerFactory0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper1.readerForListOf(class0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      Annotated annotated0 = null;
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveWriteOnly((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      TimeZone timeZone0 = TimeZone.getDefault();
      ObjectMapper objectMapper2 = objectMapper1.setTimeZone(timeZone0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy(propertyNamingStrategy0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<Short> class0 = Short.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.propertyName(") ");
      AnnotatedType annotatedType2 = annotatedType1.resolveAsRef(true);
      AnnotatedType annotatedType3 = annotatedType2.name("enums-as-ref");
      AnnotatedType annotatedType4 = annotatedType3.jsonViewAnnotation((JsonView) null);
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedType4, (ArraySchema) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      deserializationFeatureArray0[2] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[3] = deserializationFeature2;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      deserializationFeatureArray0[6] = deserializationFeature3;
      objectMapper2.enable(deserializationFeature0, deserializationFeatureArray0);
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      io.swagger.v3.oas.models.media.Schema schema0 = modelResolver0.resolve((AnnotatedType) null, modelConverterContextImpl0, (Iterator<ModelConverter>) null);
      assertNull(schema0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      File file0 = MockFile.createTempFile("=DP)KEN[-I1v(>", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      objectMapper1.createGenerator(file0, jsonEncoding0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      modelResolver0.resolveMaxItems((AnnotatedType) null, arraySchema0);
      Class<ModelResolver> class0 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getWithArgsCreator();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      modelResolver0.resolveXml((Annotated) null, annotationArray0, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema1).maxProperties();
      modelResolver0.resolveMaxProperties((Annotated) null, annotationArray0, schema1);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema2).title();
      modelResolver0.resolveTitle((Annotated) null, annotationArray0, schema2);
      modelResolver0.shouldIgnoreClass(class0);
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema3).format();
      String string0 = modelResolver0.resolveFormat((Annotated) null, annotationArray0, schema3);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      annotatedType0.getJsonUnwrappedHandler();
      AnnotatedType annotatedType1 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType2 = annotatedType1.skipJsonIdentity(false);
      AnnotatedType annotatedType3 = annotatedType2.skipSchemaName(false);
      AnnotatedType annotatedType4 = annotatedType3.ctxAnnotations((Annotation[]) null);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      modelResolver0.resolveMinItems(annotatedType4, arraySchema0);
      Class<ModelResolver> class0 = ModelResolver.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "enums-as-ref", (JavaType) null);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).example();
      // Undeclared exception!
      try { 
        modelResolver0.resolveExample(virtualAnnotatedMember0, (Annotation[]) null, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      SerializationFeature serializationFeature1 = SerializationFeature.CLOSE_CLOSEABLE;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature1, false);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<HijrahEra> class0 = HijrahEra.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      String string0 = "_Ec<E]R}&McNAi9";
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("_Ec<E]R}&McNAi9");
      typeBindings1.getBoundType(323);
      // Undeclared exception!
      try { 
        modelResolver0._isOptionalType((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonParser_Feature0, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema0 = new io.swagger.v3.oas.models.media.Schema<SimpleModule>(specVersion0);
      Vector<SimpleModule> vector0 = new Vector<SimpleModule>();
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema1 = schema0.examples(vector0);
      Class<Void> class0 = Void.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      AnnotatedType annotatedType1 = annotatedType0.ctxAnnotations(annotationArray0);
      AnnotatedType annotatedType2 = annotatedType1.skipSchemaName(true);
      AnnotatedType annotatedType3 = annotatedType2.name("");
      AnnotatedType annotatedType4 = annotatedType3.resolveAsRef(false);
      modelResolver0.resolveSchemaMembers(schema1, annotatedType4);
      assertFalse(schema1.getExampleSetFlag());
      assertFalse(schema0.getExampleSetFlag());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonInclude.Value[] jsonInclude_ValueArray0 = new JsonInclude.Value[0];
      JsonInclude.Value.mergeAll(jsonInclude_ValueArray0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion((JsonInclude.Value) null);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      beanSerializerBuilder0.getTypeId();
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        modelResolver0.ignore((Annotated) null, xmlAccessorType0, "JSON", set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema0, (AnnotatedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector(annotationIntrospector0);
      Nulls nulls0 = Nulls.AS_EMPTY;
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper0.readerFor(class0);
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      ObjectMapper objectMapper4 = objectMapper3.setDefaultSetterInfo(jsonSetter_Value0);
      jsonSetter_Value0.withValueNulls(nulls0, nulls0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      objectMapper1.findAndRegisterModules();
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getJsonValueAccessor();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      modelResolver0.findJsonValueType(basicBeanDescription0);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = null;
      modelResolver0.resolveExternalDocumentation((Annotated) null, annotationArray0, (Schema) null);
      modelResolver0.resolveMinProperties((Annotated) null, annotationArray0, (Schema) null);
      // Undeclared exception!
      try { 
        modelResolver0.hasHiddenAnnotation((Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, (TypeNameResolver) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      objectMapper1.disable(deserializationFeature0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaProperties((JavaType) null, (Annotation[]) null, (ModelConverterContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      externalDocumentation0.getExtensions();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0, serializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<JsonFormat.Shape> schema0 = new io.swagger.v3.oas.models.media.Schema<JsonFormat.Shape>(specVersion0);
      LinkedList<JsonFormat.Shape> linkedList0 = new LinkedList<JsonFormat.Shape>();
      io.swagger.v3.oas.models.media.Schema<JsonFormat.Shape> schema1 = schema0.examples(linkedList0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveDiscriminatorProperty((JavaType) null, modelConverterContextImpl0, schema1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, (TypeNameResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Boolean boolean0 = new Boolean("Fcl:hA");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.EXPLICIT_ONLY;
      ObjectMapper objectMapper2 = objectMapper1.setConstructorDetector(constructorDetector0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SubtypeResolver subtypeResolver0 = stdSubtypeResolver0.copy();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(subtypeResolver0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      jsonFactoryBuilder0.rootValueSeparator("");
      Annotation[] annotationArray0 = new Annotation[0];
      modelResolver0.resolveMaxLength((Annotated) null, annotationArray0, (Schema) null);
      modelResolver0.resolveWriteOnly((Annotated) null, annotationArray0, (Schema) null);
      Annotation[] annotationArray1 = new Annotation[1];
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      objectMapper1.disable(jsonParser_FeatureArray0);
      annotationArray1[0] = (Annotation) null;
      modelResolver0.resolveMaxProperties((Annotated) null, annotationArray1, (Schema) null);
      modelResolver0.resolveMinLength((Annotated) null, annotationArray1, (Schema) null);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = modelResolver0.resolveExternalDocumentation((Annotated) null, annotationArray1, (Schema) null);
      assertNull(externalDocumentation0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.createArrayNode();
      TypeNameResolver typeNameResolver0 = null;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, (TypeNameResolver) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<JsonFormat.Shape> class0 = JsonFormat.Shape.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "composed-model-properties-as-sibiling", simpleType0);
      virtualAnnotatedMember0.getAnnotated();
      Class<ModelResolver> class1 = ModelResolver.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<Annotation> class2 = Annotation.class;
      annotationMap1.get(class2);
      AnnotationMap annotationMap2 = AnnotationMap.of(class1, (Annotation) null);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap2);
      Annotation[] annotationArray0 = new Annotation[4];
      annotationArray0[0] = null;
      annotationArray0[1] = null;
      annotationArray0[2] = null;
      annotationArray0[3] = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(schema0).multipleOf();
      modelResolver0.resolveMultipleOf(annotatedField0, annotationArray0, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema1).maxProperties();
      modelResolver0.resolveMaxProperties((Annotated) null, annotationArray0, schema1);
      Class<ModelResolver> class3 = ModelResolver.class;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.annotation.JsonFormat$Shape with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).exclusiveMinimum();
      Boolean boolean1 = modelResolver0.resolveExclusiveMinimum((Annotated) null, annotationArray0, schema0);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat((DateFormat) null);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultAttributes(contextAttributes0);
      ObjectMapper objectMapper3 = objectMapper2.findAndRegisterModules();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema0).minLength();
      Integer integer0 = modelResolver0.resolveMinLength((Annotated) null, (Annotation[]) null, schema0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, false);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion((JsonInclude.Value) null);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).maximum();
      modelResolver0.resolveMaximum((Annotated) null, (Annotation[]) null, schema0);
      modelResolver0.resolveDefaultValue((Annotated) null, (Annotation[]) null, (Schema) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      PropertyName propertyName0 = new PropertyName("76]2pu)G,ea/^X");
      // Undeclared exception!
      try { 
        basicBeanDescription0.findProperty(propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema0).allOf();
      doReturn((Class[]) null).when(schema0).anyOf();
      doReturn((Class[]) null).when(schema0).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class0, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
      Boolean boolean0 = Boolean.TRUE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<Integer> class0 = Integer.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      annotatedType0.getJsonUnwrappedHandler();
      AnnotatedType annotatedType1 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType2 = annotatedType1.skipJsonIdentity(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      modelResolver0.resolveMaxItems(annotatedType2, arraySchema0);
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema1).uniqueItems();
      Boolean boolean1 = modelResolver0.resolveUniqueItems(annotatedType1, arraySchema1);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
      serializationFeatureArray0[3] = serializationFeature1;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(437);
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      javaTypeArray0[6] = (JavaType) placeholderForType0;
      javaTypeArray0[7] = (JavaType) placeholderForType0;
      javaTypeArray0[8] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[1]);
      AnnotatedType annotatedType0 = new AnnotatedType(collectionLikeType0);
      AnnotatedType annotatedType1 = annotatedType0.propertyName("enums-as-ref");
      AnnotatedType annotatedType2 = annotatedType1.skipOverride(false);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      ObjectReader objectReader0 = objectMapper0.readerForListOf(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_LONG_FOR_INTS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      deserializationFeatureArray0[2] = deserializationFeature2;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      ObjectReader objectReader2 = objectReader1.withView(class0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader3 = objectReader2.with(contextAttributes0);
      ObjectReader objectReader4 = objectReader3.forType(class0);
      ShortNode shortNode0 = ShortNode.valueOf((short)3251);
      JsonParser jsonParser0 = objectReader4.treeAsTokens(shortNode0);
      MappingIterator<ModelConverter> mappingIterator0 = objectMapper1.readValues(jsonParser0, (ResolvedType) javaTypeArray0[2]);
      io.swagger.v3.oas.models.media.Schema schema0 = modelResolver0.resolve(annotatedType2, modelConverterContextImpl0, mappingIterator0);
      assertEquals("ModelResolver", schema0.getName());
      assertFalse(schema0.getExampleSetFlag());
      assertNotNull(schema0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.copy();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      Class<DayOfWeek> class0 = DayOfWeek.class;
      Class<DayOfWeek> class1 = DayOfWeek.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setBase64Variant((Base64Variant) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, false);
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper2.coercionConfigFor(class0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      AnnotationIntrospectorPair annotationIntrospectorPair0 = (AnnotationIntrospectorPair)modelResolver0._intr;
      ObjectMapper objectMapper4 = objectMapper3.setAnnotationIntrospector(annotationIntrospectorPair0);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper4);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.type(class0);
      AnnotatedType annotatedType2 = annotatedType1.name("/fQ");
      annotatedType1.getJsonUnwrappedHandler();
      AnnotatedType annotatedType3 = annotatedType2.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType4 = annotatedType3.propertyName("enums-as-ref");
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      modelResolver0.resolveExtensions(annotatedType4, arraySchema0);
      io.swagger.v3.oas.models.media.Schema<Module> schema0 = new io.swagger.v3.oas.models.media.Schema<Module>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        ObjectMapper.findModules(classLoader0);
        fail("Expecting exception: ServiceConfigurationError");
      
      } catch(ServiceConfigurationError e) {
         //
         // com.fasterxml.jackson.databind.Module: Provider com.fasterxml.jackson.datatype.jsr310.JavaTimeModule not a subtype
         //
         verifyException("java.util.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JsonFactory jsonFactory0 = null;
      try {
        jsonFactory0 = new JsonFactory((JsonFactoryBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<Module> class1 = Module.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      // Undeclared exception!
      try { 
        objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) null, objectMapper_DefaultTyping0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass `null` PolymorphicTypeValidator
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      CoercionConfigs coercionConfigs0 = new CoercionConfigs();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null, coercionConfigs0);
      // Undeclared exception!
      try { 
        deserializationConfig0.getPolymorphicTypeValidator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      File file0 = MockFile.createTempFile("integer", "");
      try { 
        MockFile.createTempFile("JSON", "integer", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("JSON", "class ComposedSchema {\n", true, 'q', (-970));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 23)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      ObjectMapper objectMapper3 = objectMapper2.copy();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleModule simpleModule0 = new SimpleModule("Xhd g(R7VsP?<5Im!+*");
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper2 = objectMapper1.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      ObjectMapper objectMapper3 = objectMapper2.setMixInResolver((ClassIntrospector.MixInResolver) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      objectMapper2.createParser("f~,7");
      objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(656);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ModelResolver> class0 = ModelResolver.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) placeholderForType0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = collectionLikeType0.getErasedSignature(stringBuilder0);
      collectionLikeType0.getErasedSignature(stringBuilder1);
      // Undeclared exception!
      try { 
        collectionLikeType0.withContentTypeHandler(modelResolver0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      String string0 = ",.+3{ |T\\,U nVj1}eF";
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, ",.+3{ |T,U nVj1}eF");
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      objectMapper1.disable(deserializationFeature0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultAttributes(contextAttributes0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      contextAttributes0.withoutSharedAttribute(jsonReadFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      // Undeclared exception!
      try { 
        objectMapper1.enable(serializationFeature0, (SerializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Locale locale0 = new Locale("io.swagger.v3.core.jackson.ModelResolver$GeneratorWrapper$UUIDGeneratorWrapper");
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      modelResolver0.objectMapper();
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      Annotation[] annotationArray0 = new Annotation[4];
      annotationArray0[0] = (Annotation) externalDocumentation0;
      annotationArray0[1] = (Annotation) externalDocumentation0;
      annotationArray0[2] = (Annotation) externalDocumentation0;
      annotationArray0[3] = (Annotation) externalDocumentation0;
      modelResolver0.resolveIgnoredProperties(annotationArray0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getTypeId();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).minimum();
      BigDecimal bigDecimal0 = modelResolver0.resolveMinimum((Annotated) null, annotationArray0, schema0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Boolean boolean0 = new Boolean(true);
      objectMapper0.setDefaultMergeable(boolean0);
      char char0 = '5';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("JSON", "'ziE^GTT5VPU", true, '5', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 12)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      AnnotatedType annotatedType0 = new AnnotatedType(class1);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      modelResolver0.resolveExtensions(annotatedType0, arraySchema0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      Locale locale0 = Locale.JAPANESE;
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver1 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class2 = ModelResolver.class;
      Class<ModelResolver> class3 = ModelResolver.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3827);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      Vector<Locale> vector0 = new Vector<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack1, (Collection<Locale>) vector0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) list0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class3, (JavaType) collectionLikeType0, (JavaType) collectionLikeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class io.swagger.v3.core.jackson.ModelResolver with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
      PriorityQueue<Module> priorityQueue0 = new PriorityQueue<Module>((Comparator<? super Module>) null);
      objectMapper2.registerModules((Iterable<? extends Module>) priorityQueue0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper0.writerWithView(class0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      AnnotatedType annotatedType0 = new AnnotatedType((Type) null);
      AnnotatedType annotatedType1 = annotatedType0.name("composed-model-properties-as-sibiling");
      modelConverterContextImpl0.defineModel("composed-model-properties-as-sibiling", schema0, annotatedType1, "enums-as-ref");
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      // Undeclared exception!
      try { 
        modelResolver0.resolveWrapping((JavaType) null, modelConverterContextImpl0, schema1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider((FilterProvider) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      objectMapper1.setTypeFactory(typeFactory0);
      boolean boolean0 = true;
      LRUMap<Object, JavaType> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, JavaType>((-5880), (-5880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, (TypeNameResolver) null);
      Class<ModelResolver> class0 = ModelResolver.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class io.swagger.v3.core.jackson.ModelResolver with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      // Undeclared exception!
      try { 
        objectMapper0.createParser((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"r\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      boolean boolean0 = modelResolver0.shouldIgnoreClass((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      SubtypeResolver subtypeResolver0 = null;
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      Locale locale0 = Locale.UK;
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0, hashMap0, locale0);
      BuilderBasedDeserializer builderBasedDeserializer0 = null;
      try {
        builderBasedDeserializer0 = new BuilderBasedDeserializer((BuilderBasedDeserializer) null, beanPropertyMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0.applyBeanValidatorAnnotations(schema0, (Annotation[]) null, schema0);
      AnnotatedType annotatedType0 = new AnnotatedType((Type) null);
      AnnotatedType annotatedType1 = annotatedType0.schemaProperty(false);
      AnnotatedType annotatedType2 = annotatedType1.parent(schema0);
      AnnotatedType annotatedType3 = annotatedType2.skipSchemaName(false);
      modelResolver0.decorateModelName(annotatedType3, "7Y");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory1 = typeFactory0.withCache((LookupCache<Object, JavaType>) lRUMap0);
      Class<ArrayDeque> class0 = ArrayDeque.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      collectionType0.withContentValueHandler(modelResolver0);
      // Undeclared exception!
      try { 
        BoundType.valueOf("]ta+8(D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.common.collect.BoundType.]ta+8(D
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      TimeZone timeZone0 = TimeZone.getDefault();
      ObjectMapper objectMapper2 = objectMapper1.setTimeZone(timeZone0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0, deserializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)18;
      objectMapper0.createParser(byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Locale locale0 = Locale.ROOT;
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      objectMapper1.writer(serializationFeature0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      jsonFactory0.setRootValueSeparator("r.?K/!o");
      // Undeclared exception!
      try { 
        objectMapper2.activateDefaultTypingAsProperty((PolymorphicTypeValidator) null, objectMapper_DefaultTyping0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass `null` PolymorphicTypeValidator
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      ObjectMapper objectMapper2 = objectMapper1.copy();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<BoundType> class0 = BoundType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[2]);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) collectionLikeType0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(modelResolver0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType1, javaType0);
      boolean boolean0 = modelResolver0.shouldIgnoreClass(referenceType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.UK;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      objectMapper0.setDefaultAttributes(contextAttributes0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      locale0.hasExtensions();
      ObjectMapper objectMapper3 = objectMapper2.setNodeFactory((JsonNodeFactory) null);
      // Undeclared exception!
      try { 
        objectMapper3.missingNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      Boolean boolean0 = new Boolean("mY");
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeFactory.rawClass(class0);
      AnnotatedType annotatedType0 = new AnnotatedType(class1);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      AnnotatedType annotatedType1 = annotatedType0.parent(schema0);
      AnnotatedType annotatedType2 = annotatedType1.skipOverride(false);
      annotatedType2.skipOverride(false);
      AnnotatedType annotatedType3 = annotatedType2.schemaProperty(false);
      AnnotatedType annotatedType4 = annotatedType3.resolveAsRef(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      modelResolver0.resolveMinItems(annotatedType4, arraySchema0);
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema1).minItems();
      modelResolver0.resolveMinItems(annotatedType1, arraySchema1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getJsonValueAccessor();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findJsonValueAccessor();
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(schema1).description();
      String string0 = modelResolver0.resolveDescription((Annotated) null, annotationArray0, schema1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultVisibility(jsonAutoDetect_Value0);
      PropertyAccessor propertyAccessor1 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper4 = objectMapper3.setVisibility(propertyAccessor1, jsonAutoDetect_Visibility1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).nullable();
      Boolean boolean0 = modelResolver0.resolveNullable((Annotated) null, annotationArray0, schema0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      // Undeclared exception!
      try { 
        objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use includeAs of EXTERNAL_PROPERTY
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_PROPERTIES_BASED;
      ConstructorDetector constructorDetector1 = constructorDetector0.withRequireAnnotation(true);
      objectMapper0.setConstructorDetector(constructorDetector1);
      typeNameResolver0.setUseFqn(true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      Class<Double> class0 = Double.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.schemaProperty(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedType1, arraySchema0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      serializationFeatureArray0[5] = serializationFeature1;
      serializationFeatureArray0[6] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      Nulls nulls0 = Nulls.SET;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      objectMapper1.setDefaultSetterInfo(jsonSetter_Value0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("JSON", "JSON", false, 'M', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 4)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(906, "JSON", 906, 3, 3, 906, (-30), (-30), 0, 0, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 906
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[6];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATES_WITH_CONTEXT_TIME_ZONE;
      serializationFeatureArray0[5] = serializationFeature1;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      TypeResolutionContext typeResolutionContext0 = null;
      Class<ModelResolver> class0 = ModelResolver.class;
      String string0 = "};[,!fpPARgU";
      Class<JsonToken> class1 = JsonToken.class;
      TypeBindings typeBindings0 = null;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[0];
      // Undeclared exception!
      try { 
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      objectMapper1.disable(serializationFeature0);
      HashMap<String, ModelResolver> hashMap0 = new HashMap<String, ModelResolver>();
      String string0 = "from-long";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "from-long");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"from-long\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      objectMapper1.enable(serializationFeature0);
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        MockDateFormat.getTimeInstance(1826, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1826
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
      SerializationFeature serializationFeature1 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      serializationFeatureArray0[0] = serializationFeature1;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      serializationFeatureArray0[8] = serializationFeature0;
      objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      boolean boolean0 = false;
      char char0 = 'T';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Si7;q;[\"", "javax.validation.constraints.DecimalMin", false, 'T', 56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 39)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      Locale locale0 = new Locale("f@^^:c=Iu3Emj'1GSI", "f@^^:c=Iu3Emj'1GSI", "f@^^:c=Iu3Emj'1GSI");
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      Class<ModelResolver> class0 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotatedType annotatedType0 = new AnnotatedType(simpleType0);
      AnnotatedType annotatedType1 = annotatedType0.ctxAnnotations((Annotation[]) null);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType2 = annotatedType1.jsonViewAnnotation(jsonView0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedType2, arraySchema0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.DEFAULT;
      ObjectMapper objectMapper3 = objectMapper2.setConstructorDetector(constructorDetector0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      ObjectMapper objectMapper4 = objectMapper3.configure(deserializationFeature0, false);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider1 = defaultAccessorNamingStrategy_Provider0.withBaseNameValidator((DefaultAccessorNamingStrategy.BaseNameValidator) null);
      ObjectMapper objectMapper4 = objectMapper3.setAccessorNaming(defaultAccessorNamingStrategy_Provider1);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, (TypeNameResolver) null);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<ModelResolver> class0 = ModelResolver.class;
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) modelResolver0);
      ObjectMapper objectMapper4 = objectMapper3.setInjectableValues(injectableValues_Std1);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper4, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      ObjectMapper objectMapper2 = objectMapper1.setConstructorDetector((ConstructorDetector) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      Vector<ModelConverter> vector0 = new Vector<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(vector0);
      modelResolver0.resolveDiscriminatorProperty(mapType0, modelConverterContextImpl0, (io.swagger.v3.oas.models.media.Schema) null);
      assertFalse(mapType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      HashMap<String, JsonToken> hashMap0 = new HashMap<String, JsonToken>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      objectMapper1.setDefaultAttributes(contextAttributes0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory((TypeFactory) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      objectMapper1.configure(jsonGenerator_Feature0, false);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      beanSerializerFactory0.withConfig(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      LongNode longNode0 = LongNode.valueOf(3018L);
      JsonToken jsonToken0 = longNode0.asToken();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.setAttribute(modelResolver0, jsonToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      schema0.getJsonSchema();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      schema0.setContentMediaType("O)Xyei6");
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider1 = defaultAccessorNamingStrategy_Provider0.withSetterPrefix("|A2h2s+/X%\"");
      ObjectMapper objectMapper3 = objectMapper2.setAccessorNaming(defaultAccessorNamingStrategy_Provider1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<JsonToken> class0 = JsonToken.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.getSuperClass();
      // Undeclared exception!
      try { 
        objectMapper2.constructType((Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ConstructorDetector constructorDetector0 = ConstructorDetector.DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector(constructorDetector0);
      Class<ModelResolver> class0 = ModelResolver.class;
      constructorDetector0.shouldIntrospectorImplicitConstructors(class0);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory(serializerFactory0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      constructorDetector0.withRequireAnnotation(false);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0.addRequiredItem(schema0, "Z)}TKi<&xG*KTm");
      assertFalse(schema0.getExampleSetFlag());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        MockDateFormat.getDateInstance(Integer.MAX_VALUE, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2147483647
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonSetter jsonSetter0 = mock(JsonSetter.class, new ViolatedAssumptionAnswer());
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonParser_FeatureArray0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper3 = objectMapper2.addHandler(deserializationProblemHandler0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-533));
      TypeFactory.defaultInstance();
      Class<ModelResolver> class0 = ModelResolver.class;
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      TypeReference<JsonToken> typeReference0 = (TypeReference<JsonToken>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper3.constructType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator((IOContext) null, 1867, objectMapper1, stringWriter0, '+');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper3 = objectMapper2.deactivateDefaultTyping();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(false, (Object) modelResolver0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, contentReference0, false);
      PipedReader pipedReader0 = new PipedReader(1859);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(500);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3163), pipedReader0, objectMapper0, charsToNameCanonicalizer1);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideFormatFeatures(0, (-2530));
      TypeReference<ModelResolver> typeReference0 = (TypeReference<ModelResolver>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper2.readValues(jsonParser0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      JsonAutoDetect jsonAutoDetect0 = mock(JsonAutoDetect.class, new ViolatedAssumptionAnswer());
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).creatorVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).fieldVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).getterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).isGetterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).setterVisibility();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.from(jsonAutoDetect0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      objectMapper1.copy();
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.WRAP_EXCEPTIONS;
      deserializationFeatureArray0[5] = deserializationFeature2;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0, deserializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      objectMapper1.setSerializerFactory(beanSerializerFactory0);
      PolymorphicTypeValidator polymorphicTypeValidator0 = null;
      Class<JsonToken> class0 = JsonToken.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.core.JsonToken with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SubtypeResolver subtypeResolver0 = stdSubtypeResolver0.copy();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      objectMapper1.setSubtypeResolver(subtypeResolver0);
      ObjectMapper objectMapper2 = objectMapper1.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector((AnnotationIntrospector) null);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      String string0 = "com.fasterxml.jackson.databind.introspect.ClassIntrospector";
      TypeBindings typeBindings0 = null;
      Class<ModelResolver> class1 = ModelResolver.class;
      Class<ModelResolver> class2 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      JavaType[] javaTypeArray0 = new JavaType[7];
      Class<ArrayDeque> class3 = ArrayDeque.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class3);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper0);
      CollectionType collectionType1 = collectionType0.withValueHandler(modelResolver1);
      CollectionType collectionType2 = collectionType1.withTypeHandler(modelResolver1);
      CollectionType collectionType3 = collectionType2.withStaticTyping();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      CollectionType collectionType4 = collectionType3.withContentValueHandler(jsonToken0);
      javaTypeArray0[0] = (JavaType) collectionType4;
      javaTypeArray0[1] = (JavaType) simpleType0;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(549);
      // Undeclared exception!
      try { 
        placeholderForType0.withTypeHandler(jsonToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      Class<JsonToken> class0 = JsonToken.class;
      TreeSet<TypeNameResolver.Options> treeSet0 = new TreeSet<TypeNameResolver.Options>();
      typeNameResolver0.nameForClass(class0, treeSet0);
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, ";l^Co1b)oK$2_\"v0d&");
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forCreation((DeserializationConfig) null, mapType0, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializationContext deserializationContext0 = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      // Undeclared exception!
      try { 
        placeholderForType0.withValueHandler(modelResolver0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper3.coercionConfigFor(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonToken> class0 = JsonToken.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getDefaultPropertyInclusion(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper2 = objectMapper1.addHandler(deserializationProblemHandler0);
      // Undeclared exception!
      try { 
        objectMapper2.setConfig((DeserializationConfig) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"config\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      objectMapper1.configure(jsonGenerator_Feature0, true);
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        MockDateFormat.getTimeInstance((-346), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -346
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper3 = objectMapper2.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      AnnotatedType annotatedType0 = new AnnotatedType();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedType0, arraySchema0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      JsonAutoDetect.Value jsonAutoDetect_Value1 = JsonAutoDetect.Value.merge(jsonAutoDetect_Value0, jsonAutoDetect_Value0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      AnnotatedType annotatedType0 = new AnnotatedType();
      ModelResolver modelResolver1 = new ModelResolver(objectMapper1);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver1);
      JsonAutoDetect jsonAutoDetect0 = mock(JsonAutoDetect.class, new ViolatedAssumptionAnswer());
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).creatorVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).fieldVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).getterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).isGetterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).setterVisibility();
      JsonAutoDetect.Value.from(jsonAutoDetect0);
      boolean boolean0 = true;
      ModelResolver modelResolver2 = new ModelResolver(objectMapper0);
      ObjectIdGenerator<IOCase> objectIdGenerator0 = (ObjectIdGenerator<IOCase>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findObjectId(modelResolver2, objectIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      deserializationFeatureArray0[3] = deserializationFeature2;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter((PrettyPrinter) null);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create(modelResolver0.NOT_NULL_ANNOTATIONS, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      AnnotatedType annotatedType0 = new AnnotatedType(resolvedRecursiveType0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      annotatedType1.skipOverride(false);
      LinkedList<ModelConverter> linkedList1 = new LinkedList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(linkedList1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonFactory0.enable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("composed-model-properties-as-sibiling", "Can't check class {}, {}");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ObjectMapper.DefaultTyping> schema0 = new io.swagger.v3.oas.models.media.Schema<ObjectMapper.DefaultTyping>(specVersion0);
      schema0.getUniqueItems();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency((Boolean) null);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      LinkedList<ModelResolver> linkedList0 = new LinkedList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(linkedList0);
      Annotation[] annotationArray0 = new Annotation[3];
      Class<ModelResolver> class0 = ModelResolver.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Class<Annotation> class1 = Annotation.class;
      annotationMap0.get(class1);
      annotationArray0[0] = null;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class2);
      annotationArray0[1] = null;
      beanProperty_Bogus0.getContextAnnotation(class1);
      annotationArray0[2] = null;
      // Undeclared exception!
      try { 
        modelResolver0.applyBeanValidatorAnnotations(schema1, annotationArray0, schema1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectMapper0.addHandler(deserializationProblemHandler0);
      AnnotationIntrospector annotationIntrospector0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        dataOutputStream0.writeFloat(1293.911F);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      // Undeclared exception!
      try { 
        objectMapper2.setConfig((SerializationConfig) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"config\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, true);
      Version version0 = new Version((-1728), (-1728), 0, "JSON", "JSON", ":ld%dmKC5GR");
      SimpleModule simpleModule0 = new SimpleModule(version0);
      ObjectMapper objectMapper3 = objectMapper2.registerModule(simpleModule0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper4 = objectMapper3.disable(serializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, (TypeNameResolver) null);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      objectMapper1.enable(jsonParser_FeatureArray0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("#H", "JSON", true, '\"', 1887);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 4)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setConstructorDetector((ConstructorDetector) null);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ModelResolver modelResolver1 = new ModelResolver(objectMapper1);
      ContextAttributes contextAttributes1 = contextAttributes0.withPerCallAttribute(modelResolver0, modelResolver1);
      objectMapper2.setDefaultAttributes(contextAttributes1);
      Class<HashMap> class0 = HashMap.class;
      Class<IOCase> class1 = IOCase.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withTypeHandler(object0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveAccessMode((BeanPropertyDefinition) null, mapType1, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = null;
      try {
        jsonFactoryBuilder0 = new JsonFactoryBuilder((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.TSFBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Nulls nulls0 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      serializationFeatureArray0[0] = serializationFeature1;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, true);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, true);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SubtypeResolver subtypeResolver0 = stdSubtypeResolver0.copy();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(subtypeResolver0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      Nulls nulls0 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultSetterInfo(jsonSetter_Value0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      Nulls nulls1 = Nulls.AS_EMPTY;
      jsonSetter_Value0.withContentNulls(nulls1);
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<IOCase> schema0 = new io.swagger.v3.oas.models.media.Schema<IOCase>(specVersion0);
      Stack<IOCase> stack0 = new Stack<IOCase>();
      stack0.parallelStream();
      io.swagger.v3.oas.models.media.Schema<IOCase> schema1 = schema0.examples(stack0);
      io.swagger.v3.oas.models.media.Schema schema2 = schema0.addRequiredItem("JSON");
      Annotation[] annotationArray0 = null;
      modelResolver0.applyBeanValidatorAnnotations(schema1, (Annotation[]) null, schema0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.parent(schema2);
      AnnotatedType annotatedType2 = annotatedType1.skipJsonIdentity(false);
      AnnotatedType annotatedType3 = annotatedType2.propertyName("v");
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema0, annotatedType3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.NON_PRIVATE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.ANY;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility3 = JsonAutoDetect.Visibility.NON_PRIVATE;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility3);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultSetterInfo((JsonSetter.Value) null);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonParser_FeatureArray0);
      TimeZone timeZone0 = TimeZone.getDefault();
      ObjectMapper objectMapper3 = objectMapper2.setTimeZone(timeZone0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      int int0 = 199;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(199);
      try { 
        defaultSerializerProvider_Impl0.resolveSubType(placeholderForType0, "enums-as-ref");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'enums-as-ref' as a subtype of `$200`: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[8];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      JsonGenerator.Feature jsonGenerator_Feature7 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature7;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion((JsonInclude.Value) null);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Annotated annotated0 = null;
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      modelResolver0._resolvedTypeNames = null;
      // Undeclared exception!
      try { 
        modelResolver0.ignore((Annotated) null, xmlAccessorType0, "c.),ZR ", (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonParser_FeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[6];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      serializationFeatureArray0[1] = serializationFeature1;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0, serializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.CANADA;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy(propertyNamingStrategy0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.resolveAsRef(true);
      annotatedType1.getJsonUnwrappedHandler();
      AnnotatedType annotatedType2 = annotatedType1.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      annotatedType0.name((String) null);
      AnnotatedType annotatedType3 = annotatedType2.skipSchemaName(false);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      Stack<ModelResolver> stack0 = new Stack<ModelResolver>();
      stack0.add((ModelResolver) null);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(stack0);
      AnnotatedType annotatedType4 = annotatedType3.parent(schema1);
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers((io.swagger.v3.oas.models.media.Schema) null, annotatedType4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      TimeZone timeZone0 = TimeZone.getTimeZone("JSON");
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
      ObjectMapper objectMapper2 = objectMapper1.addHandler((DeserializationProblemHandler) null);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Value[] jsonInclude_ValueArray0 = new JsonInclude.Value[1];
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = new JsonInclude.Value(jsonInclude0);
      jsonInclude_ValueArray0[0] = jsonInclude_Value0;
      JsonInclude.Value jsonInclude_Value1 = JsonInclude.Value.mergeAll(jsonInclude_ValueArray0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Value1);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper4 = objectMapper3.enable(deserializationFeature0, deserializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultConstructor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable((Boolean) null);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultAttributes(contextAttributes0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      // Undeclared exception!
      try { 
        objectMapper2.enable(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper3 = objectMapper2.addHandler(deserializationProblemHandler0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = objectMapper0.copy();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      serializationFeatureArray0[1] = serializationFeature1;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      Class<ModelResolver> class0 = ModelResolver.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class0);
      ObjectMapper objectMapper3 = objectMapper2.deactivateDefaultTyping();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      modelResolver0.addRequiredItem(schema0, (String) null);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      deserializationFeatureArray0[0] = deserializationFeature1;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      ObjectMapper objectMapper3 = objectMapper2.copy();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      TimeZone timeZone0 = TimeZone.getDefault();
      ObjectMapper objectMapper2 = objectMapper1.setTimeZone(timeZone0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0, deserializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }
}
