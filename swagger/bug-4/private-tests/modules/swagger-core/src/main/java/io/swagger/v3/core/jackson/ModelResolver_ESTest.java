/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 03 05:27:40 GMT 2023
 */

package io.swagger.v3.core.jackson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.StreamReadCapability;
import com.fasterxml.jackson.core.StreamReadFeature;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.CoercionConfigs;
import com.fasterxml.jackson.databind.cfg.CoercionInputShape;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ConstructorDetector;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.PropertyFilter;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.LogicalType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.LookupCache;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.google.inject.internal.MoreTypes;
import io.swagger.v3.core.converter.AnnotatedType;
import io.swagger.v3.core.converter.ModelConverter;
import io.swagger.v3.core.converter.ModelConverterContext;
import io.swagger.v3.core.converter.ModelConverterContextImpl;
import io.swagger.v3.core.jackson.ModelResolver;
import io.swagger.v3.core.jackson.TypeNameResolver;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.extensions.Extension;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.models.SpecVersion;
import io.swagger.v3.oas.models.media.Discriminator;
import io.swagger.v3.oas.models.media.XML;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import java.io.StringReader;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.text.DateFormat;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.HijrahEra;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Function;
import javax.sql.rowset.serial.SerialBlob;
import javax.xml.bind.annotation.XmlAccessorType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;
import org.slf4j.event.Level;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModelResolver_ESTest extends ModelResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      PriorityQueue<Module> priorityQueue0 = new PriorityQueue<Module>();
      TreeSet<Module> treeSet0 = new TreeSet<Module>(priorityQueue0);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) treeSet0);
      objectMapper1.readerForArrayOf(class0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[6];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      serializationFeatureArray0[3] = serializationFeature1;
      SerializationFeature serializationFeature2 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      serializationFeatureArray0[4] = serializationFeature2;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      objectMapper1.configure(jsonGenerator_Feature0, false);
      serializationFeatureArray0[5] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0, serializationFeatureArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ObjectMapper.findModules(classLoader1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.resolveWriteOnly((Annotated) null, (Annotation[]) null, (Schema) null);
      modelResolver0.resolveDefaultValue((Annotated) null, (Annotation[]) null, (Schema) null);
      modelResolver0.resolveMultipleOf((Annotated) null, (Annotation[]) null, (Schema) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      LinkedList<ModelConverter> linkedList0 = new LinkedList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(linkedList0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveWrapping((JavaType) null, modelConverterContextImpl0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      objectMapper3.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      modelResolver0._addEnumProps(class1, schema0);
      modelResolver0.shouldIgnoreClass(class1);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.type(class0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      doReturn(0).when(arraySchema0).maxItems();
      doReturn((Schema) null, (Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Annotation[] annotationArray0 = new Annotation[6];
      annotationArray0[0] = (Annotation) arraySchema0;
      annotationArray0[1] = (Annotation) arraySchema0;
      annotationArray0[2] = (Annotation) arraySchema0;
      annotationArray0[3] = (Annotation) arraySchema0;
      annotationArray0[4] = (Annotation) arraySchema0;
      annotationArray0[5] = (Annotation) arraySchema0;
      annotatedType0.setCtxAnnotations(annotationArray0);
      modelResolver0.resolveExtensions(annotatedType1, arraySchema0);
      modelResolver0.resolveSchemaMembers(schema0, annotatedType0);
      JavaType javaType0 = null;
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveDiscriminatorProperty((JavaType) null, modelConverterContextImpl0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory1.isEnabled(jsonFactory_Feature0);
      LogicalType logicalType0 = LogicalType.DateTime;
      objectMapper1.coercionConfigFor(logicalType0);
      Annotated annotated0 = null;
      Annotation[] annotationArray0 = null;
      Schema schema1 = null;
      modelResolver0.resolveSchemaMembers(schema0, (Annotated) null, (Annotation[]) null, (Schema) null);
      JavaType javaType0 = null;
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      objectMapper1.disable(jsonParser_FeatureArray0);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveWrapping((JavaType) null, modelConverterContextImpl0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ConstructorDetector constructorDetector0 = ConstructorDetector.EXPLICIT_ONLY;
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector(constructorDetector0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultAttributes(contextAttributes0);
      ObjectMapper objectMapper3 = objectMapper2.findAndRegisterModules();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1336));
      AnnotatedType annotatedType0 = new AnnotatedType(placeholderForType0);
      AnnotatedType annotatedType1 = annotatedType0.schemaProperty(true);
      annotatedType1.getJsonUnwrappedHandler();
      AnnotatedType annotatedType2 = annotatedType1.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType3 = annotatedType2.name("composed-model-properties-as-sibiling");
      annotatedType2.setJsonViewAnnotation((JsonView) null);
      AnnotatedType annotatedType4 = annotatedType3.type(placeholderForType0);
      modelResolver0.hiddenByJsonView((Annotation[]) null, annotatedType4);
      modelResolver0._isOptionalType(placeholderForType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      List<String> list0 = modelResolver0.resolveAllowableValues((Annotated) null, (Annotation[]) null, schema0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      Nulls nulls0 = Nulls.FAIL;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultSetterInfo(jsonSetter_Value0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.resolveExternalDocumentation((ExternalDocumentation) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Annotation[] annotationArray0 = new Annotation[4];
      annotationArray0[0] = (Annotation) null;
      annotationArray0[1] = (Annotation) null;
      annotationArray0[2] = (Annotation) null;
      annotationArray0[3] = (Annotation) null;
      Boolean boolean0 = modelResolver0.resolveWriteOnly((Annotated) null, annotationArray0, (Schema) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      Locale locale0 = Locale.CANADA_FRENCH;
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper4 = objectMapper3.setSubtypeResolver(stdSubtypeResolver0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(581);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0, (Object) modelResolver0, (Object) modelResolver0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, arrayType0, arrayType0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver1 = new ModelResolver(objectMapper3, typeNameResolver0);
      MapLikeType mapLikeType1 = mapLikeType0.withContentTypeHandler(modelResolver1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getWithArgsCreator();
      Annotation[] annotationArray0 = new Annotation[2];
      PropertyName propertyName0 = PropertyName.construct("enums-as-ref");
      Integer integer0 = new Integer(4);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) false, "enums-as-ref", integer0, "");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapLikeType1, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapLikeType1);
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Std1.getContextAnnotation(class0);
      annotationArray0[0] = null;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<Annotation> class1 = Annotation.class;
      annotationMap1.get(class1);
      annotationArray0[1] = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).exclusiveMinimum();
      Boolean boolean0 = modelResolver0.resolveExclusiveMinimum((Annotated) null, annotationArray0, schema0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, false);
      Vector<SimpleModule> vector0 = new Vector<SimpleModule>();
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<? extends Module>) vector0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, (TypeNameResolver) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.name("composed-model-properties-as-sibiling");
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      AnnotatedType annotatedType2 = annotatedType1.parent(schema0);
      ArrayList<ModelConverter> arrayList0 = new ArrayList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(arrayList0);
      StringReader stringReader0 = new StringReader(">NG");
      JsonParser jsonParser0 = objectMapper3.createParser((Reader) stringReader0);
      Class<ModelConverter> class0 = ModelConverter.class;
      MappingIterator<ModelConverter> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
      // Undeclared exception!
      try { 
        modelResolver0.resolve(annotatedType2, modelConverterContextImpl0, mappingIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
      Module[] moduleArray0 = new Module[7];
      Class<LinkOption> class0 = LinkOption.class;
      JsonSerializer<Enum<LinkOption>> jsonSerializer0 = (JsonSerializer<Enum<LinkOption>>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.addKeySerializer((Class<? extends Enum<LinkOption>>) class0, jsonSerializer0);
      moduleArray0[0] = (Module) simpleModule1;
      moduleArray0[1] = (Module) simpleModule0;
      moduleArray0[2] = (Module) simpleModule0;
      moduleArray0[3] = (Module) simpleModule0;
      moduleArray0[4] = (Module) simpleModule0;
      moduleArray0[5] = (Module) simpleModule0;
      moduleArray0[6] = (Module) simpleModule0;
      ObjectMapper objectMapper2 = objectMapper1.registerModules(moduleArray0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).nullable();
      Boolean boolean0 = modelResolver0.resolveNullable((Annotated) null, (Annotation[]) null, schema0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.from(jsonInclude0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, true);
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      externalDocumentation0.getExtensions();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Annotation[] annotationArray0 = new Annotation[7];
      annotationArray0[0] = (Annotation) jsonInclude0;
      annotationArray0[1] = (Annotation) jsonInclude0;
      annotationArray0[2] = (Annotation) jsonInclude0;
      annotationArray0[3] = (Annotation) jsonInclude0;
      annotationArray0[4] = (Annotation) jsonInclude0;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class1 = Annotation.class;
      annotationMap0.get(class1);
      annotationArray0[5] = null;
      annotationArray0[6] = (Annotation) jsonInclude0;
      List<Class<?>> list0 = modelResolver0.getComposedSchemaReferencedClasses(class0, annotationArray0, (Schema) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector((ConstructorDetector) null);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonParser_FeatureArray0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      ObjectReader objectReader0 = objectMapper0.readerForListOf(class0);
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      MappingIterator<ModelConverter> mappingIterator0 = objectReader1.readValues("");
      io.swagger.v3.oas.models.media.Schema schema0 = modelResolver0.resolve((AnnotatedType) null, modelConverterContextImpl0, mappingIterator0);
      assertNull(schema0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      objectMapper0.setDefaultPrettyPrinter((PrettyPrinter) null);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter((PrettyPrinter) null);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      Annotation[] annotationArray0 = null;
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      objectMapper1.configure(serializationFeature0, true);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(schema0).description();
      modelResolver0.resolveDescription((Annotated) null, (Annotation[]) null, schema0);
      modelResolver0.resolveNullable((Annotated) null, (Annotation[]) null, (Schema) null);
      modelResolver0.objectMapper();
      modelResolver0.resolveNullable((Annotated) null, (Annotation[]) null, (Schema) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      try { 
        typeFactory0.findClass("EW^");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class 'EW^.class' should be in target project, but could not be found!
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter((PrettyPrinter) null);
      ConstructorDetector constructorDetector0 = ConstructorDetector.EXPLICIT_ONLY;
      ObjectMapper objectMapper3 = objectMapper2.setConstructorDetector(constructorDetector0);
      Class<ModelResolver> class0 = ModelResolver.class;
      constructorDetector0.shouldIntrospectorImplicitConstructors(class0);
      constructorDetector0.withAllowJDKTypeConstructors(true);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper4 = objectMapper3.setSerializationInclusion(jsonInclude_Include0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, (TypeNameResolver) null);
      modelResolver0.objectMapper();
      Class<SimpleModule> class1 = SimpleModule.class;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema1 = new io.swagger.v3.oas.models.media.Schema<SimpleModule>(specVersion0);
      schema0.setItems(schema1);
      modelResolver0._addEnumProps(class1, schema0);
      JavaType javaType0 = TypeFactory.unknownType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "com.google.common.base.CharMatcher$IsEither", javaType0);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      XML xML0 = modelResolver0.resolveXml(virtualAnnotatedMember0, (Annotation[]) null, schema2);
      assertNull(xML0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = new io.swagger.v3.oas.models.ExternalDocumentation();
      externalDocumentation0.getExtensions();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "object");
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<JsonTypeInfo.As> schema0 = new io.swagger.v3.oas.models.media.Schema<JsonTypeInfo.As>(specVersion0);
      Vector<JsonTypeInfo.As> vector0 = new Vector<JsonTypeInfo.As>();
      io.swagger.v3.oas.models.media.Schema<JsonTypeInfo.As> schema1 = schema0.examples(vector0);
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotatedType annotatedType0 = new AnnotatedType(javaType0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType2 = annotatedType1.schemaProperty(false);
      annotatedType2.getJsonUnwrappedHandler();
      AnnotatedType annotatedType3 = annotatedType2.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      modelResolver0.resolveSchemaMembers(schema1, annotatedType3);
      assertFalse(schema1.getExampleSetFlag());
      assertFalse(schema0.getExampleSetFlag());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getJsonValueAccessor();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      modelResolver0.findJsonValueType(basicBeanDescription0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      Annotation[] annotationArray0 = new Annotation[8];
      annotationArray0[0] = (Annotation) externalDocumentation0;
      annotationArray0[1] = (Annotation) externalDocumentation0;
      annotationArray0[2] = (Annotation) externalDocumentation0;
      annotationArray0[3] = (Annotation) externalDocumentation0;
      annotationArray0[4] = (Annotation) externalDocumentation0;
      annotationArray0[5] = (Annotation) externalDocumentation0;
      annotationArray0[6] = (Annotation) externalDocumentation0;
      annotationArray0[7] = (Annotation) externalDocumentation0;
      // Undeclared exception!
      try { 
        modelResolver0.hiddenByJsonView(annotationArray0, (AnnotatedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      objectMapper2.mixInCount();
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper0.readerForMapOf(class0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      Class<SimpleModule> class1 = SimpleModule.class;
      modelResolver0._addEnumProps(class1, (io.swagger.v3.oas.models.media.Schema) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getDefaultCreator();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).exclusiveMaximum();
      modelResolver0.resolveExclusiveMaximum((Annotated) null, annotationArray0, schema0);
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      Class<ModelResolver> class2 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getWithArgsCreator();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).example();
      // Undeclared exception!
      try { 
        modelResolver0.resolveExample((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory((JsonNodeFactory) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      objectMapper2.enable(deserializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      modelResolver0.addRequiredItem((io.swagger.v3.oas.models.media.Schema) null, "JSON");
      Annotation[] annotationArray0 = new Annotation[1];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class0);
      annotationArray0[0] = null;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.skipOverride(false);
      AnnotatedType annotatedType2 = annotatedType1.name("%*|K2h");
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      AnnotatedType annotatedType3 = annotatedType2.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType4 = annotatedType3.skipJsonIdentity(true);
      boolean boolean0 = modelResolver0.hiddenByJsonView(annotationArray0, annotatedType4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      objectMapper0.getVisibilityChecker();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      Annotation[] annotationArray0 = new Annotation[4];
      annotationArray0[0] = (Annotation) externalDocumentation0;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory0.disable(jsonGenerator_Feature0);
      annotationArray0[1] = (Annotation) externalDocumentation0;
      annotationArray0[2] = (Annotation) externalDocumentation0;
      annotationArray0[3] = (Annotation) externalDocumentation0;
      Schema schema0 = null;
      modelResolver0.resolveReadOnly((Annotated) null, annotationArray0, (Schema) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.getConstructorsWithMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      ObjectMapper objectMapper3 = objectMapper2.setDateFormat(dateFormat0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      objectMapper2.writer(serializationFeature0);
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      Annotated annotated0 = null;
      Annotation[] annotationArray0 = new Annotation[2];
      annotationArray0[0] = (Annotation) externalDocumentation0;
      annotationArray0[1] = (Annotation) externalDocumentation0;
      Schema schema0 = null;
      modelResolver0.resolveExclusiveMaximum((Annotated) null, annotationArray0, (Schema) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      HashMap<String, JsonFactory.Feature> hashMap0 = new HashMap<String, JsonFactory.Feature>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      hashMap0.clone();
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.setFailOnUnknownId(false);
      ObjectMapper objectMapper3 = objectMapper2.setFilterProvider(simpleFilterProvider1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.resolveExternalDocumentation((ExternalDocumentation) null);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = null;
      modelResolver0.addRequiredItem((io.swagger.v3.oas.models.media.Schema) null, "-@=#g728");
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<ModelResolver> class1 = ModelResolver.class;
      JavaType javaType0 = resolvedRecursiveType0.getSuperClass();
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<JsonFactory.Feature> class2 = JsonFactory.Feature.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.constructSpecializedType(javaType0, class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      objectMapper1.getDateFormat();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultAttributes(contextAttributes0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Annotated annotated0 = null;
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      String string0 = "io.swagger.v3.core.jackson.ModelResolver$GeneratorWrapper$IntGeneratorWrapper";
      Annotation[] annotationArray0 = new Annotation[9];
      annotationArray0[0] = (Annotation) xmlAccessorType0;
      annotationArray0[1] = (Annotation) xmlAccessorType0;
      annotationArray0[2] = (Annotation) xmlAccessorType0;
      annotationArray0[3] = (Annotation) xmlAccessorType0;
      annotationArray0[4] = (Annotation) xmlAccessorType0;
      annotationArray0[5] = (Annotation) xmlAccessorType0;
      annotationArray0[6] = (Annotation) xmlAccessorType0;
      annotationArray0[7] = (Annotation) xmlAccessorType0;
      annotationArray0[8] = (Annotation) xmlAccessorType0;
      // Undeclared exception!
      try { 
        modelResolver0.resolveIgnoredProperties((Annotations) null, annotationArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(false);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean1);
      objectMapper1.getDateFormat();
      Vector<Module> vector0 = new Vector<Module>(127);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) vector0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      HashMap<String, ModelResolver> hashMap0 = new HashMap<String, ModelResolver>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      SimpleBeanPropertyFilter.SerializeExceptFilter simpleBeanPropertyFilter_SerializeExceptFilter0 = new SimpleBeanPropertyFilter.SerializeExceptFilter(set0);
      simpleFilterProvider0.setDefaultFilter((PropertyFilter) simpleBeanPropertyFilter_SerializeExceptFilter0);
      objectMapper2.setFilterProvider(simpleFilterProvider0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      doReturn((Class) null).when(externalDocumentation0).annotationType();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      io.swagger.v3.oas.models.media.Schema<Module> schema0 = new io.swagger.v3.oas.models.media.Schema<Module>();
      io.swagger.v3.oas.models.media.Schema<Module> schema1 = schema0.examples(vector0);
      Annotation[] annotationArray0 = new Annotation[6];
      annotationArray0[0] = (Annotation) externalDocumentation0;
      annotationArray0[1] = (Annotation) externalDocumentation0;
      annotationArray0[2] = (Annotation) externalDocumentation0;
      annotationArray0[3] = (Annotation) externalDocumentation0;
      annotationArray0[4] = (Annotation) externalDocumentation0;
      annotationArray0[5] = (Annotation) externalDocumentation0;
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<Module> schema2 = new io.swagger.v3.oas.models.media.Schema<Module>(specVersion0);
      // Undeclared exception!
      try { 
        modelResolver0.applyBeanValidatorAnnotations(schema1, annotationArray0, schema2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      Stack<Module> stack0 = new Stack<Module>();
      ObjectMapper objectMapper4 = objectMapper3.registerModules((Iterable<? extends Module>) stack0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      modelResolver0.objectMapper();
      Class<ModelResolver> class0 = ModelResolver.class;
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<Module> schema0 = new io.swagger.v3.oas.models.media.Schema<Module>(specVersion0);
      io.swagger.v3.oas.models.media.Schema<Module> schema1 = schema0.examples(stack0);
      modelResolver0._addEnumProps(class0, schema1);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema2).minProperties();
      Integer integer0 = modelResolver0.resolveMinProperties((Annotated) null, (Annotation[]) null, schema2);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultLeniency(boolean0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveWriteOnly((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, (TypeNameResolver) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnySetterField();
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getAnySetterMethod();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findAnySetterAccessor();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveReadOnly((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "");
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipSchemaName(true);
      AnnotatedType annotatedType2 = annotatedType1.skipJsonIdentity(false);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType3 = annotatedType2.jsonViewAnnotation(jsonView0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      AnnotatedType annotatedType4 = annotatedType3.skipOverride(false);
      modelResolver0.decorateModelName(annotatedType4, "");
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation1 = modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      assertNull(externalDocumentation1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0, serializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema0).uniqueItems();
      modelResolver0.resolveUniqueItems(annotatedType0, arraySchema0);
      Class<SimpleModule> class0 = SimpleModule.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      Annotation[] annotationArray0 = new Annotation[5];
      annotationArray0[0] = (Annotation) arraySchema0;
      annotationArray0[1] = (Annotation) arraySchema0;
      annotationArray0[2] = (Annotation) arraySchema0;
      annotationArray0[3] = (Annotation) arraySchema0;
      annotationArray0[4] = (Annotation) arraySchema0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(schema0).multipleOf();
      modelResolver0.resolveMultipleOf((Annotated) null, annotationArray0, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      modelResolver0.resolveXml((Annotated) null, annotationArray0, schema1);
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        modelResolver0.ignore((Annotated) null, xmlAccessorType0, "I57KRlh6", treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      Schema.RequiredMode schema_RequiredMode0 = modelResolver0.resolveRequiredMode((Schema) null);
      assertEquals(Schema.RequiredMode.AUTO, schema_RequiredMode0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamReadFeature streamReadFeature0 = StreamReadFeature.IGNORE_UNDEFINED;
      jsonFactoryBuilder0.enable(streamReadFeature0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      objectMapper1.configure(jsonParser_Feature0, true);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      modelResolver0.addRequiredItem(schema0, "");
      // Undeclared exception!
      try { 
        modelResolver0.findJsonValueType((BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      objectMapper3.copy();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      JavaType javaType0 = null;
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      schema0.type("-or-");
      // Undeclared exception!
      try { 
        modelResolver0.resolveWrapping((JavaType) null, modelConverterContextImpl0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonAutoDetect jsonAutoDetect0 = mock(JsonAutoDetect.class, new ViolatedAssumptionAnswer());
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).creatorVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).fieldVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).getterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).isGetterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).setterVisibility();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.from(jsonAutoDetect0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper3 = objectMapper2.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      deserializationFeatureArray0[5] = deserializationFeature1;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectMapper objectMapper4 = objectMapper3.enable(deserializationFeature0, deserializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema0).minLength();
      Integer integer0 = modelResolver0.resolveMinLength((Annotated) null, (Annotation[]) null, schema0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming((AccessorNamingStrategy.Provider) null);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Value0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("JSON", (Object) modelResolver0);
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std1);
      ObjectMapper objectMapper4 = objectMapper3.findAndRegisterModules();
      ModelResolver modelResolver1 = new ModelResolver(objectMapper4, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ModelResolver modelResolver2 = new ModelResolver(objectMapper0);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(modelResolver2);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      Discriminator discriminator0 = modelResolver0.resolveDiscriminator(javaType0, modelConverterContextImpl0);
      assertNull(discriminator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.empty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      LinkedList<ModelResolver> linkedList0 = new LinkedList<ModelResolver>();
      objectMapper1.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      linkedList0.containsAll(modelResolver0.NOT_NULL_ANNOTATIONS);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(linkedList0);
      modelResolver0._addEnumProps(class0, schema1);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.name("");
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      modelResolver0.resolveMinItems(annotatedType1, arraySchema0);
      Annotation[] annotationArray0 = new Annotation[1];
      annotationArray0[0] = (Annotation) arraySchema0;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((ExternalDocumentation) null).when(schema2).externalDocs();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = modelResolver0.resolveExternalDocumentation((Annotated) null, annotationArray0, schema2);
      assertNull(externalDocumentation0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ConstructorDetector.SingleArgConstructor> class0 = ConstructorDetector.SingleArgConstructor.class;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0._addEnumProps(class0, schema0);
      assertFalse(schema0.getExampleSetFlag());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getJsonKeyAccessor();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getJsonValueAccessor();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      modelResolver0.findJsonValueType(basicBeanDescription0);
      basicBeanDescription0.findJsonKeyAccessor();
      modelResolver0.resolveDeprecated((Annotated) null, (Annotation[]) null, (Schema) null);
      AnnotatedType annotatedType0 = null;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      modelResolver0.resolveMinItems((AnnotatedType) null, arraySchema0);
      modelResolver0.resolveDescription((Annotated) null, (Annotation[]) null, (Schema) null);
      Annotation[] annotationArray0 = new Annotation[1];
      annotationArray0[0] = (Annotation) arraySchema0;
      modelResolver0.resolveFormat((Annotated) null, annotationArray0, (Schema) null);
      Annotation[] annotationArray1 = new Annotation[0];
      modelResolver0.resolveTitle((Annotated) null, annotationArray1, (Schema) null);
      String string0 = "8.1";
      // Undeclared exception!
      try { 
        modelResolver0.decorateModelName((AnnotatedType) null, "8.1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      Boolean boolean0 = new Boolean("JSON");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_CONTEXT_TIME_ZONE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0, serializationFeatureArray0);
      objectMapper0.writer((FormatSchema) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      Class<RoundingMode> class0 = RoundingMode.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[0], javaTypeArray0[2]);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "JSON");
      StringBuilder stringBuilder1 = referenceType0.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = resolvedRecursiveType0.getGenericSignature(stringBuilder1);
      placeholderForType0.getErasedSignature(stringBuilder2);
      objectMapper3.canDeserialize((JavaType) placeholderForType0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<RoundingMode> schema0 = new io.swagger.v3.oas.models.media.Schema<RoundingMode>(specVersion0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema0, (AnnotatedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ConstructorDetector constructorDetector0 = ConstructorDetector.EXPLICIT_ONLY;
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector(constructorDetector0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      Annotation[] annotationArray0 = new Annotation[0];
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaProperties((JavaType) null, annotationArray0, modelConverterContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      TreeSet<Module> treeSet0 = new TreeSet<Module>();
      TreeSet<Module> treeSet1 = new TreeSet<Module>((SortedSet<Module>) treeSet0);
      objectMapper1.registerModules((Iterable<? extends Module>) treeSet1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1955));
      placeholderForType0.actualType();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      Stack<ModelResolver> stack0 = new Stack<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(stack0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveDiscriminatorProperty((JavaType) null, modelConverterContextImpl0, schema1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues((InjectableValues) null);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter((PrettyPrinter) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      Annotation[] annotationArray0 = new Annotation[4];
      annotationArray0[0] = (Annotation) jsonView0;
      annotationArray0[1] = (Annotation) jsonView0;
      annotationArray0[2] = (Annotation) jsonView0;
      annotationArray0[3] = (Annotation) jsonView0;
      AnnotatedType annotatedType2 = annotatedType1.ctxAnnotations(annotationArray0);
      AnnotatedType annotatedType3 = annotatedType2.propertyName("JSON");
      AnnotatedType annotatedType4 = annotatedType3.schemaProperty(false);
      // Undeclared exception!
      try { 
        modelResolver0.decorateModelName(annotatedType4, "*0T3^2b0W2F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonParser_Feature0, false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<HijrahEra> schema0 = new io.swagger.v3.oas.models.media.Schema<HijrahEra>(specVersion0);
      schema0.getJsonSchema();
      ModelResolver modelResolver1 = new ModelResolver(objectMapper2);
      schema0.setExample(modelResolver1);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      objectMapper2.reader((InjectableValues) injectableValues_Std0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      objectMapper2.createGenerator((Writer) charArrayWriter0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
      objectMapper1.writer(serializationFeature0);
      Class<Path> class0 = nioPathSerializer0.handledType();
      modelResolver0.shouldIgnoreClass(class0);
      SpecVersion specVersion1 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<Month> schema1 = new io.swagger.v3.oas.models.media.Schema<Month>(specVersion1);
      ArrayList<Month> arrayList0 = new ArrayList<Month>();
      io.swagger.v3.oas.models.media.Schema<Month> schema2 = schema1.examples(arrayList0);
      Annotation[] annotationArray0 = new Annotation[0];
      modelResolver0.applyBeanValidatorAnnotations(schema2, annotationArray0, schema2, false);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      CoercionConfigs coercionConfigs0 = new CoercionConfigs();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0, coercionConfigs0);
      Class<ModelResolver> class1 = ModelResolver.class;
      // Undeclared exception!
      try { 
        deserializationConfig0.introspectClassAnnotations(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.propertyName("enums-as-ref");
      AnnotatedType annotatedType2 = annotatedType1.name("");
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      AnnotatedType annotatedType3 = annotatedType2.parent(schema0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      modelResolver0.resolveExtensions(annotatedType1, arraySchema0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectMapper3.addHandler(deserializationProblemHandler0);
      AnnotatedType annotatedType4 = annotatedType3.skipJsonIdentity(false);
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema1).uniqueItems();
      modelResolver0.resolveUniqueItems(annotatedType4, arraySchema1);
      ArraySchema arraySchema2 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema2).minItems();
      modelResolver0.resolveMinItems((AnnotatedType) null, arraySchema2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      Class<SimpleModule> class0 = SimpleModule.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Empty0, class0, "enums-as-ref", (JavaType) null);
      Annotation[] annotationArray0 = new Annotation[6];
      annotationArray0[0] = (Annotation) arraySchema2;
      annotationArray0[1] = (Annotation) arraySchema0;
      annotationArray0[2] = (Annotation) arraySchema2;
      annotationArray0[3] = (Annotation) arraySchema0;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, virtualAnnotatedMember0, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, (JavaType) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std1.getAnnotation(class1);
      annotationArray0[4] = null;
      annotationArray0[5] = (Annotation) arraySchema0;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1).maximum();
      BigDecimal bigDecimal0 = modelResolver0.resolveMaximum(virtualAnnotatedMember0, annotationArray0, schema1);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      Class<StreamReadCapability> class0 = StreamReadCapability.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) collectionLikeType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0, javaTypeArray0[6]);
      MapType mapType1 = mapType0.withContentTypeHandler(modelResolver0);
      MapLikeType mapLikeType0 = mapType1.withKeyType(javaTypeArray0[6]);
      boolean boolean0 = modelResolver0.shouldIgnoreClass(mapLikeType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector1);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector(annotationIntrospector1);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      Annotation[] annotationArray0 = new Annotation[0];
      modelResolver0.applyBeanValidatorAnnotations(schema0, annotationArray0, schema0, true);
      assertNull(schema0.getContentMediaType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      DefaultAccessorNamingStrategy.BaseNameValidator defaultAccessorNamingStrategy_BaseNameValidator0 = DefaultAccessorNamingStrategy.FirstCharBasedValidator.forFirstNameRule(false, true);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider1 = defaultAccessorNamingStrategy_Provider0.withBaseNameValidator(defaultAccessorNamingStrategy_BaseNameValidator0);
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      AnnotatedType annotatedType1 = annotatedType0.parent(schema0);
      AnnotatedType annotatedType2 = annotatedType1.skipOverride(false);
      AnnotatedType annotatedType3 = annotatedType2.type((Type) null);
      String string0 = modelResolver0.decorateModelName(annotatedType3, "JSON");
      assertEquals("JSON", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      beanSerializerFactory0.buildEnumSetSerializer(collectionLikeType0);
      objectMapper0.setSerializerFactory(beanSerializerFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      objectMapper0.reader(jsonNodeFactory0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType(collectionLikeType0);
      annotatedType0.getJsonUnwrappedHandler();
      AnnotatedType annotatedType1 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType2 = annotatedType1.propertyName("");
      Boolean boolean0 = modelResolver0.resolveUniqueItems(annotatedType2, (ArraySchema) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule("JSON", version0);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
      ObjectMapper objectMapper3 = objectMapper2.registerModule(simpleModule1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      ArrayList<ModelResolver> arrayList0 = new ArrayList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(arrayList0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      Class<ModelResolver> class0 = ModelResolver.class;
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      JavaType javaType1 = typeFactory0.resolveMemberType(javaType0, typeBindings0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType1);
      valueInstantiator_Base0.getArrayDelegateCreator();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema2).defaultValue();
      doReturn((String) null, (String) null).when(schema2).description();
      doReturn((String) null).when(schema2).format();
      doReturn((String) null).when(schema2).title();
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema1, (Annotated) null, annotationArray0, schema2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory(typeFactory0);
      ObjectMapper objectMapper3 = objectMapper2.deactivateDefaultTyping();
      ConstructorDetector constructorDetector0 = ConstructorDetector.DEFAULT;
      ObjectMapper objectMapper4 = objectMapper3.setConstructorDetector(constructorDetector0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      Class<Void> class0 = Void.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType2 = annotatedType1.skipJsonIdentity(false);
      AnnotatedType annotatedType3 = annotatedType2.type(class0);
      Annotation[] annotationArray0 = new Annotation[2];
      annotationArray0[0] = (Annotation) jsonView0;
      annotationArray0[1] = (Annotation) jsonView0;
      AnnotatedType annotatedType4 = annotatedType3.ctxAnnotations(annotationArray0);
      modelResolver0.resolveSchemaMembers(schema0, annotatedType4);
      assertFalse(schema0.getExampleSetFlag());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.setBase64Variant((Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SubtypeResolver subtypeResolver0 = stdSubtypeResolver0.copy();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(subtypeResolver0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Annotation[] annotationArray0 = new Annotation[1];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class0);
      annotationArray0[0] = null;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.skipJsonIdentity(false);
      AnnotatedType annotatedType2 = annotatedType1.type(class0);
      AnnotatedType annotatedType3 = annotatedType2.schemaProperty(false);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      AnnotatedType annotatedType4 = annotatedType3.parent(schema0);
      boolean boolean0 = modelResolver0.hiddenByJsonView(annotationArray0, annotatedType4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      ObjectReader objectReader0 = objectMapper2.readerForListOf(class1);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      deserializationFeatureArray0[4] = deserializationFeature4;
      DeserializationFeature deserializationFeature5 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      deserializationFeatureArray0[5] = deserializationFeature5;
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature5);
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      ObjectMapper objectMapper3 = objectMapper2.setTypeFactory(typeFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      // Undeclared exception!
      try { 
        modelResolver0.hasHiddenAnnotation((Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory((SerializerFactory) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      Stack<ModelResolver> stack0 = new Stack<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(stack0);
      modelResolver0.applyBeanValidatorAnnotations(schema1, (Annotation[]) null, schema0, true);
      assertNull(schema1.getMaxProperties());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonGenerator_FeatureArray0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "JSON");
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper4 = objectMapper3.configure(serializationFeature0, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      AnnotatedType annotatedType0 = new AnnotatedType();
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedType0, (ArraySchema) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultAttributes(contextAttributes0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.resolveIgnoredProperties((Annotation[]) null);
      modelResolver0.objectMapper();
      Class<ModelResolver> class0 = ModelResolver.class;
      modelResolver0._addEnumProps(class0, (io.swagger.v3.oas.models.media.Schema) null);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      modelResolver0.addRequiredItem(schema0, ".5b-tkAXOU22");
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      // Undeclared exception!
      try { 
        ArrayType.construct((JavaType) null, typeBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      Class<ModelResolver> class0 = ModelResolver.class;
      ObjectReader objectReader0 = objectMapper0.readerForListOf(class0);
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      StreamReadFeature streamReadFeature0 = StreamReadFeature.AUTO_CLOSE_SOURCE;
      StreamReadFeature[] streamReadFeatureArray0 = new StreamReadFeature[0];
      jsonFactoryBuilder0.enable(streamReadFeature0, streamReadFeatureArray0);
      Class<HashMap> class1 = HashMap.class;
      jsonFactoryBuilder0.rootValueSeparator(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      modelResolver0._isOptionalType(mapType0);
      Class<SimpleModule> class2 = SimpleModule.class;
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema0 = new io.swagger.v3.oas.models.media.Schema<SimpleModule>(specVersion0);
      modelResolver0._addEnumProps(class2, schema0);
      Annotation[] annotationArray0 = new Annotation[0];
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      modelResolver0.resolveSchemaProperties(mapType0, annotationArray0, modelConverterContextImpl0);
      modelResolver0.addRequiredItem(schema0, "bind-type");
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Empty0, class2, "X|!$?o1Ii", mapType0);
      Annotation[] annotationArray1 = null;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(schema1).description();
      modelResolver0.resolveDescription(virtualAnnotatedMember0, (Annotation[]) null, schema1);
      modelResolver0._isOptionalType(mapType0);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema2).format();
      modelResolver0.resolveFormat(virtualAnnotatedMember0, (Annotation[]) null, schema2);
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.RequiredMode) null).when(schema3).requiredMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveRequiredMode(schema3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("##default");
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<?> class0 = TypeFactory.rawClass(javaType0);
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType2 = annotatedType1.skipSchemaName(false);
      Annotation[] annotationArray0 = new Annotation[7];
      annotationArray0[0] = (Annotation) jsonView0;
      annotationArray0[1] = (Annotation) jsonView0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      annotationArray0[2] = null;
      annotationArray0[3] = (Annotation) jsonView0;
      annotationArray0[4] = (Annotation) jsonView0;
      annotationArray0[5] = (Annotation) jsonView0;
      annotationArray0[6] = (Annotation) jsonView0;
      AnnotatedType annotatedType3 = annotatedType2.ctxAnnotations(annotationArray0);
      AnnotatedType annotatedType4 = annotatedType3.propertyName((String) null);
      annotatedType1.setName("(");
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      modelResolver0.resolveMaxItems(annotatedType4, arraySchema0);
      Class<ModelResolver> class2 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getDefaultCreator();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).defaultValue();
      // Undeclared exception!
      try { 
        modelResolver0.resolveDefaultValue((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      io.swagger.v3.oas.models.media.Schema<Proxy.Type> schema0 = new io.swagger.v3.oas.models.media.Schema<Proxy.Type>();
      String string0 = "";
      modelResolver0.addRequiredItem(schema0, "");
      Annotated annotated0 = null;
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("enums-as-ref");
      // Undeclared exception!
      try { 
        modelResolver0.ignore((Annotated) null, xmlAccessorType0, "javax.validation.constraints.Min", hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.RequiredMode) null).when(schema0).requiredMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveRequiredMode(schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      objectMapper0.disable(deserializationFeature0);
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      Locale locale0 = Locale.GERMAN;
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper2.readerForListOf(class0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SubtypeResolver subtypeResolver0 = stdSubtypeResolver0.copy();
      objectMapper3.setSubtypeResolver(subtypeResolver0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.name("composed-model-properties-as-sibiling");
      annotatedType1.getJsonUnwrappedHandler();
      annotatedType0.ctxAnnotations((Annotation[]) null);
      AnnotatedType annotatedType2 = annotatedType1.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType3 = annotatedType2.resolveAsRef(false);
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema0, annotatedType3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      JsonGenerator.Feature jsonGenerator_Feature7 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature7;
      JsonGenerator.Feature jsonGenerator_Feature8 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature8;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      boolean boolean0 = modelResolver0._isOptionalType(mapType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      Class<Level> class0 = Level.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) mapLikeType0, javaTypeArray0, javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "POJO", collectionLikeType0);
      Class<Level> class2 = Level.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class2, (Annotation) null);
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).minimum();
      BigDecimal bigDecimal0 = modelResolver0.resolveMinimum(annotated0, (Annotation[]) null, schema0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setConstructorDetector(constructorDetector0);
      JsonAutoDetect jsonAutoDetect0 = mock(JsonAutoDetect.class, new ViolatedAssumptionAnswer());
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).creatorVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).fieldVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).getterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).isGetterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).setterVisibility();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.from(jsonAutoDetect0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultVisibility(jsonAutoDetect_Value0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<ModelResolver> class0 = ModelResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "composed-model-properties-as-sibiling", referenceType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Empty0, (Field) null, (AnnotationMap) null);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).format();
      String string0 = modelResolver0.resolveFormat(annotatedField0, (Annotation[]) null, schema0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility3 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility3);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class0);
      CollectionLikeType collectionLikeType0 = collectionType0.withStaticTyping();
      ClassLoader.getSystemClassLoader();
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(modelResolver0);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      io.swagger.v3.oas.models.media.Schema<Base64Variant.PaddingReadBehaviour> schema0 = new io.swagger.v3.oas.models.media.Schema<Base64Variant.PaddingReadBehaviour>();
      modelResolver0.resolveDiscriminatorProperty(collectionLikeType1, modelConverterContextImpl0, schema0);
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.skipSchemaName(true);
      AnnotatedType annotatedType2 = annotatedType1.propertyName("d9($44Qz");
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      modelResolver0.resolveMinItems(annotatedType2, arraySchema0);
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema1).extensions();
      modelResolver0.resolveExtensions(annotatedType2, arraySchema1);
      modelResolver0.shouldIgnoreClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Annotation[] annotationArray0 = new Annotation[1];
      annotationArray0[0] = (Annotation) arraySchema0;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1).pattern();
      modelResolver0.resolvePattern((Annotated) null, annotationArray0, schema1);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation1 = modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      assertNull(externalDocumentation1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = null;
      annotationArray0[1] = null;
      annotationArray0[2] = null;
      modelResolver0.resolveIgnoredProperties(annotationMap0, annotationArray0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema0).maxProperties();
      modelResolver0.resolveMaxProperties((Annotated) null, annotationArray0, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(schema1).maxLength();
      modelResolver0.resolveMaxLength((Annotated) null, annotationArray0, schema1);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(schema2).multipleOf();
      modelResolver0.resolveMultipleOf((Annotated) null, annotationArray0, schema2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, (-960));
      TypeFactory typeFactory1 = typeFactory0.withCache((LookupCache<Object, JavaType>) lRUMap0);
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
      Class<HashMap> class1 = HashMap.class;
      // Undeclared exception!
      try { 
        typeFactory2.constructRawMapType(class1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1523160630) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      LinkedList<ModelResolver> linkedList0 = new LinkedList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(linkedList0);
      modelResolver0._addEnumProps(class0, schema1);
      Vector<ModelConverter> vector0 = new Vector<ModelConverter>(linkedList0);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(vector0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveDiscriminator((JavaType) null, modelConverterContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      Class<Byte> class0 = Byte.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.skipJsonIdentity(false);
      AnnotatedType annotatedType2 = annotatedType1.type(class0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      AnnotatedType annotatedType3 = annotatedType2.parent(schema0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      AnnotatedType annotatedType4 = annotatedType3.jsonViewAnnotation(jsonView0);
      ArrayList<ModelConverter> arrayList0 = new ArrayList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(arrayList0);
      ObjectReader objectReader0 = objectMapper0.readerForMapOf(class0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)122;
      MappingIterator<ModelConverter> mappingIterator0 = objectReader0.readValues(byteArray0, (int)  (-7), (int)  (-7));
      // Undeclared exception!
      try { 
        modelResolver0.resolve(annotatedType4, modelConverterContextImpl0, mappingIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      objectMapper2.enable(jsonParser_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      jsonAutoDetect_Value0.withGetterVisibility(jsonAutoDetect_Visibility0);
      // Undeclared exception!
      try { 
        modelResolver0._isOptionalType((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      HashMap<String, Proxy.Type> hashMap0 = new HashMap<String, Proxy.Type>();
      HashMap<String, Proxy.Type> hashMap1 = new HashMap<String, Proxy.Type>(hashMap0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap1);
      objectMapper0.writer((FilterProvider) simpleFilterProvider0);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap2);
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipJsonIdentity(false);
      AnnotatedType annotatedType2 = annotatedType1.propertyName("enums-as-ref");
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      modelResolver0.resolveMaxItems(annotatedType2, arraySchema0);
      Class<ModelResolver> class0 = ModelResolver.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSuperClass();
      ValueInstantiator.Base valueInstantiator_Base0 = null;
      try {
        valueInstantiator_Base0 = new ValueInstantiator.Base((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class1);
      Locale locale0 = Locale.CANADA_FRENCH;
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      TreeSet<Locale.LanguageRange> treeSet0 = new TreeSet<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(treeSet0);
      Locale.lookupTag(arrayList0, modelResolver0.NOT_NULL_ANNOTATIONS);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findBackReferences();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0, serializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      // Undeclared exception!
      try { 
        modelResolver0.findJsonValueType((BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Boolean boolean0 = Boolean.TRUE;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion((JsonInclude.Value) null);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper3.findMixInClassFor(class0);
      boolean boolean1 = modelResolver0.shouldIgnoreClass((Type) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      BeanPropertyDefinition beanPropertyDefinition0 = null;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveAccessMode((BeanPropertyDefinition) null, javaType0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl1);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility3 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility3);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0, deserializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<SimpleModule> class0 = SimpleModule.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType(class0, class1, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema schema1 = modelResolver0.resolveWrapping(referenceType0, modelConverterContextImpl0, schema0);
      assertNull(schema1.getReadOnly());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      HashMap<ModelResolver, CoercionInputShape> hashMap0 = new HashMap<ModelResolver, CoercionInputShape>();
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultAttributes(contextAttributes1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      modelResolver0.objectMapper();
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      modelResolver0.resolveExternalDocumentation(externalDocumentation1);
      Class<CoercionInputShape> class0 = CoercionInputShape.class;
      Annotation[] annotationArray0 = new Annotation[1];
      annotationArray0[0] = (Annotation) externalDocumentation1;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema0).allOf();
      doReturn((Class[]) null).when(schema0).anyOf();
      doReturn((Class[]) null).when(schema0).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class0, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ModelResolver> class2 = ModelResolver.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector1);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      serializationFeatureArray0[2] = serializationFeature1;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      SerializationFeature serializationFeature2 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      serializationFeatureArray0[6] = serializationFeature2;
      serializationFeatureArray0[7] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_DELEGATING;
      ObjectMapper objectMapper3 = objectMapper2.setConstructorDetector(constructorDetector0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      dOMDeserializer_DocumentDeserializer0.getValueType();
      TypeNameResolver.Options[] typeNameResolver_OptionsArray0 = new TypeNameResolver.Options[1];
      TypeNameResolver.Options typeNameResolver_Options0 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[0] = typeNameResolver_Options0;
      // Undeclared exception!
      try { 
        typeNameResolver0.nameForType((JavaType) null, typeNameResolver_OptionsArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.TypeNameResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      Class<DoubleNode> class0 = DoubleNode.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[0], javaType0);
      TypeNameResolver typeNameResolver1 = new TypeNameResolver();
      ModelResolver modelResolver1 = new ModelResolver(objectMapper0, typeNameResolver1);
      DoubleNode doubleNode0 = new DoubleNode((-528.0));
      ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null, (Object) modelResolver1, (Object) doubleNode0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(doubleNode0);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      ArrayType arrayType3 = arrayType2.withValueHandler(doubleNode0);
      ArrayType arrayType4 = arrayType3.withContentValueHandler(doubleNode0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      ModelResolver modelResolver2 = new ModelResolver(objectMapper1);
      ArrayType arrayType5 = arrayType4.withTypeHandler(modelResolver2);
      javaTypeArray0[2] = (JavaType) arrayType5;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[1], (JavaType) arrayType5);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) mapType0);
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, javaTypeArray0, javaTypeArray0[0]);
      SimpleType simpleType0 = referenceType1.withStaticTyping();
      DoubleNode doubleNode1 = DoubleNode.valueOf(3004.4729632);
      JavaType javaType1 = simpleType0.withContentTypeHandler(doubleNode1);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      modelResolver0.resolveDiscriminatorProperty(javaType1, (ModelConverterContext) null, schema0);
      assertFalse(javaType1.isInterface());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Locale locale0 = Locale.ROOT;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema0).allOf();
      doReturn((Class[]) null).when(schema0).anyOf();
      doReturn((Class[]) null).when(schema0).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class0, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      Boolean boolean0 = Boolean.valueOf("com.google.inject.internal.RealOptionalBinder$RealOptionalKeyProvider");
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      ObjectMapper objectMapper3 = objectMapper2.setTypeFactory(typeFactory1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      // Undeclared exception!
      try { 
        modelResolver0.ignore((Annotated) null, xmlAccessorType0, "com.google.inject.internal.RealOptionalBinder$RealOptionalKeyProvider", set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      SerializedString serializedString0 = (SerializedString)JsonFactory.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, serializedString0);
      objectMapper1.setDefaultPrettyPrinter(defaultPrettyPrinter1);
      DefaultPrettyPrinter.NopIndenter defaultPrettyPrinter_NopIndenter0 = new DefaultPrettyPrinter.NopIndenter();
      defaultPrettyPrinter0.withArrayIndenter(defaultPrettyPrinter_NopIndenter0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "com.fasterxml.jackson.core.format.InputAccessor$Std", false, '[', 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultAttributes(contextAttributes0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper2.findMixInClassFor(class0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = null;
      try {
        defaultPrettyPrinter0 = new DefaultPrettyPrinter((DefaultPrettyPrinter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonFactory jsonFactory0 = null;
      try {
        jsonFactory0 = new JsonFactory((JsonFactoryBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      Nulls nulls0 = Nulls.FAIL;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0);
      JsonSetter.Value jsonSetter_Value1 = JsonSetter.Value.merge(jsonSetter_Value0, jsonSetter_Value0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultSetterInfo(jsonSetter_Value1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0, deserializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      modelResolver0.resolveExtensions((AnnotatedType) null, arraySchema0);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(schema0).extensions();
      modelResolver0.resolveExtensions((Annotated) null, annotationArray0, schema0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
      ObjectMapper objectMapper2 = objectMapper1.setAccessorNaming((AccessorNamingStrategy.Provider) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
      LogicalType logicalType0 = LogicalType.Float;
      objectMapper2.coercionConfigFor(logicalType0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0, serializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<JsonReadFeature> class1 = JsonReadFeature.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) simpleType0;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      MapType mapType1 = (MapType)mapType0.withKeyValueHandler(linkedList0);
      Object object0 = new Object();
      MapType mapType2 = (MapType)mapType1.withContentValueHandler(object0);
      javaTypeArray0[1] = (JavaType) mapType2;
      javaTypeArray0[2] = (JavaType) simpleType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
      CollectionType collectionType1 = collectionType0.withContentValueHandler((Object) null);
      CollectionType collectionType2 = collectionType1.withValueHandler((Object) null);
      CollectionType collectionType3 = collectionType2.withTypeHandler(object0);
      CollectionType collectionType4 = collectionType3.withStaticTyping();
      typeNameResolver0.findStdName(collectionType4);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.EXPLICIT_ONLY;
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector(constructorDetector0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory(beanSerializerFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", false, '\"', 1263);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      Class<ModelResolver> class0 = ModelResolver.class;
      HashSet<TypeNameResolver.Options> hashSet0 = new HashSet<TypeNameResolver.Options>();
      typeNameResolver0.nameForClass(class0, hashSet0);
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      objectMapper1.deactivateDefaultTyping();
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      TypeReference<Enum<JsonReadFeature>> typeReference0 = (TypeReference<Enum<JsonReadFeature>>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        objectMapper1.readValue((InputStream) null, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"src\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "h:tzY?^I<PKwwZ");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      objectMapper0.configure(serializationFeature0, false);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_PROPERTIES_BASED;
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, "JSON");
      Class<Module> class0 = Module.class;
      // Undeclared exception!
      try { 
        objectMapper0.readValue(uRL1, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        objectMapper0.registerModules((Iterable<? extends Module>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"modules\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Integer integer0 = modelResolver0.resolveMaxItems((AnnotatedType) null, (ArraySchema) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonFactoryBuilder0.quoteChar('\"');
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      objectMapper1.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector1);
      ContextAttributes.Impl.getEmpty();
      // Undeclared exception!
      try { 
        ThaiBuddhistEra.valueOf("R }(*QQd*rsb8v{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.time.chrono.ThaiBuddhistEra.R }(*QQd*rsb8v{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      JsonNodeFactory.withExactBigDecimals(false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      byteArrayBuilder0.append(0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      modelResolver0._addEnumProps(class0, (io.swagger.v3.oas.models.media.Schema) null);
      try { 
        objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) modelResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class io.swagger.v3.core.jackson.ModelResolver and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, true);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      objectMapper2.enable(serializationFeature0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ModelResolver> class0 = ModelResolver.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, (JavaType) null, (JavaType) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0, (PolymorphicTypeValidator) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnknownTypeId(mapLikeType0, "GP", classNameIdResolver0, "GP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0.addRequiredItem(schema0, "");
      assertNull(schema0.getExclusiveMinimum());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      Discriminator discriminator0 = new Discriminator();
      discriminator0.getMapping();
      // Undeclared exception!
      try { 
        ZoneId.of("kYjG;eI{V", (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // aliasMap
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      jsonFactory0.createParser(charArray0, 1899, 1899);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      Class<ModelResolver> class0 = ModelResolver.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      ObjectMapper objectMapper2 = objectMapper1.setDateFormat(dateFormat0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, false);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultAttributes(contextAttributes0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      ObjectMapper.findModules((ClassLoader) null);
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<Byte> class0 = Byte.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.skipSchemaName(true);
      AnnotatedType annotatedType2 = annotatedType1.resolveAsRef(true);
      AnnotatedType annotatedType3 = annotatedType2.name("io.swagger.v3.core.jackson.ModelResolver$GeneratorWrapper$PropertyGeneratorWrapper");
      AnnotatedType annotatedType4 = annotatedType3.skipJsonIdentity(true);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      io.swagger.v3.oas.models.media.Schema schema0 = modelResolver0.resolve(annotatedType4, modelConverterContextImpl0, (Iterator<ModelConverter>) null);
      assertNotNull(schema0);
      assertFalse(schema0.getExampleSetFlag());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider0, defaultDeserializationContext0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      File file0 = MockFile.createTempFile("JSON", "JSON");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      // Undeclared exception!
      try { 
        objectMapper0.setConfig((SerializationConfig) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"config\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      // Undeclared exception!
      try { 
        objectMapper0.setConfig((DeserializationConfig) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"config\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      objectMapper0.configure(serializationFeature0, false);
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      objectMapper0.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      defaultAccessorNamingStrategy_Provider0.withBuilderPrefix("");
      ContentReference contentReference0 = ContentReference.construct(false, (Object) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, contentReference0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 665, pipedInputStream0, objectMapper0, byteQuadsCanonicalizer0, (byte[]) null, 3, 2074, 2, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) uTF8StreamJsonParser0, (JsonParser) uTF8StreamJsonParser0);
      iOContext0.releaseReadIOBuffer((byte[]) null);
      JsonParser jsonParser0 = jsonParserSequence0.overrideFormatFeatures(Integer.MAX_VALUE, 1);
      Class<DataInputStream> class0 = DataInputStream.class;
      // Undeclared exception!
      try { 
        objectMapper1.readValues(jsonParser0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, false);
      HashMap<String, ModelResolver> hashMap0 = new HashMap<String, ModelResolver>(562);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper3 = objectMapper2.setFilterProvider(simpleFilterProvider0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      MoreTypes.GenericArrayTypeImpl moreTypes_GenericArrayTypeImpl0 = new MoreTypes.GenericArrayTypeImpl((Type) null);
      AnnotatedType annotatedType0 = new AnnotatedType(moreTypes_GenericArrayTypeImpl0);
      AnnotatedType annotatedType1 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType2 = annotatedType1.type(moreTypes_GenericArrayTypeImpl0);
      AnnotatedType annotatedType3 = annotatedType2.parent(schema0);
      AnnotatedType annotatedType4 = annotatedType3.name("composed-model-properties-as-sibiling");
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema0, annotatedType4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      objectMapper1.findAndRegisterModules();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, true);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      ObjectMapper objectMapper3 = objectMapper2.setDateFormat(dateFormat0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.RequiredMode) null).when(schema0).requiredMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveRequiredMode(schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DataInputStream> class0 = DataInputStream.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "~t=$_MgFiZSQ9C(");
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Serializers.Base serializers_Base0 = new Serializers.Base();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(serializers_Base0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory(serializerFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      annotatedType0.skipSchemaName(false);
      Annotation[] annotationArray0 = new Annotation[1];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.constructSpecializedType((JavaType) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      AnnotatedType annotatedType0 = new AnnotatedType();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Class) null).when(arraySchema0).annotationType();
      modelResolver0.resolveMinItems(annotatedType0, arraySchema0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      LinkedList<ModelResolver> linkedList0 = new LinkedList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(linkedList0);
      Annotation[] annotationArray0 = new Annotation[6];
      annotationArray0[0] = (Annotation) arraySchema0;
      annotationArray0[1] = (Annotation) arraySchema0;
      annotationArray0[2] = (Annotation) arraySchema0;
      annotationArray0[3] = (Annotation) arraySchema0;
      annotationArray0[4] = (Annotation) arraySchema0;
      annotationArray0[5] = (Annotation) arraySchema0;
      // Undeclared exception!
      try { 
        modelResolver0.applyBeanValidatorAnnotations(schema1, annotationArray0, schema0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      try { 
        MockURL.URL("JSON", "JSON", "JSON");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: json
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      Class<DataInputStream> class0 = DataInputStream.class;
      Class<DataInputStream> class1 = DataInputStream.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonParser_Feature0, true);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<DataInputStream> class2 = DataInputStream.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class3);
      AnnotationMap annotationMap0 = AnnotationMap.of(class2, (Annotation) null);
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = null;
      annotationArray0[1] = null;
      annotationArray0[2] = null;
      Set<String> set0 = modelResolver0.resolveIgnoredProperties(annotationMap0, annotationArray0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      // Undeclared exception!
      try { 
        objectMapper1.enable((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      TimeZone timeZone0 = TimeZone.getDefault();
      objectMapper1.setTimeZone(timeZone0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, "javax.validation.constraints.Pattern");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"javax.validation.constraints.Pattern\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = new JsonInclude.Value(jsonInclude0);
      objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      boolean boolean0 = true;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("JSON", "JSON", true, '\"', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 4)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonGenerator_FeatureArray0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SubtypeResolver subtypeResolver0 = stdSubtypeResolver0.copy();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(subtypeResolver0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      // Undeclared exception!
      try { 
        objectMapper2.enable(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      TypeFactory.defaultInstance();
      Class<Collection> class0 = Collection.class;
      Class<DataInputStream> class1 = DataInputStream.class;
      List<JavaType> list0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (List<JavaType>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.util.Collection with 0 type parameters: class expects 1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper4 = objectMapper3.addHandler(deserializationProblemHandler0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility((JsonAutoDetect.Value) null);
      ObjectMapper objectMapper3 = objectMapper2.findAndRegisterModules();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      objectMapper1.createParser("findJsonValueAccessor");
      // Undeclared exception!
      try { 
        modelResolver0.hasHiddenAnnotation((Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      boolean boolean0 = false;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("enums-as-ref", "enums-as-ref", false, 'B', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 12)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.copy();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.EXPLICIT_ONLY;
      ObjectMapper objectMapper3 = objectMapper2.setConstructorDetector(constructorDetector0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      modelResolver0.objectMapper();
      objectMapper3.getPropertyNamingStrategy();
      modelResolver0.resolveMinItems((AnnotatedType) null, (ArraySchema) null);
      Annotation[] annotationArray0 = new Annotation[7];
      annotationArray0[0] = (Annotation) null;
      annotationArray0[1] = (Annotation) null;
      annotationArray0[2] = (Annotation) null;
      annotationArray0[3] = (Annotation) null;
      annotationArray0[4] = (Annotation) null;
      annotationArray0[5] = (Annotation) null;
      annotationArray0[6] = (Annotation) null;
      // Undeclared exception!
      try { 
        modelResolver0.hiddenByJsonView(annotationArray0, (AnnotatedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      Boolean boolean0 = Boolean.TRUE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      objectMapper3.setSerializerProvider(defaultSerializerProvider_Impl0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      serializationFeatureArray0[2] = serializationFeature1;
      SerializationFeature serializationFeature2 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      serializationFeatureArray0[3] = serializationFeature2;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      objectMapper2.createParser((InputStream) sequenceInputStream0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        objectMapper0.registerModules((Iterable<? extends Module>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"modules\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectMapper objectMapper3 = objectMapper2.setNodeFactory(jsonNodeFactory0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultLeniency(boolean1);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonParser_Feature0, false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      annotatedType0.name("composed-model-properties-as-sibiling");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeValue(jsonGenerator_Feature0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      objectMapper0.configure(deserializationFeature0, true);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      Class<JsonGenerator.Feature> class0 = JsonGenerator.Feature.class;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL("JSON", "Gqh].dP=,<#g{v-", (-2037), "JSON", uRLStreamHandler0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-2037
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      objectMapper1.setTypeFactory(typeFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver>[] classArray0 = (Class<ModelResolver>[]) Array.newInstance(Class.class, 3);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<ModelResolver> class1 = ModelResolver.class;
      classArray0[2] = class1;
      // Undeclared exception!
      try { 
        typeFactory0.constructParametricType(class0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class io.swagger.v3.core.jackson.ModelResolver with 3 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      try { 
        objectMapper1.valueToTree((Object) modelResolver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No serializer found for class io.swagger.v3.core.jackson.ModelResolver and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector((AnnotationIntrospector) null);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_PROPERTIES_BASED;
      ConstructorDetector constructorDetector1 = constructorDetector0.withRequireAnnotation(false);
      ObjectMapper objectMapper4 = objectMapper3.setConstructorDetector(constructorDetector1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "mp{UpX?$");
      HashMap<String, ModelResolver> hashMap0 = new HashMap<String, ModelResolver>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = ')';
      charArray0[2] = 'n';
      charArray0[3] = '>';
      objectMapper3.createParser(charArray0, 21, (-707));
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      Class<ModelResolver> class0 = ModelResolver.class;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0, class0, class0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Value0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper3 = objectMapper2.addHandler(deserializationProblemHandler0);
      ObjectMapper objectMapper4 = objectMapper3.setSerializerProvider(defaultSerializerProvider_Impl0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.valueOf("io.swagger.v3.core.jackson.ModelResolver$GeneratorWrapper");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_DELEGATING;
      ObjectMapper objectMapper2 = objectMapper1.setConstructorDetector(constructorDetector0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultLeniency(boolean0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      Integer integer0 = modelResolver0.resolveMaxItems(annotatedType0, (ArraySchema) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver((SubtypeResolver) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      SimpleModule simpleModule0 = new SimpleModule("c^Af2^vN:&)M~F");
      Class<ModelResolver> class0 = ModelResolver.class;
      JsonDeserializer<ModelResolver> jsonDeserializer0 = (JsonDeserializer<ModelResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends ModelResolver>) jsonDeserializer0);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      Class<ModelResolver> class1 = ModelResolver.class;
      simpleModule1.setMixInAnnotation(class1, class0);
      simpleModule1.setSerializerModifier(beanSerializerModifier0);
      BeanSerializerModifier beanSerializerModifier1 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      simpleModule1.setSerializerModifier(beanSerializerModifier1);
      objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) simpleModule1);
      objectMapper0.reader();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, (TypeNameResolver) null);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      modelResolver0.addRequiredItem(schema0, (String) null);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema1).requiredProperties();
      List<String> list0 = modelResolver0.resolveRequiredProperties((Annotated) null, (Annotation[]) null, schema1);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.NON_EMPTY;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include1);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_PROPERTIES_BASED;
      constructorDetector0.withRequireAnnotation(true);
      ObjectMapper objectMapper2 = objectMapper1.setConstructorDetector(constructorDetector0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SimpleSerializers simpleSerializers0 = new SimpleSerializers();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalKeySerializers(simpleSerializers0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory(serializerFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0.addRequiredItem(schema0, "bind-type");
      modelResolver0.objectMapper();
      Class<Long> class0 = Long.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      modelResolver0.resolveMinItems(annotatedType0, (ArraySchema) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "void", (JavaType) null);
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) null;
      annotationArray0[1] = (Annotation) null;
      annotationArray0[2] = (Annotation) null;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema1).deprecated();
      Boolean boolean0 = modelResolver0.resolveDeprecated(virtualAnnotatedMember0, annotationArray0, schema1);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      Nulls nulls0 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultSetterInfo(jsonSetter_Value0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      Class<SimpleModule> class0 = SimpleModule.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct(class1, (TypeBindings) null, (JavaType) null, javaTypeArray0, (JavaType) null);
      SimpleModule simpleModule0 = new SimpleModule("composed-model-properties-as-sibiling");
      ReferenceType referenceType1 = referenceType0.withValueHandler(simpleModule0);
      Class<SimpleModule> class2 = SimpleModule.class;
      TypeBindings.emptyBindings();
      Class<ModelResolver> class3 = ModelResolver.class;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class3, (JavaType) referenceType1, (JavaType) referenceType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class io.swagger.v3.core.jackson.ModelResolver with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      jsonFactory0.createParser(charArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat((DateFormat) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, false);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema0).uniqueItems();
      Boolean boolean0 = modelResolver0.resolveUniqueItems((AnnotatedType) null, arraySchema0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat((DateFormat) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      Class<ModelResolver> class0 = ModelResolver.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.shouldIgnoreClass(class0);
      JavaType javaType0 = objectMapper1.constructType((Type) class0);
      ArrayList<ModelConverter> arrayList0 = new ArrayList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(arrayList0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema0 = new io.swagger.v3.oas.models.media.Schema<SimpleModule>(specVersion0);
      ArrayList<SimpleModule> arrayList1 = new ArrayList<SimpleModule>();
      io.swagger.v3.oas.models.media.Schema<SimpleModule> schema1 = schema0.examples(arrayList1);
      modelResolver0.resolveDiscriminatorProperty(javaType0, modelConverterContextImpl0, schema1);
      assertNull(schema1.getNullable());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = null;
      try {
        jsonFactoryBuilder0 = new JsonFactoryBuilder((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.TSFBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactory deserializerFactory0 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.defaultSerializeDateValue((Date) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Boolean boolean0 = new Boolean(false);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      File file0 = MockFile.createTempFile("JSON", "JSON");
      JsonParser jsonParser0 = objectReader1.createParser(file0);
      Class<StreamReadFeature> class0 = StreamReadFeature.class;
      objectMapper0.readValues(jsonParser0, class0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      ObjectMapper objectMapper3 = objectMapper2.setNodeFactory((JsonNodeFactory) null);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory(typeFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectMapper objectMapper3 = objectMapper2.setNodeFactory(jsonNodeFactory0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      LinkedList<ModelResolver> linkedList0 = new LinkedList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(linkedList0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.schemaProperty(false);
      Class<Double> class0 = Double.TYPE;
      AnnotatedType annotatedType2 = annotatedType1.type(class0);
      annotatedType2.getJsonUnwrappedHandler();
      AnnotatedType annotatedType3 = annotatedType2.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType4 = annotatedType3.parent(schema0);
      modelResolver0.resolveSchemaMembers(schema1, annotatedType4);
      assertFalse(schema1.getExampleSetFlag());
      assertFalse(schema0.getExampleSetFlag());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.CLOSE_CLOSEABLE;
      serializationFeatureArray0[1] = serializationFeature1;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "YAaht_");
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(modelResolver0.NOT_NULL_ANNOTATIONS, list0);
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper0.readerForMapOf(class0);
      typeBindings1.findBoundType("");
      // Undeclared exception!
      try { 
        placeholderForType0.withContentType((JavaType) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      JsonAutoDetect jsonAutoDetect0 = mock(JsonAutoDetect.class, new ViolatedAssumptionAnswer());
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).creatorVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).fieldVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).getterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).isGetterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).setterVisibility();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.from(jsonAutoDetect0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SimpleModule> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<? extends Module>) serviceLoader0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Annotation[] annotationArray0 = new Annotation[7];
      annotationArray0[0] = (Annotation) jsonAutoDetect0;
      annotationArray0[1] = (Annotation) jsonAutoDetect0;
      annotationArray0[2] = (Annotation) jsonAutoDetect0;
      annotationArray0[3] = (Annotation) jsonAutoDetect0;
      annotationArray0[4] = (Annotation) jsonAutoDetect0;
      annotationArray0[5] = (Annotation) jsonAutoDetect0;
      annotationArray0[6] = (Annotation) jsonAutoDetect0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema0).allOf();
      doReturn((Class[]) null).when(schema0).anyOf();
      doReturn((Class[]) null).when(schema0).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class0, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TreeSet<SimpleModule> treeSet0 = new TreeSet<SimpleModule>();
      TreeSet<SimpleModule> treeSet1 = new TreeSet<SimpleModule>((SortedSet<SimpleModule>) treeSet0);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) treeSet1);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory(beanSerializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper4 = objectMapper3.enable(deserializationFeature0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper5 = new ObjectMapper(jsonFactory0);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper5, typeNameResolver0);
      ModelResolver modelResolver2 = new ModelResolver(objectMapper0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(modelResolver1, modelResolver2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues((InjectableValues) null);
      HashMap<String, ModelResolver> hashMap0 = new HashMap<String, ModelResolver>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      // Undeclared exception!
      try { 
        objectMapper2.disable(serializationFeature0, (SerializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectMapper objectMapper3 = objectMapper2.setNodeFactory(jsonNodeFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      objectMapper0.reader();
      File file0 = MockFile.createTempFile("enums-as-ref", "Current token not available: can not call this method");
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      jsonFactory0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      TypeReference<ModelResolver> typeReference0 = (TypeReference<ModelResolver>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readValue(file0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultLeniency(boolean0);
      objectMapper1.deactivateDefaultTyping();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper3 = objectMapper2.addHandler(deserializationProblemHandler0);
      StringReader stringReader0 = new StringReader("javax.validation.constraints.DecimalMin");
      TypeReference<ModelResolver> typeReference0 = (TypeReference<ModelResolver>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper3.readValue((Reader) stringReader0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      serializationFeatureArray0[3] = serializationFeature1;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      serializationFeatureArray0[8] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      ObjectMapper objectMapper3 = objectMapper2.setTimeZone(timeZone0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      objectMapper1.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-1);
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      SerialBlob serialBlob1 = new SerialBlob(serialBlob0);
      InputStream inputStream0 = serialBlob1.getBinaryStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 03A543C5
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      JavaType javaType0 = null;
      TypeNameResolver.Options[] typeNameResolver_OptionsArray0 = new TypeNameResolver.Options[4];
      TypeNameResolver.Options typeNameResolver_Options0 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[0] = typeNameResolver_Options0;
      TypeNameResolver.Options typeNameResolver_Options1 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[1] = typeNameResolver_Options1;
      TypeNameResolver.Options typeNameResolver_Options2 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[2] = typeNameResolver_Options2;
      TypeNameResolver.Options typeNameResolver_Options3 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[3] = typeNameResolver_Options3;
      // Undeclared exception!
      try { 
        typeNameResolver0.nameForType((JavaType) null, typeNameResolver_OptionsArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.TypeNameResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonpCharacterEscapes jsonpCharacterEscapes1 = new JsonpCharacterEscapes();
      jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      try { 
        objectMapper0.writeValue((OutputStream) byteArrayOutputStream0, (Object) modelResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class io.swagger.v3.core.jackson.ModelResolver and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo((JsonSetter.Value) null);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonGenerator_FeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      modelResolver0.addRequiredItem(schema0, "bind-type");
      assertNull(schema0.getDeprecated());
  }
}
