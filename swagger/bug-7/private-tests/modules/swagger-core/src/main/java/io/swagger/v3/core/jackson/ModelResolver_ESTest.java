/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 03 06:01:09 GMT 2023
 */

package io.swagger.v3.core.jackson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.StreamReadCapability;
import com.fasterxml.jackson.core.StreamReadFeature;
import com.fasterxml.jackson.core.StreamWriteFeature;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.type.WritableTypeId;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.core.util.Separators;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ConstructorDetector;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyFilter;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.LogicalType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.google.common.collect.BoundType;
import io.swagger.v3.core.converter.AnnotatedType;
import io.swagger.v3.core.converter.ModelConverter;
import io.swagger.v3.core.converter.ModelConverterContext;
import io.swagger.v3.core.converter.ModelConverterContextImpl;
import io.swagger.v3.core.jackson.ModelResolver;
import io.swagger.v3.core.jackson.TypeNameResolver;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.extensions.Extension;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.models.SpecVersion;
import io.swagger.v3.oas.models.media.ComposedSchema;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.text.DateFormat;
import java.time.Month;
import java.time.ZoneId;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceConfigurationError;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Function;
import javax.sql.rowset.serial.SerialBlob;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;
import org.slf4j.event.Level;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModelResolver_ESTest extends ModelResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      Annotated annotated0 = null;
      Annotation[] annotationArray0 = new Annotation[0];
      modelResolver0.resolveWriteOnly((Annotated) null, annotationArray0, (Schema) null);
      Annotation[] annotationArray1 = new Annotation[2];
      annotationArray1[0] = (Annotation) null;
      Class<ModelResolver> class0 = ModelResolver.class;
      typeNameResolver0.getNameOfClass(class0);
      annotationArray1[1] = (Annotation) null;
      modelResolver0.resolveMaxLength((Annotated) null, annotationArray1, (Schema) null);
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      JavaType javaType0 = null;
      TypeNameResolver.Options typeNameResolver_Options0 = TypeNameResolver.Options.SKIP_API_MODEL;
      TypeNameResolver.Options typeNameResolver_Options1 = TypeNameResolver.Options.SKIP_API_MODEL;
      TypeNameResolver.Options typeNameResolver_Options2 = TypeNameResolver.Options.SKIP_API_MODEL;
      EnumSet<TypeNameResolver.Options> enumSet0 = EnumSet.of(typeNameResolver_Options0, typeNameResolver_Options1, typeNameResolver_Options2, typeNameResolver_Options0);
      // Undeclared exception!
      try { 
        typeNameResolver0.nameForClass((JavaType) null, enumSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.TypeNameResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      objectMapper1.copy();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      AnnotatedType annotatedType0 = new AnnotatedType();
      annotatedType0.getJsonUnwrappedHandler();
      AnnotatedType annotatedType1 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType2 = annotatedType1.resolveAsRef(false);
      annotatedType2.resolveAsRef(false);
      AnnotatedType annotatedType3 = annotatedType2.skipOverride(false);
      AnnotatedType annotatedType4 = annotatedType3.name("composed-model-properties-as-sibiling");
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      annotatedType1.jsonViewAnnotation(jsonView0);
      annotatedType4.name("composed-model-properties-as-sibiling");
      modelResolver0.resolveExtensions(annotatedType4, (ArraySchema) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1125);
      placeholderForType0.getContentType();
      Annotation[] annotationArray0 = new Annotation[4];
      annotationArray0[0] = (Annotation) null;
      annotationArray0[1] = (Annotation) null;
      annotationArray0[2] = (Annotation) null;
      annotationArray0[3] = (Annotation) null;
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaProperties((JavaType) null, annotationArray0, (ModelConverterContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayList<SimpleModule> arrayList0 = new ArrayList<SimpleModule>();
      ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<? extends Module>) arrayList0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "n");
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      SimpleBeanPropertyFilter.FilterExceptFilter simpleBeanPropertyFilter_FilterExceptFilter0 = new SimpleBeanPropertyFilter.FilterExceptFilter(set0);
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.addFilter("n", (SimpleBeanPropertyFilter) simpleBeanPropertyFilter_FilterExceptFilter0);
      ObjectMapper objectMapper3 = objectMapper2.setFilterProvider(simpleFilterProvider1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(schema0).description();
      modelResolver0.resolveDescription((Annotated) null, annotationArray0, schema0);
      modelResolver0.resolveIgnoredProperties(annotationArray0);
      JavaType javaType0 = TypeFactory.unknownType();
      Vector<ModelConverter> vector0 = new Vector<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(vector0);
      Map<String, io.swagger.v3.oas.models.media.Schema> map0 = (Map<String, io.swagger.v3.oas.models.media.Schema>)modelResolver0.resolveSchemaProperties(javaType0, annotationArray0, modelConverterContextImpl0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getVisibilityChecker();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      SpecVersion specVersion0 = SpecVersion.V31;
      Class<ModelResolver> class1 = ModelResolver.class;
      typeNameResolver0.getNameOfClass(class1);
      io.swagger.v3.oas.models.media.Schema<StreamReadCapability> schema0 = new io.swagger.v3.oas.models.media.Schema<StreamReadCapability>(specVersion0);
      modelResolver0._addEnumProps(class0, schema0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      modelResolver0.resolveMinItems((AnnotatedType) null, arraySchema0);
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) arraySchema0;
      annotationArray0[1] = (Annotation) arraySchema0;
      annotationArray0[2] = (Annotation) arraySchema0;
      // Undeclared exception!
      try { 
        modelResolver0.hiddenByJsonView(annotationArray0, (AnnotatedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      ObjectMapper objectMapper3 = objectMapper2.setLocale((Locale) null);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      Class<ModelResolver> class0 = ModelResolver.class;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      objectMapper2.configure(serializationFeature1, false);
      LinkedHashSet<TypeNameResolver.Options> linkedHashSet0 = new LinkedHashSet<TypeNameResolver.Options>();
      typeNameResolver0.nameForClass(class0, linkedHashSet0);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeNameResolver.Options[] typeNameResolver_OptionsArray0 = new TypeNameResolver.Options[3];
      TypeNameResolver.Options typeNameResolver_Options0 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[0] = typeNameResolver_Options0;
      TypeNameResolver.Options typeNameResolver_Options1 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[1] = typeNameResolver_Options1;
      TypeNameResolver.Options typeNameResolver_Options2 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[2] = typeNameResolver_Options2;
      typeNameResolver0.nameForType((JavaType) referenceType0, typeNameResolver_OptionsArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.skipOverride(false);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType2 = annotatedType1.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType3 = annotatedType2.propertyName("composed-model-properties-as-sibiling");
      AnnotatedType annotatedType4 = annotatedType3.resolveAsRef(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      modelResolver0.resolveMinItems(annotatedType4, arraySchema0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(referenceType0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) jsonView0;
      annotationArray0[1] = (Annotation) arraySchema0;
      annotationArray0[2] = (Annotation) arraySchema0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(schema0).maxLength();
      Integer integer0 = modelResolver0.resolveMaxLength((Annotated) null, annotationArray0, schema0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveWriteOnly((Annotated) null, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "@@PYd}bZHFP3iiK");
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectMapper2.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      ObjectMapper objectMapper3 = objectMapper2.addHandler(deserializationProblemHandler0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.resolveExternalDocumentation((ExternalDocumentation) null);
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) null;
      annotationArray0[1] = (Annotation) null;
      annotationArray0[2] = (Annotation) null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema0).maxProperties();
      modelResolver0.resolveMaxProperties((Annotated) null, annotationArray0, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1).maximum();
      modelResolver0.resolveMaximum((Annotated) null, annotationArray0, schema1);
      Class<Module> class0 = Module.class;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema2).allOf();
      doReturn((Class[]) null).when(schema2).anyOf();
      doReturn((Class[]) null).when(schema2).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class0, annotationArray0, schema2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      ObjectMapper objectMapper2 = objectMapper1.addHandler((DeserializationProblemHandler) null);
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper3 = objectMapper2.registerModules(moduleArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      modelResolver0.addRequiredItem(schema0, "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<MatchStrength> class1 = MatchStrength.class;
      Class<ModelResolver> class2 = ModelResolver.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class2, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      TypeNameResolver typeNameResolver1 = new TypeNameResolver();
      ModelResolver modelResolver1 = new ModelResolver(objectMapper2, typeNameResolver1);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(modelResolver1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Empty0, class0, "", javaType0);
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations((AnnotationMap) null);
      Integer integer0 = modelResolver0.resolveMaxLength(annotated0, (Annotation[]) null, (Schema) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = new Boolean("$yxxCth`iYMULGLE%^");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultLeniency(boolean0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      typeNameResolver0.getNameOfClass(class0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      annotatedType0.getJsonUnwrappedHandler();
      AnnotatedType annotatedType2 = annotatedType1.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType3 = annotatedType2.propertyName("List");
      LinkedList<ModelConverter> linkedList0 = new LinkedList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(linkedList0);
      // Undeclared exception!
      try { 
        modelResolver0.resolve(annotatedType3, modelConverterContextImpl0, (Iterator<ModelConverter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      // Undeclared exception!
      try { 
        modelResolver0.findJsonValueType((BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0, deserializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      LinkedList<ModelConverter> linkedList0 = new LinkedList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(linkedList0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveDiscriminatorProperty((JavaType) null, modelConverterContextImpl0, (io.swagger.v3.oas.models.media.Schema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, true);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider1 = defaultAccessorNamingStrategy_Provider0.withSetterPrefix((String) null);
      ObjectMapper objectMapper3 = objectMapper2.setAccessorNaming(defaultAccessorNamingStrategy_Provider1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation0 = modelResolver0.resolveExternalDocumentation((Annotated) null, (Annotation[]) null, schema0);
      assertNull(externalDocumentation0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<Module> class1 = Module.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Annotation[] annotationArray0 = new Annotation[1];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class2);
      annotationArray0[0] = null;
      AnnotatedType annotatedType0 = new AnnotatedType();
      modelResolver0.hiddenByJsonView(annotationArray0, annotatedType0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema0, annotatedType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).title();
      modelResolver0.resolveTitle((Annotated) null, (Annotation[]) null, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema1).allOf();
      doReturn((Class[]) null).when(schema1).anyOf();
      doReturn((Class[]) null).when(schema1).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class0, (Annotation[]) null, schema1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createParser("#/components/schemas/");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).format();
      modelResolver0.resolveFormat((Annotated) null, (Annotation[]) null, schema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(schema1).extensions();
      modelResolver0.resolveExtensions((Annotated) null, (Annotation[]) null, schema1);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema2).deprecated();
      modelResolver0.resolveDeprecated((Annotated) null, (Annotation[]) null, schema2);
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema3).example();
      // Undeclared exception!
      try { 
        modelResolver0.resolveExample((Annotated) null, (Annotation[]) null, schema3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Boolean boolean0 = new Boolean("JSON");
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      PriorityQueue<SimpleModule> priorityQueue0 = new PriorityQueue<SimpleModule>();
      PriorityQueue<SimpleModule> priorityQueue1 = new PriorityQueue<SimpleModule>(priorityQueue0);
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<? extends Module>) priorityQueue1);
      ObjectMapper objectMapper4 = objectMapper3.copy();
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Annotation[] annotationArray0 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).deprecated();
      modelResolver0.resolveDeprecated((Annotated) null, (Annotation[]) null, schema0);
      // Undeclared exception!
      try { 
        priorityQueue0.add((SimpleModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Annotation[] annotationArray0 = new Annotation[1];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class0);
      annotationArray0[0] = null;
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation((JsonView) null);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      annotatedType0.setParent(schema0);
      annotatedType1.schemaProperty(true);
      AnnotatedType annotatedType2 = annotatedType1.resolveAsRef(false);
      AnnotatedType annotatedType3 = annotatedType2.skipJsonIdentity(true);
      modelResolver0.hiddenByJsonView(annotationArray0, annotatedType3);
      AnnotatedType annotatedType4 = new AnnotatedType();
      annotatedType4.setResolveAsRef(false);
      annotatedType4.setCtxAnnotations(annotationArray0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      modelResolver0.resolveMaxItems(annotatedType4, arraySchema0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(schema1).multipleOf();
      modelResolver0.resolveMultipleOf((Annotated) null, annotationArray0, schema1);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema2).pattern();
      modelResolver0.resolvePattern((Annotated) null, annotationArray0, schema2);
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(schema3).description();
      modelResolver0.resolveDescription((Annotated) null, annotationArray0, schema3);
      Class<ModelResolver> class1 = ModelResolver.class;
      Schema schema4 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema4).allOf();
      doReturn((Class[]) null).when(schema4).anyOf();
      doReturn((Class[]) null).when(schema4).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class1, annotationArray0, schema4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      Annotation[] annotationArray0 = new Annotation[0];
      AnnotatedType annotatedType0 = new AnnotatedType((Type) null);
      annotatedType0.getJsonUnwrappedHandler();
      annotatedType0.propertyName("composed-model-properties-as-sibiling");
      AnnotatedType annotatedType1 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      ComposedSchema composedSchema0 = new ComposedSchema();
      AnnotatedType annotatedType2 = annotatedType1.parent(composedSchema0);
      AnnotatedType annotatedType3 = annotatedType2.propertyName("composed-model-properties-as-sibiling");
      AnnotatedType annotatedType4 = annotatedType3.skipSchemaName(true);
      modelResolver0.hiddenByJsonView(annotationArray0, annotatedType4);
      Set<String> set0 = modelResolver0.resolveIgnoredProperties(annotationArray0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.name("enums-as-ref");
      AnnotatedType annotatedType2 = annotatedType1.skipSchemaName(false);
      AnnotatedType annotatedType3 = annotatedType2.resolveAsRef(false);
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedType3, (ArraySchema) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Nulls nulls0 = Nulls.DEFAULT;
      Nulls nulls1 = Nulls.FAIL;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls1);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      typeNameResolver0.setUseFqn(false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(schema0).extensions();
      modelResolver0.resolveExtensions((Annotated) null, (Annotation[]) null, schema0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findClass("enums-as-ref");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      Class<ModelResolver> class0 = ModelResolver.class;
      objectMapper0.writerFor(class0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipJsonIdentity(true);
      annotatedType1.skipJsonIdentity(true);
      modelResolver0.decorateModelName(annotatedType1, "+1Y/C}>(0PW");
      modelResolver0.shouldIgnoreClass(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetterField();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetterMethod();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findAnyGetter();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).example();
      // Undeclared exception!
      try { 
        modelResolver0.resolveExample((Annotated) null, (Annotation[]) null, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      Class<Module> class0 = Module.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      ObjectMapper objectMapper4 = objectMapper1.setMixInResolver((ClassIntrospector.MixInResolver) null);
      Class<ModelResolver> class2 = ModelResolver.class;
      ObjectReader objectReader0 = objectMapper4.readerForArrayOf(class2);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      deserializationFeatureArray0[4] = deserializationFeature4;
      DeserializationFeature deserializationFeature5 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[5] = deserializationFeature5;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      MappingIterator<ModelConverter> mappingIterator0 = objectReader1.readValues("");
      io.swagger.v3.oas.models.media.Schema schema0 = modelResolver0.resolve((AnnotatedType) null, modelConverterContextImpl0, mappingIterator0);
      assertNull(schema0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
      serializationFeatureArray0[4] = serializationFeature1;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema0).minLength();
      Integer integer0 = modelResolver0.resolveMinLength((Annotated) null, annotationArray0, schema0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      jsonFactory0.copy();
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      JsonSetter jsonSetter0 = mock(JsonSetter.class, new ViolatedAssumptionAnswer());
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultSetterInfo(jsonSetter_Value0);
      ObjectMapper objectMapper3 = objectMapper2.clearProblemHandlers();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<SpecVersion> class0 = SpecVersion.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      Class<ModelResolver> class2 = ModelResolver.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class2, (Annotation) null);
      Annotation[] annotationArray0 = new Annotation[0];
      Set<String> set0 = modelResolver0.resolveIgnoredProperties(annotationCollector_TwoAnnotations0, annotationArray0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).maximum();
      modelResolver0.resolveMaximum((Annotated) null, annotationArray0, schema0);
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        modelResolver0.ignore((Annotated) null, xmlAccessorType0, "JSON", set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StreamReadFeature streamReadFeature0 = StreamReadFeature.AUTO_CLOSE_SOURCE;
      jsonFactoryBuilder0.configure(streamReadFeature0, false);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Schema.AccessMode) null).when(schema0).accessMode();
      // Undeclared exception!
      try { 
        modelResolver0.resolveAccessMode((BeanPropertyDefinition) null, (JavaType) null, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      Class<ModelResolver> class0 = ModelResolver.class;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0._addEnumProps(class0, schema0);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveWrapping((JavaType) null, modelConverterContextImpl0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Annotated annotated0 = null;
      Annotation[] annotationArray0 = null;
      LogicalType logicalType0 = LogicalType.Binary;
      objectMapper2.coercionConfigFor(logicalType0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(schema0).exclusiveMinimum();
      modelResolver0.resolveExclusiveMinimum((Annotated) null, (Annotation[]) null, schema0);
      Class<ModelResolver> class0 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      modelResolver0.resolveDiscriminator(simpleType0, (ModelConverterContext) null);
      CoreXMLDeserializers coreXMLDeserializers0 = new CoreXMLDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(coreXMLDeserializers0);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(schema1).multipleOf();
      modelResolver0.resolveMultipleOf((Annotated) null, (Annotation[]) null, schema1);
      // Undeclared exception!
      try { 
        modelResolver0.hasHiddenAnnotation((Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0, typeNameResolver0);
      Class<Byte> class0 = Byte.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.skipOverride(false);
      AnnotatedType annotatedType2 = annotatedType1.type(class0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      Vector<ModelResolver> vector0 = new Vector<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(vector0);
      AnnotatedType annotatedType3 = annotatedType2.parent(schema1);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      annotatedType2.setName("composed-model-properties-as-sibiling");
      schema0._default(modelResolver0);
      annotatedType3.parent(schema0);
      AnnotatedType annotatedType4 = annotatedType3.jsonViewAnnotation(jsonView0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema0).minItems();
      modelResolver0.resolveMinItems(annotatedType4, arraySchema0);
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) arraySchema0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      annotationArray0[1] = null;
      annotationArray0[2] = (Annotation) arraySchema0;
      modelResolver0.resolveIgnoredProperties(annotationArray0);
      modelResolver0.shouldIgnoreClass(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultConstructor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      serializationFeatureArray0[0] = serializationFeature1;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      Class<DoubleNode> class0 = DoubleNode.class;
      Class<DoubleNode> class1 = DoubleNode.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class1);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector(annotationIntrospector0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      AnnotatedType annotatedType1 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      Annotation[] annotationArray0 = new Annotation[0];
      AnnotatedType annotatedType2 = annotatedType1.ctxAnnotations(annotationArray0);
      AnnotatedType annotatedType3 = annotatedType2.name("composed-model-properties-as-sibiling");
      Vector<ModelResolver> vector0 = new Vector<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(vector0);
      annotatedType1.parent(schema1);
      modelResolver0.resolveSchemaMembers(schema0, annotatedType3);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema0).uniqueItems();
      modelResolver0.resolveUniqueItems(annotatedType3, arraySchema0);
      Annotated annotated0 = null;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(schema2).multipleOf();
      modelResolver0.resolveMultipleOf((Annotated) null, annotationArray0, schema2);
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(arraySchema1).minItems();
      modelResolver0.resolveMinItems(annotatedType2, arraySchema1);
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema3).defaultValue();
      // Undeclared exception!
      try { 
        modelResolver0.resolveDefaultValue((Annotated) null, annotationArray0, schema3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[0] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      deserializationFeatureArray0[1] = deserializationFeature2;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      deserializationFeatureArray0[6] = deserializationFeature3;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("v: 4C0x}1");
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0.addRequiredItem(schema0, "hK}Q9");
      assertNull(schema0.get$id());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.empty();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultSetterInfo(jsonSetter_Value0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      Separators separators0 = new Separators();
      MinimalPrettyPrinter minimalPrettyPrinter1 = minimalPrettyPrinter0.setSeparators(separators0);
      Nulls nulls0 = Nulls.SKIP;
      JsonSetter.Value.forValueNulls(nulls0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(minimalPrettyPrinter1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ShortNode shortNode0 = ShortNode.valueOf((short)0);
      separators0.withArrayValueSeparator('W');
      objectMapper1.treeAsTokens(shortNode0);
      Class<ModelResolver> class0 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Stack<ModelConverter> stack0 = new Stack<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(stack0);
      modelResolver0.resolvePatternProperties(simpleType0, annotationArray0, modelConverterContextImpl0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.type(class0);
      AnnotatedType annotatedType2 = annotatedType1.skipJsonIdentity(false);
      AnnotatedType annotatedType3 = annotatedType2.name("");
      AnnotatedType annotatedType4 = annotatedType3.jsonViewAnnotation((JsonView) null);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedType4, arraySchema0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ConstructorDetector constructorDetector0 = ConstructorDetector.EXPLICIT_ONLY;
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector(constructorDetector0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      Class<ModelResolver> class0 = ModelResolver.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      HashMap<ModelResolver, ThaiBuddhistEra> hashMap0 = new HashMap<ModelResolver, ThaiBuddhistEra>();
      ObjectReader objectReader1 = objectReader0.withAttributes(hashMap0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      io.swagger.v3.oas.models.media.Schema<ThaiBuddhistEra> schema0 = new io.swagger.v3.oas.models.media.Schema<ThaiBuddhistEra>();
      modelResolver0._addEnumProps(class0, schema0);
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withContentTypeHandler(hashMap0);
      objectMapper1.getPolymorphicTypeValidator();
      LinkedList<ModelConverter> linkedList0 = new LinkedList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(linkedList0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ThaiBuddhistEra> schema1 = new io.swagger.v3.oas.models.media.Schema<ThaiBuddhistEra>(specVersion0);
      modelResolver0.resolveWrapping(mapLikeType1, modelConverterContextImpl0, schema1);
      AnnotatedType annotatedType0 = new AnnotatedType();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) null);
      try { 
        objectReader1.readValues(jsonParser0, (JavaType) mapLikeType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for type [map-like type; class io.swagger.v3.core.jackson.ModelResolver, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      Class<ModelResolver> class0 = ModelResolver.class;
      PropertyName propertyName0 = PropertyName.construct("JSON");
      Class<ModelResolver> class1 = ModelResolver.class;
      Class<ModelResolver> class2 = ModelResolver.class;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (List<JavaType>) null);
      Class<ModelResolver> class3 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[4]);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class4 = Annotation.class;
      beanProperty_Std0.getAnnotation(class4);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Integer integer0 = new Integer((-886));
      propertyMetadata0.withIndex(integer0);
      Annotation[] annotationArray0 = new Annotation[0];
      Set<String> set0 = modelResolver0.resolveIgnoredProperties(annotationCollector_OneAnnotation0, annotationArray0);
      assertFalse(set0.contains("JSON"));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "Can't check class {}, {}");
      Class<Month> class0 = Month.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class1);
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultMergeable(boolean0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      TypeResolutionContext typeResolutionContext0 = null;
      // Undeclared exception!
      try { 
        modelResolver0.resolveDiscriminator((JavaType) null, (ModelConverterContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ModelResolver> class0 = ModelResolver.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      jsonFormatVisitorWrapper_Base0.setProvider(defaultSerializerProvider0);
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipJsonIdentity(true);
      AnnotatedType annotatedType2 = annotatedType1.skipOverride(false);
      modelResolver0.resolveMaxItems(annotatedType2, (ArraySchema) null);
      modelResolver0.shouldIgnoreClass(class0);
      JavaType javaType0 = null;
      Annotation[] annotationArray0 = new Annotation[5];
      annotationArray0[0] = (Annotation) null;
      annotationArray0[1] = (Annotation) null;
      annotationArray0[2] = (Annotation) null;
      annotationArray0[3] = (Annotation) null;
      annotationArray0[4] = (Annotation) null;
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      // Undeclared exception!
      try { 
        modelResolver0.resolvePatternProperties((JavaType) null, annotationArray0, modelConverterContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, (TypeNameResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SubtypeResolver subtypeResolver0 = stdSubtypeResolver0.copy();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(subtypeResolver0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema0, (AnnotatedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      SerializationFeature serializationFeature1 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ModelResolver> class1 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      Class<ModelResolver> class2 = ModelResolver.class;
      JavaType javaType0 = defaultSerializerProvider_Impl0.constructSpecializedType(simpleType0, class2);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap1);
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<Enum<BoundType>> schema0 = new io.swagger.v3.oas.models.media.Schema<Enum<BoundType>>(specVersion0);
      schema0.getTypes();
      // Undeclared exception!
      try { 
        modelResolver0.ignore(annotated0, xmlAccessorType0, "", (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.ANY;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility2);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonParser_FeatureArray0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "'");
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0.addRequiredItem(schema0, "");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
      try { 
        WritableTypeId.Inclusion.valueOf("'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.core.type.WritableTypeId.Inclusion.'
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<Boolean> class0 = Boolean.TYPE;
      AnnotatedType annotatedType0 = new AnnotatedType(class0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      annotatedType0.setJsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType1 = annotatedType0.resolveAsRef(true);
      JsonView jsonView1 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType2 = annotatedType1.jsonViewAnnotation(jsonView1);
      AnnotatedType annotatedType3 = annotatedType2.schemaProperty(true);
      modelResolver0.decorateModelName(annotatedType3, "");
      Class<ModelResolver> class1 = ModelResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getDelegateCreator();
      Annotation[] annotationArray0 = new Annotation[6];
      annotationArray0[0] = (Annotation) jsonView0;
      annotationArray0[1] = (Annotation) jsonView0;
      annotationArray0[2] = (Annotation) jsonView0;
      annotationArray0[3] = (Annotation) jsonView1;
      annotationArray0[4] = (Annotation) jsonView0;
      annotationArray0[5] = (Annotation) jsonView1;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schema0).minProperties();
      Integer integer0 = modelResolver0.resolveMinProperties((Annotated) null, annotationArray0, schema0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl1);
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      io.swagger.v3.oas.models.ExternalDocumentation externalDocumentation1 = modelResolver0.resolveExternalDocumentation(externalDocumentation0);
      assertNull(externalDocumentation1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("yjkxyu}IK`l/R/&");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter(defaultPrettyPrinter1);
      Class<ModelResolver> class0 = ModelResolver.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class0);
      objectMapper3.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      boolean boolean0 = modelResolver0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      JsonAutoDetect jsonAutoDetect0 = mock(JsonAutoDetect.class, new ViolatedAssumptionAnswer());
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).creatorVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).fieldVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).getterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).isGetterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).setterVisibility();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.from(jsonAutoDetect0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      objectMapper3.setDefaultAttributes(contextAttributes0);
      Class<ModelResolver> class0 = ModelResolver.class;
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(schema0).allOf();
      doReturn((Class[]) null).when(schema0).anyOf();
      doReturn((Class[]) null).when(schema0).oneOf();
      // Undeclared exception!
      try { 
        modelResolver0.getComposedSchemaReferencedClasses(class0, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ModelResolver> class0 = ModelResolver.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      AnnotatedType annotatedType0 = new AnnotatedType(mapLikeType0);
      annotatedType0.resolveAsRef(true);
      AnnotatedType annotatedType1 = annotatedType0.propertyName(")?H]<^Y^");
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      io.swagger.v3.oas.models.media.Schema schema0 = modelResolver0.resolve(annotatedType1, modelConverterContextImpl0, (Iterator<ModelConverter>) null);
      assertNotNull(schema0);
      assertEquals("ModelResolver", schema0.getName());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider0, defaultDeserializationContext0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      String string0 = modelResolver0.decorateModelName(annotatedType0, "JSON");
      assertEquals("JSON", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      ObjectMapper objectMapper2 = objectMapper1.setDateFormat(dateFormat0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ConstructorDetector.SingleArgConstructor> schema0 = new io.swagger.v3.oas.models.media.Schema<ConstructorDetector.SingleArgConstructor>(specVersion0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.type(class1);
      AnnotatedType annotatedType2 = annotatedType1.schemaProperty(false);
      modelResolver0.resolveSchemaMembers(schema0, annotatedType2);
      assertFalse(schema0.getExampleSetFlag());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.objectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(343);
      AnnotatedType annotatedType0 = new AnnotatedType(placeholderForType0);
      AnnotatedType annotatedType1 = annotatedType0.skipOverride(true);
      AnnotatedType annotatedType2 = annotatedType1.skipJsonIdentity(false);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType3 = annotatedType2.jsonViewAnnotation(jsonView0);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      modelResolver0.resolveExtensions(annotatedType3, arraySchema0);
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(arraySchema1).uniqueItems();
      Boolean boolean0 = modelResolver0.resolveUniqueItems(annotatedType2, arraySchema1);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, false);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonFormat.Feature> class0 = JsonFormat.Feature.class;
      Class<JsonFormat.Feature> class1 = JsonFormat.Feature.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      TypeReference<JsonFormat.Feature> typeReference0 = (TypeReference<JsonFormat.Feature>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper2.readerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      Class<ModelResolver> class0 = ModelResolver.class;
      typeNameResolver0.getNameOfClass(class0);
      HashSet<TypeNameResolver.Options> hashSet0 = new HashSet<TypeNameResolver.Options>();
      Class<ModelResolver> class1 = ModelResolver.class;
      TypeNameResolver.Options typeNameResolver_Options0 = TypeNameResolver.Options.SKIP_API_MODEL;
      TypeNameResolver.Options[] typeNameResolver_OptionsArray0 = new TypeNameResolver.Options[7];
      typeNameResolver_OptionsArray0[0] = typeNameResolver_Options0;
      typeNameResolver0.getNameOfClass(class1);
      TypeNameResolver.Options typeNameResolver_Options1 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[1] = typeNameResolver_Options1;
      TypeNameResolver.Options typeNameResolver_Options2 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[2] = typeNameResolver_Options2;
      typeNameResolver_OptionsArray0[3] = typeNameResolver_Options0;
      TypeNameResolver.Options typeNameResolver_Options3 = TypeNameResolver.Options.SKIP_API_MODEL;
      hashSet0.add(typeNameResolver_Options3);
      typeNameResolver_OptionsArray0[4] = typeNameResolver_Options0;
      TypeNameResolver.Options typeNameResolver_Options4 = TypeNameResolver.Options.SKIP_API_MODEL;
      typeNameResolver_OptionsArray0[5] = typeNameResolver_Options4;
      typeNameResolver_OptionsArray0[6] = typeNameResolver_Options0;
      EnumSet<TypeNameResolver.Options> enumSet0 = EnumSet.of(typeNameResolver_Options0, typeNameResolver_OptionsArray0);
      typeNameResolver0.nameForClass(class1, enumSet0);
      typeNameResolver0.nameForClass(class0, hashSet0);
      Class<JsonFormat.Feature> class2 = JsonFormat.Feature.class;
      typeNameResolver0.getNameOfClass(class2);
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonFactory jsonFactory0 = null;
      try {
        jsonFactory0 = new JsonFactory((JsonFactoryBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory((TypeFactory) null);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '?';
      objectMapper2.createParser(charArray0);
      // Undeclared exception!
      try { 
        objectMapper3.registerModule((Module) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"module\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      objectMapper0.writer(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TypeReference<ModelResolver> typeReference0 = (TypeReference<ModelResolver>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper1.writerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "enums-as-ref");
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      objectMapper1.createParser(byteArray0, 966, 0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      ObjectMapper objectMapper3 = objectMapper2.setAccessorNaming((AccessorNamingStrategy.Provider) null);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      io.swagger.v3.oas.models.media.Schema<Class<ModelResolver>> schema0 = new io.swagger.v3.oas.models.media.Schema<Class<ModelResolver>>();
      schema0.getJsonSchema();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper objectMapper3 = objectMapper2.setNodeFactory(jsonNodeFactory0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class0);
      boolean boolean0 = modelResolver0._isOptionalType(collectionType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Locale locale0 = Locale.CANADA_FRENCH;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable((Boolean) null);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType();
      annotatedType0.getJsonUnwrappedHandler();
      AnnotatedType annotatedType1 = annotatedType0.jsonUnwrappedHandler((Function<AnnotatedType, io.swagger.v3.oas.models.media.Schema>) null);
      AnnotatedType annotatedType2 = annotatedType1.skipOverride(false);
      AnnotatedType annotatedType3 = annotatedType2.skipJsonIdentity(false);
      AnnotatedType annotatedType4 = annotatedType3.ctxAnnotations((Annotation[]) null);
      ArrayList<ModelConverter> arrayList0 = new ArrayList<ModelConverter>();
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(arrayList0);
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '1';
      charArray0[3] = '\"';
      charArray0[4] = 'Y';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      charArray0[7] = '\"';
      charArray0[8] = '\"';
      JsonParser jsonParser0 = objectMapper0.createParser(charArray0);
      Class<ModelConverter> class0 = ModelConverter.class;
      MappingIterator<ModelConverter> mappingIterator0 = objectMapper3.readValues(jsonParser0, class0);
      // Undeclared exception!
      try { 
        modelResolver0.resolve(annotatedType4, modelConverterContextImpl0, mappingIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"t\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      serializationFeatureArray0[7] = serializationFeature1;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0, serializationFeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).requiredProperties();
      List<String> list0 = modelResolver0.resolveRequiredProperties((Annotated) null, annotationArray0, schema0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      typeNameResolver0.setUseFqn(true);
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      ObjectMapper objectMapper3 = objectMapper2.setLocale((Locale) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      Boolean boolean0 = Boolean.valueOf("WZNz8A>S<");
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0, locale0);
      ObjectMapper objectMapper3 = objectMapper2.setDateFormat(dateFormat0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      objectMapper3.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        typeNameResolver0.nameForGenericType((JavaType) null, (Set<TypeNameResolver.Options>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.TypeNameResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Value0);
      Class<Level> class0 = Level.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.addRequiredItem((io.swagger.v3.oas.models.media.Schema) null, "");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<ModelResolver> class1 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      // Undeclared exception!
      try { 
        placeholderForType0.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      objectMapper1.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getFilterProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      deserializationFeatureArray0[7] = deserializationFeature2;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ObjectMapper objectMapper3 = objectMapper2.setTypeFactory(typeFactory0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      // Undeclared exception!
      try { 
        modelResolver0._isOptionalType((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        objectMapper0.enable((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      // Undeclared exception!
      try { 
        objectMapper1.registerModules((Iterable<? extends Module>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"modules\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      HashSet<SimpleModule> hashSet0 = new HashSet<SimpleModule>(2799);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) hashSet0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper3 = objectMapper2.addHandler(deserializationProblemHandler0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = new Locale("Current context not Object but ");
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_DELEGATING;
      objectMapper1.setConstructorDetector(constructorDetector0);
      SimpleFilterProvider simpleFilterProvider0 = null;
      try {
        simpleFilterProvider0 = new SimpleFilterProvider((Map<String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
      serializationFeatureArray0[1] = serializationFeature1;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector(annotationIntrospector0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.empty();
      JsonSetter.Value jsonSetter_Value1 = JsonSetter.Value.merge(jsonSetter_Value0, jsonSetter_Value0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultSetterInfo(jsonSetter_Value1);
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature1, true);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setTimeZone((TimeZone) null);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("bJ`+Euvy");
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      ObjectMapper objectMapper4 = objectMapper3.configure(jsonParser_Feature0, true);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Module> class0 = Module.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "BI*3/4n,,@wIH]z&", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      BeanProperty.Std beanProperty_Std0 = null;
      try {
        beanProperty_Std0 = new BeanProperty.Std((BeanProperty.Std) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Vector<Module> vector0 = null;
      try {
        vector0 = new Vector<Module>((-1523), (-1523));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1523
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      ObjectMapper objectMapper1 = objectMapper0.setConfig(serializationConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfigBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2, typeNameResolver0);
      Class<ModelResolver> class0 = ModelResolver.class;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      ArrayList<ModelResolver> arrayList0 = new ArrayList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(arrayList0);
      modelResolver0._addEnumProps(class0, schema1);
      assertNull(schema1.getDescription());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      // Undeclared exception!
      try { 
        JsonInclude.Value.mergeAll((JsonInclude.Value[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.annotation.JsonInclude$Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      objectMapper1.enable(jsonGenerator_FeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory((TypeFactory) null);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper3 = objectMapper2.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      io.swagger.v3.oas.models.media.Schema<JsonTypeInfo.Id> schema0 = new io.swagger.v3.oas.models.media.Schema<JsonTypeInfo.Id>();
      schema0.getExclusiveMinimum();
      ObjectMapper objectMapper4 = objectMapper3.setDefaultLeniency((Boolean) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
      try { 
        placeholderForType0.withValueHandler(modelResolver0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector0);
      objectMapper1.writerWithDefaultPrettyPrinter();
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultLeniency(boolean0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<ModelResolver> class0 = ModelResolver.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader0 = objectMapper2.readerFor(javaType0);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper0);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(modelResolver1);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader2 = objectReader1.with(contextAttributes0);
      objectReader2.getTypeFactory();
      LRUMap<Object, JavaType> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, JavaType>((-64), Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_SINGLE_QUOTES;
      JsonReadFeature[] jsonReadFeatureArray0 = new JsonReadFeature[8];
      jsonReadFeatureArray0[0] = jsonReadFeature0;
      jsonReadFeatureArray0[1] = jsonReadFeature0;
      jsonReadFeatureArray0[2] = jsonReadFeature0;
      jsonReadFeatureArray0[3] = jsonReadFeature0;
      jsonReadFeatureArray0[4] = jsonReadFeature0;
      jsonReadFeatureArray0[5] = jsonReadFeature0;
      jsonReadFeatureArray0[6] = jsonReadFeature0;
      jsonReadFeatureArray0[7] = jsonReadFeature0;
      jsonFactoryBuilder0.disable(jsonReadFeature0, jsonReadFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Boolean boolean0 = Boolean.valueOf("com.fasterxml.jackson.databind.node.BinaryNode");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultLeniency(boolean0);
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.NON_PRIVATE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility3 = JsonAutoDetect.Visibility.NONE;
      JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility3);
      Object object0 = new Object();
      Class<ModelResolver> class0 = ModelResolver.class;
      try { 
        objectMapper2.convertValue(object0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No serializer found for class java.lang.Object and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      typeNameResolver0.setUseFqn(true);
      typeNameResolver0.setUseFqn(true);
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializationConfig serializationConfig0 = null;
      // Undeclared exception!
      try { 
        objectMapper0.setConfig((SerializationConfig) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"config\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_DELEGATING;
      ObjectMapper objectMapper2 = objectMapper1.setConstructorDetector(constructorDetector0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      Class<ModelResolver> class0 = ModelResolver.class;
      constructorDetector0.shouldIntrospectorImplicitConstructors(class0);
      objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ConstructorDetector.SingleArgConstructor constructorDetector_SingleArgConstructor0 = ConstructorDetector.SingleArgConstructor.REQUIRE_MODE;
      constructorDetector0.withSingleArgMode(constructorDetector_SingleArgConstructor0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12288);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      // Undeclared exception!
      try { 
        placeholderForType0.withTypeHandler(jsonInclude_Include0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.rebuild();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "JSON");
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "JSON");
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.ALWAYS;
      objectMapper3.writeValue((File) mockFile1, (Object) jsonInclude_Include1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<ModelResolver> class0 = ModelResolver.class;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0._addEnumProps(class0, schema0);
      Annotation[] annotationArray0 = new Annotation[5];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[2];
      Class<LinkedList> class1 = LinkedList.class;
      Class<ModelResolver> class2 = ModelResolver.class;
      JavaType javaType0 = null;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, (JavaType) null);
      int int0 = (-2378);
      typeBindings0.getBoundType((-2378));
      // Undeclared exception!
      try { 
        typeFactory0.constructCollectionType(class1, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      stdSubtypeResolver0.copy();
      TypeReference<ModelResolver> typeReference0 = (TypeReference<ModelResolver>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.writerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, JsonInclude.Include> hashMap0 = new HashMap<String, JsonInclude.Include>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      simpleFilterProvider0.removeFilter("iea>a>\"L(.t+AP");
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      Locale locale0 = Locale.TAIWAN;
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.NON_ABSENT;
      Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
      Locale.setDefault(locale0);
      Class<ModelResolver> class1 = ModelResolver.class;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include1, class0, class1);
      hashMap0.clone();
      objectMapper0.getVisibilityChecker();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1682554634);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      objectMapper2.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      objectMapper3.setDefaultPropertyInclusion(jsonInclude_Value0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, JavaType>((-1856), (-1856));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultVisibility(jsonAutoDetect_Value0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      TypeBindings typeBindings0 = null;
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[5];
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonFactory jsonFactory0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      ConfigOverrides configOverrides1 = configOverrides0.copy();
      configOverrides1.getDefaultLeniency();
      objectMapper1.setDefaultMergeable((Boolean) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-81);
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      SerialBlob serialBlob1 = new SerialBlob(serialBlob0);
      InputStream inputStream0 = serialBlob1.getBinaryStream();
      jsonFactory0.createParser(inputStream0);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory((TypeFactory) null);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forSerialization((SerializationConfig) null, (JavaType) null, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      JsonAutoDetect jsonAutoDetect0 = null;
      // Undeclared exception!
      try { 
        JsonAutoDetect.Value.from((JsonAutoDetect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.annotation.JsonAutoDetect$Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      objectMapper1.writer(serializationFeature0);
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SubtypeResolver subtypeResolver0 = stdSubtypeResolver0.copy();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(subtypeResolver0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonGenerator_FeatureArray0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonParser_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      modelResolver0.resolveMinItems((AnnotatedType) null, (ArraySchema) null);
      Annotation[] annotationArray0 = new Annotation[6];
      annotationArray0[0] = (Annotation) null;
      annotationArray0[1] = (Annotation) null;
      annotationArray0[2] = (Annotation) null;
      annotationArray0[3] = (Annotation) null;
      annotationArray0[4] = (Annotation) null;
      annotationArray0[5] = (Annotation) null;
      Object object0 = modelResolver0.resolveExample((Annotated) null, annotationArray0, (Schema) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, JsonTypeInfo.Id> hashMap0 = new HashMap<String, JsonTypeInfo.Id>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      String string0 = "OZeqoS|fXLh9";
      simpleFilterProvider0.addFilter("OZeqoS|fXLh9", (SimpleBeanPropertyFilter) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      modelResolver0.applyBeanValidatorAnnotations(schema0, (Annotation[]) null, schema0);
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDelegateCreator();
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema1).allowableValues();
      modelResolver0.resolveAllowableValues((Annotated) null, (Annotation[]) null, schema1);
      Annotation[] annotationArray0 = new Annotation[0];
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema2).defaultValue();
      // Undeclared exception!
      try { 
        modelResolver0.resolveDefaultValue((Annotated) null, annotationArray0, schema2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<ModelResolver> class0 = ModelResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "composed-model-properties-as-sibiling", javaType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      doReturn((XmlAccessType) null).when(xmlAccessorType0).value();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        modelResolver0.ignore(annotatedField0, xmlAccessorType0, "#]^TH`E9IGV1k", linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
      Boolean boolean0 = new Boolean("EXCEPTION_PARAMETER");
      ObjectMapper objectMapper2 = objectMapper1.setDefaultLeniency(boolean0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        ObjectMapper.findModules(classLoader0);
        fail("Expecting exception: ServiceConfigurationError");
      
      } catch(ServiceConfigurationError e) {
         //
         // com.fasterxml.jackson.databind.Module: Provider com.fasterxml.jackson.datatype.jsr310.JavaTimeModule not a subtype
         //
         verifyException("java.util.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1);
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      TypeBindings typeBindings0 = null;
      Class<ModelResolver> class2 = ModelResolver.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        MockDateFormat.getDateInstance(1212, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1212
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setConstructorDetector(constructorDetector0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<ModelResolver> class0 = ModelResolver.class;
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NAME;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) jsonTypeInfo_Id0);
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      ModelConverterContextImpl modelConverterContextImpl0 = new ModelConverterContextImpl(modelResolver0);
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0.resolveDiscriminatorProperty(collectionType0, modelConverterContextImpl0, schema0);
      CollectionType collectionType1 = collectionType0.withTypeHandler((Object) null);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper1);
      CollectionType collectionType2 = collectionType1.withContentValueHandler(modelResolver1);
      CollectionType collectionType3 = collectionType2.withStaticTyping();
      ModelConverterContextImpl modelConverterContextImpl1 = new ModelConverterContextImpl(modelResolver0);
      modelResolver0.resolveDiscriminatorProperty(collectionType3, modelConverterContextImpl1, (io.swagger.v3.oas.models.media.Schema) null);
      modelResolver1.addRequiredItem((io.swagger.v3.oas.models.media.Schema) null, "composed-model-properties-as-sibiling");
      assertNotSame(modelResolver1, modelResolver0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      Class<ModelResolver> class0 = ModelResolver.class;
      // Undeclared exception!
      try { 
        objectMapper1.readValue((DataInput) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"src\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      doReturn((Class) null).when(jsonInclude0).annotationType();
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.from(jsonInclude0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[6];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.deactivateDefaultTyping();
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<JsonTypeInfo.Id> schema0 = new io.swagger.v3.oas.models.media.Schema<JsonTypeInfo.Id>(specVersion0);
      Annotation[] annotationArray0 = new Annotation[6];
      annotationArray0[0] = (Annotation) jsonInclude0;
      annotationArray0[1] = (Annotation) jsonInclude0;
      annotationArray0[2] = (Annotation) jsonInclude0;
      annotationArray0[3] = (Annotation) jsonInclude0;
      annotationArray0[4] = (Annotation) jsonInclude0;
      annotationArray0[5] = (Annotation) jsonInclude0;
      // Undeclared exception!
      try { 
        modelResolver0.applyBeanValidatorAnnotations(schema0, annotationArray0, schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      SpecVersion specVersion0 = SpecVersion.V30;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      LinkedList<ModelResolver> linkedList0 = new LinkedList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(linkedList0);
      // Undeclared exception!
      try { 
        modelResolver0.resolveSchemaMembers(schema1, (AnnotatedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      objectMapper2.setNodeFactory((JsonNodeFactory) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getFilterProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getPropertyNamingStrategy();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultAttributes(contextAttributes0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper2);
      modelResolver0.objectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper1, (TypeNameResolver) null);
      // Undeclared exception!
      try { 
        placeholderForType0.withValueHandler(modelResolver1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.TRUE;
      objectMapper0.setDefaultLeniency(boolean0);
      String string0 = "com.google.inject.internal.RealOptionalBinder$RealOptionalBinderProviderWithDependencies";
      int int0 = 0;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "com.google.inject.internal.RealOptionalBinder$RealOptionalBinderProviderWithDependencies", false, 'W', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 88)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      objectMapper1.createParser((InputStream) byteArrayInputStream0);
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.findAndRegisterModules();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      // Undeclared exception!
      try { 
        objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use includeAs of EXTERNAL_PROPERTY
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.resolveAsRef(true);
      AnnotatedType annotatedType2 = annotatedType1.jsonViewAnnotation((JsonView) null);
      AnnotatedType annotatedType3 = annotatedType2.name("JSON");
      AnnotatedType annotatedType4 = annotatedType3.skipOverride(false);
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      Integer integer0 = modelResolver0.resolveMaxItems(annotatedType4, arraySchema0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonFactory0.disable(jsonParser_Feature0);
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      ArrayList<Module> arrayList0 = new ArrayList<Module>(0);
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<? extends Module>) arrayList0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      AnnotatedType annotatedType0 = new AnnotatedType((Type) null);
      arrayList0.sort((Comparator<? super Module>) null);
      URL uRL0 = MockURL.getHttpExample();
      try { 
        objectMapper0.readTree(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonParser_Feature0, true);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetterField();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetterMethod();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findAnyGetter();
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.findWrapperName((Annotated) null);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findProperty((PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_DELEGATING;
      ObjectMapper objectMapper2 = objectMapper1.setConstructorDetector(constructorDetector0);
      Class<Base64Variant.PaddingReadBehaviour> class0 = Base64Variant.PaddingReadBehaviour.class;
      objectMapper2.addMixIn(class0, class0);
      Module[] moduleArray0 = new Module[0];
      Base64Variant.PaddingReadBehaviour base64Variant_PaddingReadBehaviour0 = Base64Variant.PaddingReadBehaviour.PADDING_REQUIRED;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<ModelResolver> class1 = ModelResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      Base64Variant.PaddingReadBehaviour base64Variant_PaddingReadBehaviour1 = Base64Variant.PaddingReadBehaviour.PADDING_FORBIDDEN;
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) base64Variant_PaddingReadBehaviour0, (Object) base64Variant_PaddingReadBehaviour1);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) arrayType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper2 = objectMapper1.addHandler(deserializationProblemHandler0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.DEFAULT;
      ConstructorDetector constructorDetector1 = constructorDetector0.withRequireAnnotation(false);
      ObjectMapper objectMapper3 = objectMapper2.setConstructorDetector(constructorDetector1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      NamedType[] namedTypeArray0 = new NamedType[8];
      Class<ModelResolver> class0 = ModelResolver.class;
      NamedType namedType0 = new NamedType(class0);
      namedTypeArray0[0] = namedType0;
      NamedType namedType1 = new NamedType(class0);
      namedTypeArray0[1] = namedType1;
      Class<Base64Variant.PaddingReadBehaviour> class1 = Base64Variant.PaddingReadBehaviour.class;
      NamedType namedType2 = new NamedType(class1, "");
      namedTypeArray0[2] = namedType2;
      NamedType namedType3 = new NamedType(class0);
      namedTypeArray0[3] = namedType3;
      NamedType namedType4 = new NamedType(class1, "JSON");
      namedTypeArray0[4] = namedType4;
      NamedType namedType5 = new NamedType(class0, "number");
      namedTypeArray0[5] = namedType5;
      NamedType namedType6 = new NamedType(class0);
      namedTypeArray0[6] = namedType6;
      NamedType namedType7 = new NamedType(class1, "JSON");
      namedTypeArray0[7] = namedType7;
      objectMapper0.registerSubtypes(namedTypeArray0);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      jsonAutoDetect_Value0.withIsGetterVisibility(jsonAutoDetect_Visibility0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      serializationFeatureArray0[2] = serializationFeature1;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      SerializationFeature serializationFeature2 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      serializationFeatureArray0[7] = serializationFeature2;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl1.handleSecondaryContextualization(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, beanProperty_Bogus0);
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getJsonKeyAccessor();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findJsonKeyAccessor();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0).pattern();
      modelResolver0.resolvePattern((Annotated) null, (Annotation[]) null, schema0);
      modelResolver0.applyBeanValidatorAnnotations((io.swagger.v3.oas.models.media.Schema) null, (Annotation[]) null, (io.swagger.v3.oas.models.media.Schema) null);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Nulls nulls0 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forContentNulls(nulls0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.empty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      objectMapper1.enable(jsonParser_FeatureArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, false);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((String) null, (Object) modelResolver0);
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std1);
      Class<ModelResolver> class0 = ModelResolver.class;
      ObjectMapper objectMapper4 = objectMapper3.addMixIn(class0, class0);
      ModelResolver modelResolver1 = new ModelResolver(objectMapper4);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((String) null, "JSON", false, 'N', 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 4)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.setBase64Variant((Base64Variant) null);
      ObjectMapper objectMapper3 = objectMapper2.setAccessorNaming((AccessorNamingStrategy.Provider) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      ObjectMapper objectMapper4 = objectMapper3.configure(serializationFeature0, false);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      assertFalse(ModelResolver.composedModelPropertiesAsSibling);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory(typeFactory0);
      // Undeclared exception!
      try { 
        objectMapper2.disable((JsonGenerator.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, false);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<ModelResolver> class0 = ModelResolver.class;
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      SimpleBeanPropertyFilter simpleBeanPropertyFilter0 = SimpleBeanPropertyFilter.filterOutAllExcept(set0);
      String[] stringArray0 = new String[0];
      SimpleBeanPropertyFilter.filterOutAllExcept(stringArray0);
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.setDefaultFilter((PropertyFilter) simpleBeanPropertyFilter0);
      objectMapper2.setFilterProvider(simpleFilterProvider1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      // Undeclared exception!
      try { 
        modelResolver0.hasHiddenAnnotation((Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      objectMapper2.enable(deserializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.findAndRegisterModules();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      // Undeclared exception!
      try { 
        objectMapper3.createGenerator((File) null, jsonEncoding0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"outputFile\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      TypeReference<ModelResolver> typeReference0 = (TypeReference<ModelResolver>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readValue(jsonParser0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
      serializationFeatureArray0[4] = serializationFeature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper1, typeNameResolver0);
      ObjectMapper objectMapper2 = modelResolver0.objectMapper();
      assertSame(objectMapper2, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      Class<ModelResolver> class0 = ModelResolver.class;
      Class<ModelResolver> class1 = ModelResolver.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class1);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, collectionLikeType0, collectionLikeType0);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(modelResolver0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getDefaultCreator();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(schema0).multipleOf();
      modelResolver0.resolveMultipleOf((Annotated) null, (Annotation[]) null, schema0);
      modelResolver0.shouldIgnoreClass(collectionLikeType0);
      modelResolver0.resolveMaximum((Annotated) null, (Annotation[]) null, (Schema) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      collectionLikeType0.serialize(jsonGenerator0, defaultSerializerProvider_Impl0);
      modelResolver0.decorateModelName((AnnotatedType) null, "");
      modelResolver0.resolveAllowableValues((Annotated) null, (Annotation[]) null, (Schema) null);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      beanSerializerBuilder0.getTypeId();
      modelResolver0.resolveDefaultValue((Annotated) null, (Annotation[]) null, (Schema) null);
      AnnotatedType annotatedType0 = new AnnotatedType();
      AnnotatedType annotatedType1 = annotatedType0.skipSchemaName(false);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      AnnotatedType annotatedType2 = annotatedType1.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType3 = annotatedType2.resolveAsRef(false);
      AnnotatedType annotatedType4 = annotatedType3.skipOverride(true);
      modelResolver0.resolveUniqueItems(annotatedType4, (ArraySchema) null);
      modelResolver0.resolveIgnoredProperties((Annotation[]) null);
      Integer integer0 = modelResolver0.resolveMaxItems(annotatedType3, (ArraySchema) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      AnnotatedType annotatedType0 = new AnnotatedType();
      Class<Byte> class0 = Byte.TYPE;
      AnnotatedType annotatedType1 = annotatedType0.type(class0);
      SpecVersion specVersion0 = SpecVersion.V31;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>(specVersion0);
      ArrayList<ModelResolver> arrayList0 = new ArrayList<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples(arrayList0);
      AnnotatedType annotatedType2 = annotatedType1.parent(schema1);
      AnnotatedType annotatedType3 = annotatedType2.name("");
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn((Extension[]) null).when(arraySchema0).extensions();
      Map<String, Object> map0 = modelResolver0.resolveExtensions(annotatedType3, arraySchema0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      // Undeclared exception!
      try { 
        objectMapper1.registerModule((Module) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"module\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      Boolean boolean0 = new Boolean(true);
      ObjectMapper objectMapper4 = objectMapper3.setDefaultLeniency(boolean0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      objectMapper1.findAndRegisterModules();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = null;
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = null;
      try {
        modelResolver0 = new ModelResolver((ObjectMapper) null, typeNameResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.AbstractModelConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Locale locale0 = Locale.CHINA;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactoryBuilder0.rootValueSeparator("\"Gdq7)iu");
      PipedReader pipedReader0 = new PipedReader();
      jsonFactory0.createParser((Reader) pipedReader0);
      ObjectMapper objectMapper1 = objectMapper0.deactivateDefaultTyping();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      jsonFactoryBuilder0.quoteChar('\"');
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      DeserializationFeature deserializationFeature2 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature2, false);
      StreamWriteFeature streamWriteFeature0 = StreamWriteFeature.FLUSH_PASSED_TO_STREAM;
      StreamWriteFeature[] streamWriteFeatureArray0 = new StreamWriteFeature[7];
      streamWriteFeatureArray0[0] = streamWriteFeature0;
      streamWriteFeatureArray0[1] = streamWriteFeature0;
      streamWriteFeatureArray0[2] = streamWriteFeature0;
      streamWriteFeatureArray0[3] = streamWriteFeature0;
      streamWriteFeatureArray0[4] = streamWriteFeature0;
      streamWriteFeatureArray0[5] = streamWriteFeature0;
      streamWriteFeatureArray0[6] = streamWriteFeature0;
      jsonFactoryBuilder0.enable(streamWriteFeature0, streamWriteFeatureArray0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, true);
      LinkedList<SimpleModule> linkedList0 = new LinkedList<SimpleModule>();
      Vector<Module> vector0 = new Vector<Module>(linkedList0);
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<? extends Module>) vector0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      Class<SimpleModule> class0 = SimpleModule.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getWithArgsCreator();
      XmlAccessorType xmlAccessorType0 = mock(XmlAccessorType.class, new ViolatedAssumptionAnswer());
      ZoneId.getAvailableZoneIds();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      PropertyName propertyName0 = PropertyName.construct("enums-as-ref");
      // Undeclared exception!
      try { 
        basicBeanDescription0.findProperty(propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Month> class0 = Month.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      boolean boolean0 = true;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, true);
      objectMapper2.mixInCount();
      ConstructorDetector constructorDetector0 = ConstructorDetector.DEFAULT;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, (String) null, 1, (String) null, uRLStreamHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      Class<Month> class0 = Month.class;
      try { 
        objectMapper0.readValue("javax.validation.constraints.Max", class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'javax': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: (String)\"javax.validation.constraints.Max\"; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      String string0 = "Cannot deserialize a Map.Entry out of empty JSON Object";
      boolean boolean0 = false;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Cannot deserialize a Map.Entry out of empty JSON Object", "HNkTm0BDnwI?T", false, 'A', (-1771));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 13)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      HashMap<String, ModelResolver> hashMap0 = new HashMap<String, ModelResolver>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      objectMapper2.getPropertyNamingStrategy();
      ObjectMapper objectMapper3 = objectMapper2.setFilterProvider(simpleFilterProvider0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper4 = objectMapper3.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper4, typeNameResolver0);
      Class<Month> class0 = Month.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDelegateCreator();
      Annotation[] annotationArray0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        valueInstantiator_Base0.createFromObjectWith((DeserializationContext) defaultDeserializationContext0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility1);
      JsonAutoDetect.Value jsonAutoDetect_Value1 = JsonAutoDetect.Value.merge(jsonAutoDetect_Value0, jsonAutoDetect_Value0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value1);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory(serializerFactory0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<Month> class0 = Month.class;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema1 = schema0.examples((List<ModelResolver>) null);
      modelResolver0._addEnumProps(class0, schema1);
      AnnotatedType annotatedType0 = new AnnotatedType();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      AnnotatedType annotatedType1 = annotatedType0.jsonViewAnnotation(jsonView0);
      AnnotatedType annotatedType2 = annotatedType1.skipSchemaName(true);
      AnnotatedType annotatedType3 = annotatedType2.parent(schema1);
      AnnotatedType annotatedType4 = annotatedType3.propertyName("");
      // Undeclared exception!
      try { 
        modelResolver0.decorateModelName(annotatedType4, "?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setTimeZone((TimeZone) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      // Undeclared exception!
      try { 
        objectMapper0.registerModules((Module[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector((AnnotationIntrospector) null);
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3);
      assertFalse(ModelResolver.enumsAsRef);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ModelResolver modelResolver0 = new ModelResolver(objectMapper0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
      try { 
        placeholderForType0.withTypeHandler(modelResolver0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((String) null);
      defaultPrettyPrinter0.withRootSeparator((String) null);
      objectMapper1.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature1);
      // Undeclared exception!
      try { 
        objectMapper2.disable((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      Class<ModelResolver> class0 = ModelResolver.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class0);
      TypeNameResolver typeNameResolver0 = TypeNameResolver.std;
      ModelResolver modelResolver0 = new ModelResolver(objectMapper3, typeNameResolver0);
      Class<Month> class1 = Month.class;
      io.swagger.v3.oas.models.media.Schema<ModelResolver> schema0 = new io.swagger.v3.oas.models.media.Schema<ModelResolver>();
      modelResolver0._addEnumProps(class1, schema0);
      assertNull(schema0.getBooleanSchemaValue());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectMapper2.addHandler(deserializationProblemHandler0);
      TypeNameResolver typeNameResolver0 = new TypeNameResolver();
      Class<ModelResolver> class0 = ModelResolver.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      typeBindings0.getBoundType(0);
      TreeSet<TypeNameResolver.Options> treeSet0 = new TreeSet<TypeNameResolver.Options>();
      // Undeclared exception!
      try { 
        typeNameResolver0.nameForType((JavaType) null, (Set<TypeNameResolver.Options>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.TypeNameResolver", e);
      }
  }
}
