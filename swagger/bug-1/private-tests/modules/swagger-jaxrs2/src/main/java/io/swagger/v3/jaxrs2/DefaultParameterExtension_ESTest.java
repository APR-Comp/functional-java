/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 01 11:30:07 GMT 2023
 */

package io.swagger.v3.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.StreamReadConstraints;
import com.fasterxml.jackson.core.StreamReadFeature;
import com.fasterxml.jackson.core.StreamWriteFeature;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.JsonWriteFeature;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DatatypeFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.EnumFeature;
import com.fasterxml.jackson.databind.cfg.JsonNodeFeature;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import io.swagger.v3.core.converter.ModelConverters;
import io.swagger.v3.core.jackson.ModelResolver;
import io.swagger.v3.core.util.Json;
import io.swagger.v3.core.util.Json31;
import io.swagger.v3.jaxrs2.DefaultParameterExtension;
import io.swagger.v3.jaxrs2.ext.OpenAPIExtension;
import io.swagger.v3.jaxrs2.ext.OpenAPIExtensions;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.ExternalDocumentation;
import io.swagger.v3.oas.models.Operation;
import io.swagger.v3.oas.models.PathItem;
import io.swagger.v3.oas.models.SpecVersion;
import io.swagger.v3.oas.models.callbacks.Callback;
import io.swagger.v3.oas.models.examples.Example;
import io.swagger.v3.oas.models.headers.Header;
import io.swagger.v3.oas.models.links.Link;
import io.swagger.v3.oas.models.media.Content;
import io.swagger.v3.oas.models.media.Encoding;
import io.swagger.v3.oas.models.media.MediaType;
import io.swagger.v3.oas.models.media.Schema;
import io.swagger.v3.oas.models.media.XML;
import io.swagger.v3.oas.models.parameters.Parameter;
import io.swagger.v3.oas.models.parameters.RequestBody;
import io.swagger.v3.oas.models.responses.ApiResponse;
import io.swagger.v3.oas.models.responses.ApiResponses;
import io.swagger.v3.oas.models.security.OAuthFlow;
import io.swagger.v3.oas.models.security.OAuthFlows;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import io.swagger.v3.oas.models.servers.ServerVariable;
import java.io.BufferedInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.file.StandardCopyOption;
import java.text.DateFormat;
import java.time.ZoneId;
import java.time.temporal.ChronoField;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EmptyStackException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import javax.enterprise.context.BeforeDestroyed;
import javax.enterprise.context.ConversationScoped;
import javax.enterprise.context.Initialized;
import javax.enterprise.inject.Alternative;
import javax.enterprise.inject.New;
import javax.enterprise.inject.Typed;
import javax.enterprise.inject.Vetoed;
import javax.enterprise.util.Nonbinding;
import javax.ws.rs.Consumes;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jboss.weld.util.reflection.WildcardTypeImpl;
import org.junit.runner.RunWith;
import org.mockito.internal.util.reflection.GenericMetadataSupport;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParameterExtension_ESTest extends DefaultParameterExtension_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
      
      Vector<OpenAPIExtension> vector0 = new Vector<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(vector0);
      Class<Object> class1 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      boolean boolean1 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean1);
      
      HashSet<New.Literal> hashSet0 = new HashSet<New.Literal>();
      ArrayList<New.Literal> arrayList0 = new ArrayList<New.Literal>(hashSet0);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>(arrayList0);
      HashSet<Type> hashSet1 = new HashSet<Type>();
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses("`@$IJv&m1v%f\"&l-gV?", apiResponse0);
      components1.getSecuritySchemes();
      Components components2 = components1.securitySchemes((Map<String, SecurityScheme>) null);
      components2.getRequestBodies();
      Components components3 = components2.requestBodies((Map<String, RequestBody>) null);
      apiResponse0.getExtensions();
      Components components4 = components3.extensions((Map<String, Object>) null);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      defaultParameterExtension0.extractParameters(linkedList0, class1, hashSet1, components4, (Consumes) null, (Consumes) null, true, jsonView0, (Iterator<OpenAPIExtension>) null);
      assertEquals(0, hashSet1.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Stack<Annotation> stack0 = new Stack<Annotation>();
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = new Components();
      Parameter parameter0 = new Parameter();
      Components components1 = components0.addParameters((String) null, parameter0);
      Schema<POJOPropertyBuilder> schema0 = new Schema<POJOPropertyBuilder>();
      schema0.getPatternProperties();
      Components components2 = components1.schemas((Map<String, Schema>) null);
      RequestBody requestBody0 = new RequestBody();
      Content content0 = new Content();
      RequestBody requestBody1 = requestBody0.content(content0);
      Components components3 = components2.addRequestBodies("aC.J", requestBody1);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components4 = components3.callbacks(hashMap0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultParameterExtension0.extractParameters(stack0, (Type) null, hashSet0, components4, consumes0, consumes0, true, jsonView0, (Iterator<OpenAPIExtension>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Vector<Annotation> vector0 = new Vector<Annotation>();
      Initialized.Literal initialized_Literal0 = Initialized.Literal.SESSION;
      initialized_Literal0.value();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      components0.getParameters();
      Components components1 = components0.parameters((Map<String, Parameter>) null);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components2 = components1.requestBodies(hashMap0);
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.get(operation0);
      Components components3 = components2.addPathItem("", pathItem1);
      RequestBody requestBody0 = new RequestBody();
      Content content0 = new Content();
      MediaType mediaType0 = new MediaType();
      Content content1 = content0.addMediaType("#/components/schemas/", mediaType0);
      RequestBody requestBody1 = requestBody0.content(content1);
      XML xML0 = new XML();
      xML0.getExtensions();
      RequestBody requestBody2 = requestBody1.extensions((Map<String, Object>) null);
      components3.addRequestBodies("io.swagger.v3.jaxrs2.DefaultParameterExtension", requestBody2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      JsonView jsonView0 = null;
      boolean boolean1 = true;
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (BufferRecycler) null, contentReference0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 8233, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Vector<OpenAPIExtension> vector0 = new Vector<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(vector0);
      Vector<String> vector1 = new Vector<String>();
      vector1.add("l95");
      ModelResolver.NOT_NULL_ANNOTATIONS = (List<String>) vector1;
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<Annotation> vector2 = new Vector<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      // Undeclared exception!
      try { 
        objectMapper0.reader(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      ModelResolver.NOT_NULL_ANNOTATIONS = (List<String>) stack0;
      Class<Object> class1 = Object.class;
      boolean boolean1 = defaultParameterExtension0.shouldIgnoreClass(class1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Stack<Annotation> stack0 = new Stack<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      apiResponse0.getLinks();
      Components components1 = components0.links((Map<String, Link>) null);
      Schema<EnumSet<JsonParser.Feature>> schema0 = new Schema<EnumSet<JsonParser.Feature>>();
      schema0.getProperties();
      Components components2 = components1.schemas((Map<String, Schema>) null);
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme securityScheme1 = securityScheme0.description("#/components/schemas/");
      Components components3 = components2.addSecuritySchemes("#/components/schemas/", securityScheme1);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      components3.requestBodies(hashMap0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = null;
      try {
        jsonFactory0 = new JsonFactory((JsonFactoryBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      defaultParameterExtension0.setOpenAPI31(false);
      defaultParameterExtension0.setOpenAPI31(false);
      Json.mapper();
      Class<Object> class0 = Object.class;
      LinkedList<OpenAPIExtension> linkedList0 = new LinkedList<OpenAPIExtension>();
      UnaryOperator<OpenAPIExtension> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.add((OpenAPIExtension) defaultParameterExtension0);
      OpenAPIExtensions.setExtensions(linkedList0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<JsonFactory.Feature> class1 = JsonFactory.Feature.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<Object> class2 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      defaultParameterExtension0.shouldIgnoreClass(class2);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      defaultParameterExtension0.shouldIgnoreClass(class2);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      FloatNode floatNode0 = new FloatNode(0.0F);
      String string0 = "";
      floatNode0.findValuesAsText("");
      Class<POJOPropertyBuilder> class3 = POJOPropertyBuilder.class;
      Class<Object> class4 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class4, typeBindings0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class3, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.setOpenAPI31(true);
      Json.mapper();
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<POJOPropertyBuilder> class2 = POJOPropertyBuilder.class;
      Class<JsonFactory.Feature> class3 = JsonFactory.Feature.class;
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = new Components();
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>();
      Components components1 = components0.links(hashMap0);
      PathItem pathItem0 = new PathItem();
      Components components2 = components1.addPathItem("#/components/schemas/", pathItem0);
      Encoding encoding0 = new Encoding();
      encoding0.getHeaders();
      Components components3 = components2.headers((Map<String, Header>) null);
      Link link0 = new Link();
      Link link1 = link0.description("path");
      Components components4 = components3.addLinks("#/components/schemas/", link1);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(consumes0).value();
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView0).value();
      // Undeclared exception!
      try { 
        defaultParameterExtension0.extractParameters(arrayList0, class1, hashSet0, components4, consumes0, consumes0, true, jsonView0, (Iterator<OpenAPIExtension>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      ApiResponses apiResponses0 = new ApiResponses();
      Components components1 = components0.responses(apiResponses0);
      Encoding encoding0 = new Encoding();
      encoding0.getExtensions();
      Components components2 = components1.extensions((Map<String, Object>) null);
      Schema<Object> schema0 = new Schema<Object>();
      Vector<Object> vector0 = new Vector<Object>();
      Schema<Object> schema1 = schema0.examples(vector0);
      Components components3 = components2.addSchemas("zLlBFIMeY;![t", schema1);
      components3.addRequestBodies("com.fasterxml.jackson.annotation.JsonAutoDetect$Value", (RequestBody) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      objectMapper2.readerForListOf(class1);
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper3 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, (DataInput) null, objectMapper3, (ByteQuadsCanonicalizer) null, 2000);
      // Undeclared exception!
      try { 
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      List<Annotation> list0 = null;
      Set<Type> set0 = null;
      Components components0 = new Components();
      Components components1 = components0.examples((Map<String, Example>) null);
      ExternalDocumentation externalDocumentation0 = new ExternalDocumentation();
      externalDocumentation0.getExtensions();
      Components components2 = components1.extensions((Map<String, Object>) null);
      components0.getSecuritySchemes();
      Components components3 = components2.securitySchemes((Map<String, SecurityScheme>) null);
      components0.getLinks();
      components3.links((Map<String, Link>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectReader objectReader2 = objectReader1.without(jsonParser_Feature0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature1;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      jsonParser_FeatureArray0[2] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature2;
      jsonParser_FeatureArray0[4] = jsonParser_Feature0;
      ObjectReader objectReader3 = objectReader2.withFeatures(jsonParser_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader4 = objectReader3.without(deserializationFeature0, deserializationFeatureArray0);
      try { 
        objectReader4.readValues("-7A{`*=c@");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('A' (code 65)): Expected space separating root-level values
         //  at [Source: (String)\"-7A{`*=c@\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>(0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.getContentType();
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = new Components();
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components1 = components0.examples(hashMap0);
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      Components components2 = components1.securitySchemes(hashMap1);
      Link link0 = new Link();
      Link link1 = link0.addParameter("?TmfcB(\"EqJ7O|A3OD", "}T5mq@[{Ho6ndL");
      Components components3 = components2.addLinks("?TmfcB(\"EqJ7O|A3OD", link1);
      Callback callback0 = new Callback();
      Callback callback1 = callback0.$ref("FM[HH1");
      PathItem pathItem0 = new PathItem();
      Callback callback2 = callback1.addPathItem("}T5mq@[{Ho6ndL", pathItem0);
      Callback callback3 = callback2.addPathItem((String) null, pathItem0);
      components3.pathItems(callback3);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "#/components/schemas/", false, '\"', (-2227));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 21)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.setOpenAPI31(false);
      ModelConverters.getInstance(false);
      defaultParameterExtension0.setOpenAPI31(false);
      ModelConverters.getInstance(false);
      ObjectMapper objectMapper0 = Json31.mapper();
      Json.mapper();
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Json31.mapper();
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      Encoding encoding0 = new Encoding();
      encoding0.getHeaders();
      Components components1 = components0.headers((Map<String, Header>) null);
      components0.getRequestBodies();
      Components components2 = components1.requestBodies((Map<String, RequestBody>) null);
      Link link0 = new Link();
      Server server0 = new Server();
      Link link1 = link0.server(server0);
      Components components3 = components2.addLinks("#/components/schemas/", link1);
      components2.getSchemas();
      components3.schemas((Map<String, Schema>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      // Undeclared exception!
      try { 
        jsonFactory0.createParser((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Stack<Annotation> stack0 = new Stack<Annotation>();
      WildcardTypeImpl.defaultInstance();
      Set<Type> set0 = null;
      Components components0 = new Components();
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies("", requestBody0);
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>();
      Components components2 = components1.links(hashMap0);
      Map<String, RequestBody> map0 = components2.getRequestBodies();
      Components components3 = components2.requestBodies(map0);
      components3.callbacks((Map<String, Callback>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      objectReader0.withAttributes((Map<?, ?>) null);
      DatatypeFeature[] datatypeFeatureArray0 = new DatatypeFeature[5];
      // Undeclared exception!
      try { 
        EnumFeature.valueOf("#/components/schemas/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.databind.cfg.EnumFeature.#/components/schemas/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Stack<String> stack0 = new Stack<String>();
      stack0.listIterator(0);
      ModelResolver.NOT_NULL_ANNOTATIONS = (List<String>) stack0;
      Class<JsonEncoding> class0 = JsonEncoding.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<JsonEncoding> class1 = JsonEncoding.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<POJOPropertyBuilder> class2 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ObjectMapper objectMapper0 = Json.mapper();
      defaultParameterExtension0.setOpenAPI31(true);
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(false, (Object) treeSet0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      PipedReader pipedReader0 = new PipedReader(4);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1315, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      Class<OpenAPIExtension> class1 = OpenAPIExtension.class;
      MappingIterator<OpenAPIExtension> mappingIterator0 = objectMapper0.readValues((JsonParser) jsonParserSequence0, class1);
      // Undeclared exception!
      try { 
        defaultParameterExtension0.extractParameters(arrayList0, class0, treeSet0, (Components) null, consumes0, consumes0, false, jsonView0, mappingIterator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Stack<Annotation> stack0 = new Stack<Annotation>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      OpenAPIExtensions.setExtensions((List<OpenAPIExtension>) null);
      Json.mapper();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      ModelConverters.getInstance(false);
      OpenAPIExtensions.setExtensions((List<OpenAPIExtension>) null);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      ModelConverters.getInstance(false);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<POJOPropertyBuilder> class2 = POJOPropertyBuilder.class;
      Json.mapper();
      defaultParameterExtension0.shouldIgnoreClass(class2);
      Class<String> class3 = String.class;
      defaultParameterExtension0.shouldIgnoreClass(class3);
      Stack<Annotation> stack0 = new Stack<Annotation>();
      Set<Type> set0 = null;
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      apiResponse0.getHeaders();
      Components components1 = components0.headers((Map<String, Header>) null);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes("#/components/schemas/", securityScheme0);
      Components components3 = components2.addResponses("#/components/schemas/", apiResponse0);
      components3.addRequestBodies((String) null, (RequestBody) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      IOContext iOContext0 = null;
      int int0 = (-2567);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("#/components/schemas/", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Vector<OpenAPIExtension> vector0 = new Vector<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(vector0);
      Class<String> class0 = String.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      vector0.removeIf(predicate0);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      // Undeclared exception!
      try { 
        treeSet0.add(class1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ObjectMapper objectMapper0 = Json.mapper();
      Class<Object> class0 = Object.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
      
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses("a(", apiResponse0);
      components1.getHeaders();
      Components components2 = components1.headers((Map<String, Header>) null);
      Example example0 = new Example();
      Example example1 = example0.description("");
      Example example2 = example1.summary("E~%FI(B}NlOnFO");
      components2.addExamples("C", example2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-126);
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\\u0000\\u00001Y\\u0000\uFFFD\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
      
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses("Conflicting/ambiguous property name definitions (implicit name ", apiResponse0);
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<Object> schema0 = new Schema<Object>(specVersion0);
      Components components2 = components1.addSchemas("Conflicting/ambiguous property name definitions (implicit name ", schema0);
      apiResponse0.getLinks();
      Components components3 = components2.links((Map<String, Link>) null);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components4 = components3.requestBodies(hashMap0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultAttributes(contextAttributes0);
      ObjectReader objectReader0 = objectMapper2.readerFor(class0);
      FloatNode floatNode0 = new FloatNode((-723.4532F));
      JsonParser jsonParser0 = floatNode0.traverse((ObjectCodec) objectMapper0);
      Class<OpenAPIExtension> class1 = OpenAPIExtension.class;
      Iterator<OpenAPIExtension> iterator0 = objectReader0.readValues(jsonParser0, class1);
      defaultParameterExtension0.extractParameters(arrayList0, class0, linkedHashSet0, components4, consumes0, consumes0, false, jsonView0, iterator0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components1 = components0.addSecuritySchemes("", securityScheme0);
      Header header0 = new Header();
      Components components2 = components1.addHeaders("#/components/schemas/", header0);
      Callback callback0 = new Callback();
      Link link0 = new Link();
      link0.getExtensions();
      Callback callback1 = callback0.extensions((Map<String, Object>) null);
      PathItem pathItem0 = new PathItem();
      Callback callback2 = callback1.addPathItem("#/components/schemas/", pathItem0);
      Callback callback3 = callback2.addPathItem("", pathItem0);
      Components components3 = components2.pathItems(callback3);
      Callback callback4 = new Callback();
      components3.addCallbacks("T>I#HFunS)cdcRpNT+", callback4);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayList0);
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMaxInputLookahead((-1000));
      objectReader0.withFormatDetection(dataFormatReaders1);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("#/components/schemas/", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<String> class0 = String.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      Encoding encoding0 = new Encoding();
      encoding0.getHeaders();
      Components components1 = components0.headers((Map<String, Header>) null);
      Operation operation0 = new Operation();
      operation0.getCallbacks();
      Components components2 = components1.callbacks((Map<String, Callback>) null);
      Schema<String> schema0 = new Schema<String>();
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      ServerVariable serverVariable0 = new ServerVariable();
      serverVariable0.getEnum();
      floatNode0.findValuesAsText("+*", (List<String>) null);
      Schema<String> schema1 = schema0.examples((List<String>) null);
      Components components3 = components2.addSchemas("#/components/schemas/", schema1);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      components3.parameters(hashMap0);
      Consumes consumes0 = null;
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        jsonFactory0.createParser(byteArray0, 3552, (-4052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (3552) and/or 'len' (-4052) arguments for `byte[]` of length 9
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      // Undeclared exception!
      try { 
        collectionLikeType0.withContentValueHandler((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Vector<Annotation> vector0 = new Vector<Annotation>(29);
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = null;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      Version version0 = new Version(2864, 29, 29, "JSON", (String) null, "MNI1)f+UNp|");
      SimpleModule simpleModule0 = new SimpleModule(version0);
      ObjectMapper objectMapper3 = objectMapper2.registerModule(simpleModule0);
      ObjectReader objectReader0 = objectMapper3.readerWithView(class1);
      MockFile mockFile0 = new MockFile("JSON");
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      FloatNode floatNode0 = FloatNode.valueOf(2.14748365E9F);
      JsonPointer jsonPointer0 = JsonPointer.empty();
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.SCALARS;
      // Undeclared exception!
      try { 
        floatNode0.withObject(jsonPointer0, jsonNode_OverwriteMode0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Can only call `withObject()` with empty JSON Pointer on `ObjectNode`, not `com.fasterxml.jackson.databind.node.FloatNode`
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      defaultParameterExtension0.setOpenAPI31(false);
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class2 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      Class<Object> class3 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class3);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components1 = components0.securitySchemes(hashMap0);
      Header header0 = new Header();
      Components components2 = components1.addHeaders((String) null, header0);
      components0.getRequestBodies();
      Components components3 = components2.requestBodies((Map<String, RequestBody>) null);
      components0.getExtensions();
      components3.extensions((Map<String, Object>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      ObjectMapper objectMapper3 = objectMapper2.clearProblemHandlers();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      objectMapper3.configure(jsonGenerator_Feature0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)68;
      // Undeclared exception!
      try { 
        objectMapper3.createParser(byteArray0, (int) (byte)68, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (68) and/or 'len' (0) arguments for `byte[]` of length 7
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Vector<OpenAPIExtension> vector0 = new Vector<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(vector0);
      Class<Object> class0 = Object.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
  }

  // @Test(timeout = 4000)
  // public void test029()  throws Throwable  {
  //     DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
  //     ModelConverters.getInstance(true);
  //     Stack<String> stack0 = new Stack<String>();
  //     // Undeclared exception!
  //     try { 
  //       stack0.subList((-1), (-1));
  //       fail("Expecting exception: IndexOutOfBoundsException");
  //     
  //     } catch(IndexOutOfBoundsException e) {
  //        //
  //        // fromIndex = -1
  //        //
  //        verifyException("java.util.SubList", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Vector<String> vector0 = new Vector<String>();
      vector0.add(0, "VJPR+@>F");
      ModelResolver.NOT_NULL_ANNOTATIONS = (List<String>) vector0;
      Class<StreamWriteFeature> class0 = StreamWriteFeature.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<StreamWriteFeature> class1 = StreamWriteFeature.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<Annotation> vector1 = new Vector<Annotation>();
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      Components components1 = components0.addResponses("VJPR+@>F", apiResponse0);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components2 = components1.securitySchemes(hashMap0);
      HashMap<String, Header> hashMap1 = new HashMap<String, Header>();
      Components components3 = components2.headers(hashMap1);
      HashMap<String, PathItem> hashMap2 = new HashMap<String, PathItem>();
      Components components4 = components3.pathItems(hashMap2);
      components4.getCallbacks();
      components3.callbacks((Map<String, Callback>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory1);
      TypeReference<OpenAPIExtension> typeReference0 = (TypeReference<OpenAPIExtension>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper1.readValues((JsonParser) null, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<StreamWriteFeature> class0 = StreamWriteFeature.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      TreeSet<Type> treeSet0 = null;
      try {
        treeSet0 = new TreeSet<Type>((SortedSet<Type>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ModelConverters.getInstance(false);
      ObjectMapper objectMapper0 = Json31.mapper();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = null;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = null;
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        objectReader0.readValues(byteArray0, (int) 0, (int) 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (0) and/or 'len' (64) arguments for `byte[]` of length 4
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<StreamWriteFeature> class1 = StreamWriteFeature.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Stack<Annotation> stack0 = new Stack<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      Header header0 = new Header();
      Components components1 = components0.addHeaders("vcX4(6F3B'8l]", header0);
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem("#/components/schemas/", pathItem0);
      Components components2 = components1.addCallbacks("vcX4(6F3B'8l]", callback1);
      components0.getSecuritySchemes();
      Components components3 = components2.securitySchemes((Map<String, SecurityScheme>) null);
      Map<String, Callback> map0 = components1.getCallbacks();
      components3.callbacks(map0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader objectReader2 = objectReader1.withoutAttribute(callback0);
      objectReader2.withFormatDetection((DataFormatReaders) null);
      // Undeclared exception!
      try { 
        JsonNodeFeature.valueOf("iA;'n$plR,v?R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.databind.cfg.JsonNodeFeature.iA;'n$plR,v?R
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Stack<OpenAPIExtension> stack0 = new Stack<OpenAPIExtension>();
      // Undeclared exception!
      try { 
        stack0.pop();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      List<Annotation> list0 = null;
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = new Components();
      Encoding encoding0 = new Encoding();
      encoding0.getHeaders();
      Components components1 = components0.headers((Map<String, Header>) null);
      PathItem pathItem0 = new PathItem();
      Components components2 = components1.addPathItem((String) null, pathItem0);
      MediaType mediaType0 = new MediaType();
      mediaType0.getExamples();
      Components components3 = components2.examples((Map<String, Example>) null);
      components3.addExamples("javax.ws.rs.", (Example) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = null;
      try {
        simpleFilterProvider0 = new SimpleFilterProvider((Map<String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      resolvedRecursiveType0.withTypeHandler(jsonReadFeature0);
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      Link link0 = new Link();
      Components components1 = components0.addLinks("=", link0);
      Schema<POJOPropertyBuilder> schema0 = new Schema<POJOPropertyBuilder>();
      Components components2 = components1.addSchemas("=", schema0);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components3 = components2.callbacks(hashMap0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      OAuthFlows oAuthFlows0 = new OAuthFlows();
      SecurityScheme securityScheme1 = securityScheme0.flows(oAuthFlows0);
      SecurityScheme securityScheme2 = securityScheme1.name("");
      components3.addSecuritySchemes("#/components/schemas/", securityScheme2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader objectReader1 = objectReader0.withHandler((DeserializationProblemHandler) null);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      try { 
        objectReader1.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      Stack<OpenAPIExtension> stack0 = new Stack<OpenAPIExtension>();
      stack0.add((OpenAPIExtension) defaultParameterExtension0);
      stack0.add((OpenAPIExtension) defaultParameterExtension0);
      stack0.add((OpenAPIExtension) defaultParameterExtension0);
      stack0.clone();
      stack0.clear();
      // Undeclared exception!
      try { 
        stack0.pop();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      defaultParameterExtension0.setOpenAPI31(true);
      ModelConverters.getInstance(false);
      defaultParameterExtension0.setOpenAPI31(true);
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      ModelConverters.getInstance(true);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<POJOPropertyBuilder> class2 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      ObjectMapper objectMapper0 = Json31.mapper();
      Class<Object> class3 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class3);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      HashSet<Type> hashSet0 = new HashSet<Type>(1045, 1045);
      Components components0 = null;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      TypeReference<OpenAPIExtension> typeReference0 = (TypeReference<OpenAPIExtension>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readValues((JsonParser) null, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      defaultParameterExtension0.setOpenAPI31(true);
      LinkedList<OpenAPIExtension> linkedList0 = new LinkedList<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(linkedList0);
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      int int0 = (-128);
      Vector<Annotation> vector0 = null;
      try {
        vector0 = new Vector<Annotation>((-128), (-128));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -128
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ModelConverters.getInstance(false);
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      Vector<OpenAPIExtension> vector0 = new Vector<OpenAPIExtension>();
      vector0.add((OpenAPIExtension) defaultParameterExtension0);
      // Undeclared exception!
      try { 
        vector0.remove(3222);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3222
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<String> vector0 = new Vector<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) vector0, locale_FilteringMode0);
      ModelResolver.NOT_NULL_ANNOTATIONS = list0;
      defaultParameterExtension0.setOpenAPI31(false);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      components0.getLinks();
      Components components1 = components0.links((Map<String, Link>) null);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components2 = components1.requestBodies(hashMap0);
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<Object> schema0 = new Schema<Object>(specVersion0);
      schema0.getEnum();
      Schema<Object> schema1 = schema0.examples((List<Object>) null);
      Components components3 = components2.addSchemas("#/components/schemas/", schema1);
      Parameter parameter0 = new Parameter();
      components3.addParameters("Bz}7U$[*Ruf0]<c", parameter0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.USE_FAST_BIG_NUMBER_PARSER;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectReader objectReader2 = objectReader1.withoutFeatures(jsonParser_FeatureArray0);
      ObjectReader objectReader3 = objectReader2.without(jsonParser_Feature4);
      try { 
        objectReader3.readValues("J]SMmAM}AZVNw1%S/R@");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type java.lang.String with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = null;
      try {
        arrayNode0 = new ArrayNode(jsonNodeFactory0, (-2277));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2277
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      List<Annotation> list0 = null;
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Object with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ModelConverters.getInstance(false);
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Stack<String> stack0 = new Stack<String>();
      TreeSet<JsonReadFeature> treeSet0 = new TreeSet<JsonReadFeature>();
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_YAML_COMMENTS;
      // Undeclared exception!
      try { 
        stack0.replaceAll((UnaryOperator<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<JsonReadFeature> class1 = JsonReadFeature.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      components0.getSchemas();
      Components components1 = components0.schemas((Map<String, Schema>) null);
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters((String) null, parameter0);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components3 = components2.requestBodies(hashMap0);
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.options(operation0);
      PathItem pathItem2 = pathItem1.summary("#/components/schemas/");
      components3.addPathItem("v", pathItem2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      objectReader0.with(jsonFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ObjectMapper objectMapper0 = Json.mapper();
      boolean boolean0 = true;
      ModelConverters.getInstance(true);
      Class<JsonReadFeature> class0 = JsonReadFeature.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      Set<Type> set0 = null;
      Components components0 = new Components();
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components1 = components0.addSecuritySchemes(" n?", securityScheme0);
      Example example0 = new Example();
      Components components2 = components1.addExamples("IPV6", example0);
      components2.getPathItems();
      Components components3 = components2.pathItems((Map<String, PathItem>) null);
      Encoding encoding0 = new Encoding();
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      Encoding encoding1 = encoding0.headers(hashMap0);
      Map<String, Header> map0 = encoding1.getHeaders();
      components3.headers(map0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-107);
      try { 
        objectReader1.readValues(byteArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      defaultParameterExtension0.setOpenAPI31(true);
      OpenAPIExtensions.setExtensions((List<OpenAPIExtension>) null);
      ModelConverters.getInstance(false);
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Vector<Annotation> vector0 = new Vector<Annotation>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getActiveView();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components1 = components0.addSecuritySchemes("m", securityScheme0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponse apiResponse0 = new ApiResponse();
      ApiResponses apiResponses1 = apiResponses0.addApiResponse("#/components/schemas/", apiResponse0);
      ApiResponses apiResponses2 = apiResponses1.addApiResponse("#/components/schemas/", apiResponse0);
      ApiResponses apiResponses3 = apiResponses2.addApiResponse("m", apiResponse0);
      Components components2 = components1.responses(apiResponses3);
      components0.getSchemas();
      Components components3 = components2.schemas((Map<String, Schema>) null);
      components2.getCallbacks();
      components3.callbacks((Map<String, Callback>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.ESCAPE_NON_ASCII;
      ObjectReader objectReader2 = objectReader1.with((FormatFeature) jsonWriteFeature0);
      objectReader2.withView((Class<?>) null);
      DatatypeFeature[] datatypeFeatureArray0 = new DatatypeFeature[6];
      EnumFeature enumFeature0 = EnumFeature.WRITE_ENUMS_TO_LOWERCASE;
      datatypeFeatureArray0[0] = (DatatypeFeature) enumFeature0;
      // Undeclared exception!
      try { 
        EnumFeature.valueOf("cookie");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.databind.cfg.EnumFeature.cookie
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      ModelConverters.getInstance(false);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.setOpenAPI31(false);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      ModelConverters.getInstance(false);
      Json.mapper();
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Vector<OpenAPIExtension> vector0 = new Vector<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(vector0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class2 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Json.mapper();
      Class<Object> class3 = Object.class;
      Json.mapper();
      defaultParameterExtension0.shouldIgnoreClass(class3);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Vector<Annotation> vector1 = new Vector<Annotation>();
      FloatNode floatNode0 = FloatNode.valueOf(Float.NaN);
      List<String> list0 = floatNode0.findValuesAsText("");
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create(list0, (List<JavaType>) linkedList0);
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      JavaType javaType0 = dOMDeserializer_DocumentDeserializer0.getValueType();
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[4] = null;
      javaTypeArray0[5] = null;
      javaTypeArray0[6] = null;
      javaTypeArray0[7] = null;
      // Undeclared exception!
      try { 
        CollectionLikeType.construct(class0, typeBindings0, (JavaType) null, javaTypeArray0, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Stack<Annotation> stack0 = new Stack<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      Components components1 = components0.examples(hashMap0);
      HashMap<String, ApiResponse> hashMap1 = new HashMap<String, ApiResponse>();
      Components components2 = components1.responses(hashMap1);
      HashMap<String, Callback> hashMap2 = new HashMap<String, Callback>();
      Components components3 = components2.callbacks(hashMap2);
      components0.getHeaders();
      components3.headers((Map<String, Header>) null);
      Consumes consumes0 = null;
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((DatatypeFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DatatypeFeatures", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      List<Annotation> list0 = null;
      Stack<GenericMetadataSupport.TypeVarBoundedType> stack0 = new Stack<GenericMetadataSupport.TypeVarBoundedType>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>(stack0);
      Components components0 = new Components();
      String string0 = "] !Xx{Tkzo";
      RequestBody requestBody0 = new RequestBody();
      Content content0 = new Content();
      RequestBody requestBody1 = requestBody0.content(content0);
      Components components1 = components0.addRequestBodies("] !Xx{Tkzo", requestBody1);
      Callback callback0 = new Callback();
      Example example0 = new Example();
      example0.getExtensions();
      Callback callback1 = callback0.extensions((Map<String, Object>) null);
      Callback callback2 = callback1.$ref("] !Xx{Tkzo");
      components1.pathItems(callback2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(propertyAccessor0, jsonAutoDetect_Visibility0);
      JsonAutoDetect.Value jsonAutoDetect_Value1 = JsonAutoDetect.Value.merge(jsonAutoDetect_Value0, jsonAutoDetect_Value0);
      objectMapper0.setDefaultVisibility(jsonAutoDetect_Value1);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "#/components/schemas/", false, 'A', 329);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      defaultParameterExtension0.setOpenAPI31(false);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      ModelConverters.getInstance(false);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      String string0 = "";
      // Undeclared exception!
      try { 
        objectNode0.withArray("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Can only call `withArray()` with empty JSON Pointer on `ArrayNode`, not `com.fasterxml.jackson.databind.node.ObjectNode`
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>(45);
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      components0.getResponses();
      Components components1 = components0.responses((Map<String, ApiResponse>) null);
      XML xML0 = new XML();
      xML0.getExtensions();
      Components components2 = components1.extensions((Map<String, Object>) null);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components3 = components2.parameters(hashMap0);
      components1.getSecuritySchemes();
      components3.securitySchemes((Map<String, SecurityScheme>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues((InjectableValues) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      ObjectReader objectReader0 = objectMapper2.readerForListOf(class0);
      // Undeclared exception!
      try { 
        objectReader0.readValues((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"src\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      List<Annotation> list0 = null;
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks("", callback0);
      ApiResponse apiResponse0 = new ApiResponse();
      apiResponse0.getHeaders();
      Components components2 = components1.headers((Map<String, Header>) null);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components3 = components2.securitySchemes(hashMap0);
      Parameter parameter0 = new Parameter();
      RequestBody requestBody0 = new RequestBody();
      requestBody0.getExtensions();
      Parameter parameter1 = parameter0.extensions((Map<String, Object>) null);
      components3.addParameters("#/components/schemas/", parameter1);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Vector<Annotation> vector0 = new Vector<Annotation>();
      Class<Byte> class0 = Byte.TYPE;
      WildcardTypeImpl.withLowerBound(class0);
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      apiResponse0.getLinks();
      Components components1 = components0.links((Map<String, Link>) null);
      RequestBody requestBody0 = new RequestBody();
      components1.addRequestBodies((String) null, requestBody0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReader1.withFormatDetection(objectReaderArray0);
      MockFile mockFile0 = new MockFile("", "#/components/schemas/");
      File file0 = MockFile.createTempFile("#/components/schemas/", "JSON", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>(658, 2193.4F);
      Components components0 = new Components();
      MediaType mediaType0 = new MediaType();
      mediaType0.getExtensions();
      Components components1 = components0.extensions((Map<String, Object>) null);
      ApiResponse apiResponse0 = new ApiResponse();
      Components components2 = components1.addResponses("V/I;", apiResponse0);
      Callback callback0 = new Callback();
      Callback callback1 = callback0.extensions((Map<String, Object>) null);
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<Object> schema0 = new Schema<Object>(specVersion0);
      schema0.getJsonSchema();
      Callback callback2 = callback1.extensions((Map<String, Object>) null);
      Callback callback3 = callback2.extensions((Map<String, Object>) null);
      Components components3 = components2.pathItems(callback3);
      Link link0 = new Link();
      Link link1 = link0.extensions((Map<String, Object>) null);
      Link link2 = link1.requestBody(mediaType0);
      components3.addLinks("#/components/schemas/", link2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class1 = Object.class;
      Class<Object> class2 = Object.class;
      objectMapper0.addMixIn(class1, class2);
      int int0 = 0;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "form", true, ')', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 4)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Json.mapper();
      defaultParameterExtension0.setOpenAPI31(false);
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Stack<Annotation> stack0 = new Stack<Annotation>();
      Vetoed.Literal vetoed_Literal0 = new Vetoed.Literal();
      stack0.add((Annotation) vetoed_Literal0);
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(class0);
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      defaultParameterExtension0.extractParameters(stack0, class0, linkedHashSet0, (Components) null, consumes0, consumes0, false, jsonView0, (Iterator<OpenAPIExtension>) null);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ConversationScoped.Literal conversationScoped_Literal0 = new ConversationScoped.Literal();
      Class<? extends Annotation> class1 = conversationScoped_Literal0.annotationType();
      linkedList0.offerFirst(conversationScoped_Literal0);
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView1 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      defaultParameterExtension0.extractParameters(linkedList0, class0, linkedHashSet0, (Components) null, consumes1, consumes1, false, jsonView1, (Iterator<OpenAPIExtension>) null);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<PathItem.HttpMethod> class2 = PathItem.HttpMethod.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Consumes consumes2 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView2 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      defaultParameterExtension0.extractParameters(vector0, class1, hashSet0, (Components) null, consumes2, consumes2, false, jsonView2, (Iterator<OpenAPIExtension>) null);
      Class<POJOPropertyBuilder> class3 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class3);
      Components components0 = new Components();
      Components components1 = components0.pathItems((Map<String, PathItem>) null);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components2 = components1.callbacks(hashMap0);
      components0.getSchemas();
      Components components3 = components2.schemas((Map<String, Schema>) null);
      Header header0 = new Header();
      Example example0 = new Example();
      Header header1 = header0.addExample("", example0);
      Components components4 = components3.addHeaders("#/components/schemas/", header1);
      Consumes consumes3 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes3).value();
      Consumes consumes4 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(consumes4).value();
      JsonView jsonView3 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      doReturn((Class[]) null).when(jsonView3).value();
      // Undeclared exception!
      try { 
        defaultParameterExtension0.extractParameters(stack0, class2, hashSet0, components4, consumes3, consumes4, true, jsonView3, (Iterator<OpenAPIExtension>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.core.jackson.ModelResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ObjectMapper objectMapper0 = Json31.mapper();
      Stack<OpenAPIExtension> stack0 = new Stack<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(stack0);
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Type type0 = null;
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      HashMap<String, PathItem> hashMap0 = new HashMap<String, PathItem>();
      Components components1 = components0.pathItems(hashMap0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes("#/components/schemas/", securityScheme0);
      HashMap<String, RequestBody> hashMap1 = new HashMap<String, RequestBody>();
      Components components3 = components2.requestBodies(hashMap1);
      components3.addResponses("#/components/schemas/", (ApiResponse) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      objectMapper0.reader(jsonNodeFactory0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = true;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Stack<OpenAPIExtension> stack0 = new Stack<OpenAPIExtension>();
      stack0.remove((Object) defaultParameterExtension0);
      OpenAPIExtensions.setExtensions(stack0);
      Class<Object> class0 = Object.class;
      ModelConverters.getInstance(false);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      Parameter parameter0 = new Parameter();
      Components components1 = components0.addParameters("$^tB?tcc0`YC(A", parameter0);
      ApiResponse apiResponse0 = new ApiResponse();
      Components components2 = components1.addResponses((String) null, apiResponse0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Components components3 = components2.extensions(hashMap0);
      Callback callback0 = new Callback();
      Components components4 = components3.addCallbacks("#/components/schemas/", callback0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultParameterExtension0.extractParameters(vector0, class0, treeSet0, components4, consumes0, consumes0, true, jsonView0, (Iterator<OpenAPIExtension>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      ApiResponse apiResponse0 = new ApiResponse();
      apiResponse0.getLinks();
      Components components1 = components0.links((Map<String, Link>) null);
      Components components2 = components1.addCallbacks("#/components/schemas/", (Callback) null);
      components2.pathItems((Map<String, PathItem>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      TypeReference<OpenAPIExtension> typeReference0 = (TypeReference<OpenAPIExtension>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jsonParserSequence0.readValuesAs(typeReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      Components components0 = new Components();
      Parameter parameter0 = new Parameter();
      Components components1 = components0.addParameters("io.swagger.v3.jaxrs2.DefaultParameterExtension", parameter0);
      Example example0 = new Example();
      Example example1 = example0.externalValue("path");
      Components components2 = components1.addExamples("#/components/schemas/", example1);
      Header header0 = new Header();
      Boolean boolean0 = Boolean.TRUE;
      Header header1 = header0.deprecated(boolean0);
      Object object0 = new Object();
      Header header2 = header1.example(object0);
      Components components3 = components2.addHeaders("path", header2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultParameterExtension0.extractParameters(vector0, class0, (Set<Type>) null, components3, consumes0, consumes0, false, jsonView0, (Iterator<OpenAPIExtension>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.v3.jaxrs2.ext.AbstractOpenAPIExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Json31.mapper();
      Class<PathItem.HttpMethod> class0 = PathItem.HttpMethod.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
  }

  // @Test(timeout = 4000)
  // public void test067()  throws Throwable  {
  //     DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
  //     Json31.mapper();
  //     Class<Object> class0 = Object.class;
  //     Vector<OpenAPIExtension> vector0 = new Vector<OpenAPIExtension>();
  //     // Undeclared exception!
  //     try { 
  //       vector0.subList((-1), 5252);
  //       fail("Expecting exception: IndexOutOfBoundsException");
  //     
  //     } catch(IndexOutOfBoundsException e) {
  //        //
  //        // fromIndex = -1
  //        //
  //        verifyException("java.util.SubList", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      Schema<Object> schema0 = new Schema<Object>();
      Components components1 = components0.addSchemas("u4.Z14|$Mn<;a", schema0);
      components1.getParameters();
      Components components2 = components1.parameters((Map<String, Parameter>) null);
      ApiResponse apiResponse0 = new ApiResponse();
      Link link0 = new Link();
      ApiResponse apiResponse1 = apiResponse0.link("", link0);
      Components components3 = components2.addResponses("KO9!RS7lY]wkh", apiResponse1);
      Encoding encoding0 = new Encoding();
      Encoding encoding1 = encoding0.contentType(">XYfN?Yh3/");
      encoding1.getHeaders();
      components3.headers((Map<String, Header>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = ']';
      JsonParser jsonParser0 = objectMapper0.createParser(charArray0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      TypeReference<OpenAPIExtension> typeReference0 = (TypeReference<OpenAPIExtension>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        jsonParserSequence0.readValuesAs(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      defaultParameterExtension0.setOpenAPI31(true);
      ArrayList<OpenAPIExtension> arrayList0 = new ArrayList<OpenAPIExtension>();
      defaultParameterExtension0.setOpenAPI31(true);
      arrayList0.add((OpenAPIExtension) defaultParameterExtension0);
      OpenAPIExtensions.setExtensions(arrayList0);
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<Object> class2 = Object.class;
      ObjectMapper objectMapper0 = Json.mapper();
      defaultParameterExtension0.shouldIgnoreClass(class2);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<POJOPropertyBuilder> class3 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class3);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class4 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class4);
      ArrayDeque<BeforeDestroyed.Literal> arrayDeque0 = new ArrayDeque<BeforeDestroyed.Literal>();
      ArrayList<Annotation> arrayList1 = new ArrayList<Annotation>(arrayDeque0);
      Class<POJOPropertyBuilder> class5 = POJOPropertyBuilder.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      TypeBindings typeBindings0 = collectionLikeType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      javaTypeArray0[3] = (JavaType) collectionLikeType0;
      CollectionLikeType.construct((Class<?>) class5, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, javaTypeArray0[1]);
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      components0.getCallbacks();
      Components components1 = components0.callbacks((Map<String, Callback>) null);
      SpecVersion specVersion0 = SpecVersion.V30;
      Schema<Object> schema0 = new Schema<Object>(specVersion0);
      Components components2 = components1.addSchemas("#/components/schemas/", schema0);
      Parameter parameter0 = new Parameter();
      Example example0 = new Example();
      Parameter parameter1 = parameter0.addExample("bind-type", example0);
      Components components3 = components2.addParameters("bind-type", parameter1);
      components3.addExamples("form", example0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      jsonFactory1.copy();
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream((InputStream) null, (-1236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      JavaType javaType0 = null;
      TypeBindings typeBindings0 = null;
      // Undeclared exception!
      try { 
        ArrayType.construct((JavaType) null, (TypeBindings) null, (Object) arrayList0, (Object) defaultParameterExtension0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Stack<OpenAPIExtension> stack0 = new Stack<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(stack0);
      Class<IOCase> class0 = IOCase.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      Components components1 = components0.addSchemas("", (Schema) null);
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters("PnQnA<6b]Wv", parameter0);
      Components components3 = components2.addSecuritySchemes("#/components/schemas/", (SecurityScheme) null);
      Map<String, Schema> map0 = (Map<String, Schema>)components3.getSchemas();
      components3.schemas(map0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      // Undeclared exception!
      try { 
        objectReader0.at("#/components/schemas/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"#/components/schemas/\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<IOCase> class0 = IOCase.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
      
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      Header header0 = new Header();
      Components components2 = components1.addHeaders("#/components/schemas/", header0);
      Encoding encoding0 = new Encoding();
      encoding0.getHeaders();
      Components components3 = components2.headers((Map<String, Header>) null);
      HashMap<String, Callback> hashMap1 = new HashMap<String, Callback>();
      Components components4 = components3.callbacks(hashMap1);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      defaultParameterExtension0.extractParameters(arrayList0, class0, linkedHashSet0, components4, consumes0, consumes0, false, jsonView0, (Iterator<OpenAPIExtension>) null);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Vector<Annotation> vector0 = new Vector<Annotation>();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<RequestBody> class1 = RequestBody.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      resolvedRecursiveType0.getSuperClass();
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      Class<POJOPropertyBuilder> class2 = POJOPropertyBuilder.class;
      referenceType0.refine(class2, typeBindings0, (JavaType) null, javaTypeArray0);
      TreeSet<CollectionType> treeSet0 = new TreeSet<CollectionType>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>(treeSet0);
      Components components0 = new Components();
      Encoding encoding0 = new Encoding();
      encoding0.getExtensions();
      Components components1 = components0.extensions((Map<String, Object>) null);
      SpecVersion specVersion0 = SpecVersion.V31;
      Schema<Object> schema0 = new Schema<Object>(specVersion0);
      Components components2 = components1.addSchemas("#/components/schemas/", schema0);
      Map<String, Schema> map0 = (Map<String, Schema>)components1.getSchemas();
      Components components3 = components2.schemas(map0);
      Header header0 = new Header();
      Header header1 = header0.$ref("#/components/schemas/");
      Boolean boolean0 = new Boolean("#/components/schemas/");
      Header header2 = header1.required(boolean0);
      components3.addHeaders("#/components/schemas/", header2);
      Consumes consumes0 = null;
      boolean boolean1 = true;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StringReader stringReader0 = new StringReader("#/components/schemas/");
      JsonParser jsonParser0 = objectMapper0.createParser((java.io.Reader) stringReader0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      TypeReference<OpenAPIExtension> typeReference0 = (TypeReference<OpenAPIExtension>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        jsonParserSequence0.readValuesAs(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Vector<OpenAPIExtension> vector0 = new Vector<OpenAPIExtension>();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) vector0;
      objectArray0[2] = (Object) defaultParameterExtension0;
      objectArray0[3] = (Object) vector0;
      objectArray0[4] = (Object) vector0;
      objectArray0[5] = (Object) defaultParameterExtension0;
      objectArray0[6] = (Object) defaultParameterExtension0;
      vector0.toArray(objectArray0);
      OpenAPIExtensions.setExtensions(vector0);
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<Type>(52, (-1227.6627F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1227.6627
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      ModelConverters.getInstance(false);
      OpenAPIExtensions.setExtensions((List<OpenAPIExtension>) null);
      Class<JsonFormat.Shape> class1 = JsonFormat.Shape.class;
      Json.mapper();
      defaultParameterExtension0.shouldIgnoreClass(class1);
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      List<String> list0 = floatNode0.findValuesAsText("Still have %d undecoded bytes, should not call 'feedInput'");
      ModelResolver.NOT_NULL_ANNOTATIONS = list0;
      Class<JsonFormat.Shape> class2 = JsonFormat.Shape.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      defaultParameterExtension0.setOpenAPI31(true);
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      Vector<OpenAPIExtension> vector0 = new Vector<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(vector0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Stack<Annotation> stack0 = new Stack<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = null;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      Initialized.Literal initialized_Literal0 = Initialized.Literal.REQUEST;
      stack0.add((Annotation) initialized_Literal0);
      Iterator<OpenAPIExtension> iterator0 = null;
      // Undeclared exception!
      try { 
        defaultParameterExtension0.extractParameters(stack0, class0, treeSet0, (Components) null, consumes0, consumes0, false, jsonView0, (Iterator<OpenAPIExtension>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      ModelConverters.getInstance(true);
      Class<Object> class1 = Object.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      LinkedList<OpenAPIExtension> linkedList0 = new LinkedList<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(linkedList0);
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.setOpenAPI31(false);
      Class<Object> class1 = Object.class;
      boolean boolean0 = true;
      OpenAPIExtensions.setExtensions(linkedList0);
      ModelConverters.getInstance(true);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class2 = Object.class;
      defaultParameterExtension0.setOpenAPI31(false);
      defaultParameterExtension0.shouldIgnoreClass(class2);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<POJOPropertyBuilder> class3 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class3);
      Class<POJOPropertyBuilder> class4 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class4);
      Class<JsonFormat.Shape> class5 = JsonFormat.Shape.class;
      defaultParameterExtension0.shouldIgnoreClass(class5);
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      Example example0 = new Example();
      Components components1 = components0.addExamples("Fg", example0);
      Components components2 = components1.examples((Map<String, Example>) null);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components3 = components2.requestBodies(hashMap0);
      Header header0 = new Header();
      Boolean boolean1 = Boolean.TRUE;
      Header header1 = header0.deprecated(boolean1);
      Header header2 = header1.required(boolean1);
      components3.addHeaders("Fg", header2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      FloatNode floatNode0 = FloatNode.valueOf(1841.2932F);
      JsonPointer jsonPointer0 = JsonPointer.empty();
      Comparator<JsonNode> comparator0 = (Comparator<JsonNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(com.fasterxml.jackson.databind.JsonNode.class) , any(com.fasterxml.jackson.databind.JsonNode.class));
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.USE_FAST_DOUBLE_PARSER;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.USE_FAST_DOUBLE_PARSER;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      ObjectMapper objectMapper3 = objectMapper2.setDateFormat(dateFormat0);
      JsonNode jsonNode0 = objectMapper3.valueToTree((Object) jsonParser_Feature7);
      floatNode0.equals(comparator0, jsonNode0);
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.ALL;
      // Undeclared exception!
      try { 
        floatNode0.withArray(jsonPointer0, jsonNode_OverwriteMode0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Can only call `withArray()` with empty JSON Pointer on `ArrayNode`, not `com.fasterxml.jackson.databind.node.FloatNode`
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Json.mapper();
      ModelConverters.getInstance(true);
      Class<Object> class0 = Object.class;
      Json.mapper();
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Json.mapper();
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<POJOPropertyBuilder> class2 = POJOPropertyBuilder.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      defaultParameterExtension0.setOpenAPI31(true);
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.setOpenAPI31(false);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<JsonFormat.Shape> class1 = JsonFormat.Shape.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<Object> class2 = Object.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class2);
      assertFalse(boolean0);
      
      Stack<Annotation> stack0 = new Stack<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      components0.getRequestBodies();
      Components components1 = components0.requestBodies((Map<String, RequestBody>) null);
      MediaType mediaType0 = new MediaType();
      Operation operation0 = new Operation();
      operation0.getExtensions();
      MediaType mediaType1 = mediaType0.extensions((Map<String, Object>) null);
      mediaType1.getExamples();
      Components components2 = components1.examples((Map<String, Example>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(consumes0).value();
      defaultParameterExtension0.extractParameters(stack0, class1, linkedHashSet0, components2, consumes0, consumes0, true, (JsonView) null, (Iterator<OpenAPIExtension>) null);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<POJOPropertyBuilder> class2 = POJOPropertyBuilder.class;
      Operation operation0 = new Operation();
      Operation operation1 = operation0.callbacks((Map<String, Callback>) null);
      RequestBody requestBody0 = new RequestBody();
      Operation operation2 = operation1.requestBody(requestBody0);
      Operation operation3 = operation2.operationId("");
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponse apiResponse0 = new ApiResponse();
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      ApiResponses apiResponses2 = apiResponses1._default(apiResponse0);
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem("", pathItem0);
      Callback callback2 = callback1.$ref("g.XZ#;P");
      callback2.getExtensions();
      ApiResponses apiResponses3 = apiResponses2.extensions((Map<String, Object>) null);
      Operation operation4 = operation3.responses(apiResponses3);
      operation4.getTags();
      ModelResolver.NOT_NULL_ANNOTATIONS = null;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      TreeSet<Alternative.Literal> treeSet0 = new TreeSet<Alternative.Literal>();
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>(treeSet0);
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      Class<JsonFormat.Shape> class1 = JsonFormat.Shape.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      Class<POJOPropertyBuilder> class2 = POJOPropertyBuilder.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class2, (List<JavaType>) vector0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionType0, javaTypeArray0, (JavaType) simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(collectionType0);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(collectionType0);
      ReferenceType referenceType3 = referenceType2.withStaticTyping();
      ReferenceType referenceType4 = referenceType3.withContentValueHandler(simpleType0);
      JavaType javaType0 = referenceType4.getReferencedType();
      javaTypeArray0[0] = javaType0;
      Object object0 = new Object();
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, object0, (Object) defaultParameterExtension0);
      ArrayType arrayType1 = arrayType0.withValueHandler(referenceType2);
      javaTypeArray0[1] = (JavaType) arrayType1;
      int int0 = 78;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(78);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentValueHandler(referenceType2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.setOpenAPI31(false);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      ModelResolver.NOT_NULL_ANNOTATIONS = null;
      Class<Object> class2 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      Vector<OpenAPIExtension> vector0 = new Vector<OpenAPIExtension>();
      vector0.iterator();
      OpenAPIExtensions.setExtensions(vector0);
      ArrayList<OpenAPIExtension> arrayList0 = new ArrayList<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(arrayList0);
      Json.mapper();
      Class<POJOPropertyBuilder> class3 = POJOPropertyBuilder.class;
      ModelConverters.getInstance(false);
      defaultParameterExtension0.shouldIgnoreClass(class3);
      defaultParameterExtension0.shouldIgnoreClass(class2);
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      boolean boolean0 = true;
      LinkedList<OpenAPIExtension> linkedList0 = new LinkedList<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(linkedList0);
      defaultParameterExtension0.setOpenAPI31(true);
      defaultParameterExtension0.setOpenAPI31(true);
      Vector<String> vector0 = new Vector<String>();
      ModelResolver.NOT_NULL_ANNOTATIONS = (List<String>) vector0;
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Stack<Annotation> stack0 = new Stack<Annotation>();
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = null;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      Vector<Annotation> vector0 = new Vector<Annotation>();
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = new Components();
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components1 = components0.parameters(hashMap0);
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters("#/components/schemas/", parameter0);
      components2.getSchemas();
      Components components3 = components1.schemas((Map<String, Schema>) null);
      RequestBody requestBody0 = new RequestBody();
      Boolean boolean0 = Boolean.valueOf("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver");
      RequestBody requestBody1 = requestBody0.required(boolean0);
      Components components4 = components3.addRequestBodies("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", requestBody1);
      Header header0 = new Header();
      Content content0 = new Content();
      Header header1 = header0.content(content0);
      Header.StyleEnum header_StyleEnum0 = Header.StyleEnum.SIMPLE;
      Header header2 = header1.style(header_StyleEnum0);
      components4.addHeaders("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", header2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = objectMapper0.copy();
      Locale locale0 = Locale.FRANCE;
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      Object object0 = new Object();
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(object0);
      ObjectReader objectReader0 = objectMapper2.reader(contextAttributes1);
      MockFile mockFile0 = new MockFile((String) null, "Fyk_K.KNU}(Ut");
      MockFile mockFile1 = new MockFile(mockFile0, "#/components/schemas/");
      try { 
        objectReader0.readValues((File) mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<ChronoField> class1 = ChronoField.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<POJOPropertyBuilder> class2 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      Class<Object> class3 = Object.class;
      Stack<OpenAPIExtension> stack0 = new Stack<OpenAPIExtension>();
      OpenAPIExtensions.setExtensions(stack0);
      Method method0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0);
      // Undeclared exception!
      try { 
        objectReader2.readValues((DataInput) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"content\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Type type0 = null;
      LinkedHashSet<Type> linkedHashSet0 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components2 = components1.addSecuritySchemes("#/components/schemas/", securityScheme0);
      components0.getParameters();
      Components components3 = components2.parameters((Map<String, Parameter>) null);
      Parameter parameter0 = new Parameter();
      Header header0 = new Header();
      header0.getExamples();
      Parameter parameter1 = parameter0.examples((Map<String, Example>) null);
      Parameter parameter2 = parameter1.in(", \"%/");
      components3.addParameters("Nn)*Nn%0)*6&@oD{V", parameter2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = true;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        objectMapper0.createParser(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.setOpenAPI31(true);
      ModelConverters.getInstance(false);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<ChronoField> class2 = ChronoField.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      LinkedList<OpenAPIExtension> linkedList0 = new LinkedList<OpenAPIExtension>();
      linkedList0.push(defaultParameterExtension0);
      OpenAPIExtensions.setExtensions(linkedList0);
      defaultParameterExtension0.shouldIgnoreClass(class2);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<POJOPropertyBuilder> class3 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class3);
      Class<POJOPropertyBuilder> class4 = POJOPropertyBuilder.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      Operation operation0 = new Operation();
      Operation operation1 = operation0.addServersItem((Server) null);
      Parameter parameter0 = new Parameter();
      Operation operation2 = operation1.addParametersItem(parameter0);
      Operation operation3 = operation2.tags((List<String>) null);
      Operation operation4 = operation3.description("io.swagger.v3.jaxrs2.DefaultParameterExtension");
      operation4.getTags();
      ModelResolver.NOT_NULL_ANNOTATIONS = null;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      LinkedHashSet<Typed.Literal> linkedHashSet0 = new LinkedHashSet<Typed.Literal>();
      Vector<Annotation> vector0 = new Vector<Annotation>(linkedHashSet0);
      LinkedHashSet<Type> linkedHashSet1 = new LinkedHashSet<Type>();
      Components components0 = new Components();
      Callback callback0 = new Callback();
      Components components1 = components0.addCallbacks("io.swagger.v3.jaxrs2.DefaultParameterExtension", callback0);
      ApiResponse apiResponse0 = new ApiResponse();
      Components components2 = components1.addResponses("io.swagger.v3.jaxrs2.DefaultParameterExtension", apiResponse0);
      Encoding encoding0 = new Encoding();
      encoding0.getHeaders();
      Components components3 = components2.headers((Map<String, Header>) null);
      components3.pathItems(callback0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<Object> class2 = Object.class;
      ObjectReader objectReader1 = objectReader0.withView(class2);
      ObjectReader objectReader2 = objectReader1.withAttributes((Map<?, ?>) null);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS;
      ObjectReader objectReader3 = objectReader2.with((FormatFeature) jsonReadFeature0);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        objectReader3.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("{6U>>A4l;0K,_YuT");
      arrayList0.add("path");
      ModelResolver.NOT_NULL_ANNOTATIONS = (List<String>) arrayList0;
      Class<Object> class0 = Object.class;
      ModelConverters.getInstance(true);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<Object> class2 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      Class<POJOPropertyBuilder> class3 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class3);
      Class<Object> class4 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class4);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      PriorityQueue<GenericMetadataSupport.WildCardBoundedType> priorityQueue0 = new PriorityQueue<GenericMetadataSupport.WildCardBoundedType>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>(priorityQueue0);
      Components components0 = new Components();
      RequestBody requestBody0 = new RequestBody();
      Components components1 = components0.addRequestBodies("path", requestBody0);
      Header header0 = new Header();
      Components components2 = components1.addHeaders("GrZ*4g+;+l?Oi#5Ib", header0);
      SecurityScheme securityScheme0 = new SecurityScheme();
      SecurityScheme securityScheme1 = securityScheme0.bearerFormat("#/components/schemas/");
      Components components3 = components2.addSecuritySchemes("", securityScheme1);
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      components3.parameters(hashMap0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectReader objectReader1 = objectReader0.withFeatures(jsonParser_FeatureArray0);
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      try { 
        objectReader1.readValues(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Operation operation0 = new Operation();
      Operation operation1 = operation0.operationId("]-&>");
      Boolean boolean0 = Boolean.valueOf(false);
      Operation operation2 = operation1.deprecated(boolean0);
      Callback callback0 = new Callback();
      Callback callback1 = callback0.extensions((Map<String, Object>) null);
      Operation operation3 = operation2.addCallback("P[", callback1);
      Operation operation4 = operation3.callbacks((Map<String, Callback>) null);
      operation4.getTags();
      ModelResolver.NOT_NULL_ANNOTATIONS = null;
      Class<RequestBody> class0 = RequestBody.class;
      boolean boolean1 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      List<Annotation> list0 = null;
      AsDeductionTypeDeserializer asDeductionTypeDeserializer0 = null;
      try {
        asDeductionTypeDeserializer0 = new AsDeductionTypeDeserializer((AsDeductionTypeDeserializer) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Json.mapper();
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      Json.mapper();
      Json31.mapper();
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Vector<Annotation> vector0 = new Vector<Annotation>(2048, (-1));
      Class<Object> class0 = Object.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.findTypeMapping((DeserializationConfig) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper0 = Json.mapper();
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<StandardCopyOption> class2 = StandardCopyOption.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<Object> class3 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class3);
      List<Annotation> list0 = null;
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = null;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      try { 
        MockURL.URL("l \"", "l \"", "l \"");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: l \"
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      List<Annotation> list0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      HashSet<Nonbinding.Literal> hashSet0 = new HashSet<Nonbinding.Literal>();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>(hashSet0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      typeFactory0.constructRawMapLikeType(class0);
      HashSet<Type> hashSet1 = new HashSet<Type>();
      Components components0 = new Components();
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components1 = components0.addSecuritySchemes("Failed to decode VALUE_STRING as base64 (", securityScheme0);
      Parameter parameter0 = new Parameter();
      Components components2 = components1.addParameters("path", parameter0);
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components3 = components2.callbacks(hashMap0);
      components3.schemas((Map<String, Schema>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForListOf(class0);
      objectReader0.withRootName("#/components/schemas/");
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      // Undeclared exception!
      try { 
        JsonReadFeature.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.core.json.JsonReadFeature.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ModelConverters.getInstance(true);
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<JsonParser.Feature> class1 = JsonParser.Feature.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      List<Annotation> list0 = null;
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = new Components();
      MediaType mediaType0 = new MediaType();
      mediaType0.getExtensions();
      Components components1 = components0.extensions((Map<String, Object>) null);
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      Components components2 = components1.securitySchemes(hashMap0);
      ApiResponse apiResponse0 = new ApiResponse();
      Header header0 = new Header();
      ApiResponse apiResponse1 = apiResponse0.addHeaderObject("", header0);
      Components components3 = components2.addResponses("'SeIp4M_", apiResponse1);
      components3.addHeaders("'SeIp4M_", header0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      PropertyName propertyName0 = PropertyName.construct("#/components/schemas/");
      ObjectReader objectReader1 = objectReader0.withRootName(propertyName0);
      StreamReadFeature streamReadFeature0 = StreamReadFeature.STRICT_DUPLICATE_DETECTION;
      ObjectReader objectReader2 = objectReader1.with(streamReadFeature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      objectReader2.without(jsonParser_Feature0);
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ModelResolver.NOT_NULL_ANNOTATIONS = null;
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      ArrayList<Annotation> arrayList0 = new ArrayList<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Components components1 = components0.callbacks(hashMap0);
      Header header0 = new Header();
      header0.getExamples();
      Components components2 = components1.examples((Map<String, Example>) null);
      components2.getParameters();
      Components components3 = components2.parameters((Map<String, Parameter>) null);
      OAuthFlow oAuthFlow0 = new OAuthFlow();
      header0.getExtensions();
      OAuthFlow oAuthFlow1 = oAuthFlow0.extensions((Map<String, Object>) null);
      oAuthFlow1.getExtensions();
      components3.extensions((Map<String, Object>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      Consumes consumes1 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      boolean boolean0 = false;
      ModelConverters.getInstance(false);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.setOpenAPI31(false);
      Class<JsonParser.Feature> class1 = JsonParser.Feature.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = new Components();
      Callback callback0 = new Callback();
      Callback callback1 = callback0.$ref("javax.ws.rs.");
      ApiResponse apiResponse0 = new ApiResponse();
      apiResponse0.getExtensions();
      Callback callback2 = callback1.extensions((Map<String, Object>) null);
      Components components1 = components0.addCallbacks("cookie", callback2);
      components1.getSecuritySchemes();
      Components components2 = components1.securitySchemes((Map<String, SecurityScheme>) null);
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.name("cookie");
      Components components3 = components2.addParameters("javax.ws.rs.", parameter1);
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      components3.requestBodies(hashMap0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      // Undeclared exception!
      try { 
        objectMapper1.enable((JsonGenerator.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("9I+y");
      Stack<POJOPropertyBuilder> stack0 = new Stack<POJOPropertyBuilder>();
      linkedList0.containsAll(stack0);
      ModelResolver.NOT_NULL_ANNOTATIONS = (List<String>) linkedList0;
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<JsonParser.Feature> class1 = JsonParser.Feature.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      defaultParameterExtension0.setOpenAPI31(false);
      ObjectMapper objectMapper0 = Json.mapper();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = null;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      objectMapper0.reader(deserializationFeature0);
      String string0 = "header";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("header", "header", false, '.', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 6)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      boolean boolean0 = true;
      ModelConverters.getInstance(true);
      Operation operation0 = new Operation();
      Operation operation1 = operation0.summary("eu$D 4^@ATjsv4<JX5");
      Operation operation2 = operation1.addTagsItem("eu$D 4^@ATjsv4<JX5");
      Operation operation3 = operation2.description("eu$D 4^@ATjsv4<JX5");
      operation2.getCallbacks();
      Operation operation4 = operation1.callbacks((Map<String, Callback>) null);
      List<String> list0 = operation4.getTags();
      Operation operation5 = operation3.tags(list0);
      operation5.deprecated((Boolean) null);
      List<String> list1 = operation5.getTags();
      ModelResolver.NOT_NULL_ANNOTATIONS = list1;
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      Class<Long> class1 = Long.TYPE;
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      operation4.getCallbacks();
      Components components1 = components0.callbacks((Map<String, Callback>) null);
      ApiResponse apiResponse0 = new ApiResponse();
      Components components2 = components1.addResponses("4E+vK'YRRB4N-([C", apiResponse0);
      Header header0 = new Header();
      Header header1 = header0.$ref("header");
      Components components3 = components2.addHeaders("Failed to instantiate class ", header1);
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>();
      components3.links(hashMap0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setMixInResolver((ClassIntrospector.MixInResolver) null);
      TypeReference<POJOPropertyBuilder> typeReference0 = (TypeReference<POJOPropertyBuilder>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper1.readerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Stack<Annotation> stack0 = new Stack<Annotation>();
      Type type0 = null;
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      Components components1 = components0.requestBodies(hashMap0);
      ApiResponse apiResponse0 = new ApiResponse();
      Components components2 = components1.addResponses("#/components/schemas/", apiResponse0);
      components1.getCallbacks();
      Components components3 = components2.callbacks((Map<String, Callback>) null);
      Map<String, ApiResponse> map0 = components3.getResponses();
      components3.responses(map0);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.reader();
      // Undeclared exception!
      try { 
        EnumFeature.valueOf("    externalDocs: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.databind.cfg.EnumFeature.    externalDocs: 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test108()  throws Throwable  {
  //     DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
  //     Class<Object> class0 = Object.class;
  //     defaultParameterExtension0.shouldIgnoreClass(class0);
  //     Vector<String> vector0 = new Vector<String>();
  //     // Undeclared exception!
  //     try { 
  //       vector0.subList(0, 754);
  //       fail("Expecting exception: IndexOutOfBoundsException");
  //     
  //     } catch(IndexOutOfBoundsException e) {
  //        //
  //        // toIndex = 754
  //        //
  //        verifyException("java.util.SubList", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Stack<Annotation> stack0 = new Stack<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      Components components1 = components0.parameters(hashMap0);
      Link link0 = new Link();
      Components components2 = components1.addLinks("Q+", link0);
      PathItem pathItem0 = new PathItem();
      Parameter parameter0 = new Parameter();
      PathItem pathItem1 = pathItem0.addParametersItem(parameter0);
      Components components3 = components2.addPathItem("form", pathItem1);
      components0.getHeaders();
      components3.headers((Map<String, Header>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultAttributes(contextAttributes0);
      Boolean boolean1 = Boolean.FALSE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper2.reader(deserializationFeature0, deserializationFeatureArray0);
      try { 
        objectReader0.readValues("#/components/schemas/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): expected a valid value (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: (String)\"#/components/schemas/\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      ObjectMapper objectMapper0 = Json.mapper();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      List<Annotation> list0 = null;
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = new Components();
      Components components1 = components0.extensions((Map<String, Object>) null);
      components1.getParameters();
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      components0.requestBodies(hashMap0);
      Components components2 = components1.parameters((Map<String, Parameter>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      Callback callback0 = new Callback();
      Callback callback1 = callback0.$ref("#/components/schemas/");
      PathItem pathItem0 = new PathItem();
      Parameter parameter0 = new Parameter();
      PathItem pathItem1 = pathItem0.addParametersItem(parameter0);
      Callback callback2 = callback1.addPathItem("#/components/schemas/", pathItem1);
      Callback callback3 = callback2.addPathItem("#/components/schemas/", pathItem0);
      components2.setPathItems(callback3);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\\u0000\\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      FloatNode floatNode0 = new FloatNode(0.0F);
      List<String> list0 = floatNode0.findValuesAsText("Initializing binding for %s on %s with empty %s%n");
      ModelResolver.NOT_NULL_ANNOTATIONS = list0;
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<Object> class1 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<Object> class2 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Stack<Type> stack0 = new Stack<Type>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>(stack0);
      Components components0 = new Components();
      Components components1 = components0.addHeaders("Initializing binding for %s on %s with empty %s%n", (Header) null);
      MediaType mediaType0 = new MediaType();
      mediaType0.getExamples();
      Components components2 = components1.examples((Map<String, Example>) null);
      Schema<Object> schema0 = new Schema<Object>();
      Components components3 = components2.addSchemas("#/components/schemas/", schema0);
      components1.getParameters();
      components3.parameters((Map<String, Parameter>) null);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-79);
      // Undeclared exception!
      try { 
        objectMapper0.createParser(byteArray0, (int) (byte)25, (int) (byte)80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (25) and/or 'len' (80) arguments for `byte[]` of length 5
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Json.mapper();
      Class<POJOPropertyBuilder> class0 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Json31.mapper();
      Json.mapper();
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      Class<Object> class2 = Object.class;
      Json.mapper();
      defaultParameterExtension0.shouldIgnoreClass(class2);
      Class<Object> class3 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class3);
      Class<Object> class4 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class4);
      Class<Object> class5 = Object.class;
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<BinaryNode> class0 = BinaryNode.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Vector<String> vector0 = new Vector<String>(123, 0);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
      Object object0 = new Object();
      ArrayType arrayType1 = arrayType0.withTypeHandler(object0);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      arrayType2.withValueHandler(defaultParameterExtension0);
      HashSet<Type> hashSet0 = new HashSet<Type>();
      Components components0 = null;
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      Module[] moduleArray0 = new Module[0];
      objectMapper0.registerModules(moduleArray0);
      // Undeclared exception!
      try { 
        EnumFeature.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.databind.cfg.EnumFeature.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Json.mapper();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      defaultParameterExtension0.shouldIgnoreClass(class0);
      boolean boolean0 = defaultParameterExtension0.shouldIgnoreClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      Class<POJOPropertyBuilder> class1 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class1);
      ObjectMapper objectMapper0 = Json31.mapper();
      Class<POJOPropertyBuilder> class2 = POJOPropertyBuilder.class;
      defaultParameterExtension0.shouldIgnoreClass(class2);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader0 = objectMapper0.reader();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
      Class<Object> class3 = Object.class;
      objectReader1.forType(class3);
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) objectMapper0, 1, (-1013));
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      int int0 = (-1);
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultParameterExtension defaultParameterExtension0 = new DefaultParameterExtension();
      Class<Object> class0 = Object.class;
      defaultParameterExtension0.shouldIgnoreClass(class0);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      TreeSet<Type> treeSet0 = new TreeSet<Type>();
      Components components0 = new Components();
      Link link0 = new Link();
      Components components1 = components0.addLinks("l`c].", link0);
      ApiResponse apiResponse0 = new ApiResponse();
      apiResponse0.getHeaders();
      Components components2 = components1.headers((Map<String, Header>) null);
      SecurityScheme securityScheme0 = new SecurityScheme();
      Components components3 = components0.addSecuritySchemes("#/components/schemas/", securityScheme0);
      components3.getRequestBodies();
      Components components4 = components2.requestBodies((Map<String, RequestBody>) null);
      Callback callback0 = new Callback();
      PathItem pathItem0 = new PathItem();
      Callback callback1 = callback0.addPathItem("#/components/schemas/", pathItem0);
      Callback callback2 = callback1.$ref("59-3J%3!(%");
      components4.pathItems(callback2);
      Consumes consumes0 = mock(Consumes.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      JsonView jsonView0 = mock(JsonView.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      objectMapper1.reader(deserializationFeature0);
      // Undeclared exception!
      try { 
        JsonWriteFeature.valueOf("#/components/schemas/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.core.json.JsonWriteFeature.#/components/schemas/
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
