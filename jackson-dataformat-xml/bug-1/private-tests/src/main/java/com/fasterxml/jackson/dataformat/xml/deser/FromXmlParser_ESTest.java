/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 04:30:29 GMT 2023
 */

package com.fasterxml.jackson.dataformat.xml.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.StreamReadCapability;
import com.fasterxml.jackson.core.StreamReadConstraints;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DatatypeFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.EnumFeature;
import com.fasterxml.jackson.databind.cfg.JsonNodeFeature;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.dataformat.xml.XmlNameProcessor;
import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;
import com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier;
import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;
import java.io.IOException;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Locale;
import java.util.PriorityQueue;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.util.StreamReaderDelegate;
import org.codehaus.stax2.XMLStreamReader2;
import org.codehaus.stax2.ri.Stax2ReaderAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FromXmlParser_ESTest extends FromXmlParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference((Object) null);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      streamReaderDelegate0.setParent(streamReaderDelegate1);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 0, 1744, objectMapper0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser((IOContext) null, 104, 104, (ObjectCodec) null, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) annotationIntrospector0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, contentReference0, (-549), xmlNameProcessor0);
      XMLStreamReader2 xMLStreamReader2_0 = xmlTokenStream0.getXmlReader();
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser((IOContext) null, 5, 5, objectMapper1, xMLStreamReader2_0, (XmlNameProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser((IOContext) null, 48, 48, objectMapper0, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, (-2780), 1000, objectMapper1, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IOContext iOContext0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-641);
      int int1 = 1250;
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate((XMLStreamReader) null);
      ObjectMapper objectMapper1 = new ObjectMapper();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser((IOContext) null, 0, (-911), objectMapper1, (XMLStreamReader) null, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 0, 0, objectMapper1, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ContentReference contentReference0 = ContentReference.rawReference((Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (BufferRecycler) null, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 1000, 0, (ObjectCodec) null, (XMLStreamReader) null, (XmlNameProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StreamReadCapability streamReadCapability0 = StreamReadCapability.UNTYPED_SCALARS;
      ContentReference contentReference0 = ContentReference.rawReference((Object) streamReadCapability0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 7, 2, objectMapper0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(false, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      int int0 = 3426;
      ObjectCodec objectCodec0 = null;
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        streamReaderDelegate1.getAttributeName(1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(false, (Object) null);
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, bufferRecycler0, contentReference0, false);
      int int0 = 0;
      ObjectCodec objectCodec0 = null;
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate((XMLStreamReader) null);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        streamReaderDelegate0.getAttributeValue(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference((Object) bufferRecycler0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 1422, 0, objectMapper1, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      StreamReadCapability streamReadCapability0 = StreamReadCapability.SCALARS_AS_OBJECTS;
      ContentReference contentReference0 = ContentReference.construct(true, (Object) streamReadCapability0, 1000, 1);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      objectMapper1.copy();
      // Undeclared exception!
      try { 
        JsonNodeFeature.valueOf("JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.databind.cfg.JsonNodeFeature.JSON
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream((XMLStreamReader) null, contentReference0, 0, xmlNameProcessor0);
      Stax2ReaderAdapter stax2ReaderAdapter0 = (Stax2ReaderAdapter)xmlTokenStream0._xmlReader;
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, (-319), 1000000, (ObjectCodec) null, stax2ReaderAdapter0, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ContentReference contentReference0 = ContentReference.rawReference(object0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 3, 0, objectMapper0, streamReaderDelegate0, (XmlNameProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      int int0 = 9;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerForArrayOf(class0);
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"JSON\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IOContext iOContext0 = null;
      int int0 = 0;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      XmlBeanDeserializerModifier xmlBeanDeserializerModifier0 = new XmlBeanDeserializerModifier("&?ii(@d*>;F )");
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(xmlBeanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      Class<StreamReadCapability> class0 = StreamReadCapability.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      ObjectReader objectReader2 = objectReader1.with(jsonParser_Feature0);
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<EnumSet> class1 = EnumSet.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3142);
      placeholderForType0.actualType();
      // Undeclared exception!
      try { 
        typeFactory1.constructCollectionType(class1, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StreamReadCapability streamReadCapability0 = StreamReadCapability.UNTYPED_SCALARS;
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) streamReadCapability0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Version version0 = new Version(1, 0, 1, "otD6|<V0hel7$ra", "otD6|<V0hel7$ra", "otD6|<V0hel7$ra");
      SimpleModule simpleModule0 = new SimpleModule("otD6|<V0hel7$ra", version0);
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 1000, 149, objectMapper1, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL;
      fromXmlParser_Feature0.enabledIn(2084);
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference((Object) null);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Locale locale0 = Locale.TAIWAN;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory(typeFactory0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 8, 1, objectMapper2, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(false, (Object) streamReadConstraints0, 44, 131072);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate1, contentReference0, 44, xmlNameProcessor0);
      Stax2ReaderAdapter stax2ReaderAdapter0 = (Stax2ReaderAdapter)xmlTokenStream0._xmlReader;
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 0, 1000000, objectMapper1, stax2ReaderAdapter0, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      IOContext iOContext0 = null;
      try {
        iOContext0 = new IOContext(streamReadConstraints0, (BufferRecycler) null, (ContentReference) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) streamReadConstraints0, 116, 1);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 116, 2, objectMapper1, (XMLStreamReader) null, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(false, (Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, bufferRecycler0, contentReference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 48;
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility((JsonAutoDetect.Value) null);
      Class<Object> class0 = Object.class;
      objectMapper1.readerWithView(class0);
      DatatypeFeature[] datatypeFeatureArray0 = new DatatypeFeature[8];
      // Undeclared exception!
      try { 
        EnumFeature.valueOf("<)nT$0!s}vw_P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.databind.cfg.EnumFeature.<)nT$0!s}vw_P
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = null;
      boolean boolean0 = true;
      IOContext iOContext0 = null;
      try {
        iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, (ContentReference) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 0, (-455), objectMapper0, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 1, 732, objectMapper2, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, contentReference0, 1, xmlNameProcessor0);
      XMLStreamReader2 xMLStreamReader2_0 = xmlTokenStream0.getXmlReader();
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 189, 0, objectMapper1, xMLStreamReader2_0, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IOContext iOContext0 = null;
      int int0 = 32;
      int int1 = 5331;
      JsonFactory jsonFactory0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      int int0 = 8232;
      int int1 = (-1);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference((Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate((XMLStreamReader) null);
      StreamReadCapability streamReadCapability0 = StreamReadCapability.SCALARS_AS_OBJECTS;
      ContentReference contentReference1 = ContentReference.rawReference(false, (Object) streamReadCapability0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, contentReference1, 1, xmlNameProcessor0);
      Stax2ReaderAdapter stax2ReaderAdapter0 = (Stax2ReaderAdapter)xmlTokenStream0._xmlReader;
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 1000, 1000000, objectMapper2, stax2ReaderAdapter0, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL;
      boolean boolean0 = fromXmlParser_Feature0.enabledIn((-1626));
      assertEquals(2, fromXmlParser_Feature0.collectDefaults());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) bufferRecycler0, 1000, 1000);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, contentReference0, (-875), xmlNameProcessor0);
      Stax2ReaderAdapter stax2ReaderAdapter0 = (Stax2ReaderAdapter)xmlTokenStream0._xmlReader;
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(stax2ReaderAdapter0);
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, (-2099), (-876), (ObjectCodec) null, streamReaderDelegate1, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = null;
      boolean boolean0 = false;
      IOContext iOContext0 = null;
      try {
        iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, (ContentReference) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.PROCESS_XSI_NIL;
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("r4#TrA]0[n%]+43");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.r4#TrA]0[n%]+43
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StreamReadCapability streamReadCapability0 = StreamReadCapability.EXACT_FLOATS;
      ContentReference contentReference0 = ContentReference.construct(false, (Object) streamReadCapability0, 10, (-1884));
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonFactoryBuilder jsonFactoryBuilder0 = null;
      try {
        jsonFactoryBuilder0 = new JsonFactoryBuilder((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.TSFBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 1, 318, objectMapper0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, bufferRecycler0, contentReference0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 2, 2, objectMapper0, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, bufferRecycler0, contentReference0, false);
      int int0 = 2;
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      ContentReference contentReference0 = ContentReference.unknown();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, contentReference0, 6, xmlNameProcessor0);
      XMLStreamReader2 xMLStreamReader2_0 = xmlTokenStream0.getXmlReader();
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser((IOContext) null, 0, 0, objectReader0, xMLStreamReader2_0, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.PROCESS_XSI_NIL;
      String string0 = "";
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      StreamReadConstraints streamReadConstraints0 = jsonFactory0.streamReadConstraints();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      int int0 = 4;
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReadCapability streamReadCapability0 = StreamReadCapability.SCALARS_AS_OBJECTS;
      ContentReference.construct(true, (Object) streamReadCapability0, 0, 2);
      int int1 = 57;
      // Undeclared exception!
      try { 
        streamReaderDelegate0.getAttributeValue("SCALAR", "SCALAR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      boolean boolean0 = false;
      StreamReadCapability streamReadCapability0 = StreamReadCapability.UNTYPED_SCALARS;
      ContentReference contentReference0 = ContentReference.construct(false, (Object) streamReadCapability0, 1000000, 1000000);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (BufferRecycler) null, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate((XMLStreamReader) null);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 1000, 1000000, (ObjectCodec) null, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference((Object) streamReadConstraints0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 0, 500, objectMapper0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser((IOContext) null, (-258), 5, (ObjectCodec) null, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      streamReadConstraints0.validateFPLength(601);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = null;
      try {
        iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, (ContentReference) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 3435, 184, (ObjectCodec) null, (XMLStreamReader) null, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, bufferRecycler0, contentReference0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 65, 2, objectMapper0, streamReaderDelegate1, (XmlNameProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      ContentReference contentReference0 = ContentReference.construct(true, (Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate((XMLStreamReader) null);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, (-2487), (-1679), objectMapper0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      try { 
        streamReadConstraints0.validateIntegerLength(1711);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Number length (1711) exceeds the maximum length (1000)
         //
         verifyException("com.fasterxml.jackson.core.StreamReadConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference((Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 2, 255, objectMapper1, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, bufferRecycler0, contentReference0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector0);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility3 = JsonAutoDetect.Visibility.ANY;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility3);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy(propertyNamingStrategy0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 1, 1, objectMapper3, streamReaderDelegate0, (XmlNameProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      ContentReference contentReference0 = ContentReference.construct(false, (Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 128, 1000000, (ObjectCodec) null, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser((IOContext) null, 19, 0, objectMapper0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) streamReadConstraints0, 2, 0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<StreamReadCapability> class0 = StreamReadCapability.class;
      Class<StreamReadCapability> class1 = StreamReadCapability.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, false);
      Class<StreamReadCapability> class2 = StreamReadCapability.class;
      Locale locale0 = Locale.ITALY;
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      SerializerProvider serializerProvider0 = objectMapper3.getSerializerProviderInstance();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(serializerProvider0);
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class2, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream((XMLStreamReader) null, contentReference0, (-1), xmlNameProcessor0);
      xmlTokenStream0._namespaceURI = null;
      XMLStreamReader2 xMLStreamReader2_0 = xmlTokenStream0.getXmlReader();
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 33, 1, objectMapper2, xMLStreamReader2_0, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.PROCESS_XSI_NIL;
      fromXmlParser_Feature0.getMask();
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(false, (Object) fromXmlParser_Feature0, 479, 2);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 3, 1000, objectMapper0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      ContentReference contentReference0 = ContentReference.construct(false, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper2 = objectMapper1.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SimpleModule> priorityQueue0 = new PriorityQueue<SimpleModule>(comparator0);
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<? extends Module>) priorityQueue0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 48, 1000, objectMapper3, (XMLStreamReader) null, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("H#|}7m|<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.H#|}7m|<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("@?b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.@?b
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonFactory jsonFactory0 = null;
      try {
        jsonFactory0 = new JsonFactory((JsonFactoryBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "h_mpSJs";
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("h_mpSJs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.h_mpSJs
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.PROCESS_XSI_NIL;
      fromXmlParser_Feature0.enabledByDefault();
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate((XMLStreamReader) null);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 1, 1000, objectMapper0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      ContentReference contentReference0 = ContentReference.construct(false, (Object) decimalNode0, 1000, 329);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (BufferRecycler) null, contentReference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      ObjectReader objectReader1 = objectReader0.withRootName("");
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, (-158), 5, objectReader1, (XMLStreamReader) null, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(false, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate1, contentReference0, 1000, xmlNameProcessor0);
      Stax2ReaderAdapter stax2ReaderAdapter0 = (Stax2ReaderAdapter)xmlTokenStream0._xmlReader;
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 0, 0, (ObjectCodec) null, stax2ReaderAdapter0, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.PROCESS_XSI_NIL;
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference((Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      objectMapper1.setDefaultPrettyPrinter(defaultPrettyPrinter1);
      ObjectMapper objectMapper3 = objectMapper2.setFilterProvider(simpleFilterProvider0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 186, 0, objectMapper3, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      JsonFactory.builder();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 27, 3, objectMapper0, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ContentReference contentReference0 = ContentReference.unknown();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (BufferRecycler) null, contentReference0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DecimalNode> class0 = DecimalNode.class;
      ObjectReader objectReader0 = objectMapper0.readerForArrayOf(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectReader objectReader1 = objectReader0.withRootName(propertyName0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[2];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      ObjectReader objectReader2 = objectReader1.withFormatDetection(dataFormatReaders0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 0, 32767, objectReader2, streamReaderDelegate1, (XmlNameProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("=6i!*VIX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.=6i!*VIX
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IOContext iOContext0 = null;
      int int0 = 239;
      int int1 = 23;
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeReference<StreamReadCapability> typeReference0 = (TypeReference<StreamReadCapability>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference((Object) bufferRecycler0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StreamReadCapability streamReadCapability0 = StreamReadCapability.UNTYPED_SCALARS;
      ContentReference contentReference0 = ContentReference.rawReference(false, (Object) streamReadCapability0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 1292782622, 2, (ObjectCodec) null, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference((Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 498, 0, objectReader0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.PROCESS_XSI_NIL;
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("4@<uB+<96gn9vV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.4@<uB+<96gn9vV
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "Failed to decode VALUE_STRING as base64 (";
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("Failed to decode VALUE_STRING as base64 (");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.Failed to decode VALUE_STRING as base64 (
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL;
      String string0 = ":";
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "gLl%1bp}/";
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("gLl%1bp}/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.gLl%1bp}/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(false, (Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 240, (-532), objectMapper0, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FromXmlParser.Feature.values();
      JsonFactory jsonFactory0 = null;
      try {
        jsonFactory0 = new JsonFactory((JsonFactoryBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FromXmlParser.Feature.values();
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) null, 775, 1000000);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (BufferRecycler) null, contentReference0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 1000, (-1415), objectMapper0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      ContentReference contentReference0 = ContentReference.construct(false, (Object) bufferRecycler0, 2716, 1000);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      // Undeclared exception!
      try { 
        bufferRecycler0.allocByteBuffer(1000, (-4895));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("com.fasterxml.jackson.core.util.BufferRecycler", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      ContentReference contentReference0 = ContentReference.construct(false, (Object) decimalNode0, 1, 1000000);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 1, (-476), objectMapper0, streamReaderDelegate0, (XmlNameProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      ContentReference contentReference0 = ContentReference.construct(false, (Object) streamReadConstraints0, (-227), 1);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Module[] moduleArray0 = new Module[4];
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      Class<StreamReadCapability> class0 = StreamReadCapability.class;
      // Undeclared exception!
      try { 
        simpleModule0.addKeyDeserializer(class0, (KeyDeserializer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass `null` as key deserializer
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleModule", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.PROCESS_XSI_NIL;
      fromXmlParser_Feature0.getMask();
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(false, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Boolean boolean0 = new Boolean("Lm2");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultLeniency(boolean0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate1, contentReference0, 500, xmlNameProcessor0);
      Stax2ReaderAdapter stax2ReaderAdapter0 = (Stax2ReaderAdapter)xmlTokenStream0._xmlReader;
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 0, 1, objectMapper1, stax2ReaderAdapter0, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (BufferRecycler) null, contentReference0, true);
      int int0 = 0;
      JsonFactory jsonFactory0 = null;
      try {
        jsonFactory0 = new JsonFactory((JsonFactoryBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FromXmlParser.Feature.values();
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      ContentReference contentReference0 = ContentReference.construct(false, (Object) decimalNode0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 0, 0, objectMapper0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      StreamReadConstraints streamReadConstraints0 = jsonFactory1.streamReadConstraints();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (BufferRecycler) null, contentReference0, false);
      int int0 = 42;
      int int1 = 18;
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        MockDateFormat.getDateInstance((-1), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("<7QXku,kTO=.3$6#Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.<7QXku,kTO=.3$6#Q
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 1402, 57, objectMapper1, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) streamReadConstraints0, 1000, 45);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (BufferRecycler) null, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      iOContext0.setEncoding(jsonEncoding0);
      int int1 = (-81);
      ObjectMapper objectMapper0 = new ObjectMapper();
      iOContext0.constructReadConstrainedTextBuffer();
      Boolean.valueOf("Qzn9m=}-p(85rd");
      // Undeclared exception!
      try { 
        iOContext0.allocWriteEncodingBuffer(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, bufferRecycler0, contentReference0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 500, (-861), objectMapper1, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 1000, 1263, objectMapper1, streamReaderDelegate1, (XmlNameProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FromXmlParser.Feature.collectDefaults();
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      ContentReference contentReference0 = ContentReference.construct(true, (Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      bufferRecycler0.allocCharBuffer(0, 2928);
      ContentReference.construct(true, (Object) bufferRecycler0, (-863), 16);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 224, 32768, objectMapper0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.PROCESS_XSI_NIL;
      String string0 = "tC:G})";
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("tC:G})");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.tC:G})
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, (-1287), 58, (ObjectCodec) null, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(false, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 1, 1, objectMapper0, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StreamReadCapability streamReadCapability0 = StreamReadCapability.DUPLICATE_PROPERTIES;
      ContentReference contentReference0 = ContentReference.construct(true, (Object) streamReadCapability0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector1);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, (-2055), 4, objectMapper1, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      IOContext iOContext0 = null;
      try {
        iOContext0 = new IOContext(streamReadConstraints0, (BufferRecycler) null, (ContentReference) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL;
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf("DK(L@o~uD&hyRYaOh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.DK(L@o~uD&hyRYaOh
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.PROCESS_XSI_NIL;
      fromXmlParser_Feature0.enabledIn(57);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, StreamReadCapability> hashMap0 = new HashMap<String, StreamReadCapability>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) null, 1000, 0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, contentReference0, 16, xmlNameProcessor0);
      XMLStreamReader2 xMLStreamReader2_0 = xmlTokenStream0.getXmlReader();
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser((IOContext) null, 0, 57, objectMapper1, xMLStreamReader2_0, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ContentReference.construct(true, (Object) null, 0, 1000000);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, (-1025), 0, (ObjectCodec) null, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference((Object) bufferRecycler0);
      streamReadConstraints0.validateIntegerLength(1);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 2, 1000000, objectMapper0, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StreamReadCapability streamReadCapability0 = StreamReadCapability.DUPLICATE_PROPERTIES;
      ContentReference contentReference0 = ContentReference.construct(false, (Object) streamReadCapability0);
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, bufferRecycler0, contentReference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 171, 3, (ObjectCodec) null, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = ", field(s): ";
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf(", field(s): ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature., field(s): 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FromXmlParser.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StreamReadCapability streamReadCapability0 = StreamReadCapability.UNTYPED_SCALARS;
      ContentReference contentReference0 = ContentReference.rawReference((Object) streamReadCapability0);
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, bufferRecycler0, contentReference0, false);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      StreamReaderDelegate streamReaderDelegate1 = new StreamReaderDelegate(streamReaderDelegate0);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext0, 187, (-1), (ObjectCodec) null, streamReaderDelegate1, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = null;
      try {
        iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, (ContentReference) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      ContentReference contentReference0 = ContentReference.unknown();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, contentReference0, 32, xmlNameProcessor0);
      XMLStreamReader2 xMLStreamReader2_0 = xmlTokenStream0.getXmlReader();
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      jsonFactory0.copy();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_HEX_UPPER_CASE;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_HEX_UPPER_CASE;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      objectMapper0.disable(jsonGenerator_FeatureArray0);
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser((IOContext) null, 150, 0, objectMapper1, xMLStreamReader2_0, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test107()  throws Throwable  {
  //     StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
  //     BufferRecycler bufferRecycler0 = new BufferRecycler();
  //     boolean boolean0 = false;
  //     ContentReference contentReference0 = ContentReference.construct(false, (Object) streamReadConstraints0, 2, 1040);
  //     IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, false);
  //     int int0 = 3013;
  //     ObjectMapper objectMapper0 = new ObjectMapper();
  //     StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
  //     XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
  //     char[] charArray0 = new char[6];
  //     charArray0[0] = '\'';
  //     charArray0[1] = 'F';
  //     charArray0[2] = '~';
  //     charArray0[3] = 'N';
  //     charArray0[4] = 'R';
  //     charArray0[5] = '7';
  //     // Undeclared exception!
  //     try { 
  //       bufferRecycler0.releaseCharBuffer((-1), charArray0);
  //       fail("Expecting exception: IndexOutOfBoundsException");
  //     
  //     } catch(IndexOutOfBoundsException e) {
  //        //
  //        // index -1
  //        //
  //        verifyException("java.util.concurrent.atomic.AtomicReferenceArray", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ContentReference contentReference0 = ContentReference.rawReference((Object) null);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, (BufferRecycler) null, contentReference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver((SubtypeResolver) null);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 0, 500, objectMapper1, streamReaderDelegate0, xmlNameProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) streamReadConstraints0, 0, 0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, contentReference0, (-4581), xmlNameProcessor0);
      XMLStreamReader2 xMLStreamReader2_0 = xmlTokenStream0.getXmlReader();
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 1, 9, objectMapper1, xMLStreamReader2_0, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      boolean boolean0 = false;
      ContentReference contentReference1 = ContentReference.construct(false, (Object) serializationFeature0, (-4805), 2);
      XmlNameProcessor xmlNameProcessor0 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, contentReference1, (-749), xmlNameProcessor0);
      Stax2ReaderAdapter stax2ReaderAdapter0 = (Stax2ReaderAdapter)xmlTokenStream0._xmlReader;
      XmlNameProcessor xmlNameProcessor1 = mock(XmlNameProcessor.class, new ViolatedAssumptionAnswer());
      FromXmlParser fromXmlParser0 = null;
      try {
        fromXmlParser0 = new FromXmlParser(iOContext1, 839, 3, objectMapper2, stax2ReaderAdapter0, xmlNameProcessor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        FromXmlParser.Feature.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
