/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 04:46:24 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.ErrorReportConfiguration;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.StreamReadCapability;
import com.fasterxml.jackson.core.StreamReadConstraints;
import com.fasterxml.jackson.core.StreamWriteConstraints;
import com.fasterxml.jackson.core.TokenStreamFactory;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.type.WritableTypeId;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.Separators;
import com.fasterxml.jackson.databind.AbstractTypeResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.CoercionAction;
import com.fasterxml.jackson.databind.cfg.CoercionInputShape;
import com.fasterxml.jackson.databind.cfg.ConstructorDetector;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DatatypeFeature;
import com.fasterxml.jackson.databind.cfg.DatatypeFeatures;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.EnumFeature;
import com.fasterxml.jackson.databind.cfg.JsonNodeFeature;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer;
import com.fasterxml.jackson.databind.deser.std.AtomicBooleanDeserializer;
import com.fasterxml.jackson.databind.deser.std.AtomicIntegerDeserializer;
import com.fasterxml.jackson.databind.deser.std.AtomicLongDeserializer;
import com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer;
import com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer;
import com.fasterxml.jackson.databind.deser.std.DateDeserializers;
import com.fasterxml.jackson.databind.deser.std.EnumDeserializer;
import com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer;
import com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer;
import com.fasterxml.jackson.databind.deser.std.NumberDeserializers;
import com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer;
import com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers;
import com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringDeserializer;
import com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer;
import com.fasterxml.jackson.databind.deser.std.UUIDDeserializer;
import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;
import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializerNR;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.IterationType;
import com.fasterxml.jackson.databind.type.LogicalType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Converter;
import com.fasterxml.jackson.databind.util.EnumResolver;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.LookupCache;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.google.common.collect.BoundType;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.text.DateFormat;
import java.time.DateTimeException;
import java.time.DayOfWeek;
import java.time.chrono.IsoEra;
import java.time.chrono.MinguoEra;
import java.time.chrono.ThaiBuddhistEra;
import java.time.format.FormatStyle;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import javax.sql.rowset.serial.SerialBlob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDeserializer_ESTest extends StdDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer(dateDeserializers_DateDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      deserializerFactoryConfig0.abstractTypeResolvers();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      StackTraceElementDeserializer.Adapter stackTraceElementDeserializer_Adapter0 = new StackTraceElementDeserializer.Adapter();
      stackTraceElementDeserializer0.constructValue(defaultDeserializationContext0, stackTraceElementDeserializer_Adapter0);
      dateDeserializers_DateDeserializer0._verifyNullForPrimitive(defaultDeserializationContext_Impl0);
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      JsonNodeDeserializer jsonNodeDeserializer1 = new JsonNodeDeserializer(jsonNodeDeserializer0, false, false);
      JsonDeserializer<?> jsonDeserializer0 = jsonNodeDeserializer1._createWithMerge(false, false);
      assertNotSame(jsonNodeDeserializer1, jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      UntypedObjectDeserializerNR untypedObjectDeserializerNR0 = new UntypedObjectDeserializerNR(true);
      Converter<ChronoField, EnumMap<ChronoField, ChronoField>> converter0 = (Converter<ChronoField, EnumMap<ChronoField, ChronoField>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<ChronoField, ChronoField>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<ChronoField, ChronoField>>(converter0);
      JsonParser jsonParser0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseBooleanPrimitive((JsonParser) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      AtomicBooleanDeserializer atomicBooleanDeserializer0 = new AtomicBooleanDeserializer();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1623));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      JavaType javaType0 = referenceType0.getContentType();
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer(javaType0, placeholderForType0);
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, true);
      Converter<ChronoField, ChronoField> converter0 = (Converter<ChronoField, ChronoField>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ChronoField> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ChronoField>(converter0);
      Converter<Object, ChronoField> converter1 = stdDelegatingDeserializer0._converter;
      StdDelegatingDeserializer<ChronoField> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate(converter1, referenceType0, untypedObjectDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._isTrue("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FromStringDeserializer.StringBuilderDeserializer fromStringDeserializer_StringBuilderDeserializer0 = new FromStringDeserializer.StringBuilderDeserializer();
      UntypedObjectDeserializerNR untypedObjectDeserializerNR0 = new UntypedObjectDeserializerNR();
      untypedObjectDeserializerNR0.logicalType();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Converter<Date, EnumMap<ChronoField, ChronoField>> converter0 = (Converter<Date, EnumMap<ChronoField, ChronoField>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<ChronoField, ChronoField>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<ChronoField, ChronoField>>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      CoercionAction coercionAction0 = CoercionAction.Fail;
      Class<Date> class0 = Date.class;
      FromStringDeserializer.StringBuilderDeserializer fromStringDeserializer_StringBuilderDeserializer1 = new FromStringDeserializer.StringBuilderDeserializer();
      fromStringDeserializer_StringBuilderDeserializer1._deserializeFromEmptyStringDefault(defaultDeserializationContext_Impl0);
      try { 
        stdDelegatingDeserializer0._checkCoercionFail(defaultDeserializationContext_Impl0, coercionAction0, class0, (Object) null, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce null to `java.util.Date` value (but could if coercion was enabled using `CoercionConfig`)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>((Converter<?, Date>) null);
      Converter<Object, Date> converter0 = stdDelegatingDeserializer0._converter;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(84);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Date>((Converter<Object, Date>) null, placeholderForType0, stdDelegatingDeserializer0);
      String string0 = "f{(VH7ep:CV8G";
      stdDelegatingDeserializer1._isEmptyOrTextualNull("f{(VH7ep:CV8G");
      DeserializationConfig deserializationConfig0 = null;
      Class<Date> class0 = Date.class;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      basicClassIntrospector0.forDirectClassAnnotations((MapperConfig<?>) null, placeholderForType0, (ClassIntrospector.MixInResolver) null);
      Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class0;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Date> class1 = Date.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyInclusion(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Converter<ChronoField, Date> converter0 = (Converter<ChronoField, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      stdDelegatingDeserializer0._checkFloatSpecialValue("");
      DeserializationConfig deserializationConfig0 = null;
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        EnumResolver.constructUsingToString((DeserializationConfig) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.EnumResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Converter<Date, List<Calendar>> converter0 = (Converter<Date, List<Calendar>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<Calendar>>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.handleNestedArrayForSingle((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
      JsonParser jsonParser0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_IntDeser0.handleSingleElementUnwrapped((JsonParser) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Converter<ChronoField, ChronoField> converter0 = (Converter<ChronoField, ChronoField>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ChronoField> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ChronoField>(converter0);
      Converter<Object, ChronoField> converter1 = stdDelegatingDeserializer0._converter;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(3, 0);
      TypeFactory typeFactory1 = typeFactory0.withCache((LookupCache<Object, JavaType>) lRUMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory2 = typeFactory1.withClassLoader(classLoader0);
      Class<Date> class0 = Date.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      JavaType javaType0 = typeFactory2.constructParametricType(class0, typeBindings0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      StdDelegatingDeserializer<ChronoField> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate(converter1, javaType0, dateDeserializers_DateDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      JsonParser jsonParser0 = objectMapper1.createParser("}AZd{x,Hufv)7");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.delegate();
      try { 
        stdDelegatingDeserializer1._checkIntToStringCoercion(jsonParser1, (DeserializationContext) null, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Converter<Date, Date> converter0 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      NumberDeserializers.BigDecimalDeserializer numberDeserializers_BigDecimalDeserializer0 = NumberDeserializers.BigDecimalDeserializer.instance;
      Class<Character> class0 = Character.class;
      Character character0 = new Character('E');
      NumberDeserializers.CharacterDeserializer numberDeserializers_CharacterDeserializer0 = new NumberDeserializers.CharacterDeserializer(class0, character0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      PipedReader pipedReader0 = new PipedReader(40);
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) pipedReader0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      FromStringDeserializer.StringBuilderDeserializer fromStringDeserializer_StringBuilderDeserializer0 = new FromStringDeserializer.StringBuilderDeserializer();
      fromStringDeserializer_StringBuilderDeserializer0._deserializeFromEmptyStringDefault(deserializationContext0);
      // Undeclared exception!
      try { 
        numberDeserializers_CharacterDeserializer0.handleUnknownProperty(jsonParser0, deserializationContext0, (Object) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      stringDeserializer0.logicalType();
      AtomicIntegerDeserializer atomicIntegerDeserializer0 = new AtomicIntegerDeserializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ChronoField> class0 = ChronoField.class;
      ObjectReader objectReader0 = objectMapper0.readerForArrayOf(class0);
      JsonNodeFeature jsonNodeFeature0 = JsonNodeFeature.READ_NULL_PROPERTIES;
      ObjectReader objectReader1 = objectReader0.without((DatatypeFeature) jsonNodeFeature0);
      ObjectReader objectReader2 = objectReader1.with((DatatypeFeature) jsonNodeFeature0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.USE_FAST_DOUBLE_PARSER;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.USE_FAST_DOUBLE_PARSER;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.USE_FAST_BIG_NUMBER_PARSER;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectReader objectReader3 = objectReader2.withFeatures(jsonParser_FeatureArray0);
      JsonParser jsonParser0 = objectReader3.createNonBlockingByteArrayParser();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        atomicIntegerDeserializer0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      primitiveArrayDeserializers_BooleanDeser0._constructEmpty();
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = new NumberDeserializers.NumberDeserializer();
      Converter<DataInputStream, DataInputStream> converter0 = (Converter<DataInputStream, DataInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<DataInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DataInputStream>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isTrue("03q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      Converter<Date, EnumMap<StreamReadCapability, StreamReadCapability>> converter0 = (Converter<Date, EnumMap<StreamReadCapability, StreamReadCapability>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<StreamReadCapability, StreamReadCapability>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<StreamReadCapability, StreamReadCapability>>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coercedTypeDesc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      // Undeclared exception!
      try { 
        byteBufferDeserializer0._verifyNullForPrimitiveCoercion((DeserializationContext) null, "]MN4M+&]<~R`}19Vwm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Converter<Date, WritableTypeId.Inclusion> converter0 = (Converter<Date, WritableTypeId.Inclusion>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<WritableTypeId.Inclusion> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<WritableTypeId.Inclusion>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._isIntNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = new NumberDeserializers.ByteDeserializer(class0, (Byte) null);
      Converter<Date, ChronoUnit> converter0 = (Converter<Date, ChronoUnit>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ChronoUnit> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ChronoUnit>(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      Separators separators0 = Separators.createDefaultInstance();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(separators0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      jsonParser_FeatureArray0[2] = jsonParser_Feature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonParser_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._failDoubleToIntCoercion(jsonParser0, deserializationContext0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
      Converter<Date, List<ThaiBuddhistEra>> converter0 = (Converter<Date, List<ThaiBuddhistEra>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<ThaiBuddhistEra>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<ThaiBuddhistEra>>(converter0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      JsonFactory jsonFactory2 = jsonFactory1.setErrorReportConfiguration(errorReportConfiguration0);
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      JsonParser jsonParser0 = jsonFactory3.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseString(jsonParser0, defaultDeserializationContext0, numberDeserializers_NumberDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      Converter<Object, EnumMap<DayOfWeek, Date>> converter0 = (Converter<Object, EnumMap<DayOfWeek, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Date> class0 = Date.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(461845907, class0);
      dateDeserializers_DateDeserializer0.isDefaultKeyDeserializer(stdKeyDeserializer0);
      StdDelegatingDeserializer<EnumMap<DayOfWeek, Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<DayOfWeek, Date>>(converter0, (JavaType) null, dateDeserializers_DateDeserializer0);
      StdDelegatingDeserializer<EnumMap<DayOfWeek, Date>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<EnumMap<DayOfWeek, Date>>(stdDelegatingDeserializer0);
      ValueInstantiator valueInstantiator0 = dateDeserializers_DateDeserializer0.getValueInstantiator();
      assertNull(valueInstantiator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<LogicalType> class0 = LogicalType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer(resolvedRecursiveType0, resolvedRecursiveType0);
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
      Converter<LogicalType, Date> converter0 = (Converter<LogicalType, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      LogicalType logicalType0 = LogicalType.DateTime;
      Class<LogicalType> class1 = LogicalType.class;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._checkFromStringCoercion(defaultDeserializationContext0, "", logicalType0, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Converter<Date, EnumMap<BoundType, Date>> converter0 = (Converter<Date, EnumMap<BoundType, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<BoundType, Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<BoundType, Date>>(converter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.USE_FAST_DOUBLE_PARSER;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonParser_FeatureArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = '0';
      charArray0[2] = 'm';
      charArray0[3] = 'E';
      charArray0[4] = '0';
      JsonParser jsonParser0 = objectMapper3.createParser(charArray0);
      try { 
        stdDelegatingDeserializer0._verifyEndArrayForSingle(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'k0mE0': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Converter<Date, EnumMap<ObjectMapper.DefaultTyping, Date>> converter0 = (Converter<Date, EnumMap<ObjectMapper.DefaultTyping, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<ObjectMapper.DefaultTyping, Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<ObjectMapper.DefaultTyping, Date>>(converter0);
      StdDelegatingDeserializer<EnumMap<ObjectMapper.DefaultTyping, Date>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<EnumMap<ObjectMapper.DefaultTyping, Date>>(stdDelegatingDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._isFalse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Converter<Date, EnumMap<ObjectMapper.DefaultTyping, ObjectMapper.DefaultTyping>> converter0 = (Converter<Date, EnumMap<ObjectMapper.DefaultTyping, ObjectMapper.DefaultTyping>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<ObjectMapper.DefaultTyping, ObjectMapper.DefaultTyping>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<ObjectMapper.DefaultTyping, ObjectMapper.DefaultTyping>>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coerceTextualNull(defaultDeserializationContext0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Converter<Object, EnumMap<ObjectMapper.DefaultTyping, Date>> converter0 = (Converter<Object, EnumMap<ObjectMapper.DefaultTyping, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer1 = new DateDeserializers.DateDeserializer(dateDeserializers_DateDeserializer0, dateFormat0, "FALSE");
      StdDelegatingDeserializer<EnumMap<ObjectMapper.DefaultTyping, Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<ObjectMapper.DefaultTyping, Date>>(converter0, (JavaType) null, dateDeserializers_DateDeserializer1);
      StdDelegatingDeserializer<EnumMap<ObjectMapper.DefaultTyping, Date>> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate((Converter<Object, EnumMap<ObjectMapper.DefaultTyping, Date>>) null, (JavaType) null, dateDeserializers_DateDeserializer1);
      stdDelegatingDeserializer1._checkFloatSpecialValue("YfP80`");
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer((JavaType) null, (JavaType) null);
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, dateDeserializers_DateDeserializer1, stdDelegatingDeserializer1, dateDeserializers_DateDeserializer0, dateDeserializers_DateDeserializer1);
      UntypedObjectDeserializer untypedObjectDeserializer2 = new UntypedObjectDeserializer(untypedObjectDeserializer1, false);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonGenerator_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      objectMapper3.getDeserializationContext();
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = null;
      try {
        iOContext0 = new IOContext(streamReadConstraints0, (StreamWriteConstraints) null, errorReportConfiguration0, bufferRecycler0, (ContentReference) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Converter<DayOfWeek, Vector<DayOfWeek>> converter0 = (Converter<DayOfWeek, Vector<DayOfWeek>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Vector<DayOfWeek>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Vector<DayOfWeek>>(converter0);
      Converter<Object, Vector<DayOfWeek>> converter1 = stdDelegatingDeserializer0._converter;
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer1 = new DateDeserializers.DateDeserializer(dateDeserializers_DateDeserializer0, dateFormat0, (String) null);
      StdDelegatingDeserializer<Vector<DayOfWeek>> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate(converter1, (JavaType) null, dateDeserializers_DateDeserializer1);
      StdDelegatingDeserializer<Vector<DayOfWeek>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Vector<DayOfWeek>>(stdDelegatingDeserializer1);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator((String) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, true);
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteBufferParser();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonNodeFeature jsonNodeFeature0 = JsonNodeFeature.WRITE_NULL_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.configure((DatatypeFeature) jsonNodeFeature0, true);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0, deserializationFeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer2._verifyEndArrayForSingle(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockDate mockDate0 = new MockDate((-1170), 0, 0, 0, 0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(mockDate0);
      Class<Date> class0 = Date.class;
      ObjectReader objectReader1 = objectReader0.withView(class0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      ObjectReader objectReader2 = objectReader1.withFeatures(jsonParser_FeatureArray0);
      ObjectReader objectReader3 = objectReader2.withValueToUpdate((Object) null);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader4 = objectReader3.without((FormatFeature) jsonReadFeature0);
      // Undeclared exception!
      try { 
        objectReader4.createParser((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"r\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      ObjectMapper objectMapper4 = objectMapper3.addMixIn(class0, class0);
      File file0 = MockFile.createTempFile("JSON", "j7TJD_OLl?L'&8v");
      JsonParser jsonParser0 = objectMapper4.createParser(file0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._deserializeFromEmpty(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer1 = new DateDeserializers.DateDeserializer(dateDeserializers_DateDeserializer0, dateFormat0, "");
      boolean boolean0 = dateDeserializers_DateDeserializer1._isNaN("\u0002HS P)RMdPfdQVUR");
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      jsonNodeDeserializer0._createWithMerge(false, false);
      jsonNodeDeserializer0._createWithMerge(false, true);
      StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer(dateDeserializers_DateDeserializer0, dateDeserializers_DateDeserializer1, (Boolean) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Boolean boolean1 = stringArrayDeserializer0.supportsUpdate((DeserializationConfig) null);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>((Converter<?, Date>) null);
      Converter<Object, Date> converter0 = stdDelegatingDeserializer0._converter;
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate((Converter<Object, Date>) null, (JavaType) null, (JsonDeserializer<?>) null);
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.NUMBER_FLOAT;
      ContentReference contentReference0 = ContentReference.rawReference((Object) jsonFormat_Shape0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot((TokenStreamFactory) jsonFactory0, 1000);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, pipedReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, 1114111, 2, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._parseDate(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer((JavaType) null, (JavaType) null);
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
      UntypedObjectDeserializer untypedObjectDeserializer2 = new UntypedObjectDeserializer(untypedObjectDeserializer1, false);
      Converter<Date, Proxy.Type> converter0 = (Converter<Date, Proxy.Type>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Proxy.Type> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Proxy.Type>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._isEmptyOrTextualNull((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      dateDeserializers_DateDeserializer0.handledType();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      Converter<Date, Separators.Spacing> converter0 = (Converter<Date, Separators.Spacing>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Separators.Spacing> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Separators.Spacing>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow(78);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("com.fasterxml.jackson.databind.ObjectReader");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser0._parseDateFromArray(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Converter<Date, Proxy.Type> converter0 = (Converter<Date, Proxy.Type>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Proxy.Type> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Proxy.Type>(converter0);
      stdDelegatingDeserializer0._nonNullNumber((Number) null);
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      objectMapper1.configure(deserializationFeature0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl1);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      // Undeclared exception!
      try { 
        objectMapper3.createParser((char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"content\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonParser jsonParser0 = objectMapper0.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.overrideFormatFeatures(0, 0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_IntDeser0.handleMissingEndArrayForSingle(jsonParser1, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      BigInteger bigInteger0 = BigInteger.ONE;
      dateDeserializers_DateDeserializer0._nonNullNumber(bigInteger0);
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      JsonParser jsonParser0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_LongDeser0.deserialize((JsonParser) null, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$LongDeser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Converter<Date, Date> converter0 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      Converter<Object, Date> converter1 = stdDelegatingDeserializer0._converter;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Date>(converter1, placeholderForType0, stdDelegatingDeserializer0);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Date>(stdDelegatingDeserializer1);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer3 = stdDelegatingDeserializer2.withDelegate(converter1, placeholderForType0, stdDelegatingDeserializer1);
      stdDelegatingDeserializer1.replaceDelegatee(stdDelegatingDeserializer2);
      stdDelegatingDeserializer3._isFalse("com.google.common.base.CharMatcher$Digit");
      Converter<Date, EnumMap<MinguoEra, Date>> converter2 = (Converter<Date, EnumMap<MinguoEra, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<MinguoEra, Date>> stdDelegatingDeserializer4 = new StdDelegatingDeserializer<EnumMap<MinguoEra, Date>>(converter2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper2 = objectMapper1.copyWith(jsonFactory1);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      TypeReference<Date> typeReference0 = (TypeReference<Date>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        objectMapper3.readValue((JsonParser) null, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"p\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Converter<Date, Date> converter0 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      String string0 = "NaN";
      StdDeserializer._parseDouble("NaN");
      JsonParser jsonParser0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<MinguoEra> class0 = MinguoEra.class;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._checkFloatToStringCoercion((JsonParser) null, defaultDeserializationContext0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      UntypedObjectDeserializerNR untypedObjectDeserializerNR0 = new UntypedObjectDeserializerNR(false);
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Date> class0 = Date.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, " value", "j;k/PPfN#q=");
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        uUIDDeserializer0._deserializeFromArray((JsonParser) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Converter<MinguoEra, Date> converter0 = (Converter<MinguoEra, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Date>(stdDelegatingDeserializer0);
      Converter<Object, Date> converter1 = stdDelegatingDeserializer1._converter;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      placeholderForType0.actualType();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._verifyStringForScalarCoercion(defaultDeserializationContext0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Converter<JsonInclude.Include, Date> converter0 = (Converter<JsonInclude.Include, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      Converter<Object, Date> converter1 = stdDelegatingDeserializer0._converter;
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Date>(converter1, (JavaType) null, stdDelegatingDeserializer0);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Date>(stdDelegatingDeserializer1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Vector> class0 = Vector.class;
      Class<JsonInclude.Include> class1 = JsonInclude.Include.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer1 = new DateDeserializers.DateDeserializer(dateDeserializers_DateDeserializer0, dateFormat0, "goH");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = dateDeserializers_DateDeserializer1.getEmptyValue((DeserializationContext) defaultDeserializationContext_Impl0);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(object0);
      MockDate mockDate0 = new MockDate(4L);
      CollectionLikeType collectionLikeType0 = collectionType1.withContentValueHandler(mockDate0);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer3 = stdDelegatingDeserializer2.withDelegate(converter1, collectionLikeType0, stdDelegatingDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer3.handledType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Converter<Date, JsonInclude.Include> converter0 = (Converter<Date, JsonInclude.Include>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<JsonInclude.Include> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonInclude.Include>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseFloatPrimitive((DeserializationContext) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Converter<Date, JsonInclude.Include> converter0 = (Converter<Date, JsonInclude.Include>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<JsonInclude.Include> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonInclude.Include>(converter0);
      StdDelegatingDeserializer<JsonInclude.Include> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<JsonInclude.Include>(stdDelegatingDeserializer0);
      Converter<Object, JsonInclude.Include> converter1 = stdDelegatingDeserializer1._converter;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._findCoercionFromEmptyArray(defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TokenBufferDeserializer tokenBufferDeserializer0 = new TokenBufferDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      JsonFactory jsonFactory1 = jsonFactory0.setStreamWriteConstraints(streamWriteConstraints0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      JsonFactory jsonFactory3 = jsonFactory2.setErrorReportConfiguration(errorReportConfiguration0);
      JsonParser jsonParser0 = jsonFactory3.createParser("R#wP1y0I;s=w%/");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      try { 
        tokenBufferDeserializer0._coerceIntegral(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseFloatPrimitive(defaultDeserializationContext0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Class<Short> class0 = Short.class;
      Short short0 = new Short((short)1146);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = new NumberDeserializers.ShortDeserializer(class0, short0);
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      Locale locale0 = new Locale("", "", "0");
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper3 = objectMapper2.addHandler(deserializationProblemHandler0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ByteDeser0._parseDate("", deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Converter<Date, Date> converter0 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      Converter<Object, Date> converter1 = stdDelegatingDeserializer0._converter;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      CollectionLikeType collectionLikeType0 = collectionType0.withContentTypeHandler(jsonInclude_Include0);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Date>(converter1, collectionLikeType0, stdDelegatingDeserializer0);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer2 = stdDelegatingDeserializer1.withDelegate((Converter<Object, Date>) null, collectionType0, stdDelegatingDeserializer0);
      Double double0 = stdDelegatingDeserializer2._checkDoubleSpecialValue("zMh|U ,'BJwB\"MaQ.6");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      JsonNodeDeserializer jsonNodeDeserializer1 = new JsonNodeDeserializer(jsonNodeDeserializer0, false, false);
      Converter<Object, EnumMap<JsonTypeInfo.Id, Date>> converter0 = (Converter<Object, EnumMap<JsonTypeInfo.Id, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<JsonTypeInfo.Id, Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<JsonTypeInfo.Id, Date>>(converter0, (JavaType) null, jsonNodeDeserializer1);
      StdDelegatingDeserializer<EnumMap<JsonTypeInfo.Id, Date>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<EnumMap<JsonTypeInfo.Id, Date>>(stdDelegatingDeserializer0);
      Converter<Object, JsonTypeInfo.Id> converter1 = (Converter<Object, JsonTypeInfo.Id>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<JsonTypeInfo.Id> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<JsonTypeInfo.Id>(converter1, (JavaType) null, jsonNodeDeserializer1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      stdDelegatingDeserializer2.findContentNullProvider(defaultDeserializationContext_Impl0, beanProperty_Bogus0, jsonNodeDeserializer1);
      Converter<Object, Vector<JsonTypeInfo.Id>> converter2 = (Converter<Object, Vector<JsonTypeInfo.Id>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      JavaType javaType0 = TypeFactory.unknownType();
      StdDelegatingDeserializer<Vector<JsonTypeInfo.Id>> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<Vector<JsonTypeInfo.Id>>(converter2, javaType0, stdDelegatingDeserializer2);
      StdDelegatingDeserializer<Vector<JsonTypeInfo.Id>> stdDelegatingDeserializer4 = new StdDelegatingDeserializer<Vector<JsonTypeInfo.Id>>(stdDelegatingDeserializer3);
      StdDelegatingDeserializer<Vector<JsonTypeInfo.Id>> stdDelegatingDeserializer5 = stdDelegatingDeserializer4.withDelegate((Converter<Object, Vector<JsonTypeInfo.Id>>) null, (JavaType) null, jsonNodeDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer5.createContextual(defaultDeserializationContext_Impl0, beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      Converter<Object, Base64Variant.PaddingReadBehaviour> converter0 = (Converter<Object, Base64Variant.PaddingReadBehaviour>) mock(Converter.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Date> class0 = Date.class;
      typeFactory0.constructRawCollectionLikeType(class0);
      StdDelegatingDeserializer<Base64Variant.PaddingReadBehaviour> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Base64Variant.PaddingReadBehaviour>(converter0);
      StdDelegatingDeserializer<Base64Variant.PaddingReadBehaviour> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Base64Variant.PaddingReadBehaviour>(stdDelegatingDeserializer0);
      Converter<Object, Base64Variant.PaddingReadBehaviour> converter1 = (Converter<Object, Base64Variant.PaddingReadBehaviour>) mock(Converter.class, new ViolatedAssumptionAnswer());
      JavaType javaType0 = null;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      JsonFactory jsonFactory3 = jsonFactory2.setStreamReadConstraints(streamReadConstraints0);
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteBufferParser();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._deserializeWrappedValue(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StdDelegatingDeserializer<Vector<Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Vector<Date>>((Converter<?, Vector<Date>>) null);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteArrayParser();
      objectMapper0.clearProblemHandlers();
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseFloatPrimitive(jsonParser0, (DeserializationContext) null, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Converter<FormatStyle, FormatStyle> converter0 = (Converter<FormatStyle, FormatStyle>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FormatStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<FormatStyle>(converter0);
      StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultAccessorNamingStrategy.Provider defaultAccessorNamingStrategy_Provider0 = new DefaultAccessorNamingStrategy.Provider();
      ObjectMapper objectMapper1 = objectMapper0.setAccessorNaming(defaultAccessorNamingStrategy_Provider0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0);
      Class<FormatStyle> class0 = FormatStyle.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class0);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = objectMapper3.createParser(charArray0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._coerceBooleanFromInt(jsonParser0, (DeserializationContext) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      String string0 = "Cannot coerce String \"%s\" to %s (enable `%s.%s` to allow)";
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer1 = new DateDeserializers.DateDeserializer(dateDeserializers_DateDeserializer0, dateFormat0, "Cannot coerce String \"%s\" to %s (enable `%s.%s` to allow)");
      StdDelegatingDeserializer<Vector<Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Vector<Date>>((Converter<?, Vector<Date>>) null);
      StdDelegatingDeserializer<Vector<Date>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Vector<Date>>(stdDelegatingDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.DEFAULT;
      ConstructorDetector.SingleArgConstructor constructorDetector_SingleArgConstructor0 = ConstructorDetector.SingleArgConstructor.HEURISTIC;
      constructorDetector0.withSingleArgMode(constructorDetector_SingleArgConstructor0);
      ObjectMapper objectMapper1 = objectMapper0.setConstructorDetector(constructorDetector0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._findCoercionFromBlankString(deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      numberDeserializers_BigIntegerDeserializer0.getEmptyValue((DeserializationContext) defaultDeserializationContext0);
      Converter<Date, Date> converter0 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      JsonFactory jsonFactory2 = jsonFactory1.setStreamWriteConstraints(streamWriteConstraints0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)20;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseFloatPrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StdDelegatingDeserializer<JsonInclude.Include> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonInclude.Include>((Converter<?, JsonInclude.Include>) null);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      Boolean boolean0 = null;
      DeserializationContext deserializationContext0 = null;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coerceNullToken((DeserializationContext) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Date> class0 = Date.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 5);
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("9FnI'd(yi+eS");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.USE_FAST_DOUBLE_WRITER;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot((TokenStreamFactory) jsonFactory0);
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '@';
      charArray0[3] = ']';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      charArray0[7] = '\\';
      charArray0[8] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 951, stringReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, 9999, 11, true);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._parseFloatPrimitive(jsonParser0, (DeserializationContext) null, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TokenBufferDeserializer tokenBufferDeserializer0 = new TokenBufferDeserializer();
      Converter<Date, Vector<Date>> converter0 = (Converter<Date, Vector<Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Vector<Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Vector<Date>>(converter0);
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._checkFromStringCoercion((DeserializationContext) null, "u33$S;F!sm~JS`HcA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = (-983.0F);
      floatArray0[2] = (-282.24F);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.USE_FAST_BIG_NUMBER_PARSER;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.findAndRegisterModules();
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      JsonParser jsonParser0 = objectMapper3.createParser(charArray0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<Date> class0 = Date.class;
      try { 
        primitiveArrayDeserializers_FloatDeser0._checkBooleanToStringCoercion(jsonParser0, deserializationContext0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not of boolean type
         //  at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
      Converter<Date, FormatStyle> converter0 = (Converter<Date, FormatStyle>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FormatStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<FormatStyle>(converter0);
      stdDelegatingDeserializer0._isPosInf("DUZL>(A[zp*!8");
      Class<Byte> class0 = Byte.class;
      Byte byte0 = new Byte((byte)10);
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = new NumberDeserializers.ByteDeserializer(class0, byte0);
      Class<Date> class1 = Date.class;
      JsonNodeDeserializer.getDeserializer(class1);
      Converter<Object, Vector<Date>> converter1 = (Converter<Object, Vector<Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Vector<Date>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Vector<Date>>(converter1, (JavaType) null, numberDeserializers_ByteDeserializer0);
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      Converter<Object, EnumMap<FormatStyle, Date>> converter2 = (Converter<Object, EnumMap<FormatStyle, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<FormatStyle, Date>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<EnumMap<FormatStyle, Date>>(converter2, (JavaType) null, stdDelegatingDeserializer1);
      StdDelegatingDeserializer<EnumMap<FormatStyle, Date>> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<EnumMap<FormatStyle, Date>>(stdDelegatingDeserializer2);
      Converter<Date, Date> converter3 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer4 = new StdDelegatingDeserializer<Date>(converter3);
      Converter<Object, Date> converter4 = stdDelegatingDeserializer4._converter;
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer5 = stdDelegatingDeserializer4.withDelegate(converter4, (JavaType) null, stdDelegatingDeserializer1);
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, (BufferRecycler) null, contentReference0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 109, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)10, 0, 256, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter.Inclusion tokenFilter_Inclusion0 = TokenFilter.Inclusion.INCLUDE_NON_NULL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, tokenFilter_Inclusion0, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer5._parseShortPrimitive(filteringParserDelegate0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      AtomicLongDeserializer atomicLongDeserializer0 = new AtomicLongDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      CoercionAction coercionAction0 = CoercionAction.TryConvert;
      Class<Date> class0 = Date.class;
      atomicLongDeserializer0._checkCoercionFail(defaultDeserializationContext_Impl0, coercionAction0, class0, (Object) null, "]dO]%.Y");
      Class<Date> class1 = Date.class;
      atomicLongDeserializer0._coercedTypeDesc(class1);
      atomicLongDeserializer0.logicalType();
      JavaType javaType0 = null;
      Class<Date> class2 = Date.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.util.Date with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>((Converter<?, Date>) null);
      Converter<Object, Date> converter0 = stdDelegatingDeserializer0._converter;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Date> class0 = Date.class;
      typeFactory0.constructArrayType(class0);
      Class<Date> class1 = Date.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate((Converter<Object, Date>) null, collectionLikeType0, dateDeserializers_DateDeserializer0);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Date>(stdDelegatingDeserializer1);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer2._isFalse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Converter<Object, IsoEra> converter0 = (Converter<Object, IsoEra>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<IsoEra> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<IsoEra>(converter0, (JavaType) null, (JsonDeserializer<?>) null);
      StdDelegatingDeserializer<IsoEra> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<IsoEra>(stdDelegatingDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._parseIntPrimitive(defaultDeserializationContext0, "}he.Y\"B>o8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      Class<Base64Variant.PaddingReadBehaviour> class0 = Base64Variant.PaddingReadBehaviour.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getWithArgsCreator();
      annotationIntrospector1.findSerializationSortAlphabetically((Annotated) null);
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser1 = new PrimitiveArrayDeserializers.ShortDeser(primitiveArrayDeserializers_ShortDeser0, primitiveArrayDeserializers_ShortDeser0, (Boolean) null);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      short short0 = (short)29;
      shortArray0[1] = (short)29;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)4095;
      annotationIntrospector1.findKeySerializer((Annotated) null);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-2341);
      primitiveArrayDeserializers_ShortDeser1._concat(shortArray0, shortArray0);
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      Locale locale0 = Locale.ITALIAN;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_SqlDateDeserializer0._parseIntPrimitive(defaultDeserializationContext0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      Converter<Date, EnumMap<JsonFactory.Feature, Date>> converter0 = (Converter<Date, EnumMap<JsonFactory.Feature, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<JsonFactory.Feature, Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<JsonFactory.Feature, Date>>(converter0);
      StdDelegatingDeserializer<EnumMap<JsonFactory.Feature, Date>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<EnumMap<JsonFactory.Feature, Date>>(stdDelegatingDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._deserializeFromString((JsonParser) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FromStringDeserializer.types();
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, (BufferRecycler) null, contentReference0, false);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.deactivateDefaultTyping();
      JsonFactory jsonFactory1 = new JsonFactory();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot((TokenStreamFactory) jsonFactory1, 20000000);
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\'';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 256, pipedReader0, objectMapper2, charsToNameCanonicalizer0, charArray0, 5, 7, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      Class<IsoEra> class0 = IsoEra.class;
      // Undeclared exception!
      try { 
        numberDeserializers_LongDeserializer0._parseBoolean(jsonParser0, deserializationContext0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-918.4F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      JsonNodeFeature jsonNodeFeature0 = JsonNodeFeature.WRITE_NULL_PROPERTIES;
      ObjectMapper objectMapper3 = objectMapper2.configure((DatatypeFeature) jsonNodeFeature0, false);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      primitiveArrayDeserializers_FloatDeser0.findValueNullProvider(deserializationContext0, (SettableBeanProperty) null, (PropertyMetadata) null);
      floatArray0[3] = 598.9204F;
      float[] floatArray1 = new float[0];
      primitiveArrayDeserializers_FloatDeser0._concat(floatArray0, floatArray1);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      short[] shortArray0 = primitiveArrayDeserializers_ShortDeser0._constructEmpty();
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      Boolean boolean0 = Boolean.valueOf("Could not resolve type id '%s' as a subtype of %s");
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser1 = new PrimitiveArrayDeserializers.FloatDeser(primitiveArrayDeserializers_FloatDeser0, primitiveArrayDeserializers_FloatDeser0, boolean0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      NullNode nullNode0 = NullNode.getInstance();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(nullNode0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS;
      JsonParser jsonParser1 = jsonParserSequence0.enable(jsonParser_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser1.handleSingleElementUnwrapped(jsonParser1, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0.handleSingleElementUnwrapped((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0);
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer1 = new DateDeserializers.SqlDateDeserializer(dateDeserializers_SqlDateDeserializer0, dateFormat0, ",Kq'fceS#(%");
      NumberDeserializers.BigDecimalDeserializer numberDeserializers_BigDecimalDeserializer0 = new NumberDeserializers.BigDecimalDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonParser jsonParser0 = null;
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        numberDeserializers_BigDecimalDeserializer0._parseBooleanPrimitive(defaultDeserializationContext0, (JsonParser) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      UntypedObjectDeserializerNR untypedObjectDeserializerNR0 = new UntypedObjectDeserializerNR();
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      boolean boolean0 = true;
      JsonNodeDeserializer jsonNodeDeserializer1 = new JsonNodeDeserializer(jsonNodeDeserializer0, false, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = "";
      // Undeclared exception!
      try { 
        jsonNodeDeserializer0._parseInteger(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      TokenBufferDeserializer tokenBufferDeserializer0 = new TokenBufferDeserializer();
      StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
      Class<Date> class0 = Date.class;
      stringArrayDeserializer0._coercedTypeDesc(class0);
      stringArrayDeserializer0.logicalType();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      assertEquals(AccessPattern.CONSTANT, dateDeserializers_DateDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = new NumberDeserializers.NumberDeserializer();
      numberDeserializers_NumberDeserializer0.logicalType();
      Converter<Date, LinkedList<Date>> converter0 = (Converter<Date, LinkedList<Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<Date>>(converter0);
      Converter<Object, LinkedList<Date>> converter1 = (Converter<Object, LinkedList<Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<Date>> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate(converter1, (JavaType) null, numberDeserializers_NumberDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper2 = objectMapper1.addHandler(deserializationProblemHandler0);
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      ObjectMapper objectMapper3 = objectMapper2.setDateFormat(dateFormat0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      stdDelegatingDeserializer1.getEmptyValue(deserializationContext0);
      StdDelegatingDeserializer<LinkedList<Date>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<LinkedList<Date>>(stdDelegatingDeserializer1);
      JavaType javaType0 = stdDelegatingDeserializer2.getValueType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = JsonNodeDeserializer.ObjectDeserializer.getInstance();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      LogicalType logicalType0 = LogicalType.Binary;
      Class<JsonParser.Feature> class0 = JsonParser.Feature.class;
      // Undeclared exception!
      try { 
        jsonNodeDeserializer_ObjectDeserializer0._checkFromStringCoercion(defaultDeserializationContext0, "P=+@+[]", logicalType0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        StdDeserializer._parseDouble((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Converter<Date, EnumMap<JsonParser.Feature, JsonParser.Feature>> converter0 = (Converter<Date, EnumMap<JsonParser.Feature, JsonParser.Feature>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<JsonParser.Feature, JsonParser.Feature>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<JsonParser.Feature, JsonParser.Feature>>(converter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature1);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseBytePrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        StdDeserializer._parseDouble("False", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UntypedObjectDeserializerNR untypedObjectDeserializerNR0 = new UntypedObjectDeserializerNR(false);
      FromStringDeserializer.StringBufferDeserializer fromStringDeserializer_StringBufferDeserializer0 = new FromStringDeserializer.StringBufferDeserializer();
      fromStringDeserializer_StringBufferDeserializer0.logicalType();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      Converter<Object, EnumMap<StreamReadCapability, Date>> converter0 = (Converter<Object, EnumMap<StreamReadCapability, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<StreamReadCapability, Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<StreamReadCapability, Date>>(converter0, (JavaType) null, fromStringDeserializer_StringBufferDeserializer0);
      StdDelegatingDeserializer<EnumMap<StreamReadCapability, Date>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<EnumMap<StreamReadCapability, Date>>(stdDelegatingDeserializer0);
      Converter<Object, EnumMap<StreamReadCapability, Date>> converter1 = (Converter<Object, EnumMap<StreamReadCapability, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      stdDelegatingDeserializer1.withDelegate(converter1, (JavaType) null, nullifyingDeserializer0);
      DeserializationContext deserializationContext0 = null;
      boolean boolean0 = false;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory((SerializerFactory) null);
      DeserializationContext deserializationContext1 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        nullifyingDeserializer0.getValueType(deserializationContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Date> class0 = Date.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      fromStringDeserializer_Std0.getEmptyValue((DeserializationContext) defaultDeserializationContext0);
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_IntDeser0._verifyNullForScalarCoercion(defaultDeserializationContext0, "`5qOn%o|1?BY#q}Y:%y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Converter<TextStyle, Date> converter0 = (Converter<TextStyle, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      DeserializationContext deserializationContext0 = null;
      String string0 = "PaZpl>EP`BM9:M)<";
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseInteger((DeserializationContext) null, "PaZpl>EP`BM9:M)<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      int int0 = 0;
      MockDateFormat.getDateInstance(0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        dateDeserializers_TimestampDeserializer0._checkIntToFloatCoercion(jsonParser0, defaultDeserializationContext0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      String string0 = null;
      // Undeclared exception!
      try { 
        StdDeserializer._parseDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AtomicLongDeserializer atomicLongDeserializer0 = new AtomicLongDeserializer();
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      atomicLongDeserializer0._checkTextualNull((DeserializationContext) null, "");
      FromStringDeserializer.StringBuilderDeserializer fromStringDeserializer_StringBuilderDeserializer0 = new FromStringDeserializer.StringBuilderDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        fromStringDeserializer_StringBuilderDeserializer0.replaceDelegatee(atomicLongDeserializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      dateDeserializers_DateDeserializer0.isDefaultDeserializer(numberDeserializers_DoubleDeserializer0);
      FromStringDeserializer.StringBuilderDeserializer fromStringDeserializer_StringBuilderDeserializer0 = new FromStringDeserializer.StringBuilderDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Object object0 = fromStringDeserializer_StringBuilderDeserializer0.getEmptyValue((DeserializationContext) defaultDeserializationContext0);
      assertEquals("", object0.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createNonBlockingByteBufferParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      String string0 = null;
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_IntDeser0._parseLong(defaultDeserializationContext_Impl0, "6Cy+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      AtomicIntegerDeserializer atomicIntegerDeserializer0 = new AtomicIntegerDeserializer();
      PrimitiveArrayDeserializers.CharDeser primitiveArrayDeserializers_CharDeser0 = new PrimitiveArrayDeserializers.CharDeser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CoreXMLDeserializers coreXMLDeserializers0 = new CoreXMLDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(coreXMLDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      boolean boolean0 = true;
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      try { 
        primitiveArrayDeserializers_BooleanDeser0._reportFailedNullCoerce(defaultDeserializationContext0, true, jsonInclude_Include0, "Mismatch between `properties` size (%d), `filteredProperties` (%s): should have as many (or `null` for latter)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce Mismatch between `properties` size (%d), `filteredProperties` (%s): should have as many (or `null` for latter) to Null value as element of `boolean[]` (enable `Include.NON_NULL` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      JsonNodeDeserializer jsonNodeDeserializer1 = new JsonNodeDeserializer(jsonNodeDeserializer0, false, false);
      FromStringDeserializer.types();
      Class<JsonParser.Feature> class0 = JsonParser.Feature.class;
      FromStringDeserializer.findDeserializer(class0);
      StdDelegatingDeserializer<EnumMap<JsonParser.Feature, JsonParser.Feature>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<JsonParser.Feature, JsonParser.Feature>>((Converter<?, EnumMap<JsonParser.Feature, JsonParser.Feature>>) null);
      StdDelegatingDeserializer<EnumMap<JsonParser.Feature, JsonParser.Feature>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<EnumMap<JsonParser.Feature, JsonParser.Feature>>(stdDelegatingDeserializer0);
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._parseDoublePrimitive((DeserializationContext) null, "8||X;:N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      AtomicBooleanDeserializer atomicBooleanDeserializer0 = new AtomicBooleanDeserializer();
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      String string0 = "NaN";
      stringDeserializer0._parseDoublePrimitive(defaultDeserializationContext0, "NaN");
      stringDeserializer0.logicalType();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      annotationIntrospector0.hasAnySetter((Annotated) null);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser1 = new PrimitiveArrayDeserializers.FloatDeser(primitiveArrayDeserializers_FloatDeser0, primitiveArrayDeserializers_FloatDeser0, (Boolean) null);
      primitiveArrayDeserializers_FloatDeser1._constructEmpty();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      // Undeclared exception!
      try { 
        MockDateFormat.getDateTimeInstance(1899, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 48
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper3 = objectMapper2.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      JsonParser jsonParser0 = objectMapper3.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_IntDeser0._parseBytePrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      String string0 = "FAIL";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CoreXMLDeserializers coreXMLDeserializers0 = new CoreXMLDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(coreXMLDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseDate("FAIL", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Date> class0 = Date.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-1763));
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      JsonFactory jsonFactory2 = jsonFactory1.setErrorReportConfiguration(errorReportConfiguration0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      JsonFactory jsonFactory4 = jsonFactory3.setStreamReadConstraints(streamReadConstraints0);
      jsonFactory4.rebuild();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)111;
      jsonFactory4.createParser(byteArray0);
      JsonParser jsonParser0 = jsonFactory4.createNonBlockingByteBufferParser();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        fromStringDeserializer_Std0._failDoubleToIntCoercion(jsonParser0, deserializationContext0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce a floating-point value ('null') into JSON (enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      byteBufferDeserializer0.logicalType();
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
      numberDeserializers_NumberDeserializer0.logicalType();
      Converter<Date, StreamReadCapability> converter0 = (Converter<Date, StreamReadCapability>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<StreamReadCapability> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<StreamReadCapability>(converter0);
      StdDelegatingDeserializer<StreamReadCapability> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<StreamReadCapability>(stdDelegatingDeserializer0);
      stdDelegatingDeserializer1._isEmptyOrTextualNull("");
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      stringDeserializer0.logicalType();
      try { 
        StdDeserializer._parseDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._coerceEmptyString(defaultDeserializationContext0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
      Locale locale0 = Locale.ENGLISH;
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      ObjectMapper objectMapper3 = objectMapper2.findAndRegisterModules();
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      deserializationFeatureArray0[2] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      deserializationFeatureArray0[3] = deserializationFeature2;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      objectMapper2.reader(deserializationFeature0, deserializationFeatureArray0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseInteger(deserializationContext0, "Cannot coerce String value (\"%s\") to %s (but might if coercion using `CoercionConfig` was enabled)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseLongPrimitive((DeserializationContext) null, "false");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer1 = new DateDeserializers.SqlDateDeserializer(dateDeserializers_SqlDateDeserializer0, dateFormat0, "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      StringReader stringReader0 = new StringReader("");
      JsonParser jsonParser0 = objectMapper1.createParser((Reader) stringReader0);
      // Undeclared exception!
      try { 
        dateDeserializers_SqlDateDeserializer1.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = '%';
      charArray0[2] = ',';
      charArray0[3] = '#';
      charArray0[4] = 'x';
      charArray0[5] = 'N';
      charArray0[6] = 'g';
      charArray0[7] = 't';
      charArray0[8] = 'V';
      JsonParser jsonParser0 = objectReader0.createParser(charArray0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.overrideStdFeatures(0, 0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ByteDeser0._parseDoublePrimitive(jsonParser1, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      AtomicLongDeserializer atomicLongDeserializer0 = new AtomicLongDeserializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TimeZone timeZone0 = TimeZone.getTimeZone("3");
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultLeniency((Boolean) null);
      JsonParser jsonParser0 = objectMapper3.createNonBlockingByteArrayParser();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        atomicLongDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)25;
      primitiveArrayDeserializers_ShortDeser0._concat(shortArray0, shortArray0);
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference((Object) null);
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot((TokenStreamFactory) jsonFactory0, 15);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      MockDate mockDate0 = new MockDate();
      ContentReference contentReference0 = ContentReference.construct(false, (Object) mockDate0, 2, 2, errorReportConfiguration0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      int int0 = 151;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)57;
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      SerialBlob serialBlob1 = new SerialBlob(serialBlob0);
      serialBlob1.getBinaryStream();
      JsonFactory jsonFactory0 = null;
      try {
        jsonFactory0 = new JsonFactory((JsonFactoryBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<EnumMap> class0 = EnumMap.class;
      Class<Date> class1 = Date.class;
      Class<Date> class2 = Date.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      JavaType javaType0 = TypeFactory.unknownType();
      String string0 = "com.fasterxml.jackson.databind.deser.std.NumberDeserializers$LongDeserializer";
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$LongDeserializer", "com.fasterxml.jackson.databind.deser.std.NumberDeserializers$LongDeserializer");
      ObjectIdGenerator<Date> objectIdGenerator0 = (ObjectIdGenerator<Date>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator0, false);
      SimpleType simpleType0 = (SimpleType)objectIdWriter0.idType;
      mapType0.withKeyType(simpleType0);
      Class<ConstructorDetector.SingleArgConstructor> class3 = ConstructorDetector.SingleArgConstructor.class;
      Class<Date> class4 = Date.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class4, (List<JavaType>) arrayList0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = objectIdWriter0.idType;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = (JavaType) mapType0;
      javaTypeArray0[5] = objectIdWriter0.idType;
      CollectionType collectionType0 = CollectionType.construct(class3, typeBindings0, objectIdWriter0.idType, javaTypeArray0, javaTypeArray0[2]);
      CollectionType collectionType1 = collectionType0.withValueHandler(arrayList0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeResolutionContext.Empty typeResolutionContext_Empty0 = new TypeResolutionContext.Empty(typeFactory0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Empty0, class4, "com.fasterxml.jackson.databind.deser.std.NumberDeserializers$LongDeserializer", javaTypeArray0[0]);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.keyDeserializerInstance(virtualAnnotatedMember0, arrayList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned key deserializer definition of type java.util.ArrayList; expected type KeyDeserializer or Class<KeyDeserializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Converter<Calendar, List<Calendar>> converter0 = (Converter<Calendar, List<Calendar>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<Calendar>>(converter0);
      Converter<Object, List<Calendar>> converter1 = stdDelegatingDeserializer0._converter;
      StdDelegatingDeserializer<List<Calendar>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<List<Calendar>>(converter1, (JavaType) null, stdDelegatingDeserializer0);
      StdDelegatingDeserializer<List<Calendar>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<List<Calendar>>(stdDelegatingDeserializer1);
      JsonDeserializer<List<Calendar>> jsonDeserializer0 = stdDelegatingDeserializer2.replaceDelegatee(stdDelegatingDeserializer0);
      assertFalse(jsonDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      String string0 = "Qam6trytm'";
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      boolean boolean0 = false;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      objectMapper1.setNodeFactory(jsonNodeFactory0);
      // Undeclared exception!
      try { 
        MockDateFormat.getDateTimeInstance(32, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 32
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenBufferDeserializer tokenBufferDeserializer0 = new TokenBufferDeserializer();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      Converter<Object, List<DayOfWeek>> converter0 = (Converter<Object, List<DayOfWeek>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Date> class0 = Date.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      StdDelegatingDeserializer<List<DayOfWeek>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<DayOfWeek>>(converter0, resolvedRecursiveType0, primitiveArrayDeserializers_DoubleDeser0);
      Converter<Object, List<DayOfWeek>> converter1 = (Converter<Object, List<DayOfWeek>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<DayOfWeek>> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate(converter1, resolvedRecursiveType0, tokenBufferDeserializer0);
      StdDelegatingDeserializer<List<DayOfWeek>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<List<DayOfWeek>>(stdDelegatingDeserializer1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Object object0 = stdDelegatingDeserializer2._coerceNullToken(defaultDeserializationContext0, true);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = JsonNodeDeserializer.ArrayDeserializer._instance;
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_DoubleDeser0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Date> class0 = Date.class;
      FromStringDeserializer.findDeserializer(class0);
      JavaType javaType0 = null;
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer((JavaType) null, (JavaType) null);
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0, (JsonDeserializer<?>) null);
      UntypedObjectDeserializer untypedObjectDeserializer2 = new UntypedObjectDeserializer(untypedObjectDeserializer1, true);
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = JsonNodeDeserializer.ArrayDeserializer._instance;
      boolean boolean0 = false;
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer1 = new JsonNodeDeserializer.ArrayDeserializer(jsonNodeDeserializer_ArrayDeserializer0, false, false);
      boolean boolean1 = true;
      jsonNodeDeserializer_ArrayDeserializer1._createWithMerge(false, true);
      Converter<Date, List<Date>> converter0 = (Converter<Date, List<Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<Date>>(converter0);
      StdDelegatingDeserializer<List<Date>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<List<Date>>(stdDelegatingDeserializer0);
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1.getNullValue((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Converter<Date, EnumMap<DayOfWeek, Date>> converter0 = (Converter<Date, EnumMap<DayOfWeek, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<DayOfWeek, Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<DayOfWeek, Date>>(converter0);
      Converter<Object, DayOfWeek> converter1 = (Converter<Object, DayOfWeek>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<DayOfWeek> class0 = DayOfWeek.class;
      TypeBindings.emptyBindings();
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2159);
      // Undeclared exception!
      try { 
        placeholderForType0.withHandlersFrom((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer(dateDeserializers_DateDeserializer0);
      JavaType javaType0 = null;
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer((JavaType) null, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext0);
      HashMap<String, SettableBeanProperty> hashMap0 = new HashMap<String, SettableBeanProperty>(160);
      AbstractDeserializer abstractDeserializer0 = null;
      try {
        abstractDeserializer0 = new AbstractDeserializer(beanDeserializerBuilder0, basicBeanDescription0, hashMap0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Date> class0 = Date.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 853);
      Boolean boolean0 = Boolean.FALSE;
      StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer(fromStringDeserializer_Std0, fromStringDeserializer_Std0, boolean0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Object object0 = stringArrayDeserializer0.getEmptyValue((DeserializationContext) defaultDeserializationContext0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>((Converter<?, Date>) null);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Date>(stdDelegatingDeserializer0);
      Converter<Object, Date> converter0 = (Converter<Object, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      JavaType javaType0 = TypeFactory.unknownType();
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer2 = stdDelegatingDeserializer1.withDelegate(converter0, javaType0, stdDelegatingDeserializer0);
      Converter<Object, Date> converter1 = stdDelegatingDeserializer2._converter;
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<Date>(converter1, javaType0, stdDelegatingDeserializer1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)22;
      // Undeclared exception!
      try { 
        objectMapper3.createParser(byteArray0, (int) (byte) (-103), (int) (byte) (-103));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (-103) and/or 'len' (-103) arguments for `byte[]` of length 7
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Float> class0 = Float.class;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, (Float) null);
      NumberDeserializers.BigDecimalDeserializer numberDeserializers_BigDecimalDeserializer0 = NumberDeserializers.BigDecimalDeserializer.instance;
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      assertEquals(AccessPattern.DYNAMIC, jsonNodeDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      MockDateFormat.getInstance();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector1);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.USE_FAST_DOUBLE_WRITER;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_HEX_UPPER_CASE;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._verifyNullForPrimitiveCoercion(deserializationContext0, "R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser1 = new PrimitiveArrayDeserializers.ShortDeser(primitiveArrayDeserializers_ShortDeser0, primitiveArrayDeserializers_ShortDeser0, (Boolean) null);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)57;
      shortArray0[1] = (short)0;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      primitiveArrayDeserializers_ShortDeser0.getEmptyValue((DeserializationContext) defaultDeserializationContext0);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)116;
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ShortDeser1.handleSingleElementUnwrapped((JsonParser) null, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer(resolvedRecursiveType0, resolvedRecursiveType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      untypedObjectDeserializer0.getEmptyValue((DeserializationContext) defaultDeserializationContext_Impl0);
      untypedObjectDeserializer0.logicalType();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = JsonNodeDeserializer.ArrayDeserializer._instance;
      defaultDeserializationContext_Impl0.getParser();
      // Undeclared exception!
      try { 
        jsonNodeDeserializer_ArrayDeserializer0.deserialize((JsonParser) null, (DeserializationContext) defaultDeserializationContext_Impl0, (ArrayNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer$ArrayDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Converter<Date, DayOfWeek> converter0 = (Converter<Date, DayOfWeek>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<DayOfWeek> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DayOfWeek>(converter0);
      JsonParser jsonParser0 = null;
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FromStringDeserializer.StringBufferDeserializer fromStringDeserializer_StringBufferDeserializer0 = new FromStringDeserializer.StringBufferDeserializer();
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = null;
      try {
        stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>((StdDelegatingDeserializer<Date>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        jsonNodeDeserializer0.getNullValue(deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      ContentReference contentReference0 = ContentReference.construct(true, (Object) dayOfWeek0, (-3249), 55, errorReportConfiguration0);
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1000, (-279));
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, (-32768), 1000, 25, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      AtomicBooleanDeserializer atomicBooleanDeserializer0 = new AtomicBooleanDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      atomicBooleanDeserializer0.getEmptyValue((DeserializationContext) defaultDeserializationContext_Impl0);
      Converter<Object, DayOfWeek> converter0 = (Converter<Object, DayOfWeek>) mock(Converter.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      IterationType iterationType0 = IterationType.upgradeFrom(placeholderForType0, placeholderForType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(iterationType0, placeholderForType0);
      StdDelegatingDeserializer<DayOfWeek> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DayOfWeek>(converter0, collectionLikeType0, atomicBooleanDeserializer0);
      StdDelegatingDeserializer<DayOfWeek> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate((Converter<Object, DayOfWeek>) null, placeholderForType0, atomicBooleanDeserializer0);
      StdDelegatingDeserializer<DayOfWeek> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<DayOfWeek>(stdDelegatingDeserializer1);
      boolean boolean0 = stdDelegatingDeserializer2._shortOverflow((-2308));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FromStringDeserializer.types();
      FromStringDeserializer.StringBufferDeserializer fromStringDeserializer_StringBufferDeserializer0 = new FromStringDeserializer.StringBufferDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object object0 = fromStringDeserializer_StringBufferDeserializer0._deserialize("CharMatcher.and(", defaultDeserializationContext_Impl0);
      Converter<Date, Date> converter0 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      Converter<Object, Date> converter1 = stdDelegatingDeserializer0._converter;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      Class<DayOfWeek> class0 = DayOfWeek.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      MockDate mockDate0 = new MockDate((-458), 4, 4, 0, 4, (-458));
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0, object0, (Object) mockDate0);
      IterationType iterationType0 = IterationType.upgradeFrom(arrayType0, arrayType0);
      MockDate mockDate1 = new MockDate(2217, (-458), 4, 0, 2217);
      IterationType iterationType1 = iterationType0.withContentTypeHandler(mockDate1);
      IterationType iterationType2 = iterationType1.withStaticTyping();
      IterationType iterationType3 = iterationType2.withValueHandler(object0);
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      IterationType iterationType4 = iterationType3.withTypeHandler(dayOfWeek0);
      JavaType javaType0 = iterationType4.refine(class0, typeBindings0, iterationType3, javaTypeArray0);
      javaTypeArray0[3] = javaType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[0]);
      CollectionType collectionType1 = collectionType0.withValueHandler(dayOfWeek0);
      JavaType javaType1 = objectMapper2.constructType((Type) collectionType1);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate(converter1, javaType1, fromStringDeserializer_StringBufferDeserializer0);
      assertEquals(AccessPattern.CONSTANT, stdDelegatingDeserializer1.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Converter<Date, DayOfWeek> converter0 = (Converter<Date, DayOfWeek>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<DayOfWeek> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DayOfWeek>(converter0);
      stdDelegatingDeserializer0.getValueClass();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      SerializationFeature serializationFeature1 = SerializationFeature.WRAP_ROOT_VALUE;
      serializationFeatureArray0[0] = serializationFeature1;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      SerializationFeature serializationFeature2 = SerializationFeature.CLOSE_CLOSEABLE;
      serializationFeatureArray0[4] = serializationFeature2;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0, serializationFeatureArray0);
      objectMapper3.getDeserializationContext();
      CoercionAction coercionAction0 = CoercionAction.Fail;
      Class<DayOfWeek> class0 = DayOfWeek.class;
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("uSDycCfv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      DayOfWeek dayOfWeek1 = DayOfWeek.SUNDAY;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(dayOfWeek0, dayOfWeek1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Converter<Object, DayOfWeek> converter0 = (Converter<Object, DayOfWeek>) mock(Converter.class, new ViolatedAssumptionAnswer());
      JavaType javaType0 = null;
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = "O.tp\"VxQ0)_Qq8P";
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ConstructorDetector constructorDetector0 = ConstructorDetector.USE_DELEGATING;
      ObjectMapper objectMapper2 = objectMapper1.setConstructorDetector(constructorDetector0);
      ObjectMapper objectMapper3 = objectMapper2.setNodeFactory((JsonNodeFactory) null);
      // Undeclared exception!
      try { 
        objectMapper3.createParser((DataInput) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"content\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      JavaType javaType0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = Boolean.TRUE;
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = new NumberDeserializers.BooleanDeserializer(class0, boolean0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser1 = new PrimitiveArrayDeserializers.BooleanDeser(primitiveArrayDeserializers_BooleanDeser0, primitiveArrayDeserializers_BooleanDeser0, boolean0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      ObjectMapper objectMapper3 = objectMapper2.findAndRegisterModules();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper4 = objectMapper3.setAnnotationIntrospector(annotationIntrospector0);
      DeserializationContext deserializationContext0 = objectMapper4.getDeserializationContext();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser1._findCoercionFromEmptyString(deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = JsonNodeDeserializer.ArrayDeserializer._instance;
      boolean boolean0 = false;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter.Inclusion tokenFilter_Inclusion0 = TokenFilter.Inclusion.INCLUDE_NON_NULL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, tokenFilter_Inclusion0, false);
      int int0 = 1050;
      int int1 = (-4837);
      CoercionAction coercionAction0 = CoercionAction.Fail;
      Class<Date> class0 = Date.class;
      try { 
        jsonNodeDeserializer_ArrayDeserializer0._deserializeFromEmptyString((JsonParser) null, defaultDeserializationContext_Impl0, coercionAction0, class0, "DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce empty String (\"\") to `java.util.Date` value (but could if coercion was enabled using `CoercionConfig`)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer((-1));
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, integer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      JsonFactory jsonFactory1 = jsonFactory0.setErrorReportConfiguration(errorReportConfiguration0);
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      JsonFactory jsonFactory2 = jsonFactory1.setStreamReadConstraints(streamReadConstraints0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonFactory2.enable(jsonGenerator_Feature0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Converter<Object, EnumMap<DayOfWeek, DayOfWeek>> converter0 = (Converter<Object, EnumMap<DayOfWeek, DayOfWeek>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      TypeReference<Date> typeReference0 = (TypeReference<Date>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper2.constructType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 2505);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Object object0 = fromStringDeserializer_Std0._deserializeFromEmptyStringDefault(defaultDeserializationContext0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = new JsonNodeDeserializer.ObjectDeserializer();
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer1 = new JsonNodeDeserializer.ObjectDeserializer(jsonNodeDeserializer_ObjectDeserializer0, false, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      // Undeclared exception!
      try { 
        jsonFactory0.setStreamWriteConstraints((StreamWriteConstraints) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = new JsonNodeDeserializer.ArrayDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.setPolymorphicTypeValidator(defaultBaseTypeLimitingValidator0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      ObjectReader objectReader0 = objectMapper2.reader(deserializationFeature0);
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = '4';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      charArray0[7] = '\"';
      // Undeclared exception!
      try { 
        objectReader0.createParser(charArray0, (-2578), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (-2578) and/or 'len' (0) arguments for `char[]` of length 8
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      boolean boolean0 = false;
      ContentReference contentReference0 = ContentReference.construct(false, (Object) null, errorReportConfiguration0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, (BufferRecycler) null, contentReference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser1 = new PrimitiveArrayDeserializers.DoubleDeser(primitiveArrayDeserializers_DoubleDeser0, primitiveArrayDeserializers_DoubleDeser0, (Boolean) null);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_DoubleDeser1._concat((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$DoubleDeser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      UntypedObjectDeserializerNR untypedObjectDeserializerNR0 = new UntypedObjectDeserializerNR();
      Converter<DayOfWeek, Date> converter0 = (Converter<DayOfWeek, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Date>(stdDelegatingDeserializer0);
      Converter<Object, Date> converter1 = stdDelegatingDeserializer1._converter;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Date>(converter1, (JavaType) null, stdDelegatingDeserializer1);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer2._coercedTypeDesc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      Class<DayOfWeek> class0 = DayOfWeek.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 1395);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<EnumMap> class1 = EnumMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MapType mapType1 = mapType0.withStaticTyping();
      MockDate mockDate0 = new MockDate(335, 8, 2, 9, 5, (-1110));
      MapType mapType2 = mapType1.withTypeHandler(mockDate0);
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer(mapType2, mapType2);
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, true);
      JsonDeserializer<Object> jsonDeserializer0 = untypedObjectDeserializer1._stringDeserializer;
      TypeDeserializer typeDeserializer0 = null;
      ObjectArrayDeserializer objectArrayDeserializer0 = null;
      try {
        objectArrayDeserializer0 = new ObjectArrayDeserializer(mapType2, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.MapType cannot be cast to com.fasterxml.jackson.databind.type.ArrayType
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Date> class0 = Date.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0, javaType0);
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      mapType0.withValueHandler(dayOfWeek0);
      int int0 = (-351);
      // Undeclared exception!
      try { 
        DayOfWeek.of((-351));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfWeek: -351
         //
         verifyException("java.time.DayOfWeek", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      assertEquals(LogicalType.OtherScalar, uUIDDeserializer0.logicalType());
      
      String string0 = "u";
      int int0 = 1732;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Converter<DayOfWeek, Date> converter0 = (Converter<DayOfWeek, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseShortPrimitive((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Converter<DayOfWeek, DayOfWeek> converter0 = (Converter<DayOfWeek, DayOfWeek>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<DayOfWeek> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DayOfWeek>(converter0);
      StdDelegatingDeserializer<DayOfWeek> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<DayOfWeek>(stdDelegatingDeserializer0);
      stdDelegatingDeserializer0.replaceDelegatee(stdDelegatingDeserializer1);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.logicalType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Converter<Object, DayOfWeek> converter0 = (Converter<Object, DayOfWeek>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader1 = objectReader0.forType(javaType0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      JavaType javaType1 = objectMapper0.constructType((Type) javaType0);
      Class<Date> class0 = Date.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType1);
      JavaType javaType2 = typeFactory0.resolveMemberType(javaType1, typeBindings0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      StdDelegatingDeserializer<DayOfWeek> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DayOfWeek>(converter0, javaType2, dateDeserializers_DateDeserializer0);
      JsonDeserializer<DayOfWeek> jsonDeserializer0 = stdDelegatingDeserializer0.replaceDelegatee(dateDeserializers_DateDeserializer0);
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = JsonNodeDeserializer.ObjectDeserializer.getInstance();
      boolean boolean0 = true;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      JsonFactory jsonFactory1 = jsonFactory0.setStreamWriteConstraints(streamWriteConstraints0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      charArray0[7] = '\"';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        jsonNodeDeserializer_ObjectDeserializer0._deserializeFromArray(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PrimitiveArrayDeserializers.CharDeser primitiveArrayDeserializers_CharDeser0 = new PrimitiveArrayDeserializers.CharDeser();
      JavaType javaType0 = TypeFactory.unknownType();
      EnumSetDeserializer enumSetDeserializer0 = null;
      try {
        enumSetDeserializer0 = new EnumSetDeserializer(javaType0, primitiveArrayDeserializers_CharDeser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type [simple type, class java.lang.Object] not Java Enum type
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      DateFormat dateFormat0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      JsonParser jsonParser0 = objectReader0.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser1 = jsonParserSequence0.disable(jsonParser_Feature0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._verifyNumberForScalarCoercion(defaultDeserializationContext_Impl0, jsonParser1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      Class<Double> class0 = Double.class;
      Double double0 = new Double(0.0);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = new NumberDeserializers.DoubleDeserializer(class0, double0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)86;
      // Undeclared exception!
      try { 
        jsonFactory1.createParser(byteArray0, (int) (byte)45, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (45) and/or 'len' (0) arguments for `byte[]` of length 7
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      AtomicBooleanDeserializer atomicBooleanDeserializer0 = new AtomicBooleanDeserializer();
      atomicBooleanDeserializer0.logicalType();
      Converter<Date, DayOfWeek> converter0 = (Converter<Date, DayOfWeek>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<DayOfWeek> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DayOfWeek>(converter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      JsonSetter.Value.merge((JsonSetter.Value) null, (JsonSetter.Value) null);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultSetterInfo((JsonSetter.Value) null);
      DatatypeFeatures datatypeFeatures0 = DatatypeFeatures.defaultFeatures();
      EnumFeature enumFeature0 = EnumFeature.WRITE_ENUMS_TO_LOWERCASE;
      datatypeFeatures0.getExplicitState(enumFeature0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultLeniency((Boolean) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)10;
      // Undeclared exception!
      try { 
        objectMapper3.createParser(byteArray0, (int) (byte)4, (int) (byte)10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (4) and/or 'len' (10) arguments for `byte[]` of length 4
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      AtomicBooleanDeserializer atomicBooleanDeserializer0 = new AtomicBooleanDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      JsonParser jsonParser0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      // Undeclared exception!
      try { 
        atomicBooleanDeserializer0._parseLongPrimitive((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.createDummyInstance((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Double double0 = new Double((-2758.0));
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = new NumberDeserializers.DoubleDeserializer(class0, double0);
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      StdDelegatingDeserializer<DayOfWeek> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DayOfWeek>((Converter<?, DayOfWeek>) null);
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Converter<DayOfWeek, List<Date>> converter0 = (Converter<DayOfWeek, List<Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<Date>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<List<Date>>(converter0);
      StdDelegatingDeserializer<List<Date>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<List<Date>>(stdDelegatingDeserializer1);
      stdDelegatingDeserializer0._isIntNumber("j-\"j");
      TypeFactory.defaultInstance();
      Class<List> class1 = List.class;
      Class<DayOfWeek> class2 = DayOfWeek.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      Stack<JavaType> stack0 = new Stack<JavaType>();
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.util.List with 0 type parameters: class expects 1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer((JsonDeserializer<?>) null);
      stackTraceElementDeserializer0.unwrappingDeserializer((NameTransformer) null);
      stackTraceElementDeserializer0.getNullValue((DeserializationContext) null);
      stackTraceElementDeserializer0.constructValue((DeserializationContext) null, "", "", "", 37, "", "", "");
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>((Converter<?, Date>) null);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer(stdDelegatingDeserializer0);
      EnumSetDeserializer enumSetDeserializer0 = null;
      try {
        enumSetDeserializer0 = new EnumSetDeserializer((JavaType) null, stackTraceElementDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = null;
      JsonFormat.Feature[] jsonFormat_FeatureArray0 = new JsonFormat.Feature[4];
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      jsonFormat_FeatureArray0[0] = jsonFormat_Feature0;
      JsonFormat.Feature jsonFormat_Feature1 = JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID;
      jsonFormat_FeatureArray0[1] = jsonFormat_Feature1;
      JsonFormat.Feature jsonFormat_Feature2 = JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      jsonFormat_FeatureArray0[2] = jsonFormat_Feature2;
      JsonFormat.Feature jsonFormat_Feature3 = JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      jsonFormat_FeatureArray0[3] = jsonFormat_Feature3;
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.construct(jsonFormat_FeatureArray0, jsonFormat_FeatureArray0);
      JsonFormat.Feature jsonFormat_Feature4 = JsonFormat.Feature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      jsonFormat_Features0.get(jsonFormat_Feature4);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser1 = null;
      try {
        primitiveArrayDeserializers_BooleanDeser1 = new PrimitiveArrayDeserializers.BooleanDeser((PrimitiveArrayDeserializers.BooleanDeser) null, (NullValueProvider) null, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      JsonParser jsonParser0 = objectMapper3.createParser("JSON");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JSON";
      stringArray0[1] = "JSON";
      stringArray0[2] = "JSON";
      stringArray0[3] = "JSON";
      stringArray0[4] = "JSON";
      stringArray0[5] = "JSON";
      stringArray0[6] = "JSON";
      try { 
        stringArrayDeserializer0._deserializeCustom(jsonParser0, defaultDeserializationContext_Impl0, stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 5] (through reference chain: java.lang.String[7])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      AtomicIntegerDeserializer atomicIntegerDeserializer0 = new AtomicIntegerDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        atomicIntegerDeserializer0._findCoercionFromBlankString(defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      NumberDeserializers.BigDecimalDeserializer numberDeserializers_BigDecimalDeserializer0 = new NumberDeserializers.BigDecimalDeserializer();
      JsonNodeDeserializer jsonNodeDeserializer0 = null;
      try {
        jsonNodeDeserializer0 = new JsonNodeDeserializer((JsonNodeDeserializer) null, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      JsonParser jsonParser0 = objectMapper1.createParser(byteArray0, (int) (byte)3, (int) (byte)3);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      try { 
        jsonParserSequence0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 158)): expected a valid value (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      String string0 = "*$pS";
      Boolean boolean0 = new Boolean("*$pS");
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser1 = new PrimitiveArrayDeserializers.LongDeser(primitiveArrayDeserializers_LongDeser0, primitiveArrayDeserializers_LongDeser0, boolean0);
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer1 = new DateDeserializers.DateDeserializer(dateDeserializers_DateDeserializer0, (DateFormat) null, "*$pS");
      dateDeserializers_DateDeserializer1.withDateFormat((DateFormat) null, "*$pS");
      FromStringDeserializer.types();
      StdDelegatingDeserializer<EnumMap<JsonReadFeature, JsonReadFeature>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<JsonReadFeature, JsonReadFeature>>((Converter<?, EnumMap<JsonReadFeature, JsonReadFeature>>) null);
      Class<JsonReadFeature> class0 = JsonReadFeature.class;
      Stack<String> stack0 = new Stack<String>();
      Stack<JavaType> stack1 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((List<String>) stack0, (List<JavaType>) stack1);
      Class<Date> class1 = Date.class;
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      // Undeclared exception!
      try { 
        CollectionType.construct(class1, typeBindings0, (JavaType) null, javaTypeArray0, javaTypeArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Converter<Object, JsonReadFeature> converter0 = (Converter<Object, JsonReadFeature>) mock(Converter.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1040, 1040);
      typeFactory1.withCache((LookupCache<Object, JavaType>) lRUMap0);
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      UntypedObjectDeserializerNR.instance(false);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer1 = new DateDeserializers.DateDeserializer(dateDeserializers_DateDeserializer0, dateFormat0, "NaN");
      dateDeserializers_DateDeserializer1._hasTextualNull("element of ");
      AtomicBooleanDeserializer atomicBooleanDeserializer0 = new AtomicBooleanDeserializer();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Converter<Date, Date> converter0 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Date>(stdDelegatingDeserializer0);
      Converter<Object, Date> converter1 = stdDelegatingDeserializer1._converter;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(712);
      placeholderForType0.actualType();
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Date>(converter1, (JavaType) null, stdDelegatingDeserializer1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructSpecializedType(placeholderForType0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      NumberDeserializers.BigDecimalDeserializer numberDeserializers_BigDecimalDeserializer0 = new NumberDeserializers.BigDecimalDeserializer();
      JsonParser jsonParser0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone((TimeZone) null);
      NamedType[] namedTypeArray0 = new NamedType[0];
      objectMapper1.registerSubtypes(namedTypeArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        numberDeserializers_BigDecimalDeserializer0._parseShortPrimitive((JsonParser) null, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ArrayBlockingQueueDeserializer arrayBlockingQueueDeserializer0 = null;
      try {
        arrayBlockingQueueDeserializer0 = new ArrayBlockingQueueDeserializer((ArrayBlockingQueueDeserializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Converter<Date, FormatStyle> converter0 = (Converter<Date, FormatStyle>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FormatStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<FormatStyle>(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Date> class0 = Date.class;
      Class<Date> class1 = Date.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      MockDate mockDate0 = new MockDate(0L);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("Trying to call same allocXxx() method second time", (Object) mockDate0);
      objectReader0.with((InjectableValues) injectableValues_Std1);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("q8;\"/y&i9kpu]Sf<1", "Trying to call same allocXxx() method second time");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Trying to call same allocXxx() method second time\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      Class<Date> class0 = Date.class;
      Class<Date> class1 = Date.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      Class<Date> class2 = Date.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(collectionType0, valueInstantiator_Base0, (TypeDeserializer) null, dateDeserializers_DateDeserializer0);
      AtomicReferenceDeserializer atomicReferenceDeserializer1 = atomicReferenceDeserializer0.withResolved((TypeDeserializer) null, dateDeserializers_DateDeserializer0);
      AtomicReferenceDeserializer atomicReferenceDeserializer2 = new AtomicReferenceDeserializer(resolvedRecursiveType0, valueInstantiator_Base0, (TypeDeserializer) null, dateDeserializers_DateDeserializer0);
      AtomicReferenceDeserializer atomicReferenceDeserializer3 = atomicReferenceDeserializer2.withResolved((TypeDeserializer) null, atomicReferenceDeserializer1);
      AtomicReference<Object> atomicReference0 = atomicReferenceDeserializer1.referenceValue(linkedList0);
      MockDate mockDate0 = new MockDate(215, 774, 248, 215, 248);
      atomicReferenceDeserializer3.updateReference(atomicReference0, (Object) mockDate0);
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      jsonFactory0.setErrorReportConfiguration(errorReportConfiguration0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      byte byte0 = (byte)5;
      Byte byte1 = new Byte((byte)5);
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = new NumberDeserializers.ByteDeserializer(class0, byte1);
      Converter<FormatStyle, FormatStyle> converter0 = (Converter<FormatStyle, FormatStyle>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FormatStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<FormatStyle>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coerceTextualNull(defaultDeserializationContext0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      NumberDeserializers.BigDecimalDeserializer numberDeserializers_BigDecimalDeserializer0 = NumberDeserializers.BigDecimalDeserializer.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      String string0 = "";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Converter<FormatStyle, List<Date>> converter0 = (Converter<FormatStyle, List<Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<Date>>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        StdKeyDeserializers.constructEnumKeyDeserializer((EnumResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Converter<Date, Date> converter0 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      Converter<Object, Date> converter1 = stdDelegatingDeserializer0._converter;
      Class<Date> class0 = Date.class;
      Class<Date> class1 = Date.class;
      JavaType[] javaTypeArray0 = new JavaType[8];
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      int int0 = 0;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      IterationType iterationType0 = IterationType.upgradeFrom(placeholderForType0, placeholderForType0);
      IterationType iterationType1 = IterationType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) iterationType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(iterationType1, iterationType0);
      Object object0 = null;
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler((Object) null);
      javaTypeArray0[0] = (JavaType) referenceType2;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<EnumMap> class2 = EnumMap.class;
      Class<Date> class3 = Date.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructMapType(class2, class3, class3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1283244625) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StdDelegatingDeserializer<List<Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<Date>>((Converter<?, List<Date>>) null);
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = JsonNodeDeserializer.ObjectDeserializer.getInstance();
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer1 = new JsonNodeDeserializer.ObjectDeserializer(jsonNodeDeserializer_ObjectDeserializer0, true, true);
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.overrideFormatFeatures(396, 396);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_LongDeser0.handleSingleElementUnwrapped(jsonParser1, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Converter<Date, List<Date>> converter0 = (Converter<Date, List<Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<Date>>(converter0);
      Converter<Object, List<Date>> converter1 = null;
      Class<Date> class0 = Date.class;
      Class<Date> class1 = Date.class;
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        TypeBindings.create(class1, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.util.Date with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDatatypeFeatures();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (StreamWriteConstraints) null, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedReader pipedReader0 = new PipedReader(1);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      int int0 = 533;
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 533);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FormatStyle formatStyle0 = FormatStyle.FULL;
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) formatStyle0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, (ErrorReportConfiguration) null, bufferRecycler0, contentReference0, true);
      PipedReader pipedReader0 = new PipedReader(1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot((TokenStreamFactory) jsonFactory0, 3);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild();
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 50000, pipedReader0, objectReader0, charsToNameCanonicalizer1, charArray0, 50000, 0, true);
      try { 
        byteBufferDeserializer0.deserialize((JsonParser) readerBasedJsonParser0, (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Converter<Object, FormatStyle> converter0 = (Converter<Object, FormatStyle>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FormatStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<FormatStyle>(converter0);
      StdDelegatingDeserializer<FormatStyle> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<FormatStyle>(converter0, (JavaType) null, stdDelegatingDeserializer0);
      Converter<Object, FormatStyle> converter1 = (Converter<Object, FormatStyle>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FormatStyle> stdDelegatingDeserializer2 = stdDelegatingDeserializer1.withDelegate(converter1, (JavaType) null, stdDelegatingDeserializer0);
      StdDelegatingDeserializer<FormatStyle> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<FormatStyle>(stdDelegatingDeserializer2);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Nulls nulls0 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultAttributes(contextAttributes0);
      ObjectMapper objectMapper3 = objectMapper2.setBase64Variant((Base64Variant) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)90;
      // Undeclared exception!
      try { 
        objectMapper3.createParser(byteArray0, 0, (int) (byte)79);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (0) and/or 'len' (79) arguments for `byte[]` of length 4
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Converter<FormatStyle, Date> converter0 = (Converter<FormatStyle, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      Converter<Object, Date> converter1 = stdDelegatingDeserializer0._converter;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<EnumMap> class0 = EnumMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate(converter1, mapType0, dateDeserializers_DateDeserializer0);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Date>(stdDelegatingDeserializer1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(valueInstantiators_Base0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withAdditionalDeserializers(simpleDeserializers0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig2);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      JsonFactory jsonFactory3 = jsonFactory2.setStreamWriteConstraints(streamWriteConstraints0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory4.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer2._verifyNumberForScalarCoercion(defaultDeserializationContext_Impl0, jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      UntypedObjectDeserializerNR untypedObjectDeserializerNR0 = new UntypedObjectDeserializerNR();
      JsonParser jsonParser0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      CoreXMLDeserializers coreXMLDeserializers0 = new CoreXMLDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(coreXMLDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.createDummyInstance((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      dateDeserializers_DateDeserializer0._byteOverflow((-949));
      Class<Date> class0 = Date.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      Boolean boolean0 = new Boolean((String) null);
      StringCollectionDeserializer stringCollectionDeserializer0 = new StringCollectionDeserializer((JavaType) null, valueInstantiator_Base0, dateDeserializers_DateDeserializer0, dateDeserializers_DateDeserializer0, dateDeserializers_DateDeserializer0, boolean0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[8];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      JsonGenerator.Feature jsonGenerator_Feature7 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature7;
      objectMapper1.disable(jsonGenerator_FeatureArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      int int0 = (-912);
      // Undeclared exception!
      try { 
        MockDateFormat.getTimeInstance((-912));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -912
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StdDelegatingDeserializer<JsonParser.Feature> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonParser.Feature>((Converter<?, JsonParser.Feature>) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      boolean boolean0 = true;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonParser_Feature0, true);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._verifyNullForScalarCoercion(deserializationContext0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = null;
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = null;
      try {
        stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Date>((StdDelegatingDeserializer<Date>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      Converter<JsonParser.Feature, Date> converter0 = (Converter<JsonParser.Feature, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Nulls nulls0 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forContentNulls(nulls0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.USE_FAST_DOUBLE_PARSER;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      JsonParser jsonParser0 = objectMapper3.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_DoubleDeser0._checkIntToFloatCoercion(jsonParser0, defaultDeserializationContext_Impl0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TokenBufferDeserializer tokenBufferDeserializer0 = new TokenBufferDeserializer();
      tokenBufferDeserializer0.logicalType();
      AtomicLongDeserializer atomicLongDeserializer0 = new AtomicLongDeserializer();
      Class<Date> class0 = Date.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
      boolean boolean0 = fromStringDeserializer_Std0._shouldTrim();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Converter<Object, JsonParser.Feature> converter0 = (Converter<Object, JsonParser.Feature>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      StdDelegatingDeserializer<JsonParser.Feature> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonParser.Feature>(converter0, (JavaType) null, dateDeserializers_DateDeserializer0);
      Converter<Object, JsonParser.Feature> converter1 = (Converter<Object, JsonParser.Feature>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<JsonParser.Feature> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate(converter1, (JavaType) null, dateDeserializers_DateDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "5C8RGm";
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._verifyStringForScalarCoercion(defaultDeserializationContext_Impl0, "5C8RGm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Converter<Date, Date> converter0 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = null;
      TokenBufferDeserializer tokenBufferDeserializer0 = new TokenBufferDeserializer();
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser1 = null;
      try {
        primitiveArrayDeserializers_LongDeser1 = new PrimitiveArrayDeserializers.LongDeser((PrimitiveArrayDeserializers.LongDeser) null, tokenBufferDeserializer0, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>((Converter<?, Date>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._findCoercionFromEmptyString(defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.primitiveInstance;
      JsonParser jsonParser0 = null;
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      // Undeclared exception!
      try { 
        jsonParserDelegate0.currentTokenId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer1 = new DateDeserializers.CalendarDeserializer(dateDeserializers_CalendarDeserializer0, (DateFormat) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      dateDeserializers_CalendarDeserializer1.getEmptyValue((DeserializationContext) defaultDeserializationContext_Impl0);
      Converter<JsonParser.Feature, EnumMap<JsonParser.Feature, JsonParser.Feature>> converter0 = (Converter<JsonParser.Feature, EnumMap<JsonParser.Feature, JsonParser.Feature>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<JsonParser.Feature, JsonParser.Feature>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<JsonParser.Feature, JsonParser.Feature>>(converter0);
      boolean boolean0 = true;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Class<Date> class0 = Date.class;
      ObjectReader objectReader0 = objectMapper0.readerForListOf(class0);
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Converter<Object, DoubleNode> converter0 = (Converter<Object, DoubleNode>) mock(Converter.class, new ViolatedAssumptionAnswer());
      JavaType javaType0 = null;
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_MISSING_VALUES;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.disable(jsonReadFeature0);
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder1);
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      // Undeclared exception!
      try { 
        MockDateFormat.getDateInstance(116);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 116
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      primitiveArrayDeserializers_FloatDeser0._constructEmpty();
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Date> class0 = Date.class;
      TypeBindings typeBindings0 = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(100);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      Class<DayOfWeek> class1 = DayOfWeek.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      UntypedObjectDeserializer untypedObjectDeserializer0 = null;
      UntypedObjectDeserializer untypedObjectDeserializer1 = null;
      try {
        untypedObjectDeserializer1 = new UntypedObjectDeserializer((UntypedObjectDeserializer) null, (JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (JsonDeserializer<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      numberDeserializers_NumberDeserializer0.getNullValue((DeserializationContext) defaultDeserializationContext0);
      LogicalType logicalType0 = numberDeserializers_NumberDeserializer0.logicalType();
      assertEquals(LogicalType.Integer, logicalType0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
      Converter<Object, List<Date>> converter0 = (Converter<Object, List<Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<Date>>(converter0, (JavaType) null, stringDeserializer0);
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.primitiveInstance;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory2.enable(jsonGenerator_Feature0);
      try { 
        MockURL.URL("JSON", "JSON", "JSON");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: json
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Converter<Date, Date> converter0 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      stdDelegatingDeserializer0.resolve(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      AtomicLongDeserializer atomicLongDeserializer0 = new AtomicLongDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Date> class0 = Date.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      String string0 = "H\\2Cq1M";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) simpleAbstractTypeResolver0;
      objectArray0[1] = (Object) deserializerFactory0;
      objectArray0[2] = (Object) beanDeserializerFactory0;
      objectArray0[3] = (Object) beanDeserializerFactory0;
      objectArray0[4] = (Object) deserializerFactory0;
      objectArray0[5] = (Object) "H\u0002Cq1M";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(class0, jsonToken0, "H\u0002Cq1M", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      stringDeserializer0.logicalType();
      Converter<Object, EnumMap<DayOfWeek, Date>> converter0 = (Converter<Object, EnumMap<DayOfWeek, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Converter<Object, List<DayOfWeek>> converter0 = (Converter<Object, List<DayOfWeek>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      StdDelegatingDeserializer<List<DayOfWeek>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<DayOfWeek>>(converter0, (JavaType) null, dateDeserializers_DateDeserializer0);
      StdDelegatingDeserializer<List<DayOfWeek>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<List<DayOfWeek>>(stdDelegatingDeserializer0);
      Converter<Object, List<DayOfWeek>> converter1 = (Converter<Object, List<DayOfWeek>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      stdDelegatingDeserializer1.withDelegate(converter1, (JavaType) null, stdDelegatingDeserializer0);
      Converter<Date, Date> converter2 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Date>(converter2);
      Converter<Object, Date> converter3 = stdDelegatingDeserializer2._converter;
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer3 = stdDelegatingDeserializer2.withDelegate(converter3, (JavaType) null, stdDelegatingDeserializer1);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer4 = new StdDelegatingDeserializer<Date>(stdDelegatingDeserializer3);
      AccessPattern accessPattern0 = stdDelegatingDeserializer4.getEmptyAccessPattern();
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Converter<DayOfWeek, Date> converter0 = (Converter<DayOfWeek, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withValueInstantiators((ValueInstantiators) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StdDeserializer._isBlank("");
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      jsonFactory2.setStreamWriteConstraints(streamWriteConstraints0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      TypeReference<Date> typeReference0 = (TypeReference<Date>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer1 = new DateDeserializers.DateDeserializer(dateDeserializers_DateDeserializer0, dateFormat0, (String) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      LogicalType logicalType0 = LogicalType.Float;
      Class<DayOfWeek> class0 = DayOfWeek.class;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer1._checkFromStringCoercion(defaultDeserializationContext0, "com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std", logicalType0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Converter<Date, EnumMap<DayOfWeek, Date>> converter0 = (Converter<Date, EnumMap<DayOfWeek, Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<EnumMap<DayOfWeek, Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<EnumMap<DayOfWeek, Date>>(converter0);
      stdDelegatingDeserializer0._isNegInf("");
      Converter<Date, DayOfWeek> converter1 = (Converter<Date, DayOfWeek>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<DayOfWeek> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<DayOfWeek>(converter1);
      stdDelegatingDeserializer1.getDelegatee();
      Converter<Date, Date> converter2 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Date>(converter2);
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 20000000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot((TokenStreamFactory) jsonFactory0, (-962));
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, 0, 1, true);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideFormatFeatures(0, 1000);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer2._coerceBooleanFromInt(jsonParser0, defaultDeserializationContext0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ArrayBlockingQueueDeserializer arrayBlockingQueueDeserializer0 = null;
      ArrayBlockingQueueDeserializer arrayBlockingQueueDeserializer1 = null;
      try {
        arrayBlockingQueueDeserializer1 = new ArrayBlockingQueueDeserializer((ArrayBlockingQueueDeserializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(78);
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer(placeholderForType0, placeholderForType0);
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, false);
      UntypedObjectDeserializer untypedObjectDeserializer2 = new UntypedObjectDeserializer(untypedObjectDeserializer1, untypedObjectDeserializer0, untypedObjectDeserializer1, untypedObjectDeserializer0, untypedObjectDeserializer0);
      untypedObjectDeserializer2._clearIfStdImpl(untypedObjectDeserializer0);
      Converter<Object, List<Date>> converter0 = (Converter<Object, List<Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<Date>>(converter0, placeholderForType0, (JsonDeserializer<?>) null);
      StdDelegatingDeserializer<List<Date>> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate((Converter<Object, List<Date>>) null, placeholderForType0, untypedObjectDeserializer1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1.findConvertingContentDeserializer(defaultDeserializationContext0, (BeanProperty) null, untypedObjectDeserializer2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
      Converter<Date, Date> converter0 = (Converter<Date, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Date>(stdDelegatingDeserializer0);
      String string0 = "fMckz!";
      stdDelegatingDeserializer1._isTrue("fMckz!");
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CoreXMLDeserializers coreXMLDeserializers0 = new CoreXMLDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(coreXMLDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      // Undeclared exception!
      try { 
        nullifyingDeserializer0.deserialize((JsonParser) null, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      JsonInclude.Value jsonInclude_Value0 = BeanProperty.EMPTY_INCLUDE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Value0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Date> class0 = Date.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Date> class1 = Date.class;
      JavaType javaType0 = typeFactory0.constructGeneralizedType(simpleType0, class1);
      ObjectReader objectReader0 = objectMapper2.readerFor(javaType0);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        objectReader0.createParser(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Converter<Object, Nulls> converter0 = (Converter<Object, Nulls>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Date> class0 = Date.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      Nulls nulls0 = Nulls.FAIL;
      MapLikeType mapLikeType2 = mapLikeType1.withTypeHandler(nulls0);
      MapLikeType mapLikeType3 = mapLikeType2.withKeyTypeHandler((Object) null);
      StdDelegatingDeserializer<Nulls> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Nulls>(converter0, mapLikeType3, (JsonDeserializer<?>) null);
      EnumSetDeserializer enumSetDeserializer0 = null;
      try {
        enumSetDeserializer0 = new EnumSetDeserializer(mapLikeType2, (JsonDeserializer<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type [map-like type; class java.util.Date, [simple type, class java.util.Date] -> [simple type, class java.util.Date]] not Java Enum type
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)41;
      byte[] byteArray1 = primitiveArrayDeserializers_ByteDeser0._concat(byteArray0, byteArray0);
      PrimitiveArrayDeserializers.CharDeser primitiveArrayDeserializers_CharDeser0 = new PrimitiveArrayDeserializers.CharDeser();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.hasRequiredMarker((AnnotatedMember) null);
      PrimitiveArrayDeserializers.CharDeser primitiveArrayDeserializers_CharDeser1 = new PrimitiveArrayDeserializers.CharDeser(primitiveArrayDeserializers_CharDeser0, primitiveArrayDeserializers_ByteDeser0, (Boolean) null);
      boolean boolean0 = false;
      JsonParser jsonParser0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper();
      // Undeclared exception!
      try { 
        objectMapper0.createParser(byteArray1, 2945, (int) (byte)48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (2945) and/or 'len' (48) arguments for `byte[]` of length 12
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Converter<Nulls, Date> converter0 = (Converter<Nulls, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      Converter<Object, Date> converter1 = stdDelegatingDeserializer0._converter;
      TypeFactory.unknownType();
      Class<Date> class0 = Date.class;
      JavaType[] javaTypeArray0 = new JavaType[4];
      PlaceholderForType placeholderForType0 = new PlaceholderForType(44);
      placeholderForType0.actualType();
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      Class<Nulls> class0 = Nulls.class;
      Class<Nulls> class1 = Nulls.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      ObjectReader objectReader0 = objectMapper1.readerForMapOf(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      typeFactory0.constructRawMapLikeType(class0);
      Class<Date> class2 = Date.class;
      Stack<String> stack0 = new Stack<String>();
      Stack<JavaType> stack1 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((List<String>) stack0, (List<JavaType>) stack1);
      JavaType[] javaTypeArray0 = new JavaType[3];
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = ObjectMapper.DefaultTypeResolverBuilder.construct(objectMapper_DefaultTyping0, defaultBaseTypeLimitingValidator0);
      objectMapper_DefaultTypeResolverBuilder0.getDefaultImpl();
      // Undeclared exception!
      try { 
        typeResolutionContext_Basic0.resolveType((Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = true;
      UntypedObjectDeserializerNR untypedObjectDeserializerNR0 = new UntypedObjectDeserializerNR(true);
      Class<Date> class0 = Date.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._deserialize("sVv", defaultDeserializationContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FromStringDeserializer.types();
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      String string0 = "Egi\\UAxqwvM`~v*VV";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      CoreXMLDeserializers coreXMLDeserializers0 = new CoreXMLDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(coreXMLDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        uUIDDeserializer0.getEmptyValue((DeserializationContext) defaultDeserializationContext0);
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // org.evosuite.runtime.mock.java.util.MockUUID.UUID(JJ)Ljava/util/UUID;
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.UUIDDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer((EnumResolver) null, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Converter<FormatStyle, List<Date>> converter0 = (Converter<FormatStyle, List<Date>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<Date>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<Date>>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.getNullValue((DeserializationContext) defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Converter<Date, FormatStyle> converter0 = (Converter<Date, FormatStyle>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FormatStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<FormatStyle>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      Object object0 = null;
      String string0 = "6t=o@SZMIjU;iz";
      // Undeclared exception!
      try { 
        FormatStyle.valueOf("6t=o@SZMIjU;iz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.time.format.FormatStyle.6t=o@SZMIjU;iz
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      AtomicIntegerDeserializer atomicIntegerDeserializer0 = new AtomicIntegerDeserializer();
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      String string0 = "-//l]Eg'>i,9~X";
      try { 
        StdDeserializer._parseDouble("-//l]Eg'>i,9~X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-29);
      byte[] byteArray1 = primitiveArrayDeserializers_ByteDeser0._concat(byteArray0, byteArray0);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = new NumberDeserializers.BigIntegerDeserializer();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        EnumResolver.constructUsingToString((DeserializationConfig) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.EnumResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Converter<Date, FormatStyle> converter0 = (Converter<Date, FormatStyle>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FormatStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<FormatStyle>(converter0);
      StdDelegatingDeserializer<FormatStyle> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<FormatStyle>(stdDelegatingDeserializer0);
      stdDelegatingDeserializer1._isIntNumber("Failed to getValue() with method ");
      StdDelegatingDeserializer<EnumMap<FormatStyle, Date>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<EnumMap<FormatStyle, Date>>((Converter<?, EnumMap<FormatStyle, Date>>) null);
      StdDelegatingDeserializer<EnumMap<FormatStyle, Date>> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<EnumMap<FormatStyle, Date>>(stdDelegatingDeserializer2);
      stdDelegatingDeserializer3._isPosInf("element of ");
      Class<FormatStyle> class0 = FormatStyle.class;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      // Undeclared exception!
      try { 
        beanSerializerBuilder0.getClassInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanSerializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      AtomicLongDeserializer atomicLongDeserializer0 = new AtomicLongDeserializer();
      atomicLongDeserializer0.logicalType();
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      String string0 = "3K![dv'\\j33J6)";
      int int0 = Integer.MAX_VALUE;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Date> class0 = Date.class;
      StreamReadConstraints.defaults();
      StreamWriteConstraints.defaults();
      ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("3K![dv'j33J6)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      nullifyingDeserializer0._coercedTypeDesc();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer(nullifyingDeserializer0);
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.parseDate("`java.lang.Object` value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = null;
      try {
        dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.util.Calendar is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StdDelegatingDeserializer<List<CoercionInputShape>> stdDelegatingDeserializer0 = null;
      try {
        stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<CoercionInputShape>>((StdDelegatingDeserializer<List<CoercionInputShape>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FromStringDeserializer.StringBuilderDeserializer fromStringDeserializer_StringBuilderDeserializer0 = new FromStringDeserializer.StringBuilderDeserializer();
      JsonParser jsonParser0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      CoercionInputShape coercionInputShape0 = CoercionInputShape.Integer;
      CoercionInputShape coercionInputShape1 = CoercionInputShape.EmptyArray;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(coercionInputShape0, coercionInputShape1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JsonDeserializer<CoercionInputShape> jsonDeserializer0 = null;
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer((JsonDeserializer<?>) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalKeyDeserializers((KeyDeserializers) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null KeyDeserializers
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      // Undeclared exception!
      try { 
        JsonParserSequence.createFlattened(true, (JsonParser) null, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      String string0 = "";
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "");
      objectMapper1.findAndRegisterModules();
      // Undeclared exception!
      try { 
        JsonNodeFeature.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.databind.cfg.JsonNodeFeature.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator";
      try { 
        StdDeserializer._parseDouble("com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      stringDeserializer0.isCachable();
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAbstractTypeResolver((AbstractTypeResolver) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      // Undeclared exception!
      try { 
        MockDateFormat.getDateInstance(4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 4
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      UntypedObjectDeserializerNR untypedObjectDeserializerNR0 = new UntypedObjectDeserializerNR();
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Class<Calendar> class0 = Calendar.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 73);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Object object0 = fromStringDeserializer_Std0._deserializeFromEmptyStringDefault(defaultDeserializationContext0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = JsonNodeDeserializer.ArrayDeserializer.getInstance();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer1 = new JsonNodeDeserializer.ArrayDeserializer(jsonNodeDeserializer_ArrayDeserializer0, false, false);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>((Converter<?, Date>) null);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(70);
      try { 
        objectMapper1.createParser((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)80;
      // Undeclared exception!
      try { 
        jsonFactory1.createParser(byteArray0, 0, (int) (byte)80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'offset' (0) and/or 'len' (80) arguments for `byte[]` of length 2
         //
         verifyException("com.fasterxml.jackson.core.TokenStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Converter<ThaiBuddhistEra, ThaiBuddhistEra> converter0 = (Converter<ThaiBuddhistEra, ThaiBuddhistEra>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ThaiBuddhistEra> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ThaiBuddhistEra>(converter0);
      StdDelegatingDeserializer<ThaiBuddhistEra> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<ThaiBuddhistEra>(stdDelegatingDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAbstractTypeResolver((AbstractTypeResolver) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = new NumberDeserializers.BigIntegerDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_BigIntegerDeserializer0.deserialize((JsonParser) null, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$BigIntegerDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JsonNodeDeserializer.ObjectDeserializer.getInstance();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      Class<Date> class0 = Date.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.getSuperClass();
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer((JavaType) null, (JavaType) null);
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, dateDeserializers_DateDeserializer0, untypedObjectDeserializer0, nullifyingDeserializer0, dateDeserializers_DateDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SubtypeResolver subtypeResolver0 = stdSubtypeResolver0.copy();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(subtypeResolver0);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = objectMapper3.createParser(byteArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        untypedObjectDeserializer1.mapArrayToArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = null;
      try {
        stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>((StdDelegatingDeserializer<Date>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer((-751));
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, integer0);
      numberDeserializers_IntegerDeserializer0.isCachable();
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>((Converter<?, Date>) null);
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Date>(stdDelegatingDeserializer0);
      Converter<Object, Date> converter0 = stdDelegatingDeserializer1._converter;
      JavaType javaType0 = null;
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Date>((Converter<Object, Date>) null, (JavaType) null, stdDelegatingDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer2._coercedTypeDesc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer((JavaType) null, (JavaType) null);
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, false);
      UntypedObjectDeserializer untypedObjectDeserializer2 = new UntypedObjectDeserializer(untypedObjectDeserializer1, untypedObjectDeserializer0, untypedObjectDeserializer0, primitiveArrayDeserializers_FloatDeser0, untypedObjectDeserializer1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      untypedObjectDeserializer2.getAbsentValue(defaultDeserializationContext0);
      LogicalType logicalType0 = untypedObjectDeserializer2.logicalType();
      assertEquals(LogicalType.Untyped, logicalType0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Converter<Date, ThaiBuddhistEra> converter0 = (Converter<Date, ThaiBuddhistEra>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ThaiBuddhistEra> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ThaiBuddhistEra>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      JsonFactoryBuilder jsonFactoryBuilder0 = null;
      try {
        jsonFactoryBuilder0 = new JsonFactoryBuilder((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.TSFBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      AtomicIntegerDeserializer atomicIntegerDeserializer0 = new AtomicIntegerDeserializer();
      FromStringDeserializer.StringBuilderDeserializer fromStringDeserializer_StringBuilderDeserializer0 = new FromStringDeserializer.StringBuilderDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.OBJECT;
      Class<Date> class0 = Date.class;
      Number number0 = null;
      String string0 = "";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) fromStringDeserializer_StringBuilderDeserializer0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) atomicIntegerDeserializer0;
      // Undeclared exception!
      try { 
        JsonFormat.Shape.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.annotation.JsonFormat.Shape.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JsonNodeDeserializer.ArrayDeserializer.getInstance();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.createDummyInstance((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Double> class0 = Double.class;
      Double double0 = new Double(0.0);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = new NumberDeserializers.DoubleDeserializer(class0, double0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(valueInstantiators_Base0);
      CoreXMLDeserializers coreXMLDeserializers0 = new CoreXMLDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withAdditionalDeserializers(coreXMLDeserializers0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig2);
      Double double1 = numberDeserializers_DoubleDeserializer0.getNullValue((DeserializationContext) defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute((Object) null, double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
