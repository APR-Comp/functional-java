/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 04:59:19 GMT 2023
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.JsonReadContext;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DatatypeFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.EnumFeature;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.time.ZoneId;
import java.time.chrono.MinguoEra;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayNode_ESTest extends ArrayNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      byte[] byteArray0 = new byte[6];
      ArrayNode arrayNode1 = arrayNode0.removeAll();
      arrayNode1.at("");
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)0;
      ArrayNode arrayNode2 = arrayNode0.add(byteArray0);
      arrayNode2.insert((-1), (long) (byte)53);
      ArrayNode arrayNode3 = arrayNode0.set((int) (byte)0, 0);
      arrayNode3.findValuesAsText("", (List<String>) null);
      Short short0 = new Short((byte)0);
      ArrayNode arrayNode4 = arrayNode2.insert((int) (byte) (-50), short0);
      ArrayNode arrayNode5 = arrayNode4.set((int) (byte)1, 0.0F);
      // Undeclared exception!
      try { 
        arrayNode5.set((-2062), 3L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -2062, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Integer integer0 = new Integer(0);
      jsonNodeFactory0.numberNode(integer0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger.valueOf(0L);
      arrayNode0.numberNode(bigInteger0);
      ArrayNode arrayNode1 = arrayNode0.insertNull(0);
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      BigDecimal bigDecimal0 = new BigDecimal(charArray0);
      jsonNodeFactory0.numberNode(bigDecimal0);
      arrayNode1.add(true);
      Object object0 = new Object();
      arrayNode0.setPOJO(1, object0);
      ArrayNode arrayNode2 = arrayNode0.set(1, (BigDecimal) null);
      arrayNode2.hashCode();
      arrayNode2.numberNode((float) 1);
      arrayNode2.insertNull(0);
      // Undeclared exception!
      try { 
        arrayNode2._childrenEqual((ArrayNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      // Undeclared exception!
      try { 
        arrayNode0.set(64, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      int int0 = (-1);
      long long0 = 0L;
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        arrayNode0.insert((-1), float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      String string0 = ", array size ";
      arrayNode0.findValues(", array size ", (List<JsonNode>) null);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      int int0 = 0;
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        arrayNode1.set(0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      int int0 = 1926;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      objectIdGenerators_IntSequenceGenerator0.generateId((Object) null);
      String string0 = ">.o$=w0E6qbMY";
      arrayNode0.findValues(">.o$=w0E6qbMY");
      arrayNode0.add((Integer) null);
      try { 
        JsonPointer.compile(">.o$=w0E6qbMY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \">.o$=w0E6qbMY\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = null;
      List<JsonNode> list0 = null;
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, (List<JsonNode>) null);
      // Undeclared exception!
      try { 
        arrayNode0.deepCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 166);
      // Undeclared exception!
      try { 
        arrayNode0.add(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      // Undeclared exception!
      try { 
        arrayNode0.set(1874, "(_28EhWZ%E/2Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      FloatNode floatNode0 = new FloatNode(0.0F);
      List<JsonNode> list0 = arrayNode0.findValues("MIeQRqhlMK=zc}6");
      List<JsonNode> list1 = floatNode0.findValues("yes", list0);
      List<JsonNode> list2 = arrayNode0.findValues("yes", list1);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list2);
      arrayNode1.findParents("MIeQRqhlMK=zc}6", list2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        arrayNode1.insert(46, byteArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1876);
      ArrayNode arrayNode1 = arrayNode0.insert((-9), (-735L));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)87;
      jsonNodeFactory0.binaryNode(byteArray0);
      arrayNode0.equals((Object) arrayNode1);
      arrayNode0.insert((-871), 3566.6244144843517);
      arrayNode0.set(0, (long) (-9));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      FloatNode floatNode0 = FloatNode.valueOf(Float.NaN);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 878);
      List<JsonNode> list0 = arrayNode0.findValues("UpaYL;G,60kK");
      List<JsonNode> list1 = floatNode0.findValues("UpaYL;G,60kK", list0);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list1);
      Long long0 = new Long(878);
      // Undeclared exception!
      try { 
        arrayNode1.insert(878, long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 2);
      Short short0 = new Short((short)3069);
      // Undeclared exception!
      try { 
        arrayNode0.set(2, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      jsonNodeFactory0.binaryNode(byteArray0, (int) (byte)1, (int) (byte)0);
      Short short0 = new Short((byte) (-30));
      jsonNodeFactory0.numberNode(short0);
      byteArray0[3] = (byte)2;
      jsonNodeFactory0.binaryNode(byteArray0);
      jsonNodeFactory0.textNode((String) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      jsonNodeFactory0.arrayNode();
      arrayNode0.iterator();
      // Undeclared exception!
      try { 
        arrayNode0.addAll((ArrayNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      FloatNode floatNode0 = new FloatNode(2439.307F);
      floatNode0.findParents("", (List<JsonNode>) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      // Undeclared exception!
      try { 
        arrayNode0.path(78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      List<JsonNode> list0 = arrayNode0.findParents((String) null);
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.ALL;
      arrayNode0.withArray((String) null, jsonNode_OverwriteMode0, true);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      // Undeclared exception!
      try { 
        arrayNode1.add(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      ArrayNode arrayNode1 = arrayNode0.add(byteArray0);
      JsonNode jsonNode0 = arrayNode1.remove((byte)0);
      arrayNode1._withXxxSetArrayElement((byte)100, jsonNode0);
      arrayNode0.getNodeType();
      ArrayNode arrayNode2 = arrayNode0.addAll(arrayNode1);
      arrayNode2.insertObject((byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      arrayNode2.add(bigInteger0);
      arrayNode2.insert(0, byteArray0);
      arrayNode0.get("Ts%:");
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.hasRequiredMarker((AnnotatedMember) null);
      arrayNode1.set((int) (byte)0, (Boolean) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 0);
      Double double0 = new Double(0);
      // Undeclared exception!
      try { 
        arrayNode0.add(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      short short0 = (short) (-2173);
      RawValue rawValue0 = new RawValue(arrayNode0);
      // Undeclared exception!
      try { 
        arrayNode0.addRawValue(rawValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      FloatNode floatNode0 = new FloatNode(1517.0F);
      floatNode0.findValues("nho)", (List<JsonNode>) null);
      floatNode0.findValues("nho)", (List<JsonNode>) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      Stack<String> stack0 = new Stack<String>();
      // Undeclared exception!
      try { 
        arrayNode0.findValuesAsText("##-6me", (List<String>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Short short0 = new Short((short)1891);
      ObjectNode objectNode1 = objectNode0.put("", short0);
      ArrayNode arrayNode0 = objectNode1.putArray("");
      List<JsonNode> list0 = arrayNode0.findValues("backupArguments");
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      // Undeclared exception!
      try { 
        arrayNode1.insert((-823), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      List<JsonNode> list0 = arrayNode0.findValues("");
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      NumericNode numericNode0 = arrayNode0.numberNode(0.0);
      RawValue rawValue0 = new RawValue(numericNode0);
      // Undeclared exception!
      try { 
        arrayNode1.addRawValue(rawValue0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 2;
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 2);
      // Undeclared exception!
      try { 
        arrayNode0.addNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      int int0 = (-179);
      Float float0 = null;
      short short0 = (short)0;
      // Undeclared exception!
      try { 
        arrayNode0.set((-179), (short)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      int int0 = 93;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 93);
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      RawValue rawValue0 = new RawValue("944FB|iOt");
      rawValue0.toString();
      jsonNodeFactory0.rawValueNode(rawValue0);
      ArrayNode arrayNode1 = arrayNode0.add((Boolean) null);
      arrayNode1.add(93);
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      arrayList0.add((JsonNode) valueNode0);
      List<JsonNode> list0 = arrayNode1.findValues("", (List<JsonNode>) arrayList0);
      arrayNode1.findValues("&|1X5", list0);
      arrayNode0.hashCode();
      arrayNode1.insert((-684), (-684));
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'h';
      charArray0[2] = 'o';
      charArray0[3] = '5';
      charArray0[4] = ':';
      charArray0[5] = 'F';
      charArray0[6] = '!';
      charArray0[7] = 'z';
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0, mathContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.putObject("No value at index #%d [0, %d) of `ArrayNode`");
      ArrayNode arrayNode0 = objectNode1.putArray("Too big Array index (%d; max %d) to use for insert with `JsonPointer`");
      arrayNode0.findParents("No value at index #%d [0, %d) of `ArrayNode`", (List<JsonNode>) null);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      Double double0 = new Double((-1508.24663571806));
      // Undeclared exception!
      try { 
        arrayNode1.set((-1), double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      int int0 = (-2259);
      jsonNodeFactory0.numberNode((double) (-2259));
      // Undeclared exception!
      try { 
        arrayNode0.set((-2259), (float) (-2259));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      arrayList0.stream();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ValueNode valueNode0 = arrayNode0.rawValueNode((RawValue) null);
      arrayList0.add((JsonNode) valueNode0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      String string0 = "com.fasterxml.jackson.databind.ser.std.ToStringSerializer";
      ObjectMapper objectMapper1 = objectMapper0.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "com.fasterxml.jackson.databind.ser.std.ToStringSerializer");
      ArrayNode arrayNode1 = objectMapper1.createArrayNode();
      RawValue rawValue0 = new RawValue(arrayNode1);
      ValueNode valueNode1 = arrayNode1.rawValueNode(rawValue0);
      arrayList0.add((JsonNode) valueNode1);
      ArrayNode arrayNode2 = new ArrayNode((JsonNodeFactory) null, arrayList0);
      // Undeclared exception!
      try { 
        arrayNode2.add((-906.14545428));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 23;
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 23);
      List<JsonNode> list0 = arrayNode0.findParents("3*RY0tI7o@!N~7j");
      List<JsonNode> list1 = arrayNode0.findParents("3*RY0tI7o@!N~7j", list0);
      ArrayNode arrayNode1 = new ArrayNode((JsonNodeFactory) null, list1);
      // Undeclared exception!
      try { 
        arrayNode1.add(532L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf((-1.0F));
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      List<JsonNode> list0 = floatNode0.findValues("OLv&~N&", (List<JsonNode>) linkedList0);
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, list0);
      int int0 = 1408;
      RawValue rawValue0 = new RawValue(arrayNode0);
      // Undeclared exception!
      try { 
        arrayNode0.insertRawValue(1408, rawValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      List<JsonNode> list0 = arrayNode0.findValues("JSON");
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      int int0 = (-3);
      // Undeclared exception!
      try { 
        arrayNode1.insert((-3), (-1.0));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Stack<String> stack0 = new Stack<String>();
      ObjectNode objectNode1 = objectNode0.retain((Collection<String>) stack0);
      ObjectNode objectNode2 = objectNode1.put("com.fasterxml.jackson.databind.node.ArrayNode", (-2948L));
      objectNode0.asBoolean(false);
      ObjectNode objectNode3 = objectNode2.remove((Collection<String>) stack0);
      Integer integer0 = new Integer(0);
      ObjectNode objectNode4 = objectNode3.put("", integer0);
      ArrayNode arrayNode0 = objectNode4.putArray("");
      objectNode1.toString();
      objectNode1.writeReplace();
      ArrayNode arrayNode1 = arrayNode0.insert((-697), 1792L);
      arrayNode1.insert((-2892), (JsonNode) objectNode3);
      arrayNode0.findValue("com.fasterxml.jackson.databind.node.ArrayNode");
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      DupDetector dupDetector1 = dupDetector0.child();
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector1);
      JsonPointer jsonPointer0 = jsonWriteContext0.pathAsPointer();
      arrayNode0._at(jsonPointer0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(8199);
      ArrayNode arrayNode1 = arrayNode0.insert((-2260), (double) 8199);
      Integer integer0 = new Integer(8199);
      ArrayNode arrayNode2 = arrayNode1.add(integer0);
      jsonNodeFactory0.objectNode();
      arrayNode2._insert(8199, arrayNode0);
      arrayNode2.elements();
      Long long0 = new Long((-234L));
      ArrayNode arrayNode3 = arrayNode1.add(long0);
      arrayNode3.asDouble();
      ArrayNode arrayNode4 = arrayNode2.add(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      arrayNode4.add(bigInteger0);
      arrayNode1.add(integer0);
      arrayNode3.remove(1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        arrayNode0.findParent("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      arrayNode0.findPath("/ZX@");
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      arrayNode0._withObjectAddTailElement(jsonPointer0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        arrayNode0.add(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 56320;
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 56320);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        arrayNode0.insert(56320, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      arrayNode0.isBoolean();
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      arrayNode0.pojoNode(jsonNodeFactory0);
      JsonPointer jsonPointer0 = JsonPointer.forPath(tokenFilterContext0, false);
      arrayNode0.isBinary();
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.ALL;
      arrayNode0._withObject(jsonPointer0, jsonPointer0, jsonNode_OverwriteMode0, false);
      Float float0 = null;
      arrayNode0.insert(1285, (Float) null);
      // Undeclared exception!
      try { 
        arrayNode0.set(2, (float) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 2, array size 1
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ArrayNode arrayNode1 = arrayNode0.add("EAGER_SERIALIZER_FETCH");
      int int0 = 1247;
      arrayNode0.insert(1247, false);
      arrayNode1.add((Short) null);
      arrayNode1.numberNode((double) 1247);
      arrayNode1.intValue();
      // Undeclared exception!
      try { 
        arrayNode1.set(1247, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 1247, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.get("9M#");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      arrayNode0.isEmpty((SerializerProvider) defaultSerializerProvider0);
      arrayNode0.getNodeType();
      arrayNode0.add((-4086.034));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      arrayNode0.insertArray(300);
      ArrayNode arrayNode1 = arrayNode0.insertPOJO(300, "hdR`{De'yj");
      arrayNode1.findValue("hdR`{De'yj");
      ArrayNode arrayNode2 = arrayNode0.add(300);
      ArrayNode arrayNode3 = arrayNode0.addRawValue((RawValue) null);
      arrayNode2.path("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)2;
      arrayNode3.add(byteArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(108);
      ArrayNode arrayNode1 = arrayNode0.insertPOJO(108, jsonNodeFactory0);
      Float float0 = new Float((double) 108);
      ArrayNode arrayNode2 = arrayNode1.insert(0, float0);
      ArrayNode arrayNode3 = new ArrayNode(jsonNodeFactory0, 0);
      arrayNode3.add(false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      arrayNode3.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0);
      ArrayNode arrayNode4 = arrayNode0.insert(0, float0);
      arrayNode4._set(0, arrayNode2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      String string0 = "Unable to deserialize BloomFilter from InputStream. strategyOrdinal: ";
      JsonNode jsonNode0 = arrayNode0.path("Unable to deserialize BloomFilter from InputStream. strategyOrdinal: ");
      arrayNode0.isBoolean();
      int int0 = 1998;
      ArrayNode arrayNode1 = arrayNode0._insert(1998, jsonNode0);
      int int1 = (-1788);
      // Undeclared exception!
      try { 
        arrayNode1.setNull((-1788));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 0;
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 0);
      // Undeclared exception!
      try { 
        arrayNode0.addArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.getNodeType();
      int int0 = 812;
      // Undeclared exception!
      try { 
        arrayNode0.set(812, (Short) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 812, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      // Undeclared exception!
      try { 
        arrayNode0.set(2521, (BigDecimal) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 2521, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.addArray();
      ArrayNode arrayNode1 = arrayNode0._add(numericNode0);
      byte[] byteArray0 = new byte[1];
      RawValue rawValue0 = new RawValue((SerializableString) null);
      rawValue0.toString();
      jsonNodeFactory0.rawValueNode(rawValue0);
      byteArray0[0] = (byte)1;
      jsonNodeFactory0.binaryNode(byteArray0);
      ArrayNode arrayNode2 = arrayNode0.insertPOJO((-657), jsonNodeFactory0);
      arrayNode0.add(3555.126694693188);
      JsonNode jsonNode0 = arrayNode0.path((int) (byte)1);
      arrayNode0._withXxxSetArrayElement(0, jsonNode0);
      arrayNode1.get(1530);
      arrayNode2.get(262144);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 8192);
      FloatNode floatNode0 = new FloatNode(0);
      JsonPointer jsonPointer0 = JsonPointer.empty();
      floatNode0._at(jsonPointer0);
      arrayNode0._withXxxSetArrayElement(0, (JsonNode) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 466;
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 466);
      int int1 = 2410;
      // Undeclared exception!
      try { 
        arrayNode0.setPOJO(2410, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 1549);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      // Undeclared exception!
      try { 
        arrayNode0.insert(1549, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      int int0 = 0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        arrayNode0.set(1456, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      Integer integer0 = new Integer((-377));
      // Undeclared exception!
      try { 
        arrayNode0.insert((-3316), integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      List<JsonNode> list0 = arrayNode0.findParents((String) null);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      // Undeclared exception!
      try { 
        arrayNode1.addObject();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      FloatNode floatNode0 = new FloatNode(0.0F);
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      List<JsonNode> list0 = floatNode0.findParents("8", (List<JsonNode>) arrayList0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, list0);
      arrayNode0.insertPOJO(618, (Object) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 0);
      arrayNode0.getNodeType();
      arrayNode0.size();
      // Undeclared exception!
      try { 
        arrayNode0.add(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      BigDecimal bigDecimal0 = new BigDecimal((-2072L));
      // Undeclared exception!
      try { 
        arrayNode0.set((-826), bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Value0);
      ObjectMapper objectMapper3 = objectMapper2.setFilterProvider((FilterProvider) null);
      objectMapper0.createArrayNode();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0);
      ObjectMapper objectMapper4 = objectMapper3.enable(deserializationFeature0);
      ObjectMapper objectMapper5 = objectMapper4.clearProblemHandlers();
      ArrayNode arrayNode0 = objectMapper5.createArrayNode();
      ArrayNode arrayNode1 = arrayNode0.insert(541, (Long) null);
      Integer integer0 = new Integer(541);
      // Undeclared exception!
      try { 
        arrayNode1.set(541, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 541, array size 1
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Double double0 = new Double(708.87286);
      jsonNodeFactory0.numberNode(double0);
      jsonNodeFactory0.numberNode((Long) null);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.longValue();
      Short short0 = new Short((short) (-2553));
      jsonNodeFactory0.numberNode(short0);
      arrayNode0.get("");
      Double double1 = new Double((-1807.442));
      arrayNode0.add(double1);
      Double double2 = new Double(0.0);
      arrayNode0.add(double2);
      arrayNode0.add((double) 0L);
      // Undeclared exception!
      try { 
        arrayNode0.set((-1038), (JsonNode) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1038, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.has(0);
      jsonNodeFactory0.objectNode();
      Float float0 = new Float((-917.447539));
      jsonNodeFactory0.numberNode(float0);
      ArrayNode arrayNode1 = arrayNode0.add(0);
      arrayNode0.remove((-3026));
      arrayNode0.insert(0, (JsonNode) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      arrayNode1.insert(565, byteArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ArrayNode arrayNode1 = arrayNode0.add((JsonNode) null);
      ArrayNode arrayNode2 = arrayNode0.set(0, (long) 0);
      ArrayNode arrayNode3 = arrayNode2.insert(0, (Boolean) null);
      arrayNode3.isBinary();
      JsonPointer jsonPointer0 = JsonPointer.empty();
      arrayNode1._at(jsonPointer0);
      short short0 = (short)1168;
      arrayNode1.insert(0, (short)1168);
      // Undeclared exception!
      try { 
        arrayNode2.set((int) (short)1168, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 1168, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      int int0 = 296;
      jsonNodeFactory0.objectNode();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(296);
      String string0 = "No value at index #%d [0, %d) of `ArrayNode`";
      List<JsonNode> list0 = arrayNode0.findParents("No value at index #%d [0, %d) of `ArrayNode`");
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      // Undeclared exception!
      try { 
        arrayNode1.insert(296, (long) 296);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      int int0 = 2;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0);
      List<JsonNode> list0 = arrayNode1.findValues("");
      List<JsonNode> list1 = arrayNode0.findParents("", list0);
      ArrayNode arrayNode2 = new ArrayNode(jsonNodeFactory0, list1);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        arrayNode2.add(double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      // Undeclared exception!
      try { 
        arrayNode0.setRawValue((-295), (RawValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      jsonNodeFactory0.numberNode((short)3008);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      arrayNode0.doubleValue();
      ArrayNode arrayNode1 = arrayNode0.insert(0, (short) (-2260));
      arrayNode1.textNode("7 16");
      arrayNode1.floatValue();
      arrayNode1.canConvertToExactIntegral();
      arrayNode1.required(0);
      arrayNode1.insert((-926), (short) (-2260));
      Long long0 = new Long(1065L);
      arrayNode0.insert((int) (short) (-2260), long0);
      FloatNode floatNode0 = new FloatNode((-926));
      BigInteger bigInteger0 = floatNode0.bigIntegerValue();
      ArrayNode arrayNode2 = arrayNode0.set(0, bigInteger0);
      arrayNode1.path("7 16");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        arrayNode2.set((-233), bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -233, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      arrayNode0.add((short)0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Long long0 = new Long((short)0);
      arrayNode0.set((int) (short)0, long0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      arrayNode0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl1);
      arrayNode0.add((-9.223372E18F));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Byte byte0 = new Byte((byte)89);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(byte0);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      Double double0 = new Double((-503.367516));
      arrayNode0.numberNode(double0);
      arrayNode0.remove(0);
      Short short0 = new Short((short)0);
      ArrayNode arrayNode1 = arrayNode0.insert(0, short0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) valueNode0;
      objectArray0[1] = (Object) arrayNode0;
      // Undeclared exception!
      try { 
        arrayNode1._reportWrongNodeType("", objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      // Undeclared exception!
      try { 
        arrayNode0._at((JsonPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.isContainerNode();
      jsonNodeFactory0.textNode("nsUMFD.>");
      LinkedList<BinaryNode> linkedList0 = new LinkedList<BinaryNode>();
      ArrayNode arrayNode1 = arrayNode0.addAll((Collection<? extends JsonNode>) linkedList0);
      jsonNodeFactory0.numberNode(0.0F);
      jsonNodeFactory0.numberNode((float) (-1104L));
      Long long0 = new Long((-1104L));
      ArrayNode arrayNode2 = arrayNode0.add(long0);
      // Undeclared exception!
      try { 
        arrayNode1.equals((Comparator<JsonNode>) null, (JsonNode) arrayNode2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      int int0 = (-642);
      // Undeclared exception!
      try { 
        arrayNode0.insertObject((-642));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test068()  throws Throwable  {
  //     JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
  //     ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
  //     int int0 = 691;
  //     boolean boolean0 = arrayNode0.isContainerNode();
  //     boolean boolean1 = false;
  //     ArrayNode arrayNode1 = arrayNode0.insert(691, false);
  //     BigInteger bigInteger0 = BigInteger.ONE;
  //     BigInteger bigInteger1 = BigInteger.ZERO;
  //     ArrayNode arrayNode2 = arrayNode1._add(arrayNode0);
  //     int int1 = 0;
  //     arrayNode2.numberNode((long) 0);
  //     arrayNode2.insert(0, 0.0F);
  //     bigInteger0.subtract(bigInteger1);
  //     ArrayNode arrayNode3 = arrayNode1.add(bigInteger0);
  //     Comparator<JsonNode> comparator0 = (Comparator<JsonNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  //     doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(com.fasterxml.jackson.databind.JsonNode.class) , any(com.fasterxml.jackson.databind.JsonNode.class));
  //     arrayNode0.equals(comparator0, (JsonNode) arrayNode1);
  //     boolean boolean2 = true;
  //     ArrayNode arrayNode4 = arrayNode1.add(boolean2);
  //     ArrayNode arrayNode5 = arrayNode4.set(int0, int0);
  //     int int2 = 2779;
  //     ArrayNode arrayNode6 = arrayNode5.add(int2);
  //     Integer integer0 = null;
  //     arrayNode6.insert(int1, integer0);
  //     String string0 = "No value at index #%d [0, %d) of `ArrayNode`";
  //     ArrayNode arrayNode7 = arrayNode5.insert(int2, string0);
  //     int int3 = (-319);
  //     Float float0 = new Float((float) int3);
  //     ArrayNode arrayNode8 = arrayNode0.insert(int3, float0);
  //     arrayNode3.insertNull(int0);
  //     Double double0 = new Double(int3);
  //     arrayNode1.add(double0);
  //     arrayNode5.isPojo();
  //     arrayNode8.add((JsonNode) arrayNode1);
  //     JsonStreamContext jsonStreamContext0 = null;
  //     boolean boolean3 = true;
  //     JsonPointer jsonPointer0 = JsonPointer.forPath(jsonStreamContext0, boolean3);
  //     JsonPointer.forPath(jsonStreamContext0, boolean1);
  //     arrayNode7._withObjectAddTailElement(jsonPointer0, boolean0);
  // }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.putArray("");
      arrayNode0.path((-1));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      Long.getLong("");
      // Undeclared exception!
      try { 
        arrayNode0.set(0, (Long) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      List<JsonNode> list0 = arrayNode0.findParents("");
      List<JsonNode> list1 = arrayNode0.findValues("", list0);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list1);
      // Undeclared exception!
      try { 
        arrayNode1.set(1620, (BigInteger) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 1620, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      List<JsonNode> list0 = arrayNode0.findParents((String) null, (List<JsonNode>) arrayList0);
      arrayNode0.findValues("MANIFEST", list0);
      // Undeclared exception!
      try { 
        arrayNode0.set(2785, (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 2785, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1);
      short short0 = (short) (-1022);
      Short short1 = new Short((short) (-1022));
      ArrayNode arrayNode1 = arrayNode0.add(short1);
      arrayNode0.insert(0, 1.0F);
      Integer integer0 = new Integer(9999);
      arrayNode1.set(0, integer0);
      // Undeclared exception!
      try { 
        arrayNode1.set((-3146), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -3146, array size 2
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Long long0 = new Long((-2495L));
      jsonNodeFactory0.numberNode(long0);
      Integer integer0 = new Integer(0);
      ArrayNode arrayNode1 = arrayNode0.insert(2, integer0);
      Double double0 = new Double(4412.36810588573);
      arrayNode1.numberNode(double0);
      ArrayNode arrayNode2 = arrayNode1.addNull();
      arrayNode2.isEmpty();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      arrayNode0.add(bigDecimal0);
      ArrayNode arrayNode3 = arrayNode2.setPOJO(0, "set");
      arrayNode3.set(0, 4412.36810588573);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ArrayNode arrayNode1 = arrayNode0.insert(0, false);
      arrayNode1.numberNode((short) (-2306));
      arrayNode1.required(0);
      arrayNode0.get("");
      arrayNode0.hashCode();
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.SCALARS;
      // Undeclared exception!
      try { 
        arrayNode0._withObject((JsonPointer) null, (JsonPointer) null, jsonNode_OverwriteMode0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      List<JsonNode> list0 = arrayNode0.findValues("");
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      arrayNode0.add((-4666L));
      // Undeclared exception!
      try { 
        arrayNode1._insert(70, arrayNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      // Undeclared exception!
      try { 
        arrayNode0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      List<JsonNode> list0 = arrayNode0.findValues("com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser");
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)46;
      Object object0 = new Object();
      jsonNodeFactory0.pojoNode(object0);
      byteArray0[2] = (byte)46;
      BinaryNode binaryNode0 = new BinaryNode(byteArray0);
      // Undeclared exception!
      try { 
        arrayNode1.addPOJO(binaryNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 21);
      // Undeclared exception!
      try { 
        arrayNode0.set(21, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        arrayNode0.insert(0, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0L);
      Long long0 = new Long(0L);
      jsonNodeFactory0.numberNode(long0);
      short short0 = (short)0;
      byte byte0 = (byte) (-73);
      NumericNode numericNode1 = jsonNodeFactory0.numberNode((byte) (-73));
      Short short1 = new Short((short)0);
      jsonNodeFactory0.numberNode(short1);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      arrayNode0.asToken();
      arrayNode0.equals((Object) numericNode0);
      // Undeclared exception!
      try { 
        arrayNode0.insert((int) (short)0, (JsonNode) numericNode1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Integer integer0 = new Integer((-1824));
      ObjectNode objectNode1 = objectNode0.put("", integer0);
      SerializedString serializedString0 = (SerializedString)JsonFactory.DEFAULT_ROOT_VALUE_SEPARATOR;
      RawValue rawValue0 = new RawValue(serializedString0);
      ObjectNode objectNode2 = objectNode1.putRawValue((String) null, rawValue0);
      objectNode2.put((String) null, (-1824));
      String string0 = "Invalid 'offset' (%d) and/or 'len' (%d) arguments for `char[]` of length %d";
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.findValues("", (List<JsonNode>) null);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      List<JsonNode> list0 = arrayNode0.findValues("");
      // Undeclared exception!
      try { 
        arrayNode1.findParents("K4W}-7w", list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      jsonNodeFactory0.numberNode((Integer) null);
      jsonNodeFactory0.numberNode((short)0);
      int int0 = 88;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 88);
      arrayNode0.add((BigInteger) null);
      arrayNode0.asInt();
      String string0 = "";
      arrayNode0.get("");
      BigDecimal bigDecimal0 = new BigDecimal((-372.817533782476));
      // Undeclared exception!
      try { 
        arrayNode0.set((-1), bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1, array size 1
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 386);
      NullNode nullNode0 = new NullNode();
      ArrayNode arrayNode1 = arrayNode0.add((JsonNode) nullNode0);
      arrayNode0.insert(730, (Double) null);
      arrayNode0.isTextual();
      ArrayNode arrayNode2 = arrayNode0.add(42);
      arrayNode2._add(arrayNode0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-89);
      arrayNode1.add(byteArray0);
      arrayNode2._childrenEqual(arrayNode1);
      ArrayNode arrayNode3 = arrayNode1.add(true);
      // Undeclared exception!
      try { 
        arrayNode3.required(386);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No value at index #386 [0, 6) of `ArrayNode`
         //
         verifyException("com.fasterxml.jackson.databind.JsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 722);
      // Undeclared exception!
      try { 
        arrayNode0.insert(722, (Short) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      jsonNodeFactory0.numberNode(3028);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2984);
      jsonNodeFactory0.binaryNode((byte[]) null, 3633, 0);
      int int0 = 0;
      jsonNodeFactory0.numberNode((short)0);
      // Undeclared exception!
      try { 
        arrayNode0.setPOJO((short)0, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-1L));
      jsonNodeFactory0.pojoNode((Object) null);
      jsonNodeFactory0.numberNode((Float) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      Short short0 = new Short((short) (-2608));
      ArrayNode arrayNode1 = arrayNode0.insert(2, short0);
      ArrayNode arrayNode2 = arrayNode0.removeAll();
      arrayNode1.numberNode((byte)0);
      ArrayNode arrayNode3 = arrayNode0.add(true);
      arrayNode0.size();
      Object object0 = new Object();
      ArrayNode arrayNode4 = arrayNode3.insertPOJO(0, object0);
      arrayNode4.asToken();
      Boolean boolean0 = new Boolean("");
      arrayNode2.add(boolean0);
      // Undeclared exception!
      try { 
        arrayNode4._withXxxSetArrayElement((-723), numericNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -723, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      jsonNodeFactory0.numberNode(0.0);
      int int0 = 511;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 511);
      arrayNode0.numberNode((double) 511);
      ArrayNode arrayNode1 = arrayNode0.insertRawValue(511, (RawValue) null);
      arrayNode1.add((byte[]) null);
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      arrayNode1.insert(511, double1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString(874);
      // Undeclared exception!
      try { 
        arrayNode0.set(511, bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 511, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(109);
      arrayNode0.isValueNode();
      jsonNodeFactory0.binaryNode((byte[]) null);
      arrayNode0.add((Float) null);
      arrayNode0.insertObject(109);
      ArrayNode arrayNode1 = arrayNode0.deepCopy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-8);
      arrayNode1.add(byteArray0);
      ArrayNode arrayNode2 = arrayNode0.add((double) 109);
      Short short0 = new Short((byte) (-8));
      ArrayNode arrayNode3 = arrayNode2.add(short0);
      arrayNode3.insertObject(2);
      BigInteger bigInteger0 = arrayNode3.bigIntegerValue();
      arrayNode1._childrenEqual(arrayNode2);
      ArrayNode arrayNode4 = arrayNode2.insert(2, 1250.54F);
      arrayNode3.asToken();
      ArrayNode arrayNode5 = arrayNode1.add((JsonNode) arrayNode4);
      arrayNode4.hasNonNull("No value at index #%d [0, %d) of `ArrayNode`");
      arrayNode5.hashCode();
      arrayNode5.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = false;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        arrayNode0.required(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No value at index #0 [0, 0) of `ArrayNode`
         //
         verifyException("com.fasterxml.jackson.databind.JsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      FloatNode floatNode0 = FloatNode.valueOf(743.443F);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.findParents("}ZBiLY", (List<JsonNode>) null);
      floatNode0.findParents("-^'PF0A", (List<JsonNode>) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        arrayNode0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      jsonNodeFactory0.numberNode((-1100L));
      List<JsonNode> list0 = arrayNode0.findValues("");
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      byte byte0 = (byte)0;
      jsonNodeFactory0.numberNode((byte)0);
      // Undeclared exception!
      try { 
        arrayNode1.add(bigDecimal0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      boolean boolean0 = true;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        arrayNode0.add(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, arrayList0);
      MinguoEra minguoEra0 = MinguoEra.ROC;
      // Undeclared exception!
      try { 
        arrayNode0.addPOJO(minguoEra0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 1958;
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 1958);
      Object object0 = new Object();
      arrayNode0.equals(object0);
      PriorityQueue<BinaryNode> priorityQueue0 = new PriorityQueue<BinaryNode>();
      arrayNode0.addAll((Collection<? extends JsonNode>) priorityQueue0);
      short short0 = (short)1485;
      Short short1 = new Short((short)1485);
      // Undeclared exception!
      try { 
        arrayNode0.add(short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      Long long0 = new Long(101);
      // Undeclared exception!
      try { 
        arrayNode0.insert(101, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      byte[] byteArray0 = null;
      jsonNodeFactory0.binaryNode((byte[]) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      Float float0 = new Float(9.223372036854776E18);
      // Undeclared exception!
      try { 
        arrayNode0.add(float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      String string0 = "";
      arrayNode0.findValuesAsText("", (List<String>) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
      try { 
        arrayNode0.serialize((JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(3074);
      arrayNode0.numberNode((byte)0);
      Object object0 = null;
      ArrayNode arrayNode1 = arrayNode0.addPOJO((Object) null);
      arrayNode1.findValue("");
      Short short0 = new Short((byte)0);
      arrayNode0.add(short0);
      // Undeclared exception!
      try { 
        arrayNode0.set(3074, (double) 3074);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 3074, array size 2
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      int int0 = (-4573);
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      Boolean boolean0 = dOMDeserializer_DocumentDeserializer0.supportsUpdate((DeserializationConfig) null);
      arrayNode0.insert(3460, boolean0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dOMDeserializer_DocumentDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0);
      arrayNode1.asToken();
      arrayNode0.deepCopy();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      jsonNodeFactory0.numberNode((-1444L));
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Float float0 = new Float(0.0);
      arrayNode0.numberNode(float0);
      ArrayNode arrayNode1 = arrayNode0.add(0);
      ArrayNode arrayNode2 = arrayNode0.add((float) 0);
      RawValue rawValue0 = new RawValue("i\"@If$}6rE");
      arrayNode2.setRawValue(0, rawValue0);
      Double double0 = new Double((-1.0));
      ArrayNode arrayNode3 = arrayNode2.add(double0);
      arrayNode3.traverse();
      arrayNode1.addNull();
      arrayNode2.findParent("i\"@If$}6rE");
      Double double1 = new Double(0.0);
      arrayNode2.add(double1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1);
      Long long0 = new Long(0L);
      ArrayNode arrayNode1 = arrayNode0.insert(1, long0);
      ArrayNode arrayNode2 = arrayNode1.add((JsonNode) arrayNode0);
      arrayNode2.insertNull(0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.valueOf((long) 0, 0);
      bigDecimal0.pow(3440);
      arrayNode2.set(1, bigDecimal0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      Object object0 = new Object();
      jsonNodeFactory0.pojoNode(object0);
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      jsonNodeFactory0.numberNode(bigDecimal1);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      EnumFeature enumFeature0 = EnumFeature.BOGUS_FEATURE;
      ObjectMapper objectMapper1 = objectMapper0.configure((DatatypeFeature) enumFeature0, false);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      SerializerProvider serializerProvider0 = objectMapper2.getSerializerProviderInstance();
      arrayNode0.isEmpty(serializerProvider0);
      arrayNode1.getNodeType();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      ArrayNode arrayNode1 = jsonNodeFactory0.arrayNode();
      ArrayNode arrayNode2 = jsonNodeFactory0.arrayNode();
      List<JsonNode> list0 = arrayNode0.findParents("");
      arrayNode1.findValues("!}Gnii$s  9 [", list0);
      Short short0 = new Short((short)0);
      ArrayNode arrayNode3 = arrayNode0.add(short0);
      arrayNode3.isContainerNode();
      Boolean boolean0 = new Boolean(true);
      ArrayNode arrayNode4 = arrayNode3.set(0, boolean0);
      arrayNode4.hasNonNull((-2451));
      arrayNode2.addAll((Collection<? extends JsonNode>) list0);
      // Undeclared exception!
      try { 
        arrayNode0.set(293, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 293, array size 1
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1023);
      List<JsonNode> list0 = arrayNode0.findParents("|zFF=0@N(#@N(`-2&_");
      arrayNode0.findValues("RETURN", list0);
      arrayNode0.size();
      RawValue rawValue0 = new RawValue(arrayNode0);
      jsonNodeFactory0.numberNode((Byte) null);
      ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
      arrayNode0.insert(1023, (JsonNode) valueNode0);
      JsonPointer jsonPointer0 = JsonPointer.empty();
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.NONE;
      ArrayNode arrayNode1 = arrayNode0._withArray((JsonPointer) null, jsonPointer0, jsonNode_OverwriteMode0, false);
      BigDecimal bigDecimal0 = new BigDecimal(1023);
      arrayNode1.add(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.objectNode();
      List<String> list0 = arrayNode0.findValuesAsText("Iv% vu0/X^mLw{,DK");
      List<String> list1 = objectNode0.findValuesAsText("", list0);
      List<String> list2 = objectNode0.findValuesAsText("", list1);
      arrayNode0.findValuesAsText("", list2);
      arrayNode0.get(0);
      arrayNode0.getNodeType();
      ArrayNode arrayNode1 = arrayNode0._insert(0, (JsonNode) null);
      arrayNode1._withXxxSetArrayElement(0, arrayNode0);
      arrayNode0.getNodeType();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      RawValue rawValue0 = new RawValue(arrayNode0);
      ArrayNode arrayNode1 = arrayNode0.addRawValue(rawValue0);
      JsonPointer jsonPointer0 = JsonPointer.empty();
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext((DupDetector) null);
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      JsonPointer jsonPointer1 = JsonPointer.forPath(jsonWriteContext1, true);
      jsonPointer0.append(jsonPointer1);
      arrayNode0._withObjectAddTailElement(jsonPointer0, true);
      ArrayNode arrayNode2 = arrayNode1.insert(0, "");
      Stack<JsonNode> stack0 = new Stack<JsonNode>();
      arrayNode2.findParents(", array size ", (List<JsonNode>) stack0);
      Double double0 = new Double(0);
      arrayNode2.set(0, double0);
      LongNode longNode0 = LongNode.valueOf(2);
      BigInteger bigInteger0 = longNode0.bigIntegerValue();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        arrayNode0.set((-252), bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -252, array size 2
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        arrayNode0.add(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      int int0 = 512;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 512);
      ArrayNode arrayNode1 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)0);
      arrayNode0.get(512);
      ArrayNode arrayNode2 = arrayNode0.addNull();
      int int1 = 0;
      arrayNode2.get(0);
      Short short0 = new Short((short)28);
      arrayNode2.add((float) (byte)0);
      arrayNode2.insert(0, "");
      arrayNode1.add(short0);
      arrayNode2.isArray();
      // Undeclared exception!
      try { 
        arrayNode0._withXxxSetArrayElement((-314), numericNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -314, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      int int0 = 100;
      arrayNode0.hasNonNull(100);
      List<JsonNode> list0 = arrayNode0.findValues((String) null);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      int int1 = 2;
      Integer integer0 = new Integer(2);
      // Undeclared exception!
      try { 
        arrayNode1.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 1140;
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 1140);
      int int1 = 0;
      Float float0 = new Float((-911.0F));
      // Undeclared exception!
      try { 
        arrayNode0.set(0, float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = true;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      jsonNodeFactory0.numberNode(0.0);
      arrayNode0.isPojo();
      // Undeclared exception!
      try { 
        arrayNode0.with((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.writeReplace();
      ArrayNode arrayNode1 = arrayNode0.add((-568));
      // Undeclared exception!
      try { 
        arrayNode1.withArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      int int0 = 2666;
      // Undeclared exception!
      try { 
        arrayNode0.insertNull(2666);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      Double double0 = new Double((-932.81655));
      ObjectNode objectNode1 = objectNode0.put("\"uC", double0);
      FloatNode floatNode0 = FloatNode.valueOf((-1321.6128F));
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      List<JsonNode> list0 = arrayNode0.findValues("com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer");
      List<JsonNode> list1 = floatNode0.findParents("com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer", list0);
      List<JsonNode> list2 = objectNode0.findParents("", list1);
      List<JsonNode> list3 = objectNode1.findParents("JSON", list2);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list3);
      Short short0 = new Short((short)587);
      // Undeclared exception!
      try { 
        arrayNode1.insert(0, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, (List<JsonNode>) null);
      // Undeclared exception!
      try { 
        arrayNode0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  // @Test(timeout = 4000)
  // public void test117()  throws Throwable  {
  //     JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
  //     jsonNodeFactory0.objectNode();
  //     int int0 = 1073741824;
  //     ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1073741824);
  // }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      linkedList0.pollLast();
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, linkedList0);
      // Undeclared exception!
      try { 
        arrayNode0.withArray("{jO*gVtu$h%)>{Wy7|");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // `JsonNode` not of type `ObjectNode` (but `com.fasterxml.jackson.databind.node.ArrayNode)`, cannot call `withArray()` on it
         //
         verifyException("com.fasterxml.jackson.databind.JsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = null;
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      // Undeclared exception!
      try { 
        arrayNode0.addObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.asDouble();
      int int0 = 0;
      boolean boolean0 = true;
      int int1 = (-216);
      // Undeclared exception!
      try { 
        arrayNode0.set(0, (-216));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("%Pe?");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      JsonSetter.Value jsonSetter_Value0 = annotationIntrospector1.findSetterInfo((Annotated) null);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultSetterInfo(jsonSetter_Value0);
      ArrayNode arrayNode0 = objectMapper2.createArrayNode();
      int int0 = 1114111;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        arrayNode0.set(1114111, (byte[]) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 1114111, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      FloatNode floatNode0 = new FloatNode(1.0F);
      String string0 = ", array size ";
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      objectNode0.findValues(", array size ", (List<JsonNode>) null);
      floatNode0.findValues(", array size ", (List<JsonNode>) null);
      floatNode0.findParents(", array size ", (List<JsonNode>) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      int int0 = (-1063);
      // Undeclared exception!
      try { 
        arrayNode0.insert((-1063), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.objectNode();
      ArrayNode arrayNode1 = objectNode0.putArray("");
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.NONE;
      ArrayNode arrayNode2 = arrayNode0.withArray("", jsonNode_OverwriteMode0, false);
      arrayNode2.remove((-12931));
      arrayNode0.isBoolean();
      BigDecimal bigDecimal0 = new BigDecimal((-3008));
      arrayNode1.insert((-3008), bigDecimal0);
      List<JsonNode> list0 = arrayNode1.findValues("Y$/d");
      List<JsonNode> list1 = arrayNode1.findValues((String) null, list0);
      arrayNode0.addAll(arrayNode1);
      arrayNode1.findParents("Y$/d", list1);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      FloatNode floatNode0 = new FloatNode((-3008));
      Vector<String> vector0 = new Vector<String>();
      List<String> list2 = floatNode0.findValuesAsText((String) null, (List<String>) vector0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) stack1, (Collection<String>) list2, locale_FilteringMode0);
      List<String> list4 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) list3, locale_FilteringMode0);
      List<String> list5 = objectNode0.findValuesAsText("", list4);
      arrayNode1.findValuesAsText("_|s", list5);
      arrayNode2.insertObject((-3008));
      arrayNode1.get((-3008));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayNode0.findValuesAsText("M?G w~", (List<String>) arrayList0);
      arrayNode0.add(false);
      ArrayNode arrayNode1 = arrayNode0.insert(0, (byte[]) null);
      FloatNode floatNode0 = new FloatNode(0);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      RawValue rawValue0 = new RawValue((String) null);
      ObjectNode objectNode1 = objectNode0.putRawValue("/]|K.", rawValue0);
      floatNode0.findParents("", (List<JsonNode>) null);
      arrayNode0.findValues("M?G w~", (List<JsonNode>) null);
      objectNode1.findValues("M?G w~", (List<JsonNode>) null);
      floatNode0.findParents("M?G w~", (List<JsonNode>) null);
      arrayNode1.findParents("M?G w~", (List<JsonNode>) null);
      arrayNode0.add((short) (-312));
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      int int0 = 0;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      ArrayNode arrayNode1 = arrayNode0.add((BigDecimal) null);
      Long long0 = new Long(0);
      ArrayNode arrayNode2 = arrayNode0.insert(0, long0);
      arrayNode2.removeAll();
      // Undeclared exception!
      try { 
        arrayNode2._set(0, arrayNode1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.removeAll();
      int int0 = 12288;
      ArrayNode arrayNode1 = arrayNode0.insert(12288, (Boolean) null);
      arrayNode1.numberNode(12288);
      // Undeclared exception!
      try { 
        arrayNode1.required(2114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No value at index #2114 [0, 1) of `ArrayNode`
         //
         verifyException("com.fasterxml.jackson.databind.JsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Integer integer0 = new Integer((-317));
      jsonNodeFactory0.numberNode(integer0);
      jsonNodeFactory0.numberNode((-627.0F));
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Integer integer1 = new Integer(2955);
      ArrayNode arrayNode1 = arrayNode0.insert(2955, integer1);
      arrayNode1.isBoolean();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      arrayNode0.add(bigDecimal0);
      // Undeclared exception!
      try { 
        arrayNode0.set(2955, (Float) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 2955, array size 2
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      String string0 = "2";
      List<JsonNode> list0 = arrayNode0.findParents("2");
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      arrayNode0.findValue("2");
      Comparator<JsonNode> comparator0 = (Comparator<JsonNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayNode1.equals(comparator0, (JsonNode) arrayNode0);
      Comparator<JsonNode> comparator1 = (Comparator<JsonNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayNode1.equals(comparator1, (JsonNode) arrayNode0);
      arrayNode1.hasNonNull("2");
      ArrayNode arrayNode2 = arrayNode1.removeAll();
      arrayNode2._childrenEqual(arrayNode0);
      // Undeclared exception!
      try { 
        arrayNode0.set((-975), 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -975, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.insertObject((-1675));
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext((Object) arrayNode0);
      jsonWriteContext2.withDupDetector(dupDetector0);
      jsonWriteContext0.writeValue();
      JsonPointer jsonPointer0 = jsonWriteContext2.pathAsPointer();
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.NULLS;
      ArrayNode arrayNode1 = objectNode0._withArray(jsonPointer0, jsonPointer0, jsonNode_OverwriteMode0, true);
      arrayNode1._insert(0, objectNode0);
      // Undeclared exception!
      try { 
        arrayNode0.set(1, (JsonNode) objectNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 1, array size 1
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      float float0 = (-5094.4365F);
      FloatNode floatNode0 = FloatNode.valueOf((-5094.4365F));
      floatNode0.iterator();
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      List<JsonNode> list0 = floatNode0.findParents("No value at index #%d [0, %d) of `ArrayNode`", (List<JsonNode>) vector0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, list0);
      int int0 = 23;
      // Undeclared exception!
      try { 
        arrayNode0.set(23, "No value at index #%d [0, %d) of `ArrayNode`");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 23, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = null;
      int int0 = 720;
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 720);
      arrayNode0.spliterator();
      // Undeclared exception!
      try { 
        arrayNode0.set(720, (long) 720);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      int int0 = 1;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        arrayNode0.insert(1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = true;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      // Undeclared exception!
      try { 
        arrayNode0.addAll((Collection<? extends JsonNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      // Undeclared exception!
      try { 
        arrayNode0._withObjectAddTailElement((JsonPointer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      jsonNodeFactory0.numberNode(0L);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      // Undeclared exception!
      try { 
        arrayNode0.setPOJO(0, jsonNodeFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        arrayNode0.insertPOJO(224, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ArrayNode arrayNode1 = arrayNode0.add((short) (-790));
      BigInteger bigInteger0 = BigInteger.ZERO;
      arrayNode0.insert((-4284), bigInteger0);
      arrayNode0.add((JsonNode) arrayNode1);
      Long long0 = new Long(985L);
      Long long1 = Long.getLong("?:[bV_,:cG", long0);
      arrayNode0.add(long1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      int int0 = 0;
      float float0 = (-1750.37F);
      arrayNode0.insert(0, (-1750.37F));
      String string0 = "JI$a=l_@97";
      arrayNode0.add("JI$a=l_@97");
      try { 
        JsonPointer.compile("jGhD*$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"jGhD*$\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      float float0 = 0.0F;
      ArrayNode arrayNode1 = arrayNode0.arrayNode();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0F);
      ArrayNode arrayNode2 = arrayNode0.add((Float) null);
      arrayNode2._insert(1159, arrayNode1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) numericNode0;
      // Undeclared exception!
      try { 
        arrayNode0._reportWrongNodeOperation(")\"A7-,h", objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // )\"A7-,h
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ArrayNode arrayNode1 = arrayNode0.insert(0, 0L);
      jsonNodeFactory0.numberNode((short) (-1534));
      ArrayNode arrayNode2 = new ArrayNode(jsonNodeFactory0);
      arrayNode2.asBoolean();
      arrayNode2.asInt((-3084));
      arrayNode2.findValuesAsText("0");
      arrayNode2.insert(2486, (BigDecimal) null);
      arrayNode1.get(0);
      arrayNode0.add(0L);
      arrayNode2.insertArray((-3084));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      jsonNodeFactory0.numberNode((Double) null);
      jsonNodeFactory0.numberNode((byte) (-88));
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      arrayNode0.isArray();
      ArrayNode arrayNode1 = arrayNode0.withArray("");
      String string0 = "\": ";
      // Undeclared exception!
      try { 
        arrayNode1.set(54, "\": ");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 54, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultAttributes(contextAttributes0);
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      List<JsonNode> list0 = arrayNode0.findValues("b#K`jbY");
      List<JsonNode> list1 = arrayNode0.findParents("b#K`jbY", list0);
      List<JsonNode> list2 = arrayNode0.findValues("b#K`jbY", list1);
      List<JsonNode> list3 = arrayNode0.findValues("b#K`jbY", list2);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list3);
      arrayNode1.remove(534);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      int int0 = 0;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      arrayNode0.getNodeType();
      BigInteger bigInteger0 = BigInteger.ONE;
      arrayNode0.add(bigInteger0);
      ArrayNode arrayNode1 = arrayNode0.add(true);
      arrayNode0.findValuesAsText("L'DMl}f(4QpZ0#1>AlF");
      arrayNode1.isArray();
      // Undeclared exception!
      try { 
        arrayNode0.set(32767, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 32767, array size 2
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.objectNode();
      arrayNode0.equals((Comparator<JsonNode>) null, (JsonNode) objectNode0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      jsonNodeFactory0.numberNode(2);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 248);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("", (float) 248);
      ObjectNode objectNode2 = objectNode1.put("!y#B`tk7V~ssyr", (Boolean) null);
      jsonNodeFactory0.numberNode((Float) null);
      ArrayNode arrayNode1 = objectNode2.withArray(">cSm&HsiI");
      arrayNode0._childrenEqual(arrayNode1);
      arrayNode1.add(248);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
      ArrayNode arrayNode1 = arrayNode0.insert(0, 0);
      arrayNode0.add(0.0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonPointer jsonPointer0 = JsonPointer.forPath(tokenFilterContext0, true);
      arrayNode1._withArrayAddTailElement(jsonPointer0, false);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      int int0 = 0;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      RawValue rawValue0 = new RawValue((String) null);
      // Undeclared exception!
      try { 
        arrayNode0.setRawValue(0, rawValue0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeString("WMiFj+9JdX.");
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonPointer jsonPointer0 = JsonPointer.forPath(tokenFilterContext0, true);
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.NONE;
      floatNode0._withArray(jsonPointer0, jsonPointer0, jsonNode_OverwriteMode0, true);
      floatNode0.findParents("d[b|14KXSr*lSc]1nC", (List<JsonNode>) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      // Undeclared exception!
      try { 
        arrayNode0.add((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(2657);
      ArrayNode arrayNode1 = arrayNode0.add((short) (-652));
      jsonNodeFactory0.numberNode((float) (short) (-652));
      arrayNode0.add((short) (-652));
      arrayNode1.set(0, 0);
      int int0 = 0;
      Integer integer0 = new Integer(1140);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-92);
      Long long0 = new Long(0L);
      jsonNodeFactory0.numberNode(long0);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)38;
      // Undeclared exception!
      try { 
        arrayNode1.binaryNode(byteArray0, (-2843), (int) (byte) (-58));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BinaryNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JSON";
      stringArray0[1] = "JSON";
      stringArray0[2] = "JSON";
      stringArray0[3] = "JSON";
      stringArray0[4] = "JSON";
      stringArray0[5] = "JSON";
      stringArray0[6] = "JSON";
      SimpleBeanPropertyFilter simpleBeanPropertyFilter0 = SimpleBeanPropertyFilter.serializeAllExcept(stringArray0);
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.setDefaultFilter(simpleBeanPropertyFilter0);
      ObjectMapper objectMapper3 = objectMapper2.setFilterProvider(simpleFilterProvider1);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      ObjectMapper objectMapper4 = objectMapper3.disable(jsonParser_FeatureArray0);
      ArrayNode arrayNode0 = objectMapper4.createArrayNode();
      arrayNode0.path(1283);
      arrayNode0.insert(0, (-387.46112F));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        arrayNode0.setNull(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Short short0 = new Short((short)545);
      // Undeclared exception!
      try { 
        arrayNode0.set((-1), short0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Long.getLong("lu0");
      jsonNodeFactory0.numberNode((Long) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.writeReplace();
      arrayNode0.add((-986));
      arrayNode0.get("x>G?:0Bn+m=T");
      // Undeclared exception!
      try { 
        arrayNode0.set(1, (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 1, array size 1
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.rawValueNode((RawValue) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      String string0 = null;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Stack<String> stack0 = new Stack<String>();
      stack0.add("");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) stack0, locale_FilteringMode0);
      arrayNode0.findValuesAsText((String) null, list0);
      int int0 = 893;
      Double double0 = new Double(1030.683);
      // Undeclared exception!
      try { 
        arrayNode0.set(893, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 893, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      FloatNode floatNode0 = FloatNode.valueOf(1265.5002F);
      jsonNodeFactory0.numberNode((Integer) null);
      floatNode0.findValues("*!fqIJdDw0>TY\"=", (List<JsonNode>) null);
      floatNode0.findValues("*!fqIJdDw0>TY\"=", (List<JsonNode>) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      // Undeclared exception!
      try { 
        arrayNode0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      int int0 = (-425);
      ArrayNode arrayNode0 = null;
      try {
        arrayNode0 = new ArrayNode(jsonNodeFactory0, (-425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -425
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      int int0 = 1474;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1474);
      Double double0 = new Double(1474);
      arrayNode0.numberNode(double0);
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      textNode0.asLong();
      // Undeclared exception!
      try { 
        arrayNode0._set(1474, textNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 1474, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Object object0 = new Object();
      jsonNodeFactory0.pojoNode(object0);
      jsonNodeFactory0.objectNode();
      arrayNode0.insert((-1459), 0.0F);
      BigInteger bigInteger0 = BigInteger.TEN;
      ArrayNode arrayNode1 = arrayNode0.add(bigInteger0);
      ArrayNode arrayNode2 = arrayNode1.removeAll();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)50;
      arrayNode1.numberNode((float) (byte) (-117));
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-10);
      jsonNodeFactory0.arrayNode();
      byteArray0[7] = (byte) (-95);
      byteArray0[8] = (byte)102;
      // Undeclared exception!
      try { 
        arrayNode2.set((-1459), byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1459, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = true;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Boolean boolean1 = Boolean.valueOf(true);
      // Undeclared exception!
      try { 
        arrayNode0.set((-970), boolean1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -970, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonpCharacterEscapes0.getEscapeSequence((-1));
      RawValue rawValue0 = new RawValue((SerializableString) null);
      arrayNode0.insertRawValue(0, rawValue0);
      ArrayNode arrayNode1 = arrayNode0.set(0, true);
      ArrayNode arrayNode2 = arrayNode1.add((short) (-1622));
      arrayNode1.insert((-1), (JsonNode) arrayNode2);
      Integer integer0 = new Integer(1354);
      // Undeclared exception!
      try { 
        arrayNode1.set((int) (short) (-1622), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1622, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      ArrayNode arrayNode1 = arrayNode0.insert(4200, (short)0);
      int int0 = (-1);
      String string0 = "";
      Long long0 = new Long((short)0);
      arrayNode1.requiredAt("");
      // Undeclared exception!
      try { 
        arrayNode0.set(4200, long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 4200, array size 1
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      int int0 = 0;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      jsonNodeFactory0.objectNode();
      jsonNodeFactory0.arrayNode(1556);
      JsonPointer jsonPointer0 = null;
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.NONE;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        arrayNode0._withArray((JsonPointer) null, (JsonPointer) null, jsonNode_OverwriteMode0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      int int0 = 0;
      BigInteger bigInteger0 = BigInteger.TEN;
      jsonNodeFactory0.numberNode(bigInteger0);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      arrayNode0.path("Illegal index ");
      // Undeclared exception!
      try { 
        arrayNode0.set(0, (double) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      jsonNodeFactory0.numberNode((-2859L));
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        arrayNode0.add(0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      short short0 = (short)48;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((short)48);
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      arrayList0.add((JsonNode) numericNode0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, arrayList0);
      arrayNode0.addNull();
      arrayNode0.isEmpty();
      // Undeclared exception!
      try { 
        arrayNode0.set((int) (short)48, (float) (short)48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 48, array size 2
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-54);
      ArrayNode arrayNode1 = arrayNode0.insert(1, (long) (byte)8);
      arrayNode1.writeReplace();
      ArrayNode arrayNode2 = arrayNode0.set(0, byteArray0);
      String string0 = null;
      arrayNode2.findPath((String) null);
      arrayNode0.insert(6000, (short) (byte)8);
      // Undeclared exception!
      try { 
        arrayNode0.required(1536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No value at index #1536 [0, 2) of `ArrayNode`
         //
         verifyException("com.fasterxml.jackson.databind.JsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      FloatNode floatNode0 = new FloatNode(2011.6967F);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1615);
      List<JsonNode> list0 = arrayNode0.findValues("");
      List<JsonNode> list1 = floatNode0.findParents("", list0);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list1);
      // Undeclared exception!
      try { 
        arrayNode1.set(1615, (JsonNode) floatNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 1615, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      int int0 = 2;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2);
      jsonNodeFactory0.numberNode((long) 2);
      arrayNode0.isEmpty();
      int int1 = (-1);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        arrayNode0.set((-1), bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)0;
      jsonNodeFactory0.arrayNode((int) (byte)84);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)0;
      Iterator<JsonNode> iterator0 = arrayNode0.iterator();
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte) (-87);
      jsonNodeFactory0.pojoNode(iterator0);
      ArrayNode arrayNode1 = arrayNode0.insert((-1014), byteArray0);
      arrayNode0.set((int) (byte)0, (Float) null);
      arrayNode1.insert((-3280), 313);
      ArrayNode arrayNode2 = arrayNode1.insert((int) (byte)0, "");
      // Undeclared exception!
      try { 
        arrayNode2.set((-1317), (short) (byte) (-16));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1317, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      Stack<JsonNode> stack0 = new Stack<JsonNode>();
      Short short0 = new Short((short)44);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      stack0.add((JsonNode) valueNode0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, stack0);
      arrayNode0.canConvertToExactIntegral();
      ArrayNode arrayNode1 = arrayNode0.add((-1L));
      arrayNode0.add((Long) null);
      arrayNode0.insert((int) (short)44, (short) (-1785));
      ArrayNode arrayNode2 = arrayNode1.insert((int) (short)44, (float) (-1L));
      // Undeclared exception!
      try { 
        arrayNode2.set((-1222), (JsonNode) arrayNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1222, array size 5
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      arrayNode0.path(0);
      arrayNode0.add((short)59);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-19);
      arrayNode0.add(byteArray0);
      arrayNode0.insert(2238, (double) 2238);
      String string0 = "UCF*q1ZO4Egut:kS\\u";
      // Undeclared exception!
      try { 
        JsonPointer.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"UCF*q1ZO4Egut:kS\\u\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1904);
      FloatNode floatNode0 = new FloatNode(1904);
      floatNode0.get("");
      arrayNode0.add((JsonNode) null);
      // Undeclared exception!
      try { 
        arrayNode0.set(1904, (-1182L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 1904, array size 1
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, linkedList0);
      ObjectNode objectNode0 = arrayNode0.insertObject(2800);
      objectNode0.putNull("suppress");
      linkedList0.add((JsonNode) arrayNode0);
      objectNode0.put("pvhd", true);
      objectNode0.put("", 1L);
      String string0 = "~G,X";
      Double double0 = new Double(2800);
      // Undeclared exception!
      try { 
        arrayNode0.set((-2110), double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -2110, array size 2
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((long) (-821), mathContext0);
      jsonNodeFactory0.objectNode();
      BigDecimal bigDecimal1 = new BigDecimal(627.2281851840975);
      bigDecimal1.precision();
      RoundingMode roundingMode0 = RoundingMode.UP;
      bigDecimal0.divide(bigDecimal1, roundingMode0);
      BigDecimal.valueOf(0L, 0);
      ArrayNode arrayNode1 = arrayNode0.insert((-821), bigDecimal0);
      arrayNode0.required(0);
      ArrayNode arrayNode2 = arrayNode1.removeAll();
      // Undeclared exception!
      try { 
        arrayNode2.set(0, 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = true;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 57343);
      List<JsonNode> list0 = arrayNode0.findParents((String) null);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      int int0 = (-338);
      // Undeclared exception!
      try { 
        arrayNode1.insertObject((-338));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      ObjectNode objectNode1 = objectNode0.putPOJO((String) null, roundingMode0);
      Long long0 = new Long(0L);
      ObjectNode objectNode2 = objectNode1.put((String) null, long0);
      Stack<String> stack0 = new Stack<String>();
      List<String> list0 = arrayNode0.findValuesAsText("", (List<String>) stack0);
      ObjectNode objectNode3 = objectNode2.retain((Collection<String>) list0);
      JsonPointer jsonPointer0 = JsonPointer.empty();
      // Undeclared exception!
      try { 
        objectNode3._withArrayAddTailProperty(jsonPointer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectNode objectNode0 = arrayNode0.objectNode();
      objectNode0.intValue();
      objectNode0.isPojo();
      ArrayNode arrayNode1 = arrayNode0.add(Float.NaN);
      ObjectNode objectNode1 = objectNode0.deepCopy();
      arrayNode0._withXxxSetArrayElement(110, objectNode1);
      arrayNode0.isEmpty();
      arrayNode1.hasNonNull(0);
      jsonNodeFactory0.pojoNode(arrayNode1);
      // Undeclared exception!
      try { 
        arrayNode0.with("Tq");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // `JsonNode` not of type `ObjectNode` (but com.fasterxml.jackson.databind.node.ArrayNode), cannot call `with(String)` on it
         //
         verifyException("com.fasterxml.jackson.databind.JsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, arrayList0);
      Integer integer0 = new Integer(0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(integer0);
      ArrayNode arrayNode1 = arrayNode0.add((JsonNode) valueNode0);
      ArrayNode arrayNode2 = arrayNode0.insert(0, 13);
      RawValue rawValue0 = new RawValue(arrayNode1);
      ArrayNode arrayNode3 = arrayNode1.addRawValue(rawValue0);
      arrayNode3.numberNode(integer0);
      arrayNode2.insert(1286, 0.0F);
      arrayNode3.findParents((String) null);
      arrayNode2.findValue("");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      String string0 = "~}y7hk^!u";
      Long long0 = new Long(1681L);
      Long long1 = Long.getLong("~}y7hk^!u", long0);
      jsonNodeFactory0.numberNode(long1);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      // Undeclared exception!
      try { 
        arrayNode0.set(0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      int int0 = (-2646);
      // Undeclared exception!
      try { 
        arrayNode0.required((-2646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No value at index #-2646 [0, 0) of `ArrayNode`
         //
         verifyException("com.fasterxml.jackson.databind.JsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = null;
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory1.arrayNode();
      // Undeclared exception!
      try { 
        arrayNode0.with("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Can only call `withObject()` with empty JSON Pointer on `ObjectNode`, not `com.fasterxml.jackson.databind.node.ArrayNode`
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      int int0 = 0;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      // Undeclared exception!
      try { 
        arrayNode0.set(0, (float) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      ObjectNode objectNode0 = arrayNode0.addObject();
      ArrayNode arrayNode1 = objectNode0.putArray("");
      List<JsonNode> list0 = arrayNode1.findValues("");
      ArrayNode arrayNode2 = new ArrayNode(jsonNodeFactory0, list0);
      arrayNode2.path("bbK&Ap77F%n");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory1, 127);
      FloatNode floatNode0 = new FloatNode((-2.14748365E9F));
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory1);
      objectNode0.findParents("<kd", (List<JsonNode>) null);
      floatNode0.findValues("a&U;>X<?", (List<JsonNode>) null);
      arrayNode0.findValues("com.fasterxml.jackson.databind.ext.DOMSerializer", (List<JsonNode>) null);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      // Undeclared exception!
      try { 
        arrayNode1.add((short)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      byte[] byteArray0 = new byte[1];
      Long long0 = new Long(0);
      jsonNodeFactory0.numberNode(long0);
      byteArray0[0] = (byte)1;
      BinaryNode binaryNode0 = new BinaryNode(byteArray0);
      ArrayNode arrayNode1 = arrayNode0._insert(0, binaryNode0);
      Float float0 = new Float((float) (byte)1);
      arrayNode1.insert(0, float0);
      Short short0 = new Short((short)3361);
      arrayNode1.set((int) (byte)1, short0);
      RawValue rawValue0 = new RawValue(arrayNode1);
      arrayNode1.addRawValue(rawValue0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.insert((-1275), true);
      ArrayNode arrayNode1 = arrayNode0.insert((-1275), 1716.7F);
      // Undeclared exception!
      try { 
        arrayNode1.withArray("DXP(byk==HXbE");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // `JsonNode` not of type `ObjectNode` (but `com.fasterxml.jackson.databind.node.ArrayNode)`, cannot call `withArray()` on it
         //
         verifyException("com.fasterxml.jackson.databind.JsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      arrayNode0.removeAll();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      arrayNode0.addObject();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayNode0.forEach(consumer0);
      ArrayNode arrayNode1 = arrayNode0.insert((-238), (-238));
      ArrayNode arrayNode2 = arrayNode1._add(arrayNode0);
      ArrayNode arrayNode3 = arrayNode0._add(arrayNode2);
      ArrayNode arrayNode4 = arrayNode1.insert((-238), 0.0);
      arrayNode4.insert(1, "");
      arrayNode1.insert(1, (-2188));
      arrayNode1.set(1, 0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      arrayNode3.add(bigDecimal0);
      ArrayNode arrayNode5 = arrayNode1.insertNull((-881));
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayNode4.asLong();
      arrayNode5.forEach(consumer1);
      ArrayNode arrayNode6 = arrayNode5.set(0, (short)0);
      ArrayNode arrayNode7 = arrayNode3.insert((-2188), (short)0);
      Comparator<JsonNode> comparator0 = (Comparator<JsonNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(com.fasterxml.jackson.databind.JsonNode.class) , any(com.fasterxml.jackson.databind.JsonNode.class));
      arrayNode3.equals(comparator0, (JsonNode) arrayNode4);
      arrayNode6.hashCode();
      Comparator<JsonNode> comparator1 = (Comparator<JsonNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayNode7.equals(comparator1, (JsonNode) arrayNode2);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 224);
      arrayNode0.findValue("com.fasterxml.jackson.annotation.ObjectIdGenerator");
      Double double0 = new Double(224);
      jsonNodeFactory0.numberNode(double0);
      // Undeclared exception!
      try { 
        arrayNode0.set(2606, 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 2606, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      int int0 = (-2199);
      Float float0 = new Float((double) (-2199));
      // Undeclared exception!
      try { 
        arrayNode0.set(425, float0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 425, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      float float0 = 1.0F;
      FloatNode floatNode0 = FloatNode.valueOf(1.0F);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "I YM7qlZ,";
      objectArray0[1] = (Object) floatNode0;
      objectArray0[2] = (Object) floatNode0;
      objectArray0[3] = (Object) "I YM7qlZ,";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) floatNode0;
      objectArray0[6] = (Object) floatNode0;
      objectArray0[7] = (Object) floatNode0;
      objectArray0[8] = (Object) "I YM7qlZ,";
      // Undeclared exception!
      try { 
        floatNode0._reportWrongNodeOperation("I YM7qlZ,", objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // I YM7qlZ,
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, linkedList0);
      String string0 = null;
      // Undeclared exception!
      try { 
        arrayNode0.withObject((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Can only call `withObject()` with empty JSON Pointer on `ObjectNode`, not `com.fasterxml.jackson.databind.node.ArrayNode`
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JsonNodeFactory.withExactBigDecimals(true);
      FloatNode floatNode0 = new FloatNode(0.0F);
      String string0 = "Too big Array index (%d; max %d) to use for insert with `JsonPointer`";
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      // Undeclared exception!
      try { 
        jsonNodeFactory0.arrayNode((-277));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -277
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        arrayNode0.insert(0, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      // Undeclared exception!
      try { 
        arrayNode0.set((-1159), (Integer) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1159, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      // Undeclared exception!
      try { 
        jsonNodeFactory0.arrayNode((-335));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -335
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = false;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      // Undeclared exception!
      try { 
        arrayNode0.withObject(jsonPointer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Can only call `withObject()` with empty JSON Pointer on `ObjectNode`, not `com.fasterxml.jackson.databind.node.ArrayNode`
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      String string0 = null;
      Boolean boolean0 = new Boolean((String) null);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      // Undeclared exception!
      try { 
        arrayNode0.withObject((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Can only call `withObject()` with empty JSON Pointer on `ObjectNode`, not `com.fasterxml.jackson.databind.node.ArrayNode`
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.get(2);
      Integer integer0 = new Integer(0);
      ArrayNode arrayNode1 = arrayNode0.add(integer0);
      ArrayNode arrayNode2 = arrayNode0.insert(0, (JsonNode) arrayNode1);
      arrayNode2.insertPOJO(0, jsonNodeFactory0);
      short short0 = (short)523;
      Short short1 = new Short((short)523);
      // Undeclared exception!
      try { 
        arrayNode2.set((-129), short1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -129, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, (List<JsonNode>) null);
      int int0 = (-1239);
      MockRandom mockRandom0 = new MockRandom((-1239));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-1239), (-1239), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      arrayNode0.insert(0, 0);
      jsonNodeFactory0.objectNode();
      arrayNode0.size();
      ArrayNode arrayNode1 = arrayNode0.set(0, 2978.0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        arrayNode1.set(1, bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 1, array size 1
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      serializationFeatureArray0[8] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      ArrayNode arrayNode1 = arrayNode0.add(2362.76);
      assertFalse(arrayNode1.isFloat());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      FloatNode floatNode0 = new FloatNode(1906.197F);
      JsonNode jsonNode0 = floatNode0.deepCopy();
      ArrayNode arrayNode1 = arrayNode0._insert(0, jsonNode0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(false, (Object) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, contentReference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.EVERYTHING;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "JSON");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, objectMapper2, stringWriter1, '\"');
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setRootValueSeparator(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      arrayNode1.serialize(jsonGenerator0, defaultSerializerProvider0);
      assertEquals(10, jsonGenerator0.getOutputBuffered());
      
      arrayNode0.findParent("JSON");
      ArrayNode arrayNode2 = arrayNode0.addArray();
      RawValue rawValue0 = new RawValue("");
      arrayNode1.insertRawValue(0, rawValue0);
      assertNotSame(arrayNode0, arrayNode2);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Integer integer0 = new Integer(2117);
      // Undeclared exception!
      try { 
        arrayNode0.set(2117, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 2117, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FloatNode floatNode0 = new FloatNode((-1.0F));
      JsonPointer jsonPointer0 = JsonPointer.empty();
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.NULLS;
      floatNode0._withArray(jsonPointer0, jsonPointer0, jsonNode_OverwriteMode0, false);
      floatNode0.fieldNames();
      int int0 = (-1585);
      floatNode0.at((String) null);
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("M?uh\")7Yg4CQ!PsiDD\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"M?uh\")7Yg4CQ!PsiDD\"\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      objectMapper1.createObjectNode();
      try { 
        JsonPointer.compile("E{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"E{\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = true;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ShortNode shortNode0 = new ShortNode((short) (-1421));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      arrayNode0.insert((int) (short) (-1421), byteArray0);
      BigInteger bigInteger0 = shortNode0.bigIntegerValue();
      // Undeclared exception!
      try { 
        bigInteger0.testBit((-1940));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      int int0 = 255;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(255);
      boolean boolean0 = false;
      ArrayNode arrayNode1 = arrayNode0.insert(255, false);
      RawValue rawValue0 = new RawValue(arrayNode1);
      ArrayNode arrayNode2 = arrayNode1.addRawValue(rawValue0);
      int int1 = (-2729);
      // Undeclared exception!
      try { 
        arrayNode2.set((-2729), 255);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -2729, array size 2
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      jsonNodeFactory0.arrayNode();
      JsonPointer jsonPointer0 = null;
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.SCALARS;
      // Undeclared exception!
      try { 
        arrayNode0.withObject((JsonPointer) null, jsonNode_OverwriteMode0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      // Undeclared exception!
      try { 
        arrayNode0.set(6, (long) 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 6, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.canConvertToInt();
      RawValue rawValue0 = new RawValue("I(`L@hga.^!4+QU=eP5");
      arrayNode0.insertRawValue(1, rawValue0);
      ArrayNode arrayNode1 = arrayNode0.addArray();
      // Undeclared exception!
      try { 
        arrayNode1.setNull(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 1, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(2591);
      // Undeclared exception!
      try { 
        arrayNode0.set(2591, (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 2591, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
      JsonPointer jsonPointer0 = null;
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.SCALARS;
      // Undeclared exception!
      try { 
        arrayNode0.withObject((JsonPointer) null, jsonNode_OverwriteMode0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf((-749.5427F));
      int int0 = 0;
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(0, 0, (DupDetector) null);
      boolean boolean0 = true;
      JsonPointer jsonPointer0 = JsonPointer.forPath(jsonReadContext0, true);
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.NONE;
      floatNode0._withArray(jsonPointer0, jsonPointer0, jsonNode_OverwriteMode0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 0);
      // Undeclared exception!
      try { 
        arrayNode0.set(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      short short0 = (short)0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      bigDecimal0.movePointRight((-4150));
      jsonNodeFactory0.numberNode(bigDecimal0);
      arrayNode0.removeAll();
      jsonNodeFactory0.numberNode((short)0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      RoundingMode roundingMode0 = RoundingMode.UP;
      bigDecimal2.setScale((int) (short)0, roundingMode0);
      bigDecimal2.scaleByPowerOfTen(0);
      bigDecimal1.divide(bigDecimal2, (int) (short)0, (int) (short)0);
      ArrayNode arrayNode1 = arrayNode0.insert(0, bigDecimal1);
      ArrayNode arrayNode2 = arrayNode1.add((float) 0);
      arrayNode2.add(true);
      RawValue rawValue0 = new RawValue("=S");
      ArrayNode arrayNode3 = arrayNode2.addRawValue(rawValue0);
      arrayNode3.insertNull((short)0);
      int int0 = 0;
      ArrayNode arrayNode4 = arrayNode3.insertNull(0);
      arrayNode4.textNode("=S");
      arrayNode0.set(0, (JsonNode) arrayNode3);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = null;
      try {
        arrayNode0 = new ArrayNode(jsonNodeFactory0, (-755));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -755
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        arrayNode0.set(0, bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      jsonNodeFactory0.numberNode((-1418L));
      ArrayNode arrayNode1 = arrayNode0.add(1L);
      Integer integer0 = new Integer(0);
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      ArrayNode arrayNode2 = arrayNode0.add(float0);
      arrayNode2.asInt();
      ArrayNode arrayNode3 = arrayNode1.add(integer0);
      arrayNode1.insert(63, 63);
      jsonNodeFactory0.numberNode((-166.80868));
      arrayNode3.insert(2, 2);
      arrayNode0.equals((Object) float0);
      arrayNode0.add((-2545.06301));
      Short short0 = new Short((short)1);
      // Undeclared exception!
      try { 
        arrayNode3.set((-884), short0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -884, array size 6
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-14);
      arrayNode0.binaryNode(byteArray0, (int) (byte)0, (int) (byte)0);
      arrayNode0.insert((-1), (short)0);
      assertEquals("[0]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      JsonPointer jsonPointer0 = JsonPointer.empty();
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.NONE;
      floatNode0.asBoolean();
      // Undeclared exception!
      try { 
        floatNode0.withObject(jsonPointer0, jsonNode_OverwriteMode0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Can only call `withObject()` with empty JSON Pointer on `ObjectNode`, not `com.fasterxml.jackson.databind.node.FloatNode`
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.insert((-330), (long) (-330));
      BigInteger bigInteger0 = BigInteger.ONE;
      ArrayNode arrayNode1 = arrayNode0.add(bigInteger0);
      Double double0 = new Double(0.0);
      arrayNode1.add(double0);
      BigInteger.valueOf((-1438L));
      arrayNode0.get((String) null);
      Iterator<JsonNode> iterator0 = arrayNode1.elements();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonPointer jsonPointer0 = JsonPointer.valueOf("/Vk[");
      // Undeclared exception!
      try { 
        arrayNode0.withObject(jsonPointer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot replace context node (of type `com.fasterxml.jackson.databind.node.ArrayNode`) using `withObject()` with  JSON Pointer '/Vk['
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)1;
      BinaryNode binaryNode0 = new BinaryNode(byteArray0);
      // Undeclared exception!
      try { 
        arrayNode0._set((-1921), binaryNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1921, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.numberNode((-191.0F));
      byte byte0 = (byte) (-6);
      Byte byte1 = new Byte((byte) (-6));
      jsonNodeFactory0.numberNode(byte1);
      jsonNodeFactory0.numberNode((-1453.4529F));
      String string0 = "";
      objectNode0.withObject("");
      ArrayNode arrayNode0 = objectNode0.putArray((String) null);
      arrayNode0.addNull();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      arrayNode0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        arrayNode0.set((int) (byte) (-6), (-1453.4529F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -6, array size 1
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Long long0 = Long.getLong("30U4ij?x", (long) 0);
      // Undeclared exception!
      try { 
        arrayNode0.set(0, long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 0, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      int int0 = 1439;
      jsonNodeFactory0.numberNode(1439);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      arrayNode0.add(0);
      try { 
        JsonPointer.compile("zMs%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"zMs%\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonPointer jsonPointer0 = JsonPointer.empty();
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.NULLS;
      // Undeclared exception!
      try { 
        arrayNode0.withObject(jsonPointer0, jsonNode_OverwriteMode0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Can only call `withObject()` with empty JSON Pointer on `ObjectNode`, not `com.fasterxml.jackson.databind.node.ArrayNode`
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, (Map<String, JsonNode>) null);
      String string0 = "DD8";
      // Undeclared exception!
      try { 
        objectNode0.putPOJO("DD8", "DD8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      int int0 = (-3031);
      Double double0 = new Double((-3031));
      // Undeclared exception!
      try { 
        arrayNode0.set((-3031), double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -3031, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      int int0 = (-1);
      short short0 = (short)0;
      // Undeclared exception!
      try { 
        vector0.remove(869);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 869
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FloatNode.valueOf(0.0F);
      String string0 = "gdcIfIl#1tLN]L-";
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("gdcIfIl#1tLN]L-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"gdcIfIl#1tLN]L-\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      int int0 = (-493);
      Integer integer0 = new Integer((-493));
      ArrayNode arrayNode1 = arrayNode0.add(integer0);
      Comparator<JsonNode> comparator0 = (Comparator<JsonNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(com.fasterxml.jackson.databind.JsonNode.class) , any(com.fasterxml.jackson.databind.JsonNode.class));
      arrayNode1.equals(comparator0, (JsonNode) arrayNode0);
      Long long0 = new Long((-493));
      // Undeclared exception!
      try { 
        arrayNode0.set((-493), long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -493, array size 1
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      LinkedHashSet<BinaryNode> linkedHashSet0 = new LinkedHashSet<BinaryNode>();
      byte[] byteArray0 = new byte[6];
      RawValue rawValue0 = new RawValue("S/je; t5");
      jsonNodeFactory0.rawValueNode(rawValue0);
      Long long0 = new Long(0L);
      arrayNode0.add(long0);
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-47);
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      linkedHashSet0.add(binaryNode0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedHashSet0);
      predicate0.negate();
      linkedHashSet0.removeIf(predicate0);
      ArrayNode arrayNode1 = arrayNode0.addAll((Collection<? extends JsonNode>) linkedHashSet0);
      ArrayNode arrayNode2 = arrayNode0.add((short) (byte) (-47));
      arrayNode2.getNodeType();
      ArrayNode arrayNode3 = arrayNode2.set(1, "S/je; t5");
      arrayNode3.floatValue();
      Integer integer0 = new Integer((byte)0);
      // Undeclared exception!
      try { 
        arrayNode1.set((int) (byte) (-47), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -47, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Short short0 = new Short((short)299);
      arrayNode0.objectNode();
      arrayNode0.numberNode(short0);
      // Undeclared exception!
      try { 
        arrayNode0.addAll((Collection<? extends JsonNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, arrayList0);
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      JsonPointer jsonPointer0 = jsonWriteContext0.pathAsPointer();
      // Undeclared exception!
      try { 
        arrayNode0.withObject(jsonPointer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Can only call `withObject()` with empty JSON Pointer on `ObjectNode`, not `com.fasterxml.jackson.databind.node.ArrayNode`
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FloatNode.valueOf((-46.42499F));
      JsonPointer.compile("");
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.ALL;
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("com.fasterxml.jackson.core.exc.StreamWriteException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"com.fasterxml.jackson.core.exc.StreamWriteException\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FloatNode floatNode0 = new FloatNode(203.53722F);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      ContentReference contentReference0 = ContentReference.construct(true, (Object) bufferRecycler0, 3, 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, contentReference0, true);
      int int0 = 734;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-3787));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Stack<JsonNode> stack0 = new Stack<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, stack0);
      int int0 = (-1);
      Boolean boolean0 = new Boolean("");
      arrayNode0.decimalValue();
      // Undeclared exception!
      try { 
        arrayNode0.set((-1), boolean0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ArrayNode arrayNode1 = arrayNode0.add(3382);
      assertEquals("", arrayNode1.asText());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
      arrayNode0.path("\", \"");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        arrayNode0.set((-1130), bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1130, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      int int0 = (-8);
      ArrayNode arrayNode0 = null;
      try {
        arrayNode0 = new ArrayNode(jsonNodeFactory0, (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = true;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      // Undeclared exception!
      try { 
        jsonNodeFactory0.arrayNode((-4793));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -4793
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = true;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      int int0 = (-688);
      jsonNodeFactory0.numberNode((long) (-688));
      ArrayNode arrayNode0 = null;
      try {
        arrayNode0 = new ArrayNode(jsonNodeFactory0, (-688));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -688
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
      JsonFormat jsonFormat0 = mock(JsonFormat.class, new ViolatedAssumptionAnswer());
      doReturn((JsonFormat.Feature[]) null).when(jsonFormat0).with();
      doReturn((JsonFormat.Feature[]) null).when(jsonFormat0).without();
      // Undeclared exception!
      try { 
        JsonFormat.Features.construct(jsonFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.annotation.JsonFormat$Features", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ObjectNode objectNode1 = objectNode0.put("{=Tmo)aO/C6^1=", bigInteger0);
      ObjectNode objectNode2 = objectNode1.deepCopy();
      ObjectNode objectNode3 = objectNode2.put("{=Tmo)aO/C6^1=", 0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      ObjectNode objectNode4 = objectNode3.put("{=Tmo)aO/C6^1=", bigDecimal0);
      ArrayNode arrayNode0 = objectNode4.putArray("SV$yp");
      Short short0 = new Short((short)0);
      ArrayNode arrayNode1 = arrayNode0.add(short0);
      assertFalse(arrayNode1.isLong());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      JsonPointer jsonPointer0 = JsonPointer.empty();
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.SCALARS;
      ObjectNode objectNode0 = arrayNode0._withObject(jsonPointer0, jsonPointer0, jsonNode_OverwriteMode0, true);
      assertNull(objectNode0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonPointer jsonPointer0 = JsonPointer.empty();
      jsonPointer0.appendProperty("");
      arrayNode0._at(jsonPointer0);
      jsonNodeFactory0.numberNode((short) (-1));
      ArrayNode arrayNode1 = jsonNodeFactory0.arrayNode(2366);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      arrayNode1.insert((-2272), bigDecimal0);
      // Undeclared exception!
      try { 
        arrayNode0._withXxxSetArrayElement((-2272), arrayNode1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -2272, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      String string0 = "klADno";
      try { 
        JsonPointer.compile("klADno");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"klADno\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      float float0 = 2921.15F;
      FloatNode.valueOf(2921.15F);
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"q\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      ArrayNode arrayNode0 = objectMapper2.createArrayNode();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.and(bigInteger1);
      ArrayNode arrayNode1 = arrayNode0.add(bigInteger0);
      arrayNode1.add(false);
      arrayNode1.get(1302);
      ObjectNode objectNode0 = arrayNode1.addObject();
      assertFalse(objectNode0.isLong());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Class<BinaryNode> class0 = BinaryNode.class;
      objectIdGenerators_IntSequenceGenerator0.forScope(class0);
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(jsonNodeFactory0);
      jsonNodeFactory0.numberNode(integer0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      boolean boolean0 = arrayNode0.isArray();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      jsonNodeFactory0.rawValueNode((RawValue) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jsonNodeFactory0.numberNode(bigDecimal0);
      Float float0 = new Float(9.223372E18F);
      jsonNodeFactory0.numberNode(float0);
      Short short0 = new Short((short)2);
      jsonNodeFactory0.numberNode(short0);
      int int0 = (-2589);
      ArrayNode arrayNode0 = null;
      try {
        arrayNode0 = new ArrayNode(jsonNodeFactory0, (-2589));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2589
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean boolean0 = true;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      short short0 = (short)29;
      jsonNodeFactory0.numberNode((short)29);
      jsonNodeFactory0.numberNode((short)29);
      jsonNodeFactory0.numberNode((float) (short)29);
      int int0 = (-3573);
      String string0 = "v!&:B%\"<$,:";
      Long long0 = new Long((short)29);
      Long long1 = Long.getLong("v!&:B%\"<$,:", long0);
      jsonNodeFactory0.numberNode(long1);
      ArrayNode arrayNode0 = null;
      try {
        arrayNode0 = new ArrayNode(jsonNodeFactory0, (-3573));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3573
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      String string0 = "Illegal index ";
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = '6';
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      // Undeclared exception!
      try { 
        jsonNodeFactory0.arrayNode((-3247));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3247
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.putNull("com.fasterxml.jackson.databind.AnnotationIntrospector");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "com.fasterxml.jackson.databind.AnnotationIntrospector";
      stringArray0[1] = "com.fasterxml.jackson.databind.AnnotationIntrospector";
      stringArray0[2] = "com.fasterxml.jackson.databind.AnnotationIntrospector";
      stringArray0[3] = "com.fasterxml.jackson.databind.AnnotationIntrospector";
      stringArray0[4] = "com.fasterxml.jackson.databind.AnnotationIntrospector";
      stringArray0[5] = "com.fasterxml.jackson.databind.AnnotationIntrospector";
      stringArray0[6] = "com.fasterxml.jackson.databind.AnnotationIntrospector";
      stringArray0[7] = "com.fasterxml.jackson.databind.AnnotationIntrospector";
      stringArray0[8] = "com.fasterxml.jackson.databind.AnnotationIntrospector";
      ObjectNode objectNode2 = objectNode1.retain(stringArray0);
      ObjectNode objectNode3 = objectNode2.removeAll();
      ObjectNode objectNode4 = objectNode3.put("com.fasterxml.jackson.databind.AnnotationIntrospector", "com.fasterxml.jackson.databind.AnnotationIntrospector");
      ArrayNode arrayNode0 = objectNode4.putArray("");
      ArrayNode arrayNode1 = arrayNode0.addPOJO("com.fasterxml.jackson.databind.AnnotationIntrospector");
      assertFalse(arrayNode1.isBigInteger());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = true;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      int int0 = (-1564);
      ArrayNode arrayNode0 = null;
      try {
        arrayNode0 = new ArrayNode(jsonNodeFactory0, (-1564));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1564
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      objectMapper2.clearProblemHandlers();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, arrayList0);
      arrayList0.iterator();
      Long long0 = new Long(927);
      // Undeclared exception!
      try { 
        arrayNode0.set(927, long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 927, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      jsonNodeFactory0.numberNode((Byte) null);
      Float float0 = new Float((-2.14748365E9F));
      arrayNode0.add((Double) null);
      arrayNode0.add(float0);
      arrayNode0.hashCode();
      int int0 = 953;
      Object object0 = new Object();
      ArrayNode arrayNode1 = arrayNode0.insertPOJO(953, object0);
      // Undeclared exception!
      try { 
        arrayNode1.writeReplace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to JDK serialize `ArrayNode` value: No serializer found for class java.lang.Object and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.node.NodeSerialization", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FloatNode.valueOf(477.6F);
      String string0 = "FRz@&";
      try { 
        JsonPointer.compile("FRz@&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"FRz@&\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ObjectNode objectNode0 = new ObjectNode((JsonNodeFactory) null);
      String string0 = null;
      JsonPointer jsonPointer0 = JsonPointer.valueOf((String) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        objectNode0._withArrayAddTailProperty(jsonPointer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.get("Ints.stringConverter()");
      Double double0 = new Double(0.0);
      arrayNode0.numberNode(double0);
      Short short0 = Short.valueOf((short) (-656));
      ArrayNode arrayNode1 = arrayNode0.insert((-1), short0);
      Vector<JsonNode> vector0 = new Vector<JsonNode>(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      List<JsonNode> list0 = arrayNode1.findParents("", (List<JsonNode>) vector0);
      arrayNode1.findParents("Ints.stringConverter()", list0);
      int int0 = (-1504);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        jsonNodeFactory0.binaryNode(byteArray0, 108, (-1504));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BinaryNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 0);
      int int0 = 1;
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        arrayNode0.add(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = null;
      try {
        arrayNode0 = new ArrayNode(jsonNodeFactory0, (-746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -746
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      objectNode0.findValues("com.fasterxml.jackson.databind.node.ArrayNode", (List<JsonNode>) linkedList0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ObjectNode objectNode1 = objectNode0.retain((Collection<String>) set0);
      hashMap0.replace("9i(0g%bX", (JsonNode) objectNode1, (JsonNode) objectNode0);
      ObjectNode objectNode2 = objectNode1._put("af", objectNode0);
      Double double0 = new Double(9.223372036854776E18);
      ObjectNode objectNode3 = objectNode2.put("af", double0);
      float float0 = (-2165.264F);
      Float float1 = new Float((-2165.264F));
      objectNode1.put("}\"Y.A=X0p{i?i&", 0);
      ObjectNode objectNode4 = objectNode3.put("af", float1);
      // Undeclared exception!
      try { 
        objectNode4._withArrayAddTailProperty((JsonPointer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonPointer jsonPointer0 = JsonPointer.empty();
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.NULLS;
      ArrayNode arrayNode1 = arrayNode0._withArray(jsonPointer0, jsonPointer0, jsonNode_OverwriteMode0, true);
      assertTrue(arrayNode1.isArray());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Long long0 = new Long(0L);
      jsonNodeFactory0.numberNode(long0);
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, arrayList0);
      ArrayNode arrayNode1 = arrayNode0.addNull();
      arrayNode0.hasNonNull("");
      int int0 = 1;
      arrayNode1.addNull();
      RawValue rawValue0 = new RawValue(arrayNode0);
      arrayNode1.insertRawValue(1, rawValue0);
      int int1 = 53;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)68;
      // Undeclared exception!
      try { 
        arrayNode1.set(126, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 126, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ArrayNode arrayNode1 = arrayNode0.add((-1543L));
      assertFalse(arrayNode1.isObject());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Version version0 = annotationIntrospector0.version();
      SimpleModule simpleModule0 = new SimpleModule(".*A,cFd", version0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.setDeserializerModifier(beanDeserializerModifier0);
      arrayNode0.insertPOJO(1168, simpleModule1);
      JsonPointer jsonPointer0 = JsonPointer.empty();
      JsonNode jsonNode0 = arrayNode0._at(jsonPointer0);
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Short short0 = new Short((short) (-1174));
      ValueNode valueNode0 = arrayNode0.numberNode(short0);
      ArrayNode arrayNode1 = arrayNode0.insert(567, (JsonNode) valueNode0);
      ArrayNode arrayNode2 = arrayNode1.add(567);
      arrayNode0.get(11);
      ArrayNode arrayNode3 = arrayNode1.addNull();
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext((DupDetector) null);
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext(object0);
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.reset(3);
      JsonWriteContext jsonWriteContext3 = jsonWriteContext2.createChildArrayContext((Object) jsonNodeFactory0);
      JsonPointer jsonPointer0 = jsonWriteContext3.pathAsPointer();
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.ALL;
      boolean boolean0 = true;
      ArrayNode arrayNode4 = arrayNode1._withArray(jsonPointer0, jsonPointer0, jsonNode_OverwriteMode0, true);
      ArrayNode arrayNode5 = arrayNode3.add(false);
      arrayNode5.asToken();
      arrayNode4.insertArray(0);
      // Undeclared exception!
      try { 
        arrayNode3.equals((Comparator<JsonNode>) null, (JsonNode) arrayNode2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Double double0 = new Double(1003.686457211);
      jsonNodeFactory0.numberNode(double0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ArrayNode arrayNode1 = arrayNode0.addNull();
      assertSame(arrayNode0, arrayNode1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      int int0 = 2;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2);
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 3235);
      Object object0 = new Object();
      arrayNode0.equals(object0);
      FloatNode floatNode0 = new FloatNode(0.0F);
      List<JsonNode> list0 = arrayNode0.findValues((String) null);
      List<JsonNode> list1 = floatNode0.findValues("+qh]+_VE9{9;5<A", list0);
      List<JsonNode> list2 = arrayNode0.findParents("", list1);
      assertTrue(list2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      jsonNodeFactory0.numberNode(bigInteger0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      jsonNodeFactory0.binaryNode(byteArray0);
      jsonNodeFactory0.arrayNode();
      arrayNode0.insert(4066, (BigInteger) null);
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("=zIt1/,KG{vwk6z@Q*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"=zIt1/,KG{vwk6z@Q*\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FloatNode.valueOf((-1422.004F));
      try { 
        JsonPointer.compile("7<4)rUJg-d8T_Bm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"7<4)rUJg-d8T_Bm\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      RawValue rawValue0 = new RawValue(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      ObjectNode objectNode1 = objectNode0.putRawValue("JSON", rawValue0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JSON";
      stringArray0[1] = "JSON";
      stringArray0[2] = "JSON";
      stringArray0[3] = "JSON";
      stringArray0[4] = "0!zjin1h";
      ObjectNode objectNode2 = objectNode1.retain(stringArray0);
      int int0 = (-862048943);
      ObjectNode objectNode3 = objectNode2.put("^@O", (-862048943));
      // Undeclared exception!
      try { 
        objectNode3.withArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BaseJsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      objectMapper1.createObjectNode();
      String string0 = "";
      String string1 = "$&}q9k*uqrmWsfa@=G";
      try { 
        Integer.decode("$&}q9k*uqrmWsfa@=G");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$&}q9k*uqrmWsfa@=G\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      JsonNode jsonNode0 = arrayNode0._at(jsonPointer0);
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      int int0 = 0;
      jsonNodeFactory0.numberNode((double) 0);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      List<JsonNode> list0 = arrayNode0.findParents("(tYcJ");
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      // Undeclared exception!
      try { 
        arrayNode1._add(arrayNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      DefaultBaseTypeLimitingValidator defaultBaseTypeLimitingValidator0 = new DefaultBaseTypeLimitingValidator();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.activateDefaultTyping((PolymorphicTypeValidator) defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0);
      objectMapper2.activateDefaultTypingAsProperty(defaultBaseTypeLimitingValidator0, objectMapper_DefaultTyping0, "dR!291l~");
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("B(K&S*Oi4@#W*k3z:z", "dR!291l~", true, 'b', 1348);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 8)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = false;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, linkedList0);
      Integer integer0 = new Integer(3706);
      // Undeclared exception!
      try { 
        arrayNode0.set(3706, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 3706, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(3311);
      // Undeclared exception!
      try { 
        arrayNode0.set((-1), 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index -1, array size 0
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      String string0 = "";
      BigInteger bigInteger0 = BigInteger.TEN;
      ObjectNode objectNode1 = objectNode0.put("", bigInteger0);
      JsonPointer jsonPointer0 = JsonPointer.empty();
      // Undeclared exception!
      try { 
        objectNode1._withObjectAddTailProperty(jsonPointer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0._add((JsonNode) null);
      ArrayNode arrayNode1 = arrayNode0.add(true);
      ArrayNode arrayNode2 = arrayNode1.insertNull(110);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)24;
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        arrayNode2.setPOJO(110, binaryNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal index 110, array size 3
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      String string0 = null;
      Long.getLong((String) null);
      jsonNodeFactory0.numberNode((Long) null);
      // Undeclared exception!
      try { 
        arrayNode0.required((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node of type `ArrayNode` has no fields
         //
         verifyException("com.fasterxml.jackson.databind.JsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      jsonNodeFactory0.numberNode((-767L));
      int int0 = 1;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayNode0.forEach(consumer0);
      JsonNode.OverwriteMode jsonNode_OverwriteMode0 = JsonNode.OverwriteMode.NULLS;
      // Undeclared exception!
      try { 
        arrayNode0.withArray("com.fasterxml.jackson.annotation.JsonTypeInfo$Id", jsonNode_OverwriteMode0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"com.fasterxml.jackson.annotation.JsonTypeInfo$Id\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }
}
