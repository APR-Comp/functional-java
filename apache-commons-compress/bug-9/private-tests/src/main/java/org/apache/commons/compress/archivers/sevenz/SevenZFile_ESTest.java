/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 03:41:47 GMT 2023
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.SyncFailedException;
import java.lang.reflect.Array;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.FileAttribute;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SevenZFile_ESTest extends SevenZFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      File file0 = MockFile.createTempFile("hU?]KMYh}J{sa!`(o", "BCJ_IA64_FILTER");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)109;
      mockFileInputStream0.close();
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      mockFileInputStream0.mark((byte)109);
      byte byte0 = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte) (-78);
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "hU?]KMYh}J{sa!`(o", byteArray0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.SevenZFile$2", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      File file0 = MockFile.createTempFile("Jh=5`(.t2g3E", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte) (-107);
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'y';
      charArray0[2] = 'X';
      charArray0[3] = 'u';
      charArray0[4] = 'J';
      charArray0[5] = '[';
      charArray0[6] = '\'';
      charArray0[7] = '^';
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = MockFile.createTempFile("Hry0Et9 XiSq", "Hry0Et9 XiSq");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "");
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      mockFileInputStream0.mark((-4355));
      FileChannel fileChannel1 = fileChannel0.position(0L);
      fileChannel1.close();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel1, sevenZFileOptions0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = MockFile.createTempFile(" * Ld", "1e|!CpM", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = 'n';
      charArray0[2] = '9';
      charArray0[3] = 'Y';
      charArray0[4] = '|';
      charArray0[5] = 't';
      charArray0[6] = 's';
      charArray0[7] = '=';
      charArray0[8] = '%';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "4~", charArray0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = MockFile.createTempFile("nZC<u@>+", "nZC<u@>+");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(3080L);
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel1, sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = MockFile.createTempFile("Start header corrupt and unable to guess end header", "Start header corrupt and unable to guess end header");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      charArray0[2] = '$';
      charArray0[3] = '7';
      charArray0[4] = 'r';
      charArray0[5] = 'D';
      charArray0[6] = 'x';
      charArray0[7] = '[';
      charArray0[8] = 'Q';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "O9T7TO}DkP");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      mockFileInputStream0.skip(1L);
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'E';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1#@OZ77;0:VV Xr&y", "1#@OZ77;0:VV Xr&y");
      File file0 = MockFile.createTempFile("6,(b4}=1V7", "1#@OZ77;0:VV Xr&y", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "6,(b4}=1V7", (char[]) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hH]|U", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "", sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        SevenZFile.matches(byteArray0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFileOptions.builder();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, (String) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      TreeSet<OpenOption> treeSet0 = new TreeSet<OpenOption>();
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 0);
      FileChannel fileChannel0 = FileChannel.open(path0, (Set<? extends OpenOption>) treeSet0, (FileAttribute<?>[]) fileAttributeArray0);
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, (SevenZFileOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "Ji?<";
      File file0 = MockFile.createTempFile("Ji?<", "Ji?<");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(9223372036854775807L);
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel1, "Ji?<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Position in the file cannot be negative
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(0L);
      fileChannel1.force(false);
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel1, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byte byte0 = (byte)91;
      byteArray0[1] = (byte)91;
      byte byte1 = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "'l2JuEScx+~u`Qmz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      openOptionArray0[0] = (OpenOption) linkOption0;
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      openOptionArray0[1] = (OpenOption) standardOpenOption0;
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "", sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">8P7::FwF");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = '$';
      charArray0[2] = 'T';
      charArray0[3] = '+';
      charArray0[4] = '\\';
      charArray0[5] = 'Z';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, ">8P7::FwF", charArray0, (SevenZFileOptions) null);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = MockFile.createTempFile("E<Xhy8#{MJhp_|d", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No current 7z entry (call getNextEntry() first).");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      mockFile0.getAbsolutePath();
      mockFileOutputStream0.release();
      mockFileOutputStream0.write((int) (byte)23);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)28;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "No current 7z entry (call getNextEntry() first).", byteArray0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "2&<)j", byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(0L);
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'N';
      charArray0[2] = ';';
      charArray0[3] = '%';
      charArray0[4] = 'q';
      charArray0[5] = 'i';
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel1, "{%+-]0s:{]}@W:fHxq", charArray0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        SevenZFile.matches((byte[]) null, 1293);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("e=t@c");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)0;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, byteArray0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = ',';
      charArray0[2] = '-';
      charArray0[3] = '9';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "+R_;6", charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '5';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile(") > dest.length(", ") > dest.length(");
      File file0 = MockFile.createTempFile(") > dest.length(", ") > dest.length(", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      mockFileOutputStream0.getChannel();
      charArray0[1] = '&';
      charArray0[2] = ',';
      charArray0[3] = ';';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0, (SevenZFileOptions) null);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.setReadable(true, true);
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

//   @Test(timeout = 4000)
//   public void test035()  throws Throwable  {
//       MockFile mockFile0 = new MockFile("");
//       MockFile mockFile1 = new MockFile(mockFile0, "");
//       Path path0 = mockFile1.toPath();
//       StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
//       EnumSet<StandardOpenOption> enumSet0 = EnumSet.of(standardOpenOption0, standardOpenOption0);
//       EnumSet<StandardOpenOption> enumSet1 = EnumSet.complementOf(enumSet0);
//       EnumSet<StandardOpenOption> enumSet2 = EnumSet.complementOf(enumSet1);
//       FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 0);
//       FileChannel fileChannel0 = FileChannel.open(path0, (Set<? extends OpenOption>) enumSet2, (FileAttribute<?>[]) fileAttributeArray0);
//       SevenZFile sevenZFile0 = null;
//       try {
//         sevenZFile0 = new SevenZFile(fileChannel0, "", (char[]) null);
//         fail("Expecting exception: IOException");
//
//       } catch(Throwable e) {
//       }
//   }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile1, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("org.tukaani.xz.LZMA2Options", "", (File) mockFile0);
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(file0, (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte) (-45);
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockFile mockFile0 = new MockFile("shaded.org.apache.commons.io.filefilter.PrefixFileFilter");
      File file0 = MockFile.createTempFile("shaded.org.apache.commons.io.filefilter.PrefixFileFilter", "shaded.org.apache.commons.io.filefilter.PrefixFileFilter", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = 's';
      charArray0[2] = '<';
      charArray0[3] = 'M';
      charArray0[4] = 'u';
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "shaded.org.apache.commons.io.filefilter.PrefixFileFilter", charArray0, sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F]?_=WD4OM@zSw");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "1sF");
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = ">x$6x(cx1Y?v";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">x$6x(cx1Y?v", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.truncate(1048576L);
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel1, sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = '';
      mockFile0.setWritable(false);
      charArray0[2] = '.';
      charArray0[3] = 'h';
      charArray0[4] = '?';
      charArray0[5] = '-';
      charArray0[6] = 'c';
      charArray0[7] = 'u';
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = 'W';
      charArray0[2] = '*';
      charArray0[3] = 'f';
      charArray0[4] = 'o';
      charArray0[5] = 't';
      charArray0[6] = 'w';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, (SevenZFileOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      SevenZFile.matches(byteArray0, (byte)0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.truncate(0L);
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = '2';
      charArray0[2] = 'O';
      charArray0[3] = '-';
      charArray0[4] = 'p';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel1, charArray0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "TF>?[", byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = '.';
      charArray0[2] = '_';
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFileOptions.builder();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, charArray0, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = 'O';
      charArray0[2] = 'g';
      charArray0[3] = 'x';
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, charArray0, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = '{';
      charArray0[2] = '\\';
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "{+u].jM[~=xJFt^rDh", charArray0, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFile mockFile0 = new MockFile("./4\"", "J%LEj5$`:^puv5&r;[");
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, sevenZFileOptions0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 89;
      // Undeclared exception!
      try { 
        SevenZFile.matches(byteArray0, 89);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b)", "3\"7c");
      byte[] byteArray0 = new byte[3];
      mockFile0.setReadable(true);
      mockFile0.setWritable(true);
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)15;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, byteArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      File file0 = MockFile.createTempFile("totalOutputStreams", "totalOutputStreams");
      MockFile mockFile0 = new MockFile(file0, "totalOutputStreams");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Header format error: kEmptyStream must appear before kAnti");
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'u';
      charArray0[2] = '@';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, charArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)30;
      byteArray0[0] = (byte)30;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      SevenZFile.matches(byteArray0, 262144);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]F-;<g@$v|oA-Kq^", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position((long) (byte)9);
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel1);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockURI.parseServerAuthority((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "Ub>L4", sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zs SA1c0RS+Fw");
      byte[] byteArray0 = new byte[1];
      mockFile0.toURL();
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, byteArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        MockURI.URI("aORnUqFG=", "", "Fl*Y~%m{|O", "yG", "yG");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: aORnUqFG=://Fl*Y~%25m%7B%7CO?yG#yG
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = null;
      MockFile mockFile0 = new MockFile((String) null, "(29=K)4)Q9,aNB_|tH:");
      mockFile0.setWritable(true);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&F5=", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)85;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "&F5=", byteArray0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.normalize(uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      fileChannel0.position(4096L);
      String string0 = "numStreams";
      FileChannel.MapMode fileChannel_MapMode0 = FileChannel.MapMode.PRIVATE;
      long long0 = 0L;
      MockFile mockFile0 = new MockFile("numStreams");
      char[] charArray0 = new char[0];
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No!Zu");
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '0';
      charArray0[2] = 'Z';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, charArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFileOptions.builder();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-=e05-9pvXz3;", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "-=e05-9pvXz3;", sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      File file0 = MockFile.createTempFile("NjVgYWBS", "NjVgYWBS");
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '0';
      charArray0[2] = 'm';
      charArray0[3] = '1';
      charArray0[4] = '3';
      charArray0[5] = 'u';
      charArray0[6] = 'N';
      charArray0[7] = 'e';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(file0, charArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "YUXo>(3Y/&oo\"M0g\"1";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "YUXo>(3Y/&oo\"M0g\"1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "=-wMx,.,";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "=-wMx,.,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`hhP E3Z_3m@4", " yjky]XS<$");
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = 'X';
      charArray0[2] = '\"';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, charArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = null;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Incomplete property of type ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "";
      File file0 = MockFile.createTempFile("/n+Bs1i BSKIjsto%0", "");
      try { 
        MockFile.createTempFile("/n+Bs1i BSKIjsto%0", "", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "Invalid expected input size (less than -1)";
      MockFile mockFile0 = new MockFile("Invalid expected input size (less than -1)");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  // @Test(timeout = 4000)
  // public void test080()  throws Throwable  {
  //     byte[] byteArray0 = new byte[1];
  //     byteArray0[0] = (byte)58;
  //     SevenZFile.matches(byteArray0, 1422);
  //     File file0 = MockFile.createTempFile("qsvlqkH>}g*qFn*,y[", "qsvlqkH>}g*qFn*,y[");
  //     MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
  //     FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
  //     char[] charArray0 = new char[6];
  //     charArray0[0] = 'J';
  //     charArray0[1] = '6';
  //     charArray0[2] = '$';
  //     char char0 = 'B';
  //     SocketChannel socketChannel0 = SocketChannel.open();
  //     try { 
  //       fileChannel0.transferTo((byte)58, (-899L), socketChannel0);
  //       fail("Expecting exception: IOException");
  //     
  //     } catch(IOException e) {
  //        //
  //        // transferTo is not supported yet
  //        //
  //        verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!`|]9~))");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)72;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, byteArray0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockFile.createTempFile("rg", "rg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "{4&lG8>XG*|7\"";
      MockFile mockFile0 = new MockFile("{4&lG8>XG*|7\"");
      Path path0 = mockFile0.toPath();
      Class<StandardOpenOption> class0 = StandardOpenOption.class;
      mockFile0.getAbsolutePath();
      EnumSet<StandardOpenOption> enumSet0 = EnumSet.noneOf(class0);
      FileAttribute<StandardOpenOption>[] fileAttributeArray0 = (FileAttribute<StandardOpenOption>[]) Array.newInstance(FileAttribute.class, 1);
      mockFile0.createNewFile();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      enumSet0.add(standardOpenOption0);
      FileAttribute<StandardOpenOption> fileAttribute0 = (FileAttribute<StandardOpenOption>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileAttribute0).name();
      fileAttributeArray0[0] = fileAttribute0;
      // Undeclared exception!
      try { 
        FileChannel.open(path0, (Set<? extends OpenOption>) enumSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("3\u0002]:G&R`iM>wzMe", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = MockFile.createTempFile("5Bo{l/e Bf%ttqiN{I", "5Bo{l/e Bf%ttqiN{I");
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = 'k';
      charArray0[3] = 'd';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(file0, charArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = MockFile.createTempFile("rd({Ms]F_w`!^YgQ?)%", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      char[] charArray0 = new char[0];
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      fileChannel0.force(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-64);
      mockFileOutputStream0.write(byteArray0);
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OpenOption[] openOptionArray0 = new OpenOption[3];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.APPEND;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.APPEND;
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.CREATE;
      openOptionArray0[2] = (OpenOption) standardOpenOption2;
      // Undeclared exception!
      try { 
        FileChannel.open((Path) null, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.channels.FileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'Q';
      charArray0[2] = ',';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)23;
      boolean boolean0 = SevenZFile.matches(byteArray0, 107);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.getChannel();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        MockURI.create((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jO!xrG|>>]l3%I^A{P", "jO!xrG|>>]l3%I^A{P");
      File file0 = MockFile.createTempFile("jO!xrG|>>]l3%I^A{P", "jO!xrG|>>]l3%I^A{P", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        MockURI.URI("File names length invalid", "n9eNop", "y(r");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 4: File names length invalid:n9eNop#y(r
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6XZM73%@.", " l:fe'j%Pu");
      Path path0 = mockFile0.toPath();
      Class<StandardOpenOption> class0 = StandardOpenOption.class;
      EnumSet<StandardOpenOption> enumSet0 = EnumSet.allOf(class0);
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 9);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileAttribute0).name();
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      fileAttributeArray0[8] = fileAttribute0;
      // Undeclared exception!
      try { 
        FileChannel.open(path0, (Set<? extends OpenOption>) enumSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "\"Gg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(O*?|e`");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      char[] charArray0 = new char[9];
      charArray0[0] = '_';
      charArray0[1] = '*';
      charArray0[2] = '3';
      charArray0[3] = '?';
      charArray0[4] = ',';
      charArray0[5] = 'L';
      charArray0[6] = '%';
      charArray0[7] = 'D';
      charArray0[8] = '2';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "dN`V4I\"g3>'cLA", charArray0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZO4");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("numStreams", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "h");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        SevenZFile.matches(byteArray0, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OpenOption[] openOptionArray0 = new OpenOption[5];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DELETE_ON_CLOSE;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SYNC;
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.READ;
      openOptionArray0[2] = (OpenOption) standardOpenOption2;
      StandardOpenOption standardOpenOption3 = StandardOpenOption.SYNC;
      openOptionArray0[3] = (OpenOption) standardOpenOption3;
      StandardOpenOption standardOpenOption4 = StandardOpenOption.DSYNC;
      openOptionArray0[4] = (OpenOption) standardOpenOption4;
      // Undeclared exception!
      try { 
        FileChannel.open((Path) null, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.channels.FileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "Badly terminated UnpackInfo", sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[6];
      // Undeclared exception!
      try { 
        LinkOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.LinkOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          byte[] byteArray0 = new byte[5];
          byteArray0[0] = (byte)31;
          byteArray0[1] = (byte)0;
          byte byte0 = (byte)57;
          byteArray0[2] = (byte)57;
          byteArray0[3] = (byte)0;
          byteArray0[4] = (byte)0;
          int int0 = 0;
          SevenZFile.matches(byteArray0, 0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor57.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = MockFile.createTempFile(") > dest.length(", "iwOOBK", (File) null);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'D';
      charArray0[2] = 'F';
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFileOptions.builder();
      mockFile0.getCanonicalPath();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "*l.4EP!>MT[a'VNG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '0';
      charArray0[2] = '';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "~", charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      String string0 = "vvY&4Hw\"JX^YY)";
      try { 
        fileChannel0.tryLock();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // FileLock mocks are not supported yet
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        fileChannel0.truncate((-1042L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "";
      String string1 = ")pam{rA :z";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", ")pam{rA :z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("LTQMO` bq\"SWc#w~Hg7");
      Path path0 = mockFile0.toPath();
      LinkedHashSet<StandardOpenOption> linkedHashSet0 = new LinkedHashSet<StandardOpenOption>(488);
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 0);
      try { 
        FileChannel.open(path0, (Set<? extends OpenOption>) linkedHashSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%6J(hf");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      try { 
        FileChannel.open(path0, openOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Path path0 = null;
      HashSet<StandardOpenOption> hashSet0 = null;
      try {
        hashSet0 = new HashSet<StandardOpenOption>(402, (-1003.5F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1003.5
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Folder with ");
      Path path0 = mockFile0.toPath();
      HashSet<StandardOpenOption> hashSet0 = new HashSet<StandardOpenOption>();
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 2);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileAttribute0).name();
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      // Undeclared exception!
      try { 
        FileChannel.open(path0, (Set<? extends OpenOption>) hashSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        MockURI.URI("2/N\"x.Iu");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 3: 2/N\"x.Iu
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      File file0 = mockFile0.getCanonicalFile();
      // Undeclared exception!
      try { 
        mockFile0.renameTo(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      byte[] byteArray0 = null;
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DSYNC;
      EnumSet<StandardOpenOption> enumSet0 = EnumSet.of(standardOpenOption0);
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      // Undeclared exception!
      try { 
        FileChannel.open((Path) null, (Set<? extends OpenOption>) enumSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.channels.FileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Path path0 = null;
      OpenOption[] openOptionArray0 = new OpenOption[3];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.WRITE;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.WRITE;
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.DELETE_ON_CLOSE;
      openOptionArray0[2] = (OpenOption) standardOpenOption2;
      // Undeclared exception!
      try { 
        FileChannel.open((Path) null, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.channels.FileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "s@yyn(AV";
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      try { 
        MockURI.URI("AES256 properties too short in ", "$tD", "AES256 properties too short in ", (String) null, "d'!n$H");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: AES256 properties too short in ://$tDAES256%20properties%20too%20short%20in%20#d'!n$H
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      TreeSet<StandardOpenOption> treeSet0 = new TreeSet<StandardOpenOption>();
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 9);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileAttribute0).name();
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      fileAttributeArray0[8] = fileAttribute0;
      // Undeclared exception!
      try { 
        FileChannel.open(path0, (Set<? extends OpenOption>) treeSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      File file0 = MockFile.createTempFile("_V@$sGJ4;", "Badly terminated StreamsInfo");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "unknown archive");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"unknown archive\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        fileChannel0.write(byteBuffer0, (long) 0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedHashSet<StandardOpenOption> linkedHashSet0 = new LinkedHashSet<StandardOpenOption>();
      FileAttribute<StandardOpenOption>[] fileAttributeArray0 = (FileAttribute<StandardOpenOption>[]) Array.newInstance(FileAttribute.class, 9);
      FileAttribute<StandardOpenOption> fileAttribute0 = (FileAttribute<StandardOpenOption>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      fileAttributeArray0[8] = fileAttribute0;
      // Undeclared exception!
      try { 
        FileChannel.open((Path) null, (Set<? extends OpenOption>) linkedHashSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.channels.FileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        fileChannel0.truncate(0L);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EQP7hD{2K'wo(ZCnQ");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        FileChannel.open(path0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.channels.FileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "2P&j;R2~_2Ia");
      Path path0 = mockFile0.toPath();
      TreeSet<StandardOpenOption> treeSet0 = new TreeSet<StandardOpenOption>();
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileAttribute0).name();
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      // Undeclared exception!
      try { 
        FileChannel.open(path0, (Set<? extends OpenOption>) treeSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.getChannel();
      String string0 = "";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byte byte0 = (byte)109;
      try { 
        mockFileInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URI uRI0 = MockURI.create("g(=cd");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" method doesn't support options of type ");
      byte[] byteArray0 = new byte[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, byteArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("RWcpR*d;q", "Expected kCodersUnpackSize, got ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Expected kCodersUnpackSize, got \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      URI uRI0 = MockURI.create("8gP'91M");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        MockURI.URI("GL#UuPXHR*", "GL#UuPXHR*", "GL#UuPXHR*", 2, "GL#UuPXHR*", "xOp<MYsGL", "5V&Q'BE}y");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: GL#UuPXHR*://GL%23UuPXHR*@GL#UuPXHR*:2GL%23UuPXHR*?xOp%3CMYsGL#5V&Q'BE%7Dy
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = '=';
      charArray0[2] = 'P';
      charArray0[3] = 'B';
      charArray0[4] = '#';
      charArray0[5] = 'z';
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "?/]", charArray0, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      LinkedHashSet<StandardOpenOption> linkedHashSet0 = new LinkedHashSet<StandardOpenOption>();
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileAttribute0).name();
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      // Undeclared exception!
      try { 
        FileChannel.open(path0, (Set<? extends OpenOption>) linkedHashSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Badly terminated UnpackInfo");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "vy&;'GF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"vy&;'GF\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-51);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte) (-43), (int) (byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z");
      String string0 = "";
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[3];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      // Undeclared exception!
      try { 
        LinkOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.LinkOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFileOptions.builder();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "sW.=N4 VRR6b\\";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sW.=N4 VRR6b", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = '>';
      charArray0[2] = '_';
      charArray0[3] = '}';
      charArray0[4] = '@';
      charArray0[5] = '?';
      charArray0[6] = '\\';
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0, (SevenZFileOptions) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"'t:zS-GBtw)ZzcC8", "\"'t:zS-GBtw)ZzcC8");
      Path path0 = mockFile0.toPath();
      TreeSet<StandardOpenOption> treeSet0 = new TreeSet<StandardOpenOption>();
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      doReturn("\"'t:zS-GBtw)ZzcC8", (String) null).when(fileAttribute0).name();
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      // Undeclared exception!
      try { 
        FileChannel.open(path0, (Set<? extends OpenOption>) treeSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFileOptions.builder();
      SevenZFileOptions.builder();
      SevenZFileOptions.builder();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFileOptions.builder();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "=.1_f~9";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
}
