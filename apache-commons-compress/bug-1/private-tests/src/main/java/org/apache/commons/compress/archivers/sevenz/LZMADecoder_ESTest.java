/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 23 03:59:52 GMT 2023
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.SyncFailedException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.tukaani.xz.ARMOptions;
import org.tukaani.xz.ARMThumbOptions;
import org.tukaani.xz.ArrayCache;
import org.tukaani.xz.DeltaOptions;
import org.tukaani.xz.FilterOptions;
import org.tukaani.xz.FinishableOutputStream;
import org.tukaani.xz.IA64Options;
import org.tukaani.xz.LZMA2Options;
import org.tukaani.xz.LZMAOutputStream;
import org.tukaani.xz.PowerPCOptions;
import org.tukaani.xz.SPARCOptions;
import org.tukaani.xz.X86Options;
import org.tukaani.xz.XZOutputStream;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LZMADecoder_ESTest extends LZMADecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"#OrRQN&t{>");
      OutputStream outputStream0 = lZMADecoder0.encode(mockPrintStream0, mockPrintStream0);
      IA64Options iA64Options0 = new IA64Options();
      LZMA2Options lZMA2Options0 = new LZMA2Options(9);
      LZMAOutputStream lZMAOutputStream0 = new LZMAOutputStream(outputStream0, lZMA2Options0, false);
      ArrayCache arrayCache0 = new ArrayCache();
      lZMAOutputStream0.close();
      FinishableOutputStream finishableOutputStream0 = iA64Options0.getOutputStream((FinishableOutputStream) lZMAOutputStream0, arrayCache0);
      // Undeclared exception!
      lZMADecoder0.encode(finishableOutputStream0, lZMAOutputStream0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      X86Options x86Options0 = new X86Options();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      ArrayCache arrayCache0 = ArrayCache.getDummyCache();
      InputStream inputStream0 = x86Options0.getInputStream((InputStream) bufferedInputStream0, arrayCache0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[8];
      coder0.properties = byteArray0;
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-69);
      lZMADecoder0.getOptionsAsProperties(bufferedInputStream0);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-91);
      try { 
        lZMADecoder0.decode("~[", pushbackInputStream0, 2899L, coder0, byteArray0, (byte) (-49));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA dictionary is too big for this implementation
         //
         verifyException("org.tukaani.xz.LZMAInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "d{1ajnrbs#Wt'";
      InputStream inputStream0 = null;
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-66);
      byteArray0[0] = (byte) (-66);
      long long0 = 3L;
      coder0.properties = byteArray0;
      coder0.numOutStreams = 3L;
      coder0.properties = byteArray0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        lZMADecoder0.decode("d{1ajnrbs#Wt'", (InputStream) null, 0L, coder0, byteArray0, (byte) (-66));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      LZMA2Options lZMA2Options0 = new LZMA2Options(5);
      FilterOptions[] filterOptionsArray0 = new FilterOptions[6];
      filterOptionsArray0[0] = (FilterOptions) lZMA2Options0;
      filterOptionsArray0[1] = (FilterOptions) lZMA2Options0;
      filterOptionsArray0[2] = (FilterOptions) lZMA2Options0;
      filterOptionsArray0[3] = (FilterOptions) lZMA2Options0;
      filterOptionsArray0[4] = (FilterOptions) lZMA2Options0;
      lZMADecoder0.getOptionsAsProperties(filterOptionsArray0[0]);
      filterOptionsArray0[5] = (FilterOptions) lZMA2Options0;
      FilterOptions.getDecoderMemoryUsage(filterOptionsArray0);
      lZMADecoder0.getOptionsAsProperties(filterOptionsArray0[2]);
      FinishableOutputStream finishableOutputStream0 = null;
      ArrayCache arrayCache0 = new ArrayCache();
      ArrayCache.getDefaultCache();
      // Undeclared exception!
      try { 
        lZMADecoder0.encode((OutputStream) null, filterOptionsArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMAOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      int int0 = 2147483632;
      String string0 = "";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      coder0.properties = byteArray0;
      byte[] byteArray1 = new byte[0];
      try { 
        lZMADecoder0.decode("", pipedInputStream0, 2147483632, coder0, byteArray1, (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 15 kb of memory would be needed; limit was -1 kb. If the file is not corrupt, consider increasing the memory limit.
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1007);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      coder0.properties = byteArray0;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      try { 
        lZMADecoder0.decode((String) null, pipedInputStream0, 1007, coder0, byteArray1, (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA properties too short
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      long long0 = 0L;
      coder0.numInStreams = 0L;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-80);
      byteArray0[8] = (byte)0;
      coder0.properties = byteArray0;
      byte[] byteArray1 = null;
      coder0.decompressionMethodId = null;
      InputStream inputStream0 = null;
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, (InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // lc + lp must not exceed 4: 5 + 0
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      lZMADecoder0.getOptionsAsProperties((Object) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Dictionary larger than 4GiB maximum size used in ", false);
      mockFileOutputStream0.getChannel();
      Integer integer0 = new Integer(0);
      try { 
        lZMADecoder0.encode(mockFileOutputStream0, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 0 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)30;
      coder0.properties = byteArray0;
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, bufferedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      lZMADecoder0.getOptionsAsProperties((Object) null);
      Object object0 = new Object();
      lZMADecoder0.getOptionsAsProperties(object0);
      Coder coder0 = null;
      int int0 = 2344;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2344);
      // Undeclared exception!
      try { 
        lZMADecoder0.getOptionsFromCoder((Coder) null, pushbackInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      X86Options x86Options0 = new X86Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ArrayCache arrayCache0 = ArrayCache.getDefaultCache();
      InputStream inputStream0 = x86Options0.getInputStream((InputStream) mockFileInputStream0, arrayCache0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        lZMADecoder0.decode("shaded.org.apache.commons.io.filefilter.PrefixFileFilter", inputStream0, 0L, (Coder) null, byteArray0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Object object0 = new Object();
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties(object0);
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte)0, (byte) (-128), (byte)0}, byteArray0);
      
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        lZMADecoder0.encode((OutputStream) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMAOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      PowerPCOptions powerPCOptions0 = new PowerPCOptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ArrayCache arrayCache0 = ArrayCache.getDefaultCache();
      InputStream inputStream0 = powerPCOptions0.getInputStream((InputStream) pipedInputStream0, arrayCache0);
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      SPARCOptions sPARCOptions0 = new SPARCOptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ArrayCache arrayCache0 = ArrayCache.getDefaultCache();
      InputStream inputStream0 = sPARCOptions0.getInputStream((InputStream) mockFileInputStream0, arrayCache0);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      int int0 = (-935);
      try { 
        lZMADecoder0.decode("", inputStream0, 150L, coder0, byteArray0, (-935));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Integer integer0 = new Integer(1272);
      try { 
        lZMADecoder0.getOptionsAsProperties(integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 1272 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties(mockFileInputStream0);
      Coder coder0 = new Coder();
      coder0.numOutStreams = 2569L;
      coder0.properties = byteArray0;
      lZMADecoder0.getOptionsFromCoder(coder0, mockFileInputStream0);
      lZMADecoder0.getOptionsFromCoder(coder0, mockFileInputStream0);
      // Undeclared exception!
      try { 
        lZMADecoder0.encode((OutputStream) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMAOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      InputStream inputStream0 = null;
      byte[] byteArray0 = new byte[0];
      coder0.properties = byteArray0;
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, (InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA properties too short
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = null;
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        lZMADecoder0.getOptionsFromCoder((Coder) null, sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      try { 
        Integer.valueOf("%D5)y", 805306368);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 805306368 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "";
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Coder coder0 = new Coder();
      try { 
        lZMADecoder0.decode("", sequenceInputStream0, 0L, coder0, (byte[]) null, 8388608);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "|gW4doBz_2}";
      MockPrintStream mockPrintStream0 = new MockPrintStream("|gW4doBz_2}");
      FilterOptions[] filterOptionsArray0 = new FilterOptions[5];
      IA64Options iA64Options0 = new IA64Options();
      filterOptionsArray0[0] = (FilterOptions) iA64Options0;
      X86Options x86Options0 = new X86Options();
      filterOptionsArray0[1] = (FilterOptions) x86Options0;
      SPARCOptions sPARCOptions0 = new SPARCOptions();
      filterOptionsArray0[2] = (FilterOptions) sPARCOptions0;
      ARMOptions aRMOptions0 = new ARMOptions();
      filterOptionsArray0[3] = (FilterOptions) aRMOptions0;
      X86Options x86Options1 = new X86Options();
      filterOptionsArray0[4] = (FilterOptions) x86Options1;
      XZOutputStream xZOutputStream0 = null;
      try {
        xZOutputStream0 = new XZOutputStream(mockPrintStream0, filterOptionsArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // XZ filter chain must be 1-4 filters
         //
         verifyException("org.tukaani.xz.XZOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      DeltaOptions deltaOptions0 = new DeltaOptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 315);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ArrayCache arrayCache0 = new ArrayCache();
      InputStream inputStream0 = deltaOptions0.getInputStream((InputStream) bufferedInputStream0, arrayCache0);
      Coder coder0 = new Coder();
      try { 
        lZMADecoder0.decode("", inputStream0, (byte)43, coder0, byteArray0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      MockFile mockFile0 = new MockFile("R={E=v[");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "org.apache.commons.compress.archivers.sevenz.LZMADecoder");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.compress.archivers.sevenz.LZMADecoder
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "cF+gJ}";
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      try { 
        lZMADecoder0.decode("cF+gJ}", (InputStream) null, 1L, coder0, byteArray0, (-4190));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      LZMA2Options lZMA2Options0 = null;
      try {
        lZMA2Options0 = new LZMA2Options((-505), (-505), (-505), 48, 203, 114, 48, 114);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: -505 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      IA64Options iA64Options0 = new IA64Options();
      SPARCOptions sPARCOptions0 = new SPARCOptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      ArrayCache arrayCache0 = ArrayCache.getDefaultCache();
      InputStream inputStream0 = sPARCOptions0.getInputStream((InputStream) pushbackInputStream0, arrayCache0);
      InputStream inputStream1 = iA64Options0.getInputStream(inputStream0, arrayCache0);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-68);
      try { 
        lZMADecoder0.decode("", inputStream1, 0L, coder0, byteArray0, (byte) (-68));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(".]{QBnOK l+%>C1Z", "/ua");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"/ua\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      coder0.decompressionMethodId = byteArray0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "xd\\^qp^6IW";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      try { 
        lZMADecoder0.decode("xd^qp^6IW", pipedInputStream0, (-4144L), coder0, byteArray0, (byte) (-13));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      SPARCOptions sPARCOptions0 = new SPARCOptions();
      OutputStream outputStream0 = null;
      LZMA2Options lZMA2Options0 = null;
      try {
        lZMA2Options0 = new LZMA2Options(8388608);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unsupported preset: 8388608
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      LZMA2Options lZMA2Options0 = null;
      try {
        lZMA2Options0 = new LZMA2Options(3584, 3584, 3584, 3584, 0, 0, (-436), 3584);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 3584 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      LZMA2Options lZMA2Options0 = new LZMA2Options();
      File file0 = MockFile.createTempFile("G=l;>sT'%J}{", "G=l;>sT'%J}{");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "G=l;>sT'%J}{");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // G=l;>sT'%J}{
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      LZMA2Options lZMA2Options0 = null;
      try {
        lZMA2Options0 = new LZMA2Options(1284);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unsupported preset: 1284
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      InputStream inputStream0 = null;
      int int0 = 0;
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream((InputStream) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      IA64Options iA64Options0 = new IA64Options();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ArrayCache arrayCache0 = new ArrayCache();
      InputStream inputStream0 = iA64Options0.getInputStream((InputStream) pipedInputStream0, arrayCache0);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-26);
      try { 
        lZMADecoder0.decode(":Xq2", inputStream0, (-3180L), coder0, byteArray0, (-3039));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[4!gT");
      mockFileOutputStream0.release();
      mockFileOutputStream0.getChannel();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      OutputStream outputStream0 = lZMADecoder0.encode(objectOutputStream0, mockPrintStream0);
      lZMADecoder0.encode(outputStream0, outputStream0);
      mockPrintStream0.print((-2465.65F));
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties(mockPrintStream0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Coder coder0 = new Coder();
      sequenceInputStream0.read(byteArray0, (-2545), (-2545));
      coder0.properties = byteArray0;
      int int0 = 1927;
      try { 
        lZMADecoder0.decode("[4!gT", sequenceInputStream0, (-1L), coder0, byteArray0, 1927);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 8214 kb of memory would be needed; limit was 1927 kb. If the file is not corrupt, consider increasing the memory limit.
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      String string0 = "(";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("(");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "Eh\"GJoAG/?q!'^j!qiG";
      LZMA2Options lZMA2Options0 = null;
      try {
        lZMA2Options0 = new LZMA2Options(1, 1, 1, 1, 1, 0, (-1), 1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 1 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      LZMA2Options lZMA2Options0 = null;
      try {
        lZMA2Options0 = new LZMA2Options(2936, 1047, (-2089), 0, (-2089), 0, 0, 2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 2936 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("aE)|Rd");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1275);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, (-999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      InputStream inputStream0 = null;
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, (InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      SPARCOptions sPARCOptions0 = new SPARCOptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ArrayCache arrayCache0 = ArrayCache.getDummyCache();
      ArrayCache.setDefaultCache(arrayCache0);
      InputStream inputStream0 = sPARCOptions0.getInputStream((InputStream) pipedInputStream0, arrayCache0);
      ArrayCache.getDefaultCache();
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)4;
      byteArray0[1] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)4, 606);
      Coder coder0 = new Coder();
      byteArrayInputStream0.close();
      byteArrayInputStream0.skip(17179869184L);
      byteArrayInputStream0.close();
      try { 
        lZMADecoder0.decode("", byteArrayInputStream0, 17179869184L, coder0, byteArray0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)0;
      byte byte1 = (byte) (-48);
      byteArray0[4] = (byte) (-48);
      byte byte2 = (byte) (-40);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.sevenz.LZMADecoder");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      mockFile0.getCanonicalPath();
      int int0 = (-1215);
      mockFile0.getAbsolutePath();
      Integer integer0 = new Integer((-1215));
      try { 
        lZMADecoder0.encode(mockFileOutputStream0, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: -1215 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      ARMThumbOptions aRMThumbOptions0 = new ARMThumbOptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("qS 6cBI!yyHOAX'z", true);
      XZOutputStream xZOutputStream0 = null;
      try {
        xZOutputStream0 = new XZOutputStream(mockFileOutputStream0, aRMThumbOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unsupported XZ filter chain
         //
         verifyException("org.tukaani.xz.RawCoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)0;
      try { 
        lZMADecoder0.decode("!},w-", bufferedInputStream0, 336L, coder0, byteArray0, (byte)20);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 63;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 63);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      coder0.properties = byteArray0;
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // lc + lp must not exceed 4: 2 + 3
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "}&z*=!p";
      DeltaOptions deltaOptions0 = null;
      try {
        deltaOptions0 = new DeltaOptions(0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Delta distance must be in the range [1, 256]: 0
         //
         verifyException("org.tukaani.xz.DeltaOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Object object0 = new Object();
      lZMADecoder0.getOptionsAsProperties(object0);
      Coder coder0 = new Coder();
      String string0 = ":i";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(":i", ":i");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // :i
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Object object0 = new Object();
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties(object0);
      Coder coder0 = new Coder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-962), 941);
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          LZMADecoder lZMADecoder0 = new LZMADecoder();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor81.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:219)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:174)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = null;
      IA64Options iA64Options0 = new IA64Options();
      ARMOptions aRMOptions0 = new ARMOptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream(683);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ArrayCache arrayCache0 = new ArrayCache();
      aRMOptions0.getInputStream((InputStream) sequenceInputStream0, arrayCache0);
      FilterOptions[] filterOptionsArray0 = new FilterOptions[8];
      filterOptionsArray0[0] = (FilterOptions) iA64Options0;
      filterOptionsArray0[1] = (FilterOptions) aRMOptions0;
      filterOptionsArray0[2] = (FilterOptions) aRMOptions0;
      filterOptionsArray0[3] = (FilterOptions) aRMOptions0;
      filterOptionsArray0[4] = (FilterOptions) aRMOptions0;
      PowerPCOptions powerPCOptions0 = new PowerPCOptions();
      filterOptionsArray0[5] = (FilterOptions) powerPCOptions0;
      DeltaOptions deltaOptions0 = new DeltaOptions(160);
      filterOptionsArray0[6] = (FilterOptions) deltaOptions0;
      filterOptionsArray0[7] = (FilterOptions) aRMOptions0;
      FilterOptions.getDecoderMemoryUsage(filterOptionsArray0);
      ArrayCache.getDefaultCache();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      ArrayCache.getDefaultCache();
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      try { 
        sequenceInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "";
      InputStream inputStream0 = null;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      int int0 = 2597;
      LZMA2Options lZMA2Options0 = null;
      try {
        lZMA2Options0 = new LZMA2Options(2597);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unsupported preset: 2597
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "LZMA properties too short";
      DeltaOptions deltaOptions0 = new DeltaOptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 1759;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1759);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
      ArrayCache.getDummyCache();
      try { 
        deltaOptions0.setDistance(1759);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Delta distance must be in the range [1, 256]: 1759
         //
         verifyException("org.tukaani.xz.DeltaOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      long long0 = 0L;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      try { 
        lZMADecoder0.decode((String) null, pipedInputStream0, 0L, coder0, (byte[]) null, (-897));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      lZMADecoder0.encode(pipedOutputStream0, pipedOutputStream0);
      Coder coder0 = null;
      pipedOutputStream0.flush();
      // Undeclared exception!
      try { 
        lZMADecoder0.getOptionsFromCoder((Coder) null, pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      bufferedOutputStream0.write((-939));
      String string0 = "org.apache.commons.compress.archivers.sevenz.LZMADecoder";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false, "org.apache.commons.compress.archivers.sevenz.LZMADecoder");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.compress.archivers.sevenz.LZMADecoder
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      int int0 = 0;
      Coder coder0 = new Coder();
      DeltaOptions deltaOptions0 = null;
      try {
        deltaOptions0 = new DeltaOptions(0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Delta distance must be in the range [1, 256]: 0
         //
         verifyException("org.tukaani.xz.DeltaOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "LZMA properties too short";
      X86Options x86Options0 = new X86Options();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)81;
      byteArray0[0] = (byte)81;
      byte byte1 = (byte)45;
      byteArray0[1] = (byte)45;
      byte byte2 = (byte)88;
      byteArray0[2] = (byte)88;
      byte byte3 = (byte)3;
      byteArray0[3] = (byte)3;
      byte byte4 = (byte)0;
      byteArray0[4] = (byte)0;
      byte byte5 = (byte)0;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 9, 0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      int int0 = 1506;
      URI uRI0 = MockURI.URI("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      FilterOptions[] filterOptionsArray0 = new FilterOptions[4];
      ARMThumbOptions aRMThumbOptions0 = new ARMThumbOptions();
      filterOptionsArray0[0] = (FilterOptions) aRMThumbOptions0;
      X86Options x86Options0 = new X86Options();
      filterOptionsArray0[1] = (FilterOptions) x86Options0;
      PowerPCOptions powerPCOptions0 = new PowerPCOptions();
      filterOptionsArray0[2] = (FilterOptions) powerPCOptions0;
      PowerPCOptions powerPCOptions1 = new PowerPCOptions();
      filterOptionsArray0[3] = (FilterOptions) powerPCOptions1;
      int int0 = 65536;
      ArrayCache arrayCache0 = new ArrayCache();
      XZOutputStream xZOutputStream0 = null;
      try {
        xZOutputStream0 = new XZOutputStream(bufferedOutputStream0, filterOptionsArray0, 65536, arrayCache0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unsupported XZ filter chain
         //
         verifyException("org.tukaani.xz.RawCoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      ARMOptions aRMOptions0 = new ARMOptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)23);
      ArrayCache arrayCache0 = ArrayCache.getDefaultCache();
      InputStream inputStream0 = aRMOptions0.getInputStream((InputStream) byteArrayInputStream0, arrayCache0);
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "1i~";
      IA64Options iA64Options0 = new IA64Options();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 261);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "iKE2,[";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      long long0 = (-1948L);
      Coder coder0 = new Coder();
      coder0.numOutStreams = (-1948L);
      byte[] byteArray0 = new byte[5];
      coder0.numOutStreams = (-1948L);
      pipedInputStream0.mark(255);
      byteArray0[0] = (byte)17;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      coder0.numOutStreams = (long) 255;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-6);
      Coder coder1 = new Coder();
      try { 
        lZMADecoder0.getOptionsFromCoder(coder1, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      LZMADecoder lZMADecoder1 = new LZMADecoder();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte) (-34);
      try { 
        lZMADecoder1.decode((String) null, (InputStream) null, (-1980L), coder0, byteArray0, (-1352));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = null;
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        lZMADecoder0.getOptionsFromCoder((Coder) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "";
      PowerPCOptions powerPCOptions0 = new PowerPCOptions();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "sl,F1)+cb";
      MockFile mockFile0 = new MockFile("sl,F1)+cb", "sl,F1)+cb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setReadOnly();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      mockPrintStream0.print((Object) integer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "sl,F1)+cb";
      PrintStream printStream0 = mockPrintStream0.printf("sl,F1)+cb", objectArray0);
      ARMThumbOptions aRMThumbOptions0 = new ARMThumbOptions();
      mockPrintStream0.println(true);
      XZOutputStream xZOutputStream0 = null;
      try {
        xZOutputStream0 = new XZOutputStream(printStream0, aRMThumbOptions0, (ArrayCache) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unsupported XZ filter chain
         //
         verifyException("org.tukaani.xz.RawCoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "The array of suffixes must not be null";
      IA64Options iA64Options0 = new IA64Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FilterOptions[] filterOptionsArray0 = new FilterOptions[7];
      filterOptionsArray0[0] = (FilterOptions) iA64Options0;
      DeltaOptions deltaOptions0 = new DeltaOptions(256);
      filterOptionsArray0[1] = (FilterOptions) deltaOptions0;
      filterOptionsArray0[2] = (FilterOptions) iA64Options0;
      filterOptionsArray0[3] = (FilterOptions) iA64Options0;
      filterOptionsArray0[4] = (FilterOptions) iA64Options0;
      IA64Options iA64Options1 = new IA64Options();
      filterOptionsArray0[5] = (FilterOptions) iA64Options1;
      filterOptionsArray0[6] = (FilterOptions) iA64Options0;
      FilterOptions.getEncoderMemoryUsage(filterOptionsArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ArrayCache arrayCache0 = new ArrayCache();
      InputStream inputStream0 = iA64Options0.getInputStream((InputStream) sequenceInputStream0, arrayCache0);
      Coder coder0 = null;
      // Undeclared exception!
      try { 
        lZMADecoder0.decode("The array of suffixes must not be null", inputStream0, (-1751L), (Coder) null, (byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "Stream finished";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("Stream finished");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, (-1753));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-56);
      try { 
        lZMADecoder0.decode("S,iB`NjqWHi]", pipedInputStream0, 1518L, coder0, byteArray0, (byte) (-56));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      coder0.properties = byteArray0;
      coder0.numOutStreams = 0L;
      coder0.numOutStreams = (long) (byte) (-1);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      coder0.numInStreams = (-2622L);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      X86Options x86Options0 = new X86Options();
      ARMThumbOptions aRMThumbOptions0 = new ARMThumbOptions();
      OutputStream outputStream0 = null;
      LZMA2Options lZMA2Options0 = null;
      try {
        lZMA2Options0 = new LZMA2Options(2191, 2191, 0, 2191, (-1498), (-1637), 2191, (-1637));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 2191 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Object object0 = new Object();
      lZMADecoder0.getOptionsAsProperties(object0);
      Coder coder0 = null;
      X86Options x86Options0 = new X86Options();
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        lZMADecoder0.getOptionsFromCoder((Coder) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)7;
      coder0.properties = byteArray0;
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, (InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA2 dictionary size must not exceed 768 MiB: 1229619001 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "Tntw/=)VORGu";
      InputStream inputStream0 = null;
      long long0 = 0L;
      Coder coder0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-26);
      byte byte0 = (byte)31;
      byteArray0[2] = (byte)31;
      ARMOptions aRMOptions0 = new ARMOptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      LZMA2Options lZMA2Options0 = null;
      try {
        lZMA2Options0 = new LZMA2Options((byte) (-26), 0, 0, 0, 0, (byte)31, 0, (byte)31);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: -26 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      int int0 = (-2295);
      DeltaOptions deltaOptions0 = null;
      try {
        deltaOptions0 = new DeltaOptions((-2295));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Delta distance must be in the range [1, 256]: -2295
         //
         verifyException("org.tukaani.xz.DeltaOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      LZMA2Options lZMA2Options0 = new LZMA2Options();
      X86Options x86Options0 = new X86Options();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ArrayCache arrayCache0 = ArrayCache.getDefaultCache();
      XZOutputStream xZOutputStream0 = new XZOutputStream(pipedOutputStream0, lZMA2Options0, 0, arrayCache0);
      FinishableOutputStream finishableOutputStream0 = x86Options0.getOutputStream((FinishableOutputStream) xZOutputStream0, arrayCache0);
      FinishableOutputStream finishableOutputStream1 = lZMA2Options0.getOutputStream(finishableOutputStream0, arrayCache0);
      lZMADecoder0.encode(finishableOutputStream1, (Object) null);
      lZMADecoder0.getOptionsAsProperties(pipedInputStream0);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-61);
      try { 
        lZMADecoder0.decode("", pipedInputStream0, 8388608, coder0, byteArray0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      PowerPCOptions powerPCOptions0 = new PowerPCOptions();
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        powerPCOptions0.getInputStream((InputStream) null, (ArrayCache) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.SimpleInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = " l=+8*<";
      LZMA2Options lZMA2Options0 = new LZMA2Options();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      try { 
        lZMA2Options0.setLcLp(5, 5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // lc + lp must not exceed 4: 5 + 5
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      File file0 = MockFile.createTempFile("XURh+=E", "1OwZeL");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "1OwZeL");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 1OwZeL
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        lZMADecoder0.getOptionsFromCoder((Coder) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      LZMA2Options lZMA2Options0 = null;
      try {
        lZMA2Options0 = new LZMA2Options((-1), 2729, 2926, 790, (-1), 2729, (-1438), (-2593));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: -1 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "=<N!(XrizIJZ'3X1";
      MockFile mockFile0 = new MockFile((File) null, "=<N!(XrizIJZ'3X1");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "=<N!(XrizIJZ'3X1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // =<N!(XrizIJZ'3X1
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "";
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      long long0 = 1L;
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)5;
      try { 
        bufferedInputStream0.skip(1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = null;
      int int0 = (-357);
      Coder coder0 = new Coder();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "";
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties((Object) null);
      String string0 = "shaded.org.apache.commons.io.filefilter.WildcardFilter";
      InputStream inputStream0 = null;
      Coder coder0 = new Coder();
      int int0 = 2147483632;
      try { 
        lZMADecoder0.decode("shaded.org.apache.commons.io.filefilter.WildcardFilter", (InputStream) null, 887L, coder0, byteArray0, 2147483632);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      DeltaOptions deltaOptions0 = new DeltaOptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArrayCache arrayCache0 = ArrayCache.getDummyCache();
      InputStream inputStream0 = deltaOptions0.getInputStream((InputStream) byteArrayInputStream0, arrayCache0);
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      X86Options x86Options0 = new X86Options();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ArrayCache arrayCache0 = ArrayCache.getDefaultCache();
      InputStream inputStream0 = x86Options0.getInputStream((InputStream) sequenceInputStream0, arrayCache0);
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-114);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)67, (byte) (-6));
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[3];
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      ARMOptions aRMOptions0 = new ARMOptions();
      try { 
        MockURI.URI("", "", "", "<tbw[Tk96");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#%3Ctbw[Tk96
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      IA64Options iA64Options0 = new IA64Options();
      LZMA2Options lZMA2Options0 = null;
      try {
        lZMA2Options0 = new LZMA2Options(2567, (-5509), 255, 2567, (-889), 2567, (-501), 2567);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 2567 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, (InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "b1|8l HLx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      // Undeclared exception!
      try { 
        lZMADecoder0.encode((OutputStream) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMAOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      String string0 = "";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      String string0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream(255);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      try { 
        lZMADecoder0.decode((String) null, pipedInputStream0, (-2002L), coder0, byteArray0, (-937));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }
}
