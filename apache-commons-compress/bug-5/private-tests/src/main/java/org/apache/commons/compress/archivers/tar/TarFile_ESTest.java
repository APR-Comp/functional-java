/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 03:38:41 GMT 2023
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.time.ZoneId;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarFile_ESTest extends TarFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[3];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.READ;
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.READ;
      openOptionArray0[2] = (OpenOption) standardOpenOption2;
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(fileChannel0, 2580, 2580, (String) null, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\u0000\u0000");
      boolean boolean0 = true;
      mockFile0.setReadable(true);
      MockFile mockFile1 = new MockFile(mockFile0, "\u0000\u0000");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile1);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "org.apache.commons.compress.archivers.tar.TarFile";
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((SeekableByteChannel) null, 0, 801, "org.apache.commons.compress.archivers.tar.TarFile", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.getAbsoluteFile();
      mockFile0.setWritable(false, false);
      mockFile0.setExecutable(true);
      mockFile0.setWritable(true, true);
      mockFile0.setReadable(false);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "Hi");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "g4_o%y\"N@e4%jO46.*]";
      File file0 = MockFile.createTempFile("ustar\u0000", "g4_o%y\"N@e4%jO46.*]");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(file0, false);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((SeekableByteChannel) null, 0, (-734), "GNU.sparse.map", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Rh@a1B");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(fileChannel0, 256, 776, (String) null, true);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.toURL();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)96;
      boolean boolean0 = true;
      TarFile tarFile0 = new TarFile(byteArray0, true);
      tarFile0.getEntries();
      TarArchiveEntry tarArchiveEntry0 = null;
      // Undeclared exception!
      try { 
        tarFile0.getInputStream((TarArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.SeekableInMemoryByteChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-27);
      TarFile tarFile0 = new TarFile(byteArray0, true);
      tarFile0.setAtEOF(true);
      tarFile0.setAtEOF(true);
      tarFile0.isAtEOF();
      tarFile0.close();
      tarFile0.getEntries();
      tarFile0.close();
      tarFile0.close();
      tarFile0.setAtEOF(false);
      tarFile0.isAtEOF();
      tarFile0.close();
      tarFile0.close();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = false;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = true;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((Path) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.getAbsoluteFile();
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = null;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.SeekableInMemoryByteChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" hT]Dwf=S4 LM}L}Q0~", " hT]Dwf=S4 LM}L}Q0~");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, "");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      boolean boolean0 = true;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

//   @Test(timeout = 4000)
//   public void test021()  throws Throwable  {
//       MockFile mockFile0 = new MockFile("");
//       MockFile mockFile1 = new MockFile(mockFile0, "");
//       Path path0 = mockFile1.toPath();
//       TarFile tarFile0 = null;
//       try {
//         tarFile0 = new TarFile(path0, "can only relativize an absolute path against an absolute path");
//         fail("Expecting exception: IllegalCharsetNameException");
//
//       } catch(IllegalCharsetNameException e) {
//          //
//          // can only relativize an absolute path against an absolute path
//          //
//          verifyException("java.nio.charset.Charset", e);
//       }
//   }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "Truncated TAR archive";
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((SeekableByteChannel) null, 1432, 1432, "Truncated TAR archive", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Truncated TAR archive
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "NPa";
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((Path) null, "NPa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ubf~E?.zK*?^e");
      File file0 = MockFile.createTempFile("ubf~E?.zK*?^e", "ubf~E?.zK*?^e", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "Pa`6&hK");
      Path path0 = mockFile1.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((byte[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.SeekableInMemoryByteChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vS>#Nw>z!CI~Ost");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">x;]M3(z<v +", "root does not have any name elements");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "`B{Q3q16)0gn~8Ke");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)110;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(byteArray0, "tV7Rc3dKR&PoifG^4`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // tV7Rc3dKR&PoifG^4`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "Q_P2>P6TmGo*nr1F");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = null;
      MockFile mockFile0 = new MockFile((File) null, "");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "aU/!s3<;R&Xb{;";
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((File) null, "aU/!s3<;R&Xb{;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setExecutable(false, false);
      Path path0 = mockFile1.toPath();
      boolean boolean0 = true;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)57;
      TarFile tarFile0 = new TarFile(byteArray0, "org.apache.commons.compress.utils.BoundedNIOInputStream");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = false;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((Path) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      TarFile tarFile0 = new TarFile(byteArray0, true);
      tarFile0.setAtEOF(false);
      tarFile0.close();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("w_1F~/,%/{\"vCoa", (byte)35, false);
      tarArchiveEntry0.getDirectoryEntries();
      InputStream inputStream0 = tarFile0.getInputStream(tarArchiveEntry0);
      tarFile0.close();
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry("", (byte)0);
      InputStream inputStream1 = tarFile0.getInputStream(tarArchiveEntry1);
      assertFalse(inputStream1.equals((Object)inputStream0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        MockURI.URI("J8S", "J8S", "V[a", "J8S");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: J8S://J8SV%5Ba#J8S
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "org.apache.commons.compress.archivers.tar.TarFile";
      MockFile mockFile0 = new MockFile((File) null, "org.apache.commons.compress.archivers.tar.TarFile");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFile mockFile0 = new MockFile("We'7?^yM70'jY47ux");
      MockFile mockFile1 = new MockFile(mockFile0, "z2TkJ${<");
      Path path0 = mockFile1.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(Q2}_ZE");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "m6mH`7{dTg";
      byte byte0 = (byte)52;
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "^<T%qz.ed");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)0;
      String string0 = "G+mMf";
      TarFile tarFile0 = new TarFile(byteArray0, "G+mMf");
      tarFile0.close();
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "premature end of tar archive. Didn't find any entry after PAX header.");
      mockFile0.setReadOnly();
      mockFile0.getCanonicalFile();
      mockFile0.getAbsoluteFile();
      boolean boolean0 = false;
      mockFile0.setReadable(false, false);
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.SeekableInMemoryByteChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.tar.TarFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(fileChannel0, (-1916619760), (-1916619760), "org.apache.commons.compress.archivers.tar.TarFile", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "ZZ<d,P+C.";
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("ZZ<d,P+C.", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TarFile tarFile0 = new TarFile(byteArray0);
      boolean boolean0 = false;
      tarFile0.setAtEOF(false);
      tarFile0.close();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("yl", "yl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      TarFile tarFile0 = new TarFile(byteArray0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.archivers.tar.TarFile");
      tarArchiveEntry0.getModTime();
      tarFile0.close();
      tarFile0.getInputStream(tarArchiveEntry0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      tarArchiveEntry0.fillStarSparseData(map0);
      tarArchiveEntry0.setIds((byte) (-20), 2129);
      tarFile0.getEntries();
      tarFile0.getInputStream(tarArchiveEntry0);
      tarFile0.close();
      tarFile0.getEntries();
      tarFile0.setAtEOF(false);
      tarFile0.setAtEOF(false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "gid";
      String string1 = "j&d";
      MockFile mockFile0 = new MockFile("j&d");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "dos";
      MockFile mockFile0 = new MockFile("dos", "dos");
      MockFile mockFile1 = new MockFile(mockFile0, "AV5UX >bu8");
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      int int0 = 1149;
      mockFileOutputStream0.write(1149);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(221L);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[2];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBufferArray0[0] = byteBuffer0;
      byteBuffer0.put(byteArray0);
      FileChannel.MapMode fileChannel_MapMode0 = FileChannel.MapMode.READ_ONLY;
      try { 
        fileChannel1.map(fileChannel_MapMode0, (byte)0, (-2796L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MappedByteBuffer mocks are not supported yet
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "*k< iIO'APIkpF~7 0";
      MockFile mockFile0 = new MockFile("*k< iIO'APIkpF~7 0", "*k< iIO'APIkpF~7 0");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.setAtEOF(true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "The array of names must not be null";
      File file0 = MockFile.createTempFile("Mf_PJ.$4jcLb", "The array of names must not be null");
      boolean boolean0 = false;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(file0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-54);
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.getEntries();
      tarFile0.close();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)0, false);
      tarFile0.getInputStream(tarArchiveEntry0);
      tarFile0.setAtEOF(true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The size must be non-negative");
      Path path0 = mockFile0.toPath();
      mockFile0.getCanonicalPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte) (-18);
      TarFile tarFile0 = new TarFile(byteArray0, (String) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F*E]v", "H]");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("p&Uc", "p&Uc");
      Path path0 = mockFile0.toPath();
      String string0 = "GNU.sparse.map";
      MockFile.createTempFile("p&Uc", "GNU.sparse.map");
      mockFile0.setLastModified(2097151L);
      boolean boolean0 = true;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "&7m+R!";
      URI uRI0 = MockURI.URI("&7m+R!");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "=3");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // =3
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-80);
      byteArray0[8] = (byte) (-89);
      TarFile tarFile0 = new TarFile(byteArray0);
      MockFile mockFile0 = new MockFile("y^:<JA]");
      Path path0 = mockFile0.toPath();
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((Path) null, "premature end of tar archive. Didn't find any entry after PAX header.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((SeekableByteChannel) null, (-1815), (-1815), "org.apache.commons.compress.archivers.tar.TarFile", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      File file0 = MockFile.createTempFile("WXLE92H1DyHUt!/1", "WXLE92H1DyHUt!/1");
      MockFile mockFile0 = new MockFile(file0, "WXLE92H1DyHUt!/1");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = MockFile.createTempFile("'\"ZYSP8uperUt[~(", "'\"ZYSP8uperUt[~(");
      try { 
        MockFile.createTempFile("'\"ZYSP8uperUt[~(", "'\"ZYSP8uperUt[~(", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.delete();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      String string0 = mockFile1.getAbsolutePath();
      assertEquals("/home/crhf/projects/apr-comp/experiment/functional-java-private/apache-commons-compress/bug-5/src", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TarFile tarFile0 = new TarFile(byteArray0, false);
      tarFile0.close();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      mockFile0.mkdirs();
      mockFile0.setWritable(true);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, "6k45#\"|7>S");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "ab!z/2U.0/3wY9)";
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((File) null, "ab!z/2U.0/3wY9)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "Corrupted struct sparse detected";
      URI uRI0 = MockURI.URI("I", "I", "Corrupted struct sparse detected");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not hierarchical
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setExecutable(false);
      mockFile0.setExecutable(false, false);
      mockFile0.getCanonicalPath();
      mockFile0.toURI();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, "eOb_3Mvk)X\"F5'k<<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // eOb_3Mvk)X\"F5'k<<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "";
      try { 
        MockURI.URI("`q Ro", "`q Ro", "`q Ro", 0, "`q Ro", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: `q Ro://%60q%20Ro@`q Ro:0%60q%20Ro?#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "AmoEa|t*+bJ@|wVaC");
      mockFile0.toURI();
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-44);
      byteArray0[5] = (byte)67;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(byteArray0, ")-<Zv|hgP");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // )-<Zv|hgP
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-34);
      TarFile tarFile0 = new TarFile(byteArray0, true);
      tarFile0.getEntries();
      tarFile0.getEntries();
      tarFile0.setAtEOF(false);
      tarFile0.isAtEOF();
      tarFile0.setAtEOF(true);
      tarFile0.getEntries();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)0;
      TarFile tarFile0 = new TarFile(byteArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      File file0 = MockFile.createTempFile("K0\"]O_)1+m", "{W");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.truncate(272L);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(fileChannel1, 318, 2693, "{W", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {W
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "GNU.sparsemap";
      URI uRI0 = MockURI.URI("GNU.sparsemap", "GNU.sparsemap", "GNU.sparsemap");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not hierarchical
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[5];
          byteArray0[0] = (byte)0;
          byteArray0[1] = (byte)8;
          byteArray0[2] = (byte)53;
          byteArray0[3] = (byte)0;
          byteArray0[4] = (byte)103;
          TarFile tarFile0 = new TarFile(byteArray0);
          tarFile0.setAtEOF(false);
          MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream");
          mockFile0.getCanonicalFile();
          MockFile.createTempFile("org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream", "FIAT8.VT~3dA:_lA", (File) mockFile0);
          TarArchiveEntry tarArchiveEntry0 = null;
          try {
            tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(TarArchiveEntry.java:474)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:434)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:377)
             // sun.reflect.GeneratedConstructorAccessor79.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "KY:rvrdKtd?";
      File file0 = MockFile.createTempFile("KY:rvrdKtd?", "KY:rvrdKtd?");
      MockFile mockFile0 = new MockFile(file0, "KY:rvrdKtd?");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "KY:rvrdKtd?");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFile mockFile0 = new MockFile("shaded.org.apache.commons.io.filefilter.NotFileFilter");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-83);
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.getEntries();
      tarFile0.close();
      tarFile0.getEntries();
      tarFile0.setAtEOF(true);
      tarFile0.close();
      tarFile0.close();
      // Undeclared exception!
      try { 
        tarFile0.getInputStream((TarArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "eH9Tzohf@B@ ourPvOQ");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.deleteOnExit();
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        MockURI.URI("0[@;QSgfZ,ty", "SCHILY.devminor", "SCHILY.devminor", "<}Cg)v+4X:$Y3yOJ?)I", "0[@;QSgfZ,ty");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 0[@;QSgfZ,ty://SCHILY.devminorSCHILY.devminor?%3C%7DCg)v+4X:$Y3yOJ?)I#0[@;QSgfZ,ty
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "The offset cannot be negative";
      MockFile mockFile0 = new MockFile("U*&F4>1!XpqQX");
      File file0 = MockFile.createTempFile("/,2UX1uMBRh*R", "The offset cannot be negative", (File) mockFile0);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = MockFile.createTempFile("xghznfqN,A", "xghznfqN,A", (File) null);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(file0, "xghznfqN,A");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      File file0 = MockFile.createTempFile("+&#]pt+h)P", "+&#]pt+h)P");
      MockFile mockFile0 = new MockFile(file0, "+&#]pt+h)P");
      Path path0 = mockFile0.toPath();
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        MockURI.URI("(jj", "(jj", "beginIndex must not be negative but was ", (-746), "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream", "beginIndex must not be negative but was ", "P|K7EW`N9n.=ftYf");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: (jj://(jj@beginIndex must not be negative but was :-746org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream?beginIndex%20must%20not%20be%20negative%20but%20was%20#P%7CK7EW%60N9n.=ftYf
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-47);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(byteArray0, "bk;");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // bk;
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile("can only relativize a relative path against a relative path");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, "can only relativize a relative path against a relative path");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)0;
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.close();
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = null;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.SeekableInMemoryByteChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      TarFile tarFile0 = new TarFile(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("Error detected parsing the pax header");
          Path path0 = mockFile0.toPath();
          OpenOption[] openOptionArray0 = new OpenOption[5];
          StandardOpenOption standardOpenOption0 = StandardOpenOption.APPEND;
          openOptionArray0[0] = (OpenOption) standardOpenOption0;
          StandardOpenOption standardOpenOption1 = StandardOpenOption.WRITE;
          openOptionArray0[1] = (OpenOption) standardOpenOption1;
          StandardOpenOption standardOpenOption2 = StandardOpenOption.SPARSE;
          openOptionArray0[2] = (OpenOption) standardOpenOption2;
          StandardOpenOption standardOpenOption3 = StandardOpenOption.SYNC;
          openOptionArray0[3] = (OpenOption) standardOpenOption3;
          StandardOpenOption standardOpenOption4 = StandardOpenOption.SPARSE;
          openOptionArray0[4] = (OpenOption) standardOpenOption4;
          // Undeclared exception!
          try { 
            FileChannel.open(path0, openOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"Error detected parsing the pax header\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:175)
             // java.nio.channels.FileChannel.open(FileChannel.java:287)
             // java.nio.channels.FileChannel.open(FileChannel.java:335)
             // sun.reflect.GeneratedMethodAccessor39.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)56;
      TarFile tarFile0 = new TarFile(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.mkdirs();
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.getCanonicalFile();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      boolean boolean0 = true;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URI uRI0 = MockURI.aHttpURI;
      File file0 = MockFile.createTempFile("I9hOP_=", "GNU.sparse.map");
      MockFile mockFile0 = new MockFile(file0, "GNU.sparse.map");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile("gVWaJ");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, "gVWaJ");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-28);
      byte byte0 = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-1);
      String string0 = "";
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)46;
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(zipEncoding0).decode(any(byte[].class));
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, zipEncoding0, false, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockFile.createTempFile("/", "", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[1];
          byteArray0[0] = (byte)69;
          TarFile tarFile0 = new TarFile(byteArray0);
          File file0 = MockFile.createTempFile("Error detected parsing the pax header", "}.", (File) null);
          TarArchiveEntry tarArchiveEntry0 = null;
          try {
            tarArchiveEntry0 = new TarArchiveEntry(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(TarArchiveEntry.java:474)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:434)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:377)
             // sun.reflect.GeneratedConstructorAccessor79.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8qcv~TPXbgY,-wkhL)G", ",63xegu[*11zXx`bXI");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, ",63xegu[*11zXx`bXI");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}iy8Ko~g!@zR", "}iy8Ko~g!@zR");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = false;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, "sZ57i.o7|TO", "Q^6t|C:w'M@(B+WR_A");
      assertEquals("Q%5E6t%7CC:w'M@(B+WR_A", uRI0.getRawFragment());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      TarFile tarFile0 = new TarFile(byteArray0, (String) null);
      tarFile0.close();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)84;
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.close();
      tarFile0.close();
      tarFile0.close();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("'51@/", false);
      tarFile0.getInputStream(tarArchiveEntry0);
      tarFile0.setAtEOF(false);
      tarFile0.close();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)31;
      TarFile tarFile0 = new TarFile(byteArray0, false);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("unsupported event kind: ", (byte) (-63));
      tarArchiveEntry0.getExtraPaxHeaders();
      tarFile0.getInputStream(tarArchiveEntry0);
      tarFile0.setAtEOF(false);
      tarFile0.getEntries();
      tarFile0.getEntries();
      tarFile0.getEntries();
      tarFile0.isAtEOF();
      tarFile0.close();
      tarFile0.setAtEOF(false);
      tarFile0.close();
      tarFile0.setAtEOF(false);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "\\LryJ{by.AeB/Z";
      MockFile mockFile0 = new MockFile("LryJ{by.AeB/Z", "org.apache.commons.compress.archivers.tar.TarFile");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "%46}g2L(R");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "premature end of tar archive. Didn't find any entry after PAX header.";
      try { 
        MockURI.URI("premature end of tar archive. Didn't find any entry after PAX header.");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 9: premature end of tar archive. Didn't find any entry after PAX header.
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "/9XY}wU{f");
      mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[4];
      String string0 = "3xO-l`p>lj6<1UPrDm^";
      // Undeclared exception!
      try { 
        LinkOption.valueOf("3xO-l`p>lj6<1UPrDm^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.LinkOption.3xO-l`p>lj6<1UPrDm^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        MockURI.URI("org.apache.commons.compress.archivers.tar.TarFile", "", "shaded.org.apache.commons.io.filefilter.AgeFileFilter", "shaded.org.apache.commons.io.filefilter.AgeFileFilter", ".");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: org.apache.commons.compress.archivers.tar.TarFile://shaded.org.apache.commons.io.filefilter.AgeFileFilter?shaded.org.apache.commons.io.filefilter.AgeFileFilter#.
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "ustar ";
      MockFile mockFile0 = new MockFile((String) null, "ustar ");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFile mockFile0 = new MockFile("aKGC/2", "aKGC/2");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      String string0 = null;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockFile mockFile0 = new MockFile("C!c5nB]YYs(;&r,J", "memory");
      mockFile0.mkdir();
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockURI.create("+2J");
      MockFile mockFile0 = new MockFile("+2J");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "@)%.{";
      String string1 = "ai";
      MockFile mockFile0 = new MockFile("@)%.{", "ai");
      mockFile0.toURL();
      boolean boolean0 = true;
      mockFile0.setReadable(true, true);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "/";
      String string1 = "}\"tR,J>\\,aSl76";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("/", "}\"tR,J>,aSl76");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)35;
      TarFile tarFile0 = new TarFile(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-113);
      TarFile tarFile0 = new TarFile(byteArray0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.name", true);
      tarArchiveEntry0.setDataOffset((-1L));
      tarFile0.getInputStream(tarArchiveEntry0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      tarArchiveEntry0.fillStarSparseData(map0);
      tarArchiveEntry0.setNames("GNU.sparse.name", "GNU.sparse.name");
      tarFile0.close();
      tarFile0.isAtEOF();
      tarArchiveEntry0.setSize(0L);
      tarFile0.isAtEOF();
      tarFile0.getInputStream(tarArchiveEntry0);
      tarFile0.setAtEOF(true);
      List<TarArchiveEntry> list0 = tarFile0.getEntries();
      assertFalse(list0.contains(tarArchiveEntry0));
  }
}
