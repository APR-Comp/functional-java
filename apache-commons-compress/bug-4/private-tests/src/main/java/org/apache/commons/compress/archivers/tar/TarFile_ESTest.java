/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 03:37:57 GMT 2023
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Array;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.FileAttribute;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarFile_ESTest extends TarFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = null;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((SeekableByteChannel) null, 1596, (-2355), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\u0000\u0000");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sh!:", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(fileChannel0, (-1678), 0, "sparse", false);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\u0000\u0000", "");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, true);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((SeekableByteChannel) null, 0, 0, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = null;
      String string0 = "org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream";
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((File) null, "org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      mockFile0.getAbsolutePath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "GNU.sparse.map");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      mockFile0.toURL();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.SeekableInMemoryByteChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((SeekableByteChannel) null, 10240, (-2810), "", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "";
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((byte[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.SeekableInMemoryByteChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/");
      MockFile mockFile1 = new MockFile(mockFile0, "/");
      Path path0 = mockFile1.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "The list of names must not be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The list of names must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      mockFile0.mkdir();
      mockFile0.getCanonicalPath();
      mockFile0.getCanonicalPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = true;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-4);
      byteArray0[8] = (byte) (-49);
      TarFile tarFile0 = new TarFile(byteArray0, false);
      tarFile0.close();
      tarFile0.setAtEOF(false);
      tarFile0.isAtEOF();
      tarFile0.setAtEOF(false);
      TarArchiveEntry tarArchiveEntry0 = null;
      // Undeclared exception!
      try { 
        tarFile0.getInputStream((TarArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/A$IaX;<,Tm*Xwav$");
      Path path0 = mockFile0.toPath();
      mockFile0.deleteOnExit();
      mockFile0.delete();
      boolean boolean0 = true;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile("be1[vEz0=");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "C@J";
      MockFile mockFile0 = new MockFile("C@J", "C@J");
      boolean boolean0 = false;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = false;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.SeekableInMemoryByteChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IR@r{&g|~}Wvi", "*QoNW");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, "*QoNW");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile("drBcg%A~K8rjn/qd7");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "8V");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

//   @Test(timeout = 4000)
//   public void test025()  throws Throwable  {
//       String string0 = "";
//       MockFile mockFile0 = new MockFile("");
//       mockFile0.setReadable(true, false);
//       MockFile mockFile1 = new MockFile(mockFile0, "");
//       mockFile1.deleteOnExit();
//       TarFile tarFile0 = null;
//       try {
//         tarFile0 = new TarFile(mockFile1, "");
//         fail("Expecting exception: IllegalCharsetNameException");
//
//       } catch(IllegalCharsetNameException e) {
//          //
//          //
//          //
//          verifyException("java.nio.charset.Charset", e);
//       }
//   }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((Path) null, "S[?Co$m:UX&C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = false;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((Path) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Path path0 = null;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-127);
      String string0 = "]&aj#`l";
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(byteArray0, "]&aj#`l");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]&aj#`l
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile mockFile0 = new MockFile("premature end of tar archive. Didn't find any entry after PAX header.");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)105;
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.close();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, zipEncoding0, true, 331L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("no file system provider given");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, "_d;gqDjY's02qAo$");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // _d;gqDjY's02qAo$
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}#dzC");
      mockFile0.setExecutable(true);
      mockFile0.setWritable(false);
      mockFile0.setExecutable(false, false);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)62;
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.getEntries();
      tarFile0.getEntries();
      tarFile0.getEntries();
      tarFile0.isAtEOF();
      tarFile0.getEntries();
      tarFile0.getEntries();
      tarFile0.close();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-19), true);
      InputStream inputStream0 = tarFile0.getInputStream(tarArchiveEntry0);
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-50);
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.getEntries();
      // Undeclared exception!
      try { 
        tarFile0.getInputStream((TarArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S2xm:&ZJE", "");
      mockFile0.mkdir();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = null;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = MockFile.createTempFile("Sensitive", "5{V[Qi \",rj+L");
      assertFalse(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      mockFile0.delete();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.toPath();
      int int0 = (-833);
      LinkedHashSet<StandardOpenOption> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<StandardOpenOption>((-833), (-833));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -833
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)0;
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.close();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = false;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((SeekableByteChannel) null, (-2402), (-2402), ".`<uyX", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .`<uyX
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|o&T,u~dO\"");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "~T!g|J'L\"*x0";
      MockFile mockFile0 = new MockFile("~T!g|J'L\"*x0");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "oI.^k~<O==8\\J`";
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((byte[]) null, "oI.^k~<O==8J`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.SeekableInMemoryByteChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      assertEquals("foo.bar", uRI0.getRawAuthority());
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "hQ'kckj_rz+&>|Ld>");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, "hQ'kckj_rz+&>|Ld>");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "U;S4";
      MockFile mockFile0 = new MockFile("U;S4");
      Path path0 = mockFile0.toPath();
      LinkedHashSet<StandardOpenOption> linkedHashSet0 = new LinkedHashSet<StandardOpenOption>();
      FileAttribute<StandardOpenOption>[] fileAttributeArray0 = (FileAttribute<StandardOpenOption>[]) Array.newInstance(FileAttribute.class, 5);
      FileAttribute<StandardOpenOption> fileAttribute0 = (FileAttribute<StandardOpenOption>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileAttribute0).name();
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      // Undeclared exception!
      try { 
        FileChannel.open(path0, (Set<? extends OpenOption>) linkedHashSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((Path) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = MockFile.createTempFile("shaded.org.apache.commons.io.filefilter.WildcardFileFilter", "shaded.org.apache.commons.io.filefilter.WildcardFileFilter");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(file0, "shaded.org.apache.commons.io.filefilter.WildcardFileFilter");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-23);
      byteArray0[8] = (byte)0;
      String string0 = "";
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "]M5I4MZk5PE&_',");
      MockFile.createTempFile("]M5I4MZk5PE&_',", "");
      mockFile0.setWritable(true, true);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile1, "]M5I4MZk5PE&_',");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)0;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(byteArray0, "The array of prefixes must not be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The array of prefixes must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-49);
      TarFile tarFile0 = new TarFile(byteArray0, "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream");
      List<TarArchiveEntry> list0 = tarFile0.getEntries();
      List<TarArchiveEntry> list1 = tarFile0.getEntries();
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "m55/g>OWWS''f/|gvmx";
      MockFile mockFile0 = new MockFile("", "m55/g>OWWS''f/|gvmx");
      Path path0 = mockFile0.toPath();
      LinkedHashSet<StandardOpenOption> linkedHashSet0 = new LinkedHashSet<StandardOpenOption>();
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 6);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileAttribute0).name();
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      // Undeclared exception!
      try { 
        FileChannel.open(path0, (Set<? extends OpenOption>) linkedHashSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&#Pn?v}J%aW;k(#T{", "");
      MockFile mockFile1 = new MockFile(mockFile0, "7Rb'w?i.2v%");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile1, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "dos";
      boolean boolean0 = true;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((SeekableByteChannel) null, (-3488), 0, "dos", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Y4@>m~/l~RYB[SvPg!", "Y4@>m~/l~RYB[SvPg!");
      File file0 = MockFile.createTempFile("Y4@>m~/l~RYB[SvPg!", "Y4@>m~/l~RYB[SvPg!", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "");
      Path path0 = mockFile1.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "ij 12`){_Kq^");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "eZ i(e'\\A3Q$SWLp";
      try { 
        MockURI.URI("eZ i(e'A3Q$SWLp", "V\"^6OsIY", "eZ i(e'A3Q$SWLp");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: eZ i(e'A3Q$SWLp:V%22%5E6OsIY#eZ%20i(e'A3Q$SWLp
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[1];
          byteArray0[0] = (byte) (-120);
          TarFile tarFile0 = new TarFile(byteArray0, false);
          tarFile0.getEntries();
          tarFile0.isAtEOF();
          tarFile0.isAtEOF();
          TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8R;Wv}#W&&Yf[9", (byte)0, false);
          tarArchiveEntry0.setGroupName("8R;Wv}#W&&Yf[9");
          tarArchiveEntry0.setModTime((-745L));
          tarArchiveEntry0.isFile();
          tarFile0.getInputStream(tarArchiveEntry0);
          tarFile0.close();
          tarFile0.getEntries();
          tarFile0.getInputStream(tarArchiveEntry0);
          tarFile0.isAtEOF();
          MockFile mockFile0 = new MockFile("xCMNGmc*", "xCMNGmc*");
          MockFile mockFile1 = new MockFile(mockFile0, "8R;Wv}#W&&Yf[9");
          TarArchiveEntry tarArchiveEntry1 = null;
          try {
            tarArchiveEntry1 = new TarArchiveEntry(mockFile1, "GeakPb");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(TarArchiveEntry.java:474)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:434)
             // sun.reflect.GeneratedConstructorAccessor83.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[3];
          byteArray0[0] = (byte) (-124);
          byteArray0[1] = (byte)0;
          byteArray0[2] = (byte)1;
          TarFile tarFile0 = new TarFile(byteArray0, false);
          tarFile0.getEntries();
          String string0 = "";
          MockFile mockFile0 = new MockFile("");
          tarFile0.getEntries();
          Path path0 = mockFile0.toPath();
          TarArchiveEntry tarArchiveEntry0 = null;
          try {
            tarArchiveEntry0 = new TarArchiveEntry(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(TarArchiveEntry.java:474)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:467)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:396)
             // sun.reflect.GeneratedConstructorAccessor84.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = MockFile.createTempFile("GNU.sparse.map", "GNU.sparse.map");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(file0, "GNU.sparse.map");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "";
      try { 
        MockURI.URI("", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-77);
      byteArray0[0] = (byte) (-77);
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.getEntries();
      try { 
        MockURI.URI("%X7|6]T!0Y", "%X7|6]T!0Y", "[(zE8L(W,R3qh", "O]NM");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: %X7|6]T!0Y://%X7|6]T!0Y%5B(zE8L(W,R3qh#O]NM
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("qZ}B,6){gH", "qZ}B,6){gH");
      boolean boolean0 = false;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(byteArray0, "The filter must not be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The filter must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile("shaded.org.apache.commons.io.filefilter.PrefixFileFilter", "shaded.org.apache.commons.io.filefilter.PrefixFileFilter");
      String string0 = "}M0:e";
      MockFile mockFile1 = new MockFile(mockFile0, "}M0:e");
      Path path0 = mockFile1.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFile mockFile0 = new MockFile("X_+Xj`o<S|u0~");
      mockFile0.setExecutable(false);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.close();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((SeekableByteChannel) null, 0, 15, "", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.tar.TarFile", "gv-up d/aZLf3$");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.close();
      MockFile mockFile0 = new MockFile("#%%$!jGVU", "");
      MockFile.createTempFile("#%%$!jGVU", "", (File) mockFile0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "#%%$!jGVU", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor69.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&qf3%)[", "");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "";
      try { 
        MockURI.URI("", "", "", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFile.createTempFile("shaded.org.apache.commons.io.filefilter.CanWriteFileFilter", "MqkZ$4h2ox `pt|~'");
      byte[] byteArray0 = new byte[0];
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)7;
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.getEntries();
      boolean boolean0 = true;
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null, "QsxZ;CTA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "}<aP>KF");
      MockFile.createTempFile("}<aP>KF", "}<aP>KF");
      boolean boolean0 = false;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)19;
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.isAtEOF();
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, zipEncoding0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)16;
      TarFile tarFile0 = new TarFile(byteArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        MockURI.create(">=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: >=
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EB;C5U/2LO3K1Wt");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-35);
      TarFile tarFile0 = new TarFile(byteArray0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)0);
      tarFile0.getInputStream(tarArchiveEntry0);
      tarFile0.isAtEOF();
      tarFile0.close();
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMajor((-3193));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Major device number is out of range: -3193
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = null;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile((File) null, "ELfX|%P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.close();
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      URI uRI0 = MockURI.URI("(73ju#U");
      URI uRI1 = MockURI.resolve(uRI0, "");
      URI uRI2 = MockURI.parseServerAuthority(uRI1);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("m[.O`vD6Be");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("tI", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-127);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(byteArray0, "H 9JHux?P6");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // H 9JHux?P6
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "ustar ");
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, "");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Path path0 = mockFile1.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      File file0 = MockFile.createTempFile("shaded.org.apache.commons.io.filefilter.EmptyFileFilter", "shaded.org.apache.commons.io.filefilter.EmptyFileFilter");
      MockFile mockFile0 = new MockFile(file0, "");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        MockURI.URI("_{w&:", "_{w&:", "_{w&:", (String) null, "%,");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: _{w&:://_%7Bw&:_%7Bw&:#%7F%25,
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)118;
      TarFile tarFile0 = new TarFile(byteArray0, (String) null);
      List<TarArchiveEntry> list0 = tarFile0.getEntries();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)2;
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(byteArray0, ":i");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // :i
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^=!-$5jER]Qu1LW", "org.apache.commons.compress.archivers.tar.TarFile");
      mockFile0.toURL();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setReadable(false);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N## YBX_zhP$d-%+|$'");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "N## YBX_zhP$d-%+|$'");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)109;
      TarFile tarFile0 = new TarFile(byteArray0, true);
      List<TarArchiveEntry> list0 = tarFile0.getEntries();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("_{Cx", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-3);
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "";
      URI uRI0 = MockURI.create("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("shaded.org.apache.commons.io.filefilter.RegexFileFilter");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TarFile tarFile0 = new TarFile(byteArray0, false);
      tarFile0.close();
      tarFile0.getEntries();
      tarFile0.getEntries();
      tarFile0.setAtEOF(false);
      tarFile0.isAtEOF();
      tarFile0.getEntries();
      tarFile0.getEntries();
      tarFile0.close();
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, zipEncoding0, true, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)113;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)0;
      TarFile tarFile0 = new TarFile(byteArray0);
      System.setCurrentTimeMillis(10L);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-118);
      TarFile tarFile0 = new TarFile(byteArray0, true);
      tarFile0.close();
      tarFile0.getEntries();
      File file0 = MockFile.createTempFile("Gl/I=;KSi|]", "MX<W%d");
      MockFile mockFile0 = new MockFile(file0, "Gl/I=;KSi|]");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(path0, "Error detected parsing the header", linkOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFile mockFile0 = new MockFile("D", "gname");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, zipEncoding0, true, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-118);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(byteArray0, "\"sYsg+Hgqz4");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"sYsg+Hgqz4
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)66;
      TarFile tarFile0 = new TarFile(byteArray0, true);
      tarFile0.isAtEOF();
      tarFile0.close();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockFile mockFile0 = new MockFile("HLT4Ksw9-1-~ce92yz", "HLT4Ksw9-1-~ce92yz");
      mockFile0.getAbsolutePath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "ustar ";
      MockFile mockFile0 = new MockFile("ustar ", "h6|Vi6r\".P!Y|u;&~");
      boolean boolean0 = true;
      mockFile0.setReadable(true);
      mockFile0.toPath();
      mockFile0.setWritable(false, true);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(mockFile0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        MockURI.URI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      URI uRI2 = MockURI.resolve(uRI1, "!fRO,)dpCkw5fWwN2");
      MockFile mockFile0 = new MockFile(uRI2);
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "!fRO,)dpCkw5fWwN2");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "ic2wYaECaL");
      Path path0 = mockFile1.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)61;
      TarFile tarFile0 = new TarFile(byteArray0);
      tarFile0.getEntries();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-29));
      Map<String, String> map0 = tarArchiveEntry0.getExtraPaxHeaders();
      tarArchiveEntry0.fillStarSparseData(map0);
      tarFile0.getInputStream(tarArchiveEntry0);
      tarFile0.getEntries();
      tarFile0.isAtEOF();
      tarFile0.getEntries();
      boolean boolean0 = tarFile0.isAtEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", ".JrRx+8");
      mockFile0.toURL();
      Path path0 = mockFile0.toPath();
      String string1 = "";
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, "");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[3];
          byteArray0[0] = (byte)0;
          byteArray0[1] = (byte)13;
          byteArray0[2] = (byte)0;
          TarFile tarFile0 = new TarFile(byteArray0, false);
          File file0 = MockFile.createTempFile("%t<2h-en", "%t<2h-en", (File) null);
          TarArchiveEntry tarArchiveEntry0 = null;
          try {
            tarArchiveEntry0 = new TarArchiveEntry(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(TarArchiveEntry.java:474)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:434)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:377)
             // sun.reflect.GeneratedConstructorAccessor74.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "org.apache.commons.compress.archivers.tar.TarFile$1");
      mockFile0.getAbsoluteFile();
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "shaded.org.apache.commons.io.filefilter.NotFileFilter";
      String string1 = "a(\\f^|";
      URI uRI0 = MockURI.create("R7");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "Error detected parsing the header");
      Path path0 = mockFile0.toPath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "j~r#j3I;!,9d\"#~jv-";
      MockFile mockFile0 = new MockFile("j~r#j3I;!,9d\"#~jv-", "j~r#j3I;!,9d\"#~jv-");
      mockFile0.setReadOnly();
      MockFile mockFile1 = new MockFile(mockFile0, "j~r#j3I;!,9d\"#~jv-");
      Path path0 = mockFile1.toPath();
      mockFile0.renameTo(mockFile1);
      mockFile0.setReadOnly();
      mockFile1.getAbsolutePath();
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(path0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        MockURI.URI("The magic number cannot be null", "The magic number cannot be null", "dp*3,)Lw;mte9");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 3: The magic number cannot be null:The%20magic%20number%20cannot%20be%20null#dp*3,)Lw;mte9
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      File file0 = MockFile.createTempFile("index must not be bigger than ", (String) null);
      TarFile tarFile0 = null;
      try {
        tarFile0 = new TarFile(file0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-50);
      TarFile tarFile0 = new TarFile(byteArray0, (String) null);
  }
}
