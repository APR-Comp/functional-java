/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 03:48:17 GMT 2023
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = new Range((-1971.4), (-1971.4));
      assertEquals((-1971.4), range0.getCentralValue(), 0.01);
      assertEquals((-1971.4), range0.getUpperBound(), 0.01);
      assertEquals((-1971.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-1971.4));
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals((-1971.4), range0.getCentralValue(), 0.01);
      assertEquals((-1971.4), range0.getUpperBound(), 0.01);
      assertEquals((-1971.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1971.4), range1.getCentralValue(), 0.01);
      assertEquals((-1971.4), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1971.4), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = Range.combine(range1, range0);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals((-1971.4), range0.getCentralValue(), 0.01);
      assertEquals((-1971.4), range0.getUpperBound(), 0.01);
      assertEquals((-1971.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1971.4), range1.getCentralValue(), 0.01);
      assertEquals((-1971.4), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1971.4), range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1971.4), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1971.4), range2.getLowerBound(), 0.01);
      assertEquals((-1971.4), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      boolean boolean0 = range2.isNaNRange();
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals((-1971.4), range0.getCentralValue(), 0.01);
      assertEquals((-1971.4), range0.getUpperBound(), 0.01);
      assertEquals((-1971.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1971.4), range1.getCentralValue(), 0.01);
      assertEquals((-1971.4), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1971.4), range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1971.4), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1971.4), range2.getLowerBound(), 0.01);
      assertEquals((-1971.4), range2.getCentralValue(), 0.01);
      assertFalse(boolean0);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.shift(range2, 1065.2, false);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals((-1971.4), range0.getCentralValue(), 0.01);
      assertEquals((-1971.4), range0.getUpperBound(), 0.01);
      assertEquals((-1971.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1971.4), range1.getCentralValue(), 0.01);
      assertEquals((-1971.4), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1971.4), range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1971.4), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1971.4), range2.getLowerBound(), 0.01);
      assertEquals((-1971.4), range2.getCentralValue(), 0.01);
      assertEquals((-906.2), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-906.2), range3.getCentralValue(), 0.01);
      assertEquals((-906.2), range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      
      Range range4 = Range.shift(range1, 1981.6499366201774, true);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertEquals((-1971.4), range0.getCentralValue(), 0.01);
      assertEquals((-1971.4), range0.getUpperBound(), 0.01);
      assertEquals((-1971.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1971.4), range1.getCentralValue(), 0.01);
      assertEquals((-1971.4), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1971.4), range1.getLowerBound(), 0.01);
      assertEquals(10.249936620177323, range4.getLowerBound(), 0.01);
      assertEquals(10.249936620177323, range4.getCentralValue(), 0.01);
      assertEquals(10.249936620177323, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      
      Range range5 = Range.expand(range0, (-1971.4), 1981.6499366201774);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertEquals((-1971.4), range0.getCentralValue(), 0.01);
      assertEquals((-1971.4), range0.getUpperBound(), 0.01);
      assertEquals((-1971.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1971.4), range5.getLowerBound(), 0.01);
      assertEquals((-1971.4), range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1971.4), range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      
      boolean boolean1 = range2.intersects(range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertEquals((-1971.4), range0.getCentralValue(), 0.01);
      assertEquals((-1971.4), range0.getUpperBound(), 0.01);
      assertEquals((-1971.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1971.4), range1.getCentralValue(), 0.01);
      assertEquals((-1971.4), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1971.4), range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1971.4), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1971.4), range2.getLowerBound(), 0.01);
      assertEquals((-1971.4), range2.getCentralValue(), 0.01);
      assertEquals((-1971.4), range5.getLowerBound(), 0.01);
      assertEquals((-1971.4), range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1971.4), range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(boolean1);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertTrue(boolean1 == boolean0);
      
      Range range6 = Range.shift(range1, 1981.6499366201774, false);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range6, range4);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertEquals((-1971.4), range0.getCentralValue(), 0.01);
      assertEquals((-1971.4), range0.getUpperBound(), 0.01);
      assertEquals((-1971.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1971.4), range1.getCentralValue(), 0.01);
      assertEquals((-1971.4), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1971.4), range1.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range1));
      
      boolean boolean2 = range4.isNaNRange();
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertEquals((-1971.4), range0.getCentralValue(), 0.01);
      assertEquals((-1971.4), range0.getUpperBound(), 0.01);
      assertEquals((-1971.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1971.4), range1.getCentralValue(), 0.01);
      assertEquals((-1971.4), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1971.4), range1.getLowerBound(), 0.01);
      assertEquals(10.249936620177323, range4.getLowerBound(), 0.01);
      assertEquals(10.249936620177323, range4.getCentralValue(), 0.01);
      assertEquals(10.249936620177323, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(boolean2);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = (-1827.943184);
      Range range0 = new Range((-1827.943184), (-1827.943184));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1827.943184), range0.getCentralValue(), 0.01);
      assertEquals((-1827.943184), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1827.943184), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-1827.943184));
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1827.943184), range0.getCentralValue(), 0.01);
      assertEquals((-1827.943184), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1827.943184), range0.getLowerBound(), 0.01);
      assertEquals((-1827.943184), range1.getUpperBound(), 0.01);
      assertEquals((-1827.943184), range1.getCentralValue(), 0.01);
      assertEquals((-1827.943184), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertNotNull(range1);
      
      Range range2 = Range.shift(range1, (-1827.943184), false);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1827.943184), range0.getCentralValue(), 0.01);
      assertEquals((-1827.943184), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1827.943184), range0.getLowerBound(), 0.01);
      assertEquals((-1827.943184), range1.getUpperBound(), 0.01);
      assertEquals((-1827.943184), range1.getCentralValue(), 0.01);
      assertEquals((-1827.943184), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertFalse(range2.isNaNRange());
      assertEquals((-3655.886368), range2.getLowerBound(), 0.01);
      assertEquals((-3655.886368), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-3655.886368), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      double double1 = 1493.5696298457;
      double double2 = (-2807.700441);
      Range range3 = Range.expand(range1, 1493.5696298457, (-2807.700441));
      assertSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1827.943184), range0.getCentralValue(), 0.01);
      assertEquals((-1827.943184), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1827.943184), range0.getLowerBound(), 0.01);
      assertEquals((-1827.943184), range1.getUpperBound(), 0.01);
      assertEquals((-1827.943184), range1.getCentralValue(), 0.01);
      assertEquals((-1827.943184), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertFalse(range3.isNaNRange());
      assertEquals((-1827.943184), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-1827.943184), range3.getCentralValue(), 0.01);
      assertEquals((-1827.943184), range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      
      boolean boolean0 = range2.isNaNRange();
      assertSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1827.943184), range0.getCentralValue(), 0.01);
      assertEquals((-1827.943184), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1827.943184), range0.getLowerBound(), 0.01);
      assertEquals((-1827.943184), range1.getUpperBound(), 0.01);
      assertEquals((-1827.943184), range1.getCentralValue(), 0.01);
      assertEquals((-1827.943184), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertFalse(range2.isNaNRange());
      assertEquals((-3655.886368), range2.getLowerBound(), 0.01);
      assertEquals((-3655.886368), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-3655.886368), range2.getCentralValue(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      double double3 = 0.0;
      // Undeclared exception!
      try { 
        Range.scale(range0, (-2807.700441));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.scale(range0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.combineIgnoringNaN(range2, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = Range.expandToInclude(range1, (-1.0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals((-1.0), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-0.5), range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      
      double double0 = range4.getCentralValue();
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals((-1.0), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-0.5), range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals((-0.5), double0, 0.01);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      
      range0.hashCode();
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, 0.0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.combineIgnoringNaN(range1, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.shift(range1, (-774.1477262290199), true);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-774.1477262290199), range3.getCentralValue(), 0.01);
      assertEquals((-774.1477262290199), range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-774.1477262290199), range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      
      Range range4 = Range.combineIgnoringNaN(range1, range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
      
      double double0 = range4.getCentralValue();
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, double0, 0.01);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
      
      Range range5 = Range.shift(range0, 1.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      
      Range range6 = Range.combine(range4, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertNotSame(range6, range4);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-774.1477262290199), range3.getCentralValue(), 0.01);
      assertEquals((-774.1477262290199), range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-774.1477262290199), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(774.1477262290199, range6.getLength(), 0.01);
      assertEquals((-774.1477262290199), range6.getLowerBound(), 0.01);
      assertEquals((-387.07386311450995), range6.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range4));
      
      Range range7 = Range.shift(range5, (-451.9));
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range5, range6);
      assertNotSame(range5, range4);
      assertNotSame(range5, range7);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range7, range6);
      assertNotSame(range7, range4);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range3);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range0));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range3));
      assertTrue(range7.equals((Object)range4));
      
      Range range8 = Range.expandToInclude(range0, 0.0);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range8, range6);
      assertNotSame(range8, range3);
      assertNotSame(range8, range2);
      assertNotSame(range8, range7);
      assertNotSame(range8, range1);
      assertNotSame(range8, range4);
      assertNotSame(range8, range5);
      assertSame(range8, range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(0.0, range8.getLength(), 0.01);
      assertEquals(0.0, range8.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range5));
      
      Range range9 = Range.combineIgnoringNaN(range1, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range4);
      assertNotSame(range9, range7);
      assertNotSame(range9, range1);
      assertNotSame(range9, range6);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range3);
      assertNotSame(range9, range8);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-774.1477262290199), range3.getCentralValue(), 0.01);
      assertEquals((-774.1477262290199), range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-774.1477262290199), range3.getLowerBound(), 0.01);
      assertEquals((-387.07386311450995), range9.getCentralValue(), 0.01);
      assertEquals((-774.1477262290199), range9.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getUpperBound(), 0.01);
      assertEquals(774.1477262290199, range9.getLength(), 0.01);
      assertNotNull(range9);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range8));
      
      Range range10 = Range.expandToInclude(range4, 1.0);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range10);
      assertSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range1, range10);
      assertNotSame(range4, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range8);
      assertNotSame(range4, range5);
      assertNotSame(range4, range7);
      assertNotSame(range4, range1);
      assertNotSame(range4, range9);
      assertNotSame(range4, range10);
      assertNotSame(range10, range6);
      assertNotSame(range10, range4);
      assertNotSame(range10, range5);
      assertNotSame(range10, range0);
      assertNotSame(range10, range9);
      assertNotSame(range10, range7);
      assertNotSame(range10, range1);
      assertNotSame(range10, range3);
      assertNotSame(range10, range2);
      assertNotSame(range10, range8);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(1.0, range10.getUpperBound(), 0.01);
      assertEquals(0.5, range10.getCentralValue(), 0.01);
      assertEquals(0.0, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(1.0, range10.getLength(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      
      Range range11 = Range.combineIgnoringNaN(range3, range0);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range10);
      assertSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range1, range10);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range10);
      assertNotSame(range11, range6);
      assertNotSame(range11, range4);
      assertNotSame(range11, range3);
      assertNotSame(range11, range8);
      assertNotSame(range11, range2);
      assertNotSame(range11, range0);
      assertNotSame(range11, range5);
      assertNotSame(range11, range1);
      assertNotSame(range11, range10);
      assertNotSame(range11, range9);
      assertNotSame(range11, range7);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-774.1477262290199), range3.getCentralValue(), 0.01);
      assertEquals((-774.1477262290199), range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-774.1477262290199), range3.getLowerBound(), 0.01);
      assertEquals((-774.1477262290199), range11.getLowerBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(0.0, range11.getUpperBound(), 0.01);
      assertEquals((-387.07386311450995), range11.getCentralValue(), 0.01);
      assertEquals(774.1477262290199, range11.getLength(), 0.01);
      assertNotNull(range11);
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range0));
      assertTrue(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range7));
      
      Range range12 = Range.expand(range1, 0.0, (-774.1477262290199));
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range12);
      assertNotSame(range0, range1);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range12);
      assertNotSame(range1, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range12, range5);
      assertNotSame(range12, range1);
      assertNotSame(range12, range7);
      assertNotSame(range12, range0);
      assertNotSame(range12, range10);
      assertNotSame(range12, range8);
      assertNotSame(range12, range3);
      assertNotSame(range12, range2);
      assertNotSame(range12, range9);
      assertNotSame(range12, range11);
      assertNotSame(range12, range4);
      assertNotSame(range12, range6);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range12.getCentralValue(), 0.01);
      assertEquals(0.0, range12.getLowerBound(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(0.0, range12.getUpperBound(), 0.01);
      assertEquals(0.0, range12.getLength(), 0.01);
      assertNotNull(range12);
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range12.equals((Object)range5));
      assertTrue(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range3));
      assertTrue(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range9));
      assertTrue(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range11));
      assertTrue(range12.equals((Object)range4));
      assertTrue(range12.equals((Object)range1));
      assertTrue(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range6));
      
      String string0 = range6.toString();
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range12);
      assertNotSame(range0, range1);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range12);
      assertNotSame(range1, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range12);
      assertNotSame(range3, range0);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range10);
      assertNotSame(range4, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range8);
      assertNotSame(range4, range3);
      assertNotSame(range4, range7);
      assertNotSame(range4, range5);
      assertNotSame(range4, range12);
      assertNotSame(range4, range11);
      assertNotSame(range4, range1);
      assertNotSame(range4, range9);
      assertNotSame(range4, range10);
      assertNotSame(range6, range10);
      assertNotSame(range6, range11);
      assertNotSame(range6, range8);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range12);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range9);
      assertNotSame(range6, range1);
      assertNotSame(range6, range7);
      assertNotSame(range6, range4);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-774.1477262290199), range3.getCentralValue(), 0.01);
      assertEquals((-774.1477262290199), range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-774.1477262290199), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(774.1477262290199, range6.getLength(), 0.01);
      assertEquals((-774.1477262290199), range6.getLowerBound(), 0.01);
      assertEquals((-387.07386311450995), range6.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals("Range[-774.1477262290199,0.0]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range12));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range11));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range12));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range11));
      assertTrue(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range4));
      
      Range range13 = Range.shift(range0, 0.0);
      assertNotSame(range0, range12);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range13, range6);
      assertNotSame(range13, range1);
      assertNotSame(range13, range3);
      assertNotSame(range13, range10);
      assertNotSame(range13, range5);
      assertNotSame(range13, range4);
      assertNotSame(range13, range0);
      assertNotSame(range13, range12);
      assertNotSame(range13, range9);
      assertNotSame(range13, range2);
      assertNotSame(range13, range11);
      assertNotSame(range13, range8);
      assertNotSame(range13, range7);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getCentralValue(), 0.01);
      assertEquals(0.0, range13.getUpperBound(), 0.01);
      assertEquals(0.0, range13.getLowerBound(), 0.01);
      assertNotNull(range13);
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range6));
      assertTrue(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range5));
      assertTrue(range13.equals((Object)range0));
      assertTrue(range13.equals((Object)range12));
      assertTrue(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range9));
      assertTrue(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range11));
      assertTrue(range13.equals((Object)range8));
      
      double double1 = range1.getLowerBound();
      assertNotSame(range0, range12);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range12);
      assertNotSame(range1, range13);
      assertNotSame(range1, range9);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range12));
      
      double double2 = range1.getLength();
      assertNotSame(range0, range12);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range12);
      assertNotSame(range1, range13);
      assertNotSame(range1, range9);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range12));
      
      String string1 = range4.toString();
      assertNotSame(range0, range12);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range12);
      assertNotSame(range1, range13);
      assertNotSame(range1, range9);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range4, range6);
      assertNotSame(range4, range3);
      assertNotSame(range4, range7);
      assertNotSame(range4, range11);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range8);
      assertNotSame(range4, range5);
      assertNotSame(range4, range12);
      assertNotSame(range4, range1);
      assertNotSame(range4, range13);
      assertNotSame(range4, range9);
      assertNotSame(range4, range10);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals("Range[0.0,0.0]", string1);
      assertNotNull(string1);
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range12));
      assertFalse(string1.equals((Object)string0));
      assertTrue(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range11));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range13));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range12));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range10));
      
      double double3 = range6.getCentralValue();
      assertNotSame(range0, range12);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range12);
      assertNotSame(range1, range13);
      assertNotSame(range1, range9);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range3, range13);
      assertNotSame(range3, range12);
      assertNotSame(range3, range11);
      assertNotSame(range3, range7);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range10);
      assertNotSame(range4, range6);
      assertNotSame(range4, range3);
      assertNotSame(range4, range7);
      assertNotSame(range4, range11);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range8);
      assertNotSame(range4, range5);
      assertNotSame(range4, range12);
      assertNotSame(range4, range1);
      assertNotSame(range4, range13);
      assertNotSame(range4, range9);
      assertNotSame(range4, range10);
      assertNotSame(range6, range10);
      assertNotSame(range6, range11);
      assertNotSame(range6, range8);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range9);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range6, range12);
      assertNotSame(range6, range1);
      assertNotSame(range6, range4);
      assertNotSame(range6, range13);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-774.1477262290199), range3.getCentralValue(), 0.01);
      assertEquals((-774.1477262290199), range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-774.1477262290199), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(774.1477262290199, range6.getLength(), 0.01);
      assertEquals((-774.1477262290199), range6.getLowerBound(), 0.01);
      assertEquals((-387.07386311450995), range6.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals((-387.07386311450995), double3, 0.01);
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range12));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range11));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range13));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range12));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range13));
      
      Range range14 = Range.combine(range0, range0);
      assertNotSame(range0, range12);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range14);
      assertNotSame(range0, range10);
      assertSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range14, range13);
      assertNotSame(range14, range11);
      assertNotSame(range14, range8);
      assertNotSame(range14, range7);
      assertNotSame(range14, range6);
      assertNotSame(range14, range4);
      assertNotSame(range14, range10);
      assertNotSame(range14, range5);
      assertNotSame(range14, range9);
      assertNotSame(range14, range1);
      assertNotSame(range14, range3);
      assertNotSame(range14, range12);
      assertNotSame(range14, range0);
      assertNotSame(range14, range2);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(0.0, range14.getCentralValue(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertNotNull(range14);
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range14.equals((Object)range1));
      assertTrue(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range11));
      assertTrue(range14.equals((Object)range4));
      assertTrue(range14.equals((Object)range13));
      assertTrue(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range6));
      assertTrue(range14.equals((Object)range8));
      assertTrue(range14.equals((Object)range0));
      assertTrue(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range3));
      
      // Undeclared exception!
      try { 
        Range.scale(range3, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, 2.0, false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.scale(range2, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = Range.shift(range3, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      
      Range range5 = Range.combineIgnoringNaN(range2, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range5);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range4));
      
      Range range6 = Range.combine(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertNotSame(range6, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range5));
      
      Range range7 = Range.combineIgnoringNaN(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range7, range3);
      assertNotSame(range7, range6);
      assertNotSame(range7, range2);
      assertNotSame(range7, range5);
      assertNotSame(range7, range4);
      assertNotSame(range7, range0);
      assertNotSame(range7, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range4));
      assertTrue(range7.equals((Object)range3));
      assertTrue(range7.equals((Object)range0));
      assertTrue(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range1));
      
      String string0 = range5.toString();
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range5);
      assertNotSame(range5, range1);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals("Range[0.0,0.0]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range4));
      
      Range range8 = Range.combine(range4, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range8);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range5);
      assertNotSame(range8, range5);
      assertNotSame(range8, range3);
      assertNotSame(range8, range1);
      assertNotSame(range8, range6);
      assertNotSame(range8, range4);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertEquals(0.0, range8.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range6));
      assertFalse(range8.equals((Object)range1));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range6));
      
      Range range9 = Range.combine(range4, range4);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range9);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range8);
      assertNotSame(range4, range9);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range6);
      assertNotSame(range9, range5);
      assertNotSame(range9, range8);
      assertNotSame(range9, range3);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range4);
      assertNotSame(range9, range7);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals(0.0, range9.getCentralValue(), 0.01);
      assertEquals(0.0, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range9.equals((Object)range3));
      assertTrue(range9.equals((Object)range0));
      assertTrue(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range1));
      assertTrue(range9.equals((Object)range2));
      assertTrue(range9.equals((Object)range4));
      assertTrue(range9.equals((Object)range7));
      assertTrue(range9.equals((Object)range5));
      assertTrue(range9.equals((Object)range6));
      
      Range range10 = Range.shift(range8, 0.0);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range4, range7);
      assertNotSame(range4, range10);
      assertNotSame(range4, range3);
      assertNotSame(range4, range8);
      assertNotSame(range4, range9);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range5);
      assertNotSame(range8, range5);
      assertNotSame(range8, range3);
      assertNotSame(range8, range1);
      assertNotSame(range8, range6);
      assertNotSame(range8, range9);
      assertNotSame(range8, range10);
      assertNotSame(range8, range4);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range2);
      assertNotSame(range10, range2);
      assertNotSame(range10, range1);
      assertNotSame(range10, range4);
      assertNotSame(range10, range3);
      assertNotSame(range10, range0);
      assertNotSame(range10, range5);
      assertNotSame(range10, range8);
      assertNotSame(range10, range9);
      assertNotSame(range10, range7);
      assertNotSame(range10, range6);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertEquals(0.0, range8.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(0.0, range10.getCentralValue(), 0.01);
      assertEquals(0.0, range10.getUpperBound(), 0.01);
      assertEquals(0.0, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getLength(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range6));
      assertFalse(range8.equals((Object)range1));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range9));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range6));
      assertTrue(range10.equals((Object)range3));
      assertTrue(range10.equals((Object)range9));
      assertTrue(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range1));
      assertTrue(range10.equals((Object)range2));
      assertTrue(range10.equals((Object)range7));
      assertTrue(range10.equals((Object)range5));
      assertTrue(range10.equals((Object)range4));
      assertTrue(range10.equals((Object)range0));
      assertTrue(range10.equals((Object)range8));
      
      double double0 = range10.constrain(0.0);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range4, range7);
      assertNotSame(range4, range10);
      assertNotSame(range4, range3);
      assertNotSame(range4, range8);
      assertNotSame(range4, range9);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range5);
      assertNotSame(range8, range5);
      assertNotSame(range8, range3);
      assertNotSame(range8, range1);
      assertNotSame(range8, range6);
      assertNotSame(range8, range9);
      assertNotSame(range8, range10);
      assertNotSame(range8, range4);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range2);
      assertNotSame(range10, range2);
      assertNotSame(range10, range1);
      assertNotSame(range10, range4);
      assertNotSame(range10, range3);
      assertNotSame(range10, range0);
      assertNotSame(range10, range5);
      assertNotSame(range10, range8);
      assertNotSame(range10, range9);
      assertNotSame(range10, range7);
      assertNotSame(range10, range6);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertEquals(0.0, range8.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(0.0, range10.getCentralValue(), 0.01);
      assertEquals(0.0, range10.getUpperBound(), 0.01);
      assertEquals(0.0, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range10));
      assertTrue(range8.equals((Object)range10));
      assertFalse(range8.equals((Object)range1));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range9));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range6));
      assertTrue(range10.equals((Object)range3));
      assertTrue(range10.equals((Object)range9));
      assertTrue(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range1));
      assertTrue(range10.equals((Object)range2));
      assertTrue(range10.equals((Object)range7));
      assertTrue(range10.equals((Object)range5));
      assertTrue(range10.equals((Object)range4));
      assertTrue(range10.equals((Object)range0));
      assertTrue(range10.equals((Object)range8));
      
      String string1 = range0.toString();
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals("Range[0.0,0.0]", string1);
      assertNotNull(string1);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertTrue(string1.equals((Object)string0));
      
      range2.hashCode();
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range10));
      
      Range range11 = Range.shift(range4, 0.0);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range11);
      assertNotSame(range3, range7);
      assertNotSame(range4, range7);
      assertNotSame(range4, range11);
      assertNotSame(range4, range10);
      assertNotSame(range4, range3);
      assertNotSame(range4, range8);
      assertNotSame(range4, range9);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range5);
      assertNotSame(range11, range4);
      assertNotSame(range11, range0);
      assertNotSame(range11, range9);
      assertNotSame(range11, range1);
      assertNotSame(range11, range6);
      assertNotSame(range11, range10);
      assertNotSame(range11, range3);
      assertNotSame(range11, range5);
      assertNotSame(range11, range8);
      assertNotSame(range11, range2);
      assertNotSame(range11, range7);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range11.getLowerBound(), 0.01);
      assertEquals(0.0, range11.getLength(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(0.0, range11.getCentralValue(), 0.01);
      assertEquals(0.0, range11.getUpperBound(), 0.01);
      assertNotNull(range11);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range10));
      assertTrue(range11.equals((Object)range3));
      assertTrue(range11.equals((Object)range5));
      assertTrue(range11.equals((Object)range8));
      assertTrue(range11.equals((Object)range9));
      assertTrue(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range1));
      assertTrue(range11.equals((Object)range2));
      assertTrue(range11.equals((Object)range7));
      assertTrue(range11.equals((Object)range4));
      assertTrue(range11.equals((Object)range10));
      assertTrue(range11.equals((Object)range6));
      
      Range range12 = Range.expandToInclude(range2, 1123.45114);
      assertNotSame(range12, range5);
      assertNotSame(range12, range8);
      assertNotSame(range12, range10);
      assertNotSame(range12, range9);
      assertNotSame(range12, range6);
      assertNotSame(range12, range0);
      assertNotSame(range12, range1);
      assertNotSame(range12, range4);
      assertNotSame(range12, range3);
      assertNotSame(range12, range11);
      assertNotSame(range12, range2);
      assertNotSame(range12, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range12);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertEquals(1123.45114, range12.getLength(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(561.72557, range12.getCentralValue(), 0.01);
      assertEquals(1123.45114, range12.getUpperBound(), 0.01);
      assertEquals(0.0, range12.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertNotNull(range12);
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range11));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range10));
      
      Range range13 = Range.combine(range4, range0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range13, range9);
      assertNotSame(range13, range1);
      assertNotSame(range13, range0);
      assertNotSame(range13, range5);
      assertNotSame(range13, range8);
      assertNotSame(range13, range12);
      assertNotSame(range13, range2);
      assertNotSame(range13, range11);
      assertNotSame(range13, range7);
      assertNotSame(range13, range10);
      assertNotSame(range13, range3);
      assertNotSame(range13, range4);
      assertNotSame(range13, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range13);
      assertNotSame(range2, range0);
      assertNotSame(range2, range12);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range13);
      assertNotSame(range3, range9);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range12);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range10);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range4, range7);
      assertNotSame(range4, range11);
      assertNotSame(range4, range8);
      assertNotSame(range4, range13);
      assertNotSame(range4, range9);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range10);
      assertNotSame(range4, range3);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range12);
      assertNotSame(range4, range5);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertEquals(0.0, range13.getLowerBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getCentralValue(), 0.01);
      assertEquals(0.0, range13.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertNotNull(range13);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range1));
      assertTrue(range13.equals((Object)range7));
      assertTrue(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range12));
      assertTrue(range13.equals((Object)range0));
      assertTrue(range13.equals((Object)range8));
      assertTrue(range13.equals((Object)range4));
      assertTrue(range13.equals((Object)range10));
      assertTrue(range13.equals((Object)range6));
      assertTrue(range13.equals((Object)range2));
      assertTrue(range13.equals((Object)range9));
      assertTrue(range13.equals((Object)range3));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range11));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range12));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range10));
      
      boolean boolean0 = range4.intersects(0.0, 0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range2, range9);
      assertNotSame(range2, range13);
      assertNotSame(range2, range0);
      assertNotSame(range2, range12);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range13);
      assertNotSame(range3, range9);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range12);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range10);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range4, range7);
      assertNotSame(range4, range11);
      assertNotSame(range4, range8);
      assertNotSame(range4, range13);
      assertNotSame(range4, range9);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range10);
      assertNotSame(range4, range3);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range12);
      assertNotSame(range4, range5);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range13));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range10));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range12));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range13));
      
      Range range14 = Range.expand(range6, 1123.45114, 0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range14);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range2, range14);
      assertNotSame(range2, range9);
      assertNotSame(range2, range13);
      assertNotSame(range2, range0);
      assertNotSame(range2, range12);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range14, range6);
      assertNotSame(range14, range0);
      assertNotSame(range14, range12);
      assertNotSame(range14, range2);
      assertNotSame(range14, range10);
      assertNotSame(range14, range8);
      assertNotSame(range14, range13);
      assertNotSame(range14, range9);
      assertNotSame(range14, range1);
      assertNotSame(range14, range7);
      assertNotSame(range14, range5);
      assertNotSame(range14, range4);
      assertNotSame(range14, range3);
      assertNotSame(range14, range11);
      assertNotSame(range6, range3);
      assertNotSame(range6, range11);
      assertNotSame(range6, range2);
      assertNotSame(range6, range9);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range13);
      assertNotSame(range6, range10);
      assertNotSame(range6, range7);
      assertNotSame(range6, range8);
      assertNotSame(range6, range14);
      assertNotSame(range6, range4);
      assertNotSame(range6, range12);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(0.0, range14.getCentralValue(), 0.01);
      assertEquals(0.0, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range14);
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range13));
      assertFalse(range14.equals((Object)range12));
      assertTrue(range14.equals((Object)range5));
      assertTrue(range14.equals((Object)range8));
      assertTrue(range14.equals((Object)range11));
      assertTrue(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range1));
      assertTrue(range14.equals((Object)range7));
      assertTrue(range14.equals((Object)range9));
      assertTrue(range14.equals((Object)range6));
      assertTrue(range14.equals((Object)range13));
      assertTrue(range14.equals((Object)range3));
      assertTrue(range14.equals((Object)range4));
      assertTrue(range14.equals((Object)range0));
      assertTrue(range14.equals((Object)range10));
      assertTrue(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range10));
      assertTrue(range6.equals((Object)range11));
      assertTrue(range6.equals((Object)range13));
      assertFalse(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range8));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range9));
      assertTrue(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range12));
      
      double double1 = range5.getLength();
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range14);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range2, range14);
      assertNotSame(range2, range9);
      assertNotSame(range2, range13);
      assertNotSame(range2, range0);
      assertNotSame(range2, range12);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range13);
      assertNotSame(range3, range9);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range12);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range14);
      assertNotSame(range3, range10);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range4, range7);
      assertNotSame(range4, range11);
      assertNotSame(range4, range8);
      assertNotSame(range4, range13);
      assertNotSame(range4, range9);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range10);
      assertNotSame(range4, range3);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range12);
      assertNotSame(range4, range14);
      assertNotSame(range4, range5);
      assertNotSame(range5, range9);
      assertNotSame(range5, range1);
      assertNotSame(range5, range14);
      assertNotSame(range5, range6);
      assertNotSame(range5, range12);
      assertNotSame(range5, range2);
      assertNotSame(range5, range13);
      assertNotSame(range5, range10);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range8);
      assertNotSame(range5, range11);
      assertNotSame(range5, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range14));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range14));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range13));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range13));
      assertTrue(range3.equals((Object)range14));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range8));
      assertEquals(double1, double0, 0.01);
      assertTrue(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range10));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range14));
      assertFalse(range4.equals((Object)range12));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range13));
      assertTrue(range5.equals((Object)range7));
      assertTrue(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range12));
      assertTrue(range5.equals((Object)range8));
      assertTrue(range5.equals((Object)range13));
      assertTrue(range5.equals((Object)range9));
      assertTrue(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range14));
      assertTrue(range5.equals((Object)range10));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range2));
      
      Range range15 = Range.expand(range14, 0.0, 1.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range14);
      assertNotSame(range0, range7);
      assertNotSame(range0, range15);
      assertNotSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range2, range14);
      assertNotSame(range2, range9);
      assertNotSame(range2, range13);
      assertNotSame(range2, range0);
      assertNotSame(range2, range12);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range15);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range14, range6);
      assertNotSame(range14, range0);
      assertNotSame(range14, range12);
      assertNotSame(range14, range2);
      assertNotSame(range14, range10);
      assertNotSame(range14, range8);
      assertNotSame(range14, range13);
      assertNotSame(range14, range9);
      assertNotSame(range14, range1);
      assertNotSame(range14, range7);
      assertNotSame(range14, range5);
      assertNotSame(range14, range15);
      assertNotSame(range14, range4);
      assertNotSame(range14, range3);
      assertNotSame(range14, range11);
      assertNotSame(range15, range3);
      assertNotSame(range15, range4);
      assertNotSame(range15, range11);
      assertNotSame(range15, range10);
      assertNotSame(range15, range9);
      assertNotSame(range15, range14);
      assertNotSame(range15, range1);
      assertNotSame(range15, range2);
      assertNotSame(range15, range8);
      assertNotSame(range15, range0);
      assertNotSame(range15, range12);
      assertNotSame(range15, range7);
      assertNotSame(range15, range5);
      assertNotSame(range15, range13);
      assertNotSame(range15, range6);
      assertNotSame(range6, range3);
      assertNotSame(range6, range11);
      assertNotSame(range6, range2);
      assertNotSame(range6, range9);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range13);
      assertNotSame(range6, range10);
      assertNotSame(range6, range7);
      assertNotSame(range6, range8);
      assertNotSame(range6, range14);
      assertNotSame(range6, range15);
      assertNotSame(range6, range4);
      assertNotSame(range6, range12);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(0.0, range14.getCentralValue(), 0.01);
      assertEquals(0.0, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      assertEquals(0.0, range15.getCentralValue(), 0.01);
      assertEquals(0.0, range15.getUpperBound(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(0.0, range15.getLength(), 0.01);
      assertEquals(0.0, range15.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range15);
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range14));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range14));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range13));
      assertFalse(range14.equals((Object)range12));
      assertTrue(range14.equals((Object)range5));
      assertTrue(range14.equals((Object)range8));
      assertTrue(range14.equals((Object)range11));
      assertTrue(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range1));
      assertTrue(range14.equals((Object)range7));
      assertTrue(range14.equals((Object)range9));
      assertTrue(range14.equals((Object)range6));
      assertTrue(range14.equals((Object)range13));
      assertTrue(range14.equals((Object)range3));
      assertTrue(range14.equals((Object)range4));
      assertTrue(range14.equals((Object)range0));
      assertTrue(range14.equals((Object)range10));
      assertTrue(range15.equals((Object)range0));
      assertTrue(range15.equals((Object)range4));
      assertTrue(range15.equals((Object)range10));
      assertTrue(range15.equals((Object)range8));
      assertTrue(range15.equals((Object)range7));
      assertTrue(range15.equals((Object)range11));
      assertFalse(range15.equals((Object)range1));
      assertTrue(range15.equals((Object)range13));
      assertTrue(range15.equals((Object)range14));
      assertFalse(range15.equals((Object)range12));
      assertTrue(range15.equals((Object)range5));
      assertTrue(range15.equals((Object)range6));
      assertTrue(range15.equals((Object)range9));
      assertTrue(range15.equals((Object)range2));
      assertTrue(range15.equals((Object)range3));
      assertTrue(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range10));
      assertTrue(range6.equals((Object)range11));
      assertTrue(range6.equals((Object)range13));
      assertTrue(range6.equals((Object)range14));
      assertFalse(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range8));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range9));
      assertTrue(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range12));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = null;
      Range range1 = Range.combineIgnoringNaN((Range) null, (Range) null);
      assertNull(range1);
      
      double double0 = (-1882.9923);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1882.9923));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = new Range(4483.9, 4483.9);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getCentralValue(), 0.01);
      assertEquals(4483.9, range1.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range0, (-1699.2));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      String string0 = range2.toString();
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertEquals("Range[-1699.2,4483.9]", string0);
      assertNotNull(string0);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = Range.combine(range2, range2);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1392.35, range3.getCentralValue(), 0.01);
      assertEquals((-1699.2), range3.getLowerBound(), 0.01);
      assertEquals(4483.9, range3.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      
      String string1 = range2.toString();
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertEquals("Range[-1699.2,4483.9]", string1);
      assertNotNull(string1);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertTrue(string1.equals((Object)string0));
      
      Range range4 = Range.shift(range0, 0.0, false);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(4483.9, range4.getCentralValue(), 0.01);
      assertEquals(4483.9, range4.getUpperBound(), 0.01);
      assertEquals(4483.9, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      
      boolean boolean0 = range2.contains((-1692.269714717112));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertTrue(boolean0);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      
      Range range5 = Range.shift(range1, 0.0, false);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getCentralValue(), 0.01);
      assertEquals(4483.9, range1.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(4483.9, range5.getCentralValue(), 0.01);
      assertEquals(4483.9, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(4483.9, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range0));
      
      Range range6 = Range.combine(range5, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getCentralValue(), 0.01);
      assertEquals(4483.9, range1.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1392.35, range3.getCentralValue(), 0.01);
      assertEquals((-1699.2), range3.getLowerBound(), 0.01);
      assertEquals(4483.9, range3.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range3.getLength(), 0.01);
      assertEquals(4483.9, range5.getCentralValue(), 0.01);
      assertEquals(4483.9, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(4483.9, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertFalse(range6.isNaNRange());
      assertEquals(1392.35, range6.getCentralValue(), 0.01);
      assertEquals(6183.099999999999, range6.getLength(), 0.01);
      assertEquals(4483.9, range6.getUpperBound(), 0.01);
      assertEquals((-1699.2), range6.getLowerBound(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range1));
      
      String string2 = range6.toString();
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getCentralValue(), 0.01);
      assertEquals(4483.9, range1.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1392.35, range3.getCentralValue(), 0.01);
      assertEquals((-1699.2), range3.getLowerBound(), 0.01);
      assertEquals(4483.9, range3.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range3.getLength(), 0.01);
      assertEquals(4483.9, range5.getCentralValue(), 0.01);
      assertEquals(4483.9, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(4483.9, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertFalse(range6.isNaNRange());
      assertEquals(1392.35, range6.getCentralValue(), 0.01);
      assertEquals(6183.099999999999, range6.getLength(), 0.01);
      assertEquals(4483.9, range6.getUpperBound(), 0.01);
      assertEquals((-1699.2), range6.getLowerBound(), 0.01);
      assertEquals("Range[-1699.2,4483.9]", string2);
      assertNotNull(string2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      Range range7 = Range.expandToInclude(range6, 0.0);
      assertNotSame(range0, range7);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertSame(range6, range7);
      assertNotSame(range6, range4);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertNotSame(range7, range5);
      assertNotSame(range7, range3);
      assertNotSame(range7, range4);
      assertNotSame(range7, range1);
      assertNotSame(range7, range0);
      assertSame(range7, range6);
      assertNotSame(range7, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getCentralValue(), 0.01);
      assertEquals(4483.9, range1.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1392.35, range3.getCentralValue(), 0.01);
      assertEquals((-1699.2), range3.getLowerBound(), 0.01);
      assertEquals(4483.9, range3.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range3.getLength(), 0.01);
      assertEquals(4483.9, range5.getCentralValue(), 0.01);
      assertEquals(4483.9, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(4483.9, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertFalse(range6.isNaNRange());
      assertEquals(1392.35, range6.getCentralValue(), 0.01);
      assertEquals(6183.099999999999, range6.getLength(), 0.01);
      assertEquals(4483.9, range6.getUpperBound(), 0.01);
      assertEquals((-1699.2), range6.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-1699.2), range7.getLowerBound(), 0.01);
      assertEquals(1392.35, range7.getCentralValue(), 0.01);
      assertEquals(4483.9, range7.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range0));
      
      boolean boolean1 = range3.intersects(range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1392.35, range3.getCentralValue(), 0.01);
      assertEquals((-1699.2), range3.getLowerBound(), 0.01);
      assertEquals(4483.9, range3.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range3.getLength(), 0.01);
      assertTrue(boolean1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range7));
      assertTrue(boolean1 == boolean0);
      
      Range range8 = Range.combine(range2, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range8);
      assertNotSame(range2, range7);
      assertNotSame(range8, range7);
      assertNotSame(range8, range0);
      assertNotSame(range8, range4);
      assertNotSame(range8, range6);
      assertNotSame(range8, range5);
      assertNotSame(range8, range3);
      assertNotSame(range8, range2);
      assertNotSame(range8, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertEquals(4483.9, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(1392.35, range8.getCentralValue(), 0.01);
      assertEquals(6183.099999999999, range8.getLength(), 0.01);
      assertEquals((-1699.2), range8.getLowerBound(), 0.01);
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range1));
      
      double double0 = range1.getUpperBound();
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range8);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getCentralValue(), 0.01);
      assertEquals(4483.9, range1.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(4483.9, double0, 0.01);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      
      Range range9 = Range.expandToInclude(range1, (-1699.2));
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range1, range8);
      assertNotSame(range9, range7);
      assertNotSame(range9, range8);
      assertNotSame(range9, range2);
      assertNotSame(range9, range0);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertNotSame(range9, range5);
      assertNotSame(range9, range3);
      assertNotSame(range9, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getCentralValue(), 0.01);
      assertEquals(4483.9, range1.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(4483.9, range9.getUpperBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(1392.35, range9.getCentralValue(), 0.01);
      assertEquals(6183.099999999999, range9.getLength(), 0.01);
      assertEquals((-1699.2), range9.getLowerBound(), 0.01);
      assertNotNull(range9);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range0));
      assertTrue(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range5));
      assertTrue(range9.equals((Object)range8));
      assertTrue(range9.equals((Object)range6));
      assertTrue(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range1));
      
      Range range10 = Range.expand(range3, 3158.4017584, (-1692.269714717112));
      assertNotSame(range10, range1);
      assertNotSame(range10, range7);
      assertNotSame(range10, range8);
      assertNotSame(range10, range9);
      assertNotSame(range10, range5);
      assertNotSame(range10, range6);
      assertNotSame(range10, range3);
      assertNotSame(range10, range0);
      assertNotSame(range10, range2);
      assertNotSame(range10, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range7);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range9);
      assertNotSame(range3, range7);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertEquals((-1.4994701042715207E7), range10.getCentralValue(), 0.01);
      assertEquals((-1.9530413112363037E7), range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(9071424.139295662, range10.getLength(), 0.01);
      assertEquals((-1.0458988973067375E7), range10.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1392.35, range3.getCentralValue(), 0.01);
      assertEquals((-1699.2), range3.getLowerBound(), 0.01);
      assertEquals(4483.9, range3.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range3.getLength(), 0.01);
      assertNotNull(range10);
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range7));
      
      Range range11 = Range.expand(range10, 0.0, (-1699.2));
      assertNotSame(range10, range1);
      assertNotSame(range10, range7);
      assertNotSame(range10, range8);
      assertNotSame(range10, range9);
      assertNotSame(range10, range5);
      assertNotSame(range10, range11);
      assertNotSame(range10, range6);
      assertNotSame(range10, range3);
      assertNotSame(range10, range0);
      assertNotSame(range10, range2);
      assertNotSame(range10, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range11, range3);
      assertNotSame(range11, range6);
      assertNotSame(range11, range5);
      assertNotSame(range11, range1);
      assertNotSame(range11, range9);
      assertNotSame(range11, range7);
      assertNotSame(range11, range8);
      assertNotSame(range11, range2);
      assertNotSame(range11, range10);
      assertNotSame(range11, range0);
      assertNotSame(range11, range4);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range7);
      assertNotSame(range3, range6);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range9);
      assertNotSame(range3, range7);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertEquals((-1.4994701042715207E7), range10.getCentralValue(), 0.01);
      assertEquals((-1.9530413112363037E7), range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(9071424.139295662, range10.getLength(), 0.01);
      assertEquals((-1.0458988973067375E7), range10.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(0.0, range11.getLength(), 0.01);
      assertEquals((-7.72207664978831E9), range11.getCentralValue(), 0.01);
      assertEquals((-7.72207664978831E9), range11.getUpperBound(), 0.01);
      assertEquals((-7.72207664978831E9), range11.getLowerBound(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1392.35, range3.getCentralValue(), 0.01);
      assertEquals((-1699.2), range3.getLowerBound(), 0.01);
      assertEquals(4483.9, range3.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range3.getLength(), 0.01);
      assertNotNull(range11);
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range7));
      
      Range range12 = Range.expand(range10, 4483.9, 4483.9);
      assertNotSame(range10, range1);
      assertNotSame(range10, range8);
      assertNotSame(range10, range7);
      assertNotSame(range10, range12);
      assertNotSame(range10, range9);
      assertNotSame(range10, range5);
      assertNotSame(range10, range11);
      assertNotSame(range10, range6);
      assertNotSame(range10, range3);
      assertNotSame(range10, range0);
      assertNotSame(range10, range2);
      assertNotSame(range10, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range12, range2);
      assertNotSame(range12, range7);
      assertNotSame(range12, range1);
      assertNotSame(range12, range11);
      assertNotSame(range12, range3);
      assertNotSame(range12, range10);
      assertNotSame(range12, range9);
      assertNotSame(range12, range0);
      assertNotSame(range12, range4);
      assertNotSame(range12, range5);
      assertNotSame(range12, range8);
      assertNotSame(range12, range6);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range7);
      assertNotSame(range2, range12);
      assertNotSame(range3, range6);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range9);
      assertNotSame(range3, range12);
      assertNotSame(range3, range7);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertEquals((-1.4994701042715207E7), range10.getCentralValue(), 0.01);
      assertEquals((-1.9530413112363037E7), range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(9071424.139295662, range10.getLength(), 0.01);
      assertEquals((-1.0458988973067375E7), range10.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(4.0664899709214745E10, range12.getUpperBound(), 0.01);
      assertEquals((-1.499470104271698E7), range12.getCentralValue(), 0.01);
      assertEquals((-4.069488911130018E10), range12.getLowerBound(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(8.135978882051492E10, range12.getLength(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1392.35, range3.getCentralValue(), 0.01);
      assertEquals((-1699.2), range3.getLowerBound(), 0.01);
      assertEquals(4483.9, range3.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range3.getLength(), 0.01);
      assertNotNull(range12);
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range7));
      
      Range range13 = Range.expandToInclude(range5, 4483.9);
      assertNotSame(range0, range12);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range13);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range11);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range8);
      assertNotSame(range13, range11);
      assertNotSame(range13, range6);
      assertNotSame(range13, range1);
      assertNotSame(range13, range8);
      assertNotSame(range13, range2);
      assertNotSame(range13, range3);
      assertNotSame(range13, range7);
      assertNotSame(range13, range12);
      assertNotSame(range13, range9);
      assertNotSame(range13, range10);
      assertNotSame(range13, range0);
      assertNotSame(range13, range4);
      assertSame(range13, range5);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range10);
      assertSame(range5, range13);
      assertNotSame(range5, range8);
      assertNotSame(range5, range12);
      assertNotSame(range5, range6);
      assertNotSame(range5, range11);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range9);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getCentralValue(), 0.01);
      assertEquals(4483.9, range1.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getLength(), 0.01);
      assertEquals(4483.9, range13.getCentralValue(), 0.01);
      assertEquals(4483.9, range13.getUpperBound(), 0.01);
      assertEquals(4483.9, range13.getLowerBound(), 0.01);
      assertEquals(4483.9, range5.getCentralValue(), 0.01);
      assertEquals(4483.9, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(4483.9, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertNotNull(range13);
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range13.equals((Object)range11));
      assertTrue(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range6));
      assertTrue(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range10));
      assertTrue(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range8));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range9));
      
      Range range14 = Range.shift(range4, 0.0);
      assertNotSame(range0, range12);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range14, range8);
      assertNotSame(range14, range7);
      assertNotSame(range14, range11);
      assertNotSame(range14, range12);
      assertNotSame(range14, range9);
      assertNotSame(range14, range2);
      assertNotSame(range14, range10);
      assertNotSame(range14, range3);
      assertNotSame(range14, range5);
      assertNotSame(range14, range1);
      assertNotSame(range14, range4);
      assertNotSame(range14, range13);
      assertNotSame(range14, range0);
      assertNotSame(range14, range6);
      assertNotSame(range4, range11);
      assertNotSame(range4, range0);
      assertNotSame(range4, range6);
      assertNotSame(range4, range9);
      assertNotSame(range4, range7);
      assertNotSame(range4, range2);
      assertNotSame(range4, range14);
      assertNotSame(range4, range1);
      assertNotSame(range4, range5);
      assertNotSame(range4, range13);
      assertNotSame(range4, range12);
      assertNotSame(range4, range8);
      assertNotSame(range4, range10);
      assertNotSame(range4, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(4483.9, range14.getCentralValue(), 0.01);
      assertEquals(4483.9, range14.getUpperBound(), 0.01);
      assertEquals(4483.9, range14.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(4483.9, range4.getCentralValue(), 0.01);
      assertEquals(4483.9, range4.getUpperBound(), 0.01);
      assertEquals(4483.9, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range14);
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range8));
      assertTrue(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range7));
      assertTrue(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range10));
      assertTrue(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range14.equals((Object)range6));
      assertTrue(range14.equals((Object)range1));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range10));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range13));
      
      boolean boolean2 = range3.isNaNRange();
      assertNotSame(range0, range12);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range2, range13);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range14);
      assertNotSame(range2, range7);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range10);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range8);
      assertNotSame(range2, range12);
      assertNotSame(range3, range6);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range12);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range14);
      assertNotSame(range3, range5);
      assertNotSame(range3, range9);
      assertNotSame(range3, range7);
      assertNotSame(range3, range10);
      assertNotSame(range3, range13);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1392.35, range3.getCentralValue(), 0.01);
      assertEquals((-1699.2), range3.getLowerBound(), 0.01);
      assertEquals(4483.9, range3.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range3.getLength(), 0.01);
      assertFalse(boolean2);
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range14));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range7));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      double double1 = range14.getLength();
      assertNotSame(range0, range12);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range14, range8);
      assertNotSame(range14, range7);
      assertNotSame(range14, range11);
      assertNotSame(range14, range12);
      assertNotSame(range14, range9);
      assertNotSame(range14, range2);
      assertNotSame(range14, range10);
      assertNotSame(range14, range3);
      assertNotSame(range14, range5);
      assertNotSame(range14, range1);
      assertNotSame(range14, range4);
      assertNotSame(range14, range13);
      assertNotSame(range14, range0);
      assertNotSame(range14, range6);
      assertNotSame(range4, range11);
      assertNotSame(range4, range0);
      assertNotSame(range4, range6);
      assertNotSame(range4, range9);
      assertNotSame(range4, range7);
      assertNotSame(range4, range2);
      assertNotSame(range4, range14);
      assertNotSame(range4, range1);
      assertNotSame(range4, range5);
      assertNotSame(range4, range13);
      assertNotSame(range4, range12);
      assertNotSame(range4, range8);
      assertNotSame(range4, range10);
      assertNotSame(range4, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(4483.9, range14.getCentralValue(), 0.01);
      assertEquals(4483.9, range14.getUpperBound(), 0.01);
      assertEquals(4483.9, range14.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(4483.9, range4.getCentralValue(), 0.01);
      assertEquals(4483.9, range4.getUpperBound(), 0.01);
      assertEquals(4483.9, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range8));
      assertTrue(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range7));
      assertTrue(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range10));
      assertTrue(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range14.equals((Object)range6));
      assertTrue(range14.equals((Object)range1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range14));
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range10));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range13));
      
      double double2 = range2.getLowerBound();
      assertNotSame(range0, range12);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range2, range13);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range14);
      assertNotSame(range2, range7);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range10);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range8);
      assertNotSame(range2, range12);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertEquals((-1699.2), double2, 0.01);
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range12));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      Range range15 = Range.scale(range3, 0.0);
      assertNotSame(range0, range12);
      assertNotSame(range0, range15);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range2, range13);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range14);
      assertNotSame(range2, range7);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range10);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range8);
      assertNotSame(range2, range15);
      assertNotSame(range2, range12);
      assertNotSame(range3, range6);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range12);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range14);
      assertNotSame(range3, range5);
      assertNotSame(range3, range9);
      assertNotSame(range3, range7);
      assertNotSame(range3, range15);
      assertNotSame(range3, range10);
      assertNotSame(range3, range13);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range15, range0);
      assertNotSame(range15, range11);
      assertNotSame(range15, range1);
      assertNotSame(range15, range13);
      assertNotSame(range15, range6);
      assertNotSame(range15, range5);
      assertNotSame(range15, range7);
      assertNotSame(range15, range14);
      assertNotSame(range15, range9);
      assertNotSame(range15, range3);
      assertNotSame(range15, range10);
      assertNotSame(range15, range4);
      assertNotSame(range15, range2);
      assertNotSame(range15, range12);
      assertNotSame(range15, range8);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1392.35, range3.getCentralValue(), 0.01);
      assertEquals((-1699.2), range3.getLowerBound(), 0.01);
      assertEquals(4483.9, range3.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range3.getLength(), 0.01);
      assertEquals(0.0, range15.getCentralValue(), 0.01);
      assertEquals(0.0, range15.getUpperBound(), 0.01);
      assertEquals(-0.0, range15.getLowerBound(), 0.01);
      assertEquals(0.0, range15.getLength(), 0.01);
      assertFalse(range15.isNaNRange());
      assertNotNull(range15);
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range14));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range15.equals((Object)range0));
      assertFalse(range15.equals((Object)range11));
      assertFalse(range15.equals((Object)range1));
      assertFalse(range15.equals((Object)range13));
      assertFalse(range15.equals((Object)range6));
      assertFalse(range15.equals((Object)range5));
      assertFalse(range15.equals((Object)range7));
      assertFalse(range15.equals((Object)range14));
      assertFalse(range15.equals((Object)range9));
      assertFalse(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range10));
      assertFalse(range15.equals((Object)range4));
      assertFalse(range15.equals((Object)range2));
      assertFalse(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range8));
      
      boolean boolean3 = range5.equals(range15);
      assertNotSame(range0, range12);
      assertNotSame(range0, range15);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range13);
      assertNotSame(range1, range15);
      assertNotSame(range1, range14);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range11);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range8);
      assertNotSame(range2, range13);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range14);
      assertNotSame(range2, range7);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range10);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range8);
      assertNotSame(range2, range15);
      assertNotSame(range2, range12);
      assertNotSame(range3, range6);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range12);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range14);
      assertNotSame(range3, range5);
      assertNotSame(range3, range9);
      assertNotSame(range3, range7);
      assertNotSame(range3, range15);
      assertNotSame(range3, range10);
      assertNotSame(range3, range13);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range15, range0);
      assertNotSame(range15, range11);
      assertNotSame(range15, range1);
      assertNotSame(range15, range13);
      assertNotSame(range15, range6);
      assertNotSame(range15, range5);
      assertNotSame(range15, range7);
      assertNotSame(range15, range14);
      assertNotSame(range15, range9);
      assertNotSame(range15, range3);
      assertNotSame(range15, range10);
      assertNotSame(range15, range4);
      assertNotSame(range15, range2);
      assertNotSame(range15, range12);
      assertNotSame(range15, range8);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range14);
      assertNotSame(range5, range10);
      assertNotSame(range5, range15);
      assertSame(range5, range13);
      assertNotSame(range5, range8);
      assertNotSame(range5, range12);
      assertNotSame(range5, range6);
      assertNotSame(range5, range11);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range9);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getCentralValue(), 0.01);
      assertEquals(4483.9, range1.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1392.35, range3.getCentralValue(), 0.01);
      assertEquals((-1699.2), range3.getLowerBound(), 0.01);
      assertEquals(4483.9, range3.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range3.getLength(), 0.01);
      assertEquals(0.0, range15.getCentralValue(), 0.01);
      assertEquals(0.0, range15.getUpperBound(), 0.01);
      assertEquals(-0.0, range15.getLowerBound(), 0.01);
      assertEquals(0.0, range15.getLength(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(4483.9, range5.getCentralValue(), 0.01);
      assertEquals(4483.9, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(4483.9, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertFalse(boolean3);
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range15));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range15));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range15));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range14));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range15));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range15.equals((Object)range0));
      assertFalse(range15.equals((Object)range11));
      assertFalse(range15.equals((Object)range1));
      assertFalse(range15.equals((Object)range13));
      assertFalse(range15.equals((Object)range6));
      assertFalse(range15.equals((Object)range5));
      assertFalse(range15.equals((Object)range7));
      assertFalse(range15.equals((Object)range14));
      assertFalse(range15.equals((Object)range9));
      assertFalse(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range10));
      assertFalse(range15.equals((Object)range4));
      assertFalse(range15.equals((Object)range2));
      assertFalse(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range8));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range10));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range15));
      assertFalse(range5.equals((Object)range8));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range14));
      assertFalse(range5.equals((Object)range9));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = range6.equals(range0);
      assertNotSame(range0, range12);
      assertNotSame(range0, range15);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range13);
      assertNotSame(range1, range15);
      assertNotSame(range1, range14);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range11);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range8);
      assertNotSame(range2, range13);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range14);
      assertNotSame(range2, range7);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range10);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range8);
      assertNotSame(range2, range15);
      assertNotSame(range2, range12);
      assertNotSame(range3, range6);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range12);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range14);
      assertNotSame(range3, range5);
      assertNotSame(range3, range9);
      assertNotSame(range3, range7);
      assertNotSame(range3, range15);
      assertNotSame(range3, range10);
      assertNotSame(range3, range13);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range14);
      assertNotSame(range5, range10);
      assertNotSame(range5, range15);
      assertSame(range5, range13);
      assertNotSame(range5, range8);
      assertNotSame(range5, range12);
      assertNotSame(range5, range6);
      assertNotSame(range5, range11);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range9);
      assertNotSame(range6, range11);
      assertNotSame(range6, range0);
      assertSame(range6, range7);
      assertNotSame(range6, range12);
      assertNotSame(range6, range15);
      assertNotSame(range6, range10);
      assertNotSame(range6, range8);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range13);
      assertNotSame(range6, range14);
      assertNotSame(range6, range9);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getCentralValue(), 0.01);
      assertEquals(4483.9, range1.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6183.099999999999, range2.getLength(), 0.01);
      assertEquals(4483.9, range2.getUpperBound(), 0.01);
      assertEquals(1392.35, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1699.2), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1392.35, range3.getCentralValue(), 0.01);
      assertEquals((-1699.2), range3.getLowerBound(), 0.01);
      assertEquals(4483.9, range3.getUpperBound(), 0.01);
      assertEquals(6183.099999999999, range3.getLength(), 0.01);
      assertEquals(4483.9, range5.getCentralValue(), 0.01);
      assertEquals(4483.9, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(4483.9, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertFalse(range6.isNaNRange());
      assertEquals(1392.35, range6.getCentralValue(), 0.01);
      assertEquals(6183.099999999999, range6.getLength(), 0.01);
      assertEquals(4483.9, range6.getUpperBound(), 0.01);
      assertEquals((-1699.2), range6.getLowerBound(), 0.01);
      assertFalse(boolean4);
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range15));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range15));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range15));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range14));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range15));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range10));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range15));
      assertFalse(range5.equals((Object)range8));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range14));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range6.equals((Object)range11));
      assertTrue(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range15));
      assertFalse(range6.equals((Object)range10));
      assertTrue(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range13));
      assertTrue(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range14));
      assertFalse(range6.equals((Object)range1));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = range13.intersects(0.0, 0.0);
      assertNotSame(range0, range12);
      assertNotSame(range0, range15);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range13);
      assertNotSame(range1, range15);
      assertNotSame(range1, range14);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range11);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range8);
      assertNotSame(range13, range11);
      assertNotSame(range13, range6);
      assertNotSame(range13, range1);
      assertNotSame(range13, range8);
      assertNotSame(range13, range2);
      assertNotSame(range13, range14);
      assertNotSame(range13, range3);
      assertNotSame(range13, range7);
      assertNotSame(range13, range12);
      assertNotSame(range13, range9);
      assertNotSame(range13, range10);
      assertNotSame(range13, range15);
      assertNotSame(range13, range0);
      assertNotSame(range13, range4);
      assertSame(range13, range5);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range14);
      assertNotSame(range5, range10);
      assertNotSame(range5, range15);
      assertSame(range5, range13);
      assertNotSame(range5, range8);
      assertNotSame(range5, range12);
      assertNotSame(range5, range6);
      assertNotSame(range5, range11);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range9);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4483.9, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4483.9, range0.getCentralValue(), 0.01);
      assertEquals(4483.9, range0.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getCentralValue(), 0.01);
      assertEquals(4483.9, range1.getUpperBound(), 0.01);
      assertEquals(4483.9, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getLength(), 0.01);
      assertEquals(4483.9, range13.getCentralValue(), 0.01);
      assertEquals(4483.9, range13.getUpperBound(), 0.01);
      assertEquals(4483.9, range13.getLowerBound(), 0.01);
      assertEquals(4483.9, range5.getCentralValue(), 0.01);
      assertEquals(4483.9, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(4483.9, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertFalse(boolean5);
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range15));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range15));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range13.equals((Object)range11));
      assertTrue(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range3));
      assertTrue(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range12));
      assertTrue(range13.equals((Object)range14));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range15));
      assertTrue(range13.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range10));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range15));
      assertFalse(range5.equals((Object)range8));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range14));
      assertFalse(range5.equals((Object)range9));
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range1, 0.0, false);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.combine(range2, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      
      Range range4 = Range.shift(range3, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range1));
      
      Range range5 = Range.expand(range4, 0.0, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range5, range3);
      assertNotSame(range5, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = new Range(1698.043959612, 1698.043959612);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 1698.043959612, 2250.244074);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.scale(range0, 1698.043959612);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2883353.2887747996, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2883353.2887747996, range2.getCentralValue(), 0.01);
      assertEquals(2883353.2887747996, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = Range.scale(range1, 2250.244074);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      
      Range range4 = Range.combineIgnoringNaN(range3, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2883353.2887747996, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2883353.2887747996, range2.getCentralValue(), 0.01);
      assertEquals(2883353.2887747996, range2.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertEquals(937660.068733599, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3352183.323141599, range4.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range4.getUpperBound(), 0.01);
      assertEquals(2883353.2887747996, range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      
      Range range5 = Range.combineIgnoringNaN(range2, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2883353.2887747996, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2883353.2887747996, range2.getCentralValue(), 0.01);
      assertEquals(2883353.2887747996, range2.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertEquals(937660.068733599, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3352183.323141599, range4.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range4.getUpperBound(), 0.01);
      assertEquals(2883353.2887747996, range4.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(3352183.323141599, range5.getCentralValue(), 0.01);
      assertEquals(937660.068733599, range5.getLength(), 0.01);
      assertEquals(3821013.3575083986, range5.getUpperBound(), 0.01);
      assertEquals(2883353.2887747996, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      
      Range range6 = Range.expandToInclude(range1, 2250.244074);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(2250.244074, range6.getUpperBound(), 0.01);
      assertEquals(1974.144016806, range6.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(552.2001143880002, range6.getLength(), 0.01);
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range4));
      
      boolean boolean0 = range6.contains(2250.244074);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(2250.244074, range6.getUpperBound(), 0.01);
      assertEquals(1974.144016806, range6.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(552.2001143880002, range6.getLength(), 0.01);
      assertTrue(boolean0);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range4));
      
      Range range7 = Range.scale(range5, 1698.043959612);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range2, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range4);
      assertNotSame(range3, range7);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range6);
      assertNotSame(range4, range5);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range6);
      assertNotSame(range7, range1);
      assertNotSame(range7, range5);
      assertNotSame(range7, range4);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2883353.2887747996, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2883353.2887747996, range2.getCentralValue(), 0.01);
      assertEquals(2883353.2887747996, range2.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertEquals(937660.068733599, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3352183.323141599, range4.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range4.getUpperBound(), 0.01);
      assertEquals(2883353.2887747996, range4.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(3352183.323141599, range5.getCentralValue(), 0.01);
      assertEquals(937660.068733599, range5.getLength(), 0.01);
      assertEquals(3821013.3575083986, range5.getUpperBound(), 0.01);
      assertEquals(2883353.2887747996, range5.getLowerBound(), 0.01);
      assertEquals(5.692154643372673E9, range7.getCentralValue(), 0.01);
      assertEquals(6.488248651313904E9, range7.getUpperBound(), 0.01);
      assertEquals(4.896060635431443E9, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(1.5921880158824606E9, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      
      Range range8 = Range.shift(range0, (-548.44320186));
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range8, range1);
      assertNotSame(range8, range3);
      assertNotSame(range8, range4);
      assertNotSame(range8, range2);
      assertNotSame(range8, range7);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertNotSame(range8, range6);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertEquals(1149.600757752, range8.getUpperBound(), 0.01);
      assertEquals(1149.600757752, range8.getLowerBound(), 0.01);
      assertEquals(1149.600757752, range8.getCentralValue(), 0.01);
      assertFalse(range8.isNaNRange());
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range6));
      
      Range range9 = Range.combine(range0, range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range9, range2);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertNotSame(range9, range1);
      assertNotSame(range9, range3);
      assertNotSame(range9, range8);
      assertNotSame(range9, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(1698.043959612, range9.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range9.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range9.getLowerBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range6));
      assertTrue(range9.equals((Object)range0));
      assertTrue(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range8));
      
      boolean boolean1 = range0.contains(1698.043959612);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertTrue(boolean1);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range4));
      assertTrue(boolean1 == boolean0);
      
      String string0 = range3.toString();
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range4);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertEquals("Range[3821013.3575083986,3821013.3575083986]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      
      boolean boolean2 = range4.isNaNRange();
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range2, range8);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range4);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range4, range8);
      assertNotSame(range4, range7);
      assertNotSame(range4, range9);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range6);
      assertNotSame(range4, range5);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2883353.2887747996, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2883353.2887747996, range2.getCentralValue(), 0.01);
      assertEquals(2883353.2887747996, range2.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertEquals(937660.068733599, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3352183.323141599, range4.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range4.getUpperBound(), 0.01);
      assertEquals(2883353.2887747996, range4.getLowerBound(), 0.01);
      assertFalse(boolean2);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range6));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Range range10 = Range.expand(range3, 2634.176, 2634.176);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range4);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range10, range2);
      assertNotSame(range10, range0);
      assertNotSame(range10, range3);
      assertNotSame(range10, range7);
      assertNotSame(range10, range1);
      assertNotSame(range10, range6);
      assertNotSame(range10, range8);
      assertNotSame(range10, range9);
      assertNotSame(range10, range4);
      assertNotSame(range10, range5);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(3821013.3575083986, range10.getLowerBound(), 0.01);
      assertEquals(3821013.3575083986, range10.getUpperBound(), 0.01);
      assertEquals(3821013.3575083986, range10.getCentralValue(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range9));
      assertTrue(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range5));
      
      Range range11 = Range.combineIgnoringNaN(range1, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range11);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range9, range2);
      assertNotSame(range9, range10);
      assertNotSame(range9, range7);
      assertNotSame(range9, range11);
      assertNotSame(range9, range5);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertNotSame(range9, range1);
      assertNotSame(range9, range3);
      assertNotSame(range9, range8);
      assertNotSame(range9, range0);
      assertNotSame(range11, range7);
      assertNotSame(range11, range0);
      assertNotSame(range11, range8);
      assertNotSame(range11, range3);
      assertNotSame(range11, range1);
      assertNotSame(range11, range6);
      assertNotSame(range11, range5);
      assertNotSame(range11, range10);
      assertNotSame(range11, range2);
      assertNotSame(range11, range9);
      assertNotSame(range11, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(1698.043959612, range9.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range9.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range9.getLowerBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(0.0, range11.getLength(), 0.01);
      assertEquals(1698.043959612, range11.getLowerBound(), 0.01);
      assertEquals(1698.043959612, range11.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range11.getUpperBound(), 0.01);
      assertNotNull(range11);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range10));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range6));
      assertTrue(range9.equals((Object)range0));
      assertTrue(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range8));
      assertTrue(range11.equals((Object)range1));
      assertTrue(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range6));
      assertTrue(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range4));
      
      Range range12 = Range.combineIgnoringNaN(range6, range4);
      assertNotSame(range12, range10);
      assertNotSame(range12, range0);
      assertNotSame(range12, range2);
      assertNotSame(range12, range7);
      assertNotSame(range12, range3);
      assertNotSame(range12, range1);
      assertNotSame(range12, range11);
      assertNotSame(range12, range9);
      assertNotSame(range12, range4);
      assertNotSame(range12, range8);
      assertNotSame(range12, range6);
      assertNotSame(range12, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range12);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range11);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range8);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range12);
      assertNotSame(range2, range0);
      assertNotSame(range2, range10);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range11);
      assertNotSame(range3, range10);
      assertNotSame(range3, range12);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range4);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range11);
      assertNotSame(range4, range8);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range9);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range11);
      assertNotSame(range4, range10);
      assertNotSame(range4, range12);
      assertNotSame(range4, range0);
      assertNotSame(range4, range6);
      assertNotSame(range4, range5);
      assertNotSame(range6, range5);
      assertNotSame(range6, range12);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range9);
      assertNotSame(range6, range11);
      assertNotSame(range6, range7);
      assertNotSame(range6, range2);
      assertNotSame(range6, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range8);
      assertEquals(3819315.3135487866, range12.getLength(), 0.01);
      assertEquals(1911355.7007340053, range12.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range12.getLowerBound(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(3821013.3575083986, range12.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2883353.2887747996, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2883353.2887747996, range2.getCentralValue(), 0.01);
      assertEquals(2883353.2887747996, range2.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertEquals(937660.068733599, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3352183.323141599, range4.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range4.getUpperBound(), 0.01);
      assertEquals(2883353.2887747996, range4.getLowerBound(), 0.01);
      assertEquals(2250.244074, range6.getUpperBound(), 0.01);
      assertEquals(1974.144016806, range6.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(552.2001143880002, range6.getLength(), 0.01);
      assertNotNull(range12);
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range11));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range8));
      
      Range range13 = Range.combine(range0, range11);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range13, range3);
      assertNotSame(range13, range0);
      assertNotSame(range13, range1);
      assertNotSame(range13, range11);
      assertNotSame(range13, range2);
      assertNotSame(range13, range10);
      assertNotSame(range13, range4);
      assertNotSame(range13, range8);
      assertNotSame(range13, range5);
      assertNotSame(range13, range12);
      assertNotSame(range13, range9);
      assertNotSame(range13, range7);
      assertNotSame(range13, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range11);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range1, range13);
      assertNotSame(range9, range2);
      assertNotSame(range9, range13);
      assertNotSame(range9, range10);
      assertNotSame(range9, range11);
      assertNotSame(range9, range3);
      assertNotSame(range9, range8);
      assertNotSame(range9, range0);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range12);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertNotSame(range9, range1);
      assertNotSame(range11, range0);
      assertNotSame(range11, range8);
      assertNotSame(range11, range3);
      assertNotSame(range11, range6);
      assertNotSame(range11, range2);
      assertNotSame(range11, range9);
      assertNotSame(range11, range7);
      assertNotSame(range11, range1);
      assertNotSame(range11, range5);
      assertNotSame(range11, range10);
      assertNotSame(range11, range12);
      assertNotSame(range11, range13);
      assertNotSame(range11, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range13.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range13.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range13.getLowerBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(1698.043959612, range9.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range9.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range9.getLowerBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(0.0, range11.getLength(), 0.01);
      assertEquals(1698.043959612, range11.getLowerBound(), 0.01);
      assertEquals(1698.043959612, range11.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range11.getUpperBound(), 0.01);
      assertNotNull(range13);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range4));
      assertTrue(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range8));
      assertTrue(range13.equals((Object)range0));
      assertTrue(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range7));
      assertTrue(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range10));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range12));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range6));
      assertTrue(range9.equals((Object)range0));
      assertTrue(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range3));
      assertTrue(range9.equals((Object)range11));
      assertFalse(range9.equals((Object)range8));
      assertTrue(range11.equals((Object)range1));
      assertTrue(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range6));
      assertTrue(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range12));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range4));
      
      Range range14 = Range.scale(range10, 2634.176);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range11);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range14);
      assertNotSame(range1, range10);
      assertNotSame(range1, range13);
      assertNotSame(range14, range3);
      assertNotSame(range14, range1);
      assertNotSame(range14, range6);
      assertNotSame(range14, range2);
      assertNotSame(range14, range10);
      assertNotSame(range14, range13);
      assertNotSame(range14, range4);
      assertNotSame(range14, range7);
      assertNotSame(range14, range11);
      assertNotSame(range14, range8);
      assertNotSame(range14, range0);
      assertNotSame(range14, range5);
      assertNotSame(range14, range12);
      assertNotSame(range14, range9);
      assertNotSame(range3, range12);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range14);
      assertNotSame(range3, range4);
      assertNotSame(range3, range13);
      assertNotSame(range3, range1);
      assertNotSame(range10, range11);
      assertNotSame(range10, range2);
      assertNotSame(range10, range13);
      assertNotSame(range10, range0);
      assertNotSame(range10, range3);
      assertNotSame(range10, range14);
      assertNotSame(range10, range1);
      assertNotSame(range10, range8);
      assertNotSame(range10, range4);
      assertNotSame(range10, range5);
      assertNotSame(range10, range12);
      assertNotSame(range10, range7);
      assertNotSame(range10, range6);
      assertNotSame(range10, range9);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertEquals(1.0065221682028044E10, range14.getLowerBound(), 0.01);
      assertEquals(1.0065221682028044E10, range14.getCentralValue(), 0.01);
      assertEquals(1.0065221682028044E10, range14.getUpperBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(3821013.3575083986, range10.getLowerBound(), 0.01);
      assertEquals(3821013.3575083986, range10.getUpperBound(), 0.01);
      assertEquals(3821013.3575083986, range10.getCentralValue(), 0.01);
      assertNotNull(range14);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range13));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range8));
      assertTrue(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range12));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range9));
      
      Range range15 = Range.expandToInclude(range9, 0.0);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range15);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range11);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range14);
      assertNotSame(range1, range10);
      assertNotSame(range1, range13);
      assertNotSame(range15, range7);
      assertNotSame(range15, range4);
      assertNotSame(range15, range1);
      assertNotSame(range15, range3);
      assertNotSame(range15, range12);
      assertNotSame(range15, range5);
      assertNotSame(range15, range14);
      assertNotSame(range15, range8);
      assertNotSame(range15, range0);
      assertNotSame(range15, range2);
      assertNotSame(range15, range10);
      assertNotSame(range15, range13);
      assertNotSame(range15, range11);
      assertNotSame(range15, range9);
      assertNotSame(range15, range6);
      assertNotSame(range9, range2);
      assertNotSame(range9, range13);
      assertNotSame(range9, range10);
      assertNotSame(range9, range11);
      assertNotSame(range9, range3);
      assertNotSame(range9, range15);
      assertNotSame(range9, range8);
      assertNotSame(range9, range0);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range12);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertNotSame(range9, range1);
      assertNotSame(range9, range14);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range15.getLowerBound(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(1698.043959612, range15.getLength(), 0.01);
      assertEquals(1698.043959612, range15.getUpperBound(), 0.01);
      assertEquals(849.021979806, range15.getCentralValue(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(1698.043959612, range9.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range9.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range9.getLowerBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertNotNull(range15);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range15.equals((Object)range7));
      assertFalse(range15.equals((Object)range4));
      assertFalse(range15.equals((Object)range1));
      assertFalse(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range5));
      assertFalse(range15.equals((Object)range14));
      assertFalse(range15.equals((Object)range8));
      assertFalse(range15.equals((Object)range0));
      assertFalse(range15.equals((Object)range2));
      assertFalse(range15.equals((Object)range10));
      assertFalse(range15.equals((Object)range13));
      assertFalse(range15.equals((Object)range11));
      assertFalse(range15.equals((Object)range9));
      assertFalse(range15.equals((Object)range6));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range10));
      assertTrue(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range3));
      assertTrue(range9.equals((Object)range11));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range12));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range14));
      assertTrue(range9.equals((Object)range1));
      assertTrue(range9.equals((Object)range13));
      
      Range range16 = Range.combine(range9, range14);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range15);
      assertNotSame(range1, range16);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range11);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range14);
      assertNotSame(range1, range10);
      assertNotSame(range1, range13);
      assertNotSame(range14, range3);
      assertNotSame(range14, range1);
      assertNotSame(range14, range6);
      assertNotSame(range14, range2);
      assertNotSame(range14, range10);
      assertNotSame(range14, range13);
      assertNotSame(range14, range4);
      assertNotSame(range14, range7);
      assertNotSame(range14, range15);
      assertNotSame(range14, range11);
      assertNotSame(range14, range8);
      assertNotSame(range14, range0);
      assertNotSame(range14, range5);
      assertNotSame(range14, range12);
      assertNotSame(range14, range9);
      assertNotSame(range14, range16);
      assertNotSame(range3, range12);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range15);
      assertNotSame(range3, range6);
      assertNotSame(range3, range16);
      assertNotSame(range3, range14);
      assertNotSame(range3, range4);
      assertNotSame(range3, range13);
      assertNotSame(range3, range1);
      assertNotSame(range16, range14);
      assertNotSame(range16, range15);
      assertNotSame(range16, range11);
      assertNotSame(range16, range2);
      assertNotSame(range16, range13);
      assertNotSame(range16, range9);
      assertNotSame(range16, range3);
      assertNotSame(range16, range5);
      assertNotSame(range16, range8);
      assertNotSame(range16, range0);
      assertNotSame(range16, range7);
      assertNotSame(range16, range12);
      assertNotSame(range16, range4);
      assertNotSame(range16, range10);
      assertNotSame(range16, range1);
      assertNotSame(range16, range6);
      assertNotSame(range9, range2);
      assertNotSame(range9, range13);
      assertNotSame(range9, range16);
      assertNotSame(range9, range10);
      assertNotSame(range9, range11);
      assertNotSame(range9, range3);
      assertNotSame(range9, range15);
      assertNotSame(range9, range8);
      assertNotSame(range9, range0);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range12);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertNotSame(range9, range1);
      assertNotSame(range9, range14);
      assertNotSame(range10, range11);
      assertNotSame(range10, range2);
      assertNotSame(range10, range13);
      assertNotSame(range10, range15);
      assertNotSame(range10, range0);
      assertNotSame(range10, range3);
      assertNotSame(range10, range14);
      assertNotSame(range10, range1);
      assertNotSame(range10, range8);
      assertNotSame(range10, range4);
      assertNotSame(range10, range5);
      assertNotSame(range10, range12);
      assertNotSame(range10, range7);
      assertNotSame(range10, range6);
      assertNotSame(range10, range9);
      assertNotSame(range10, range16);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertEquals(1.0065221682028044E10, range14.getLowerBound(), 0.01);
      assertEquals(1.0065221682028044E10, range14.getCentralValue(), 0.01);
      assertEquals(1.0065221682028044E10, range14.getUpperBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertEquals(5.032611690036001E9, range16.getCentralValue(), 0.01);
      assertEquals(1.0065221682028044E10, range16.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range16.getLowerBound(), 0.01);
      assertEquals(1.0065219983984085E10, range16.getLength(), 0.01);
      assertFalse(range16.isNaNRange());
      assertFalse(range9.isNaNRange());
      assertEquals(1698.043959612, range9.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range9.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range9.getLowerBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(3821013.3575083986, range10.getLowerBound(), 0.01);
      assertEquals(3821013.3575083986, range10.getUpperBound(), 0.01);
      assertEquals(3821013.3575083986, range10.getCentralValue(), 0.01);
      assertNotNull(range16);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range15));
      assertTrue(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range15));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range15));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range14));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range16.equals((Object)range14));
      assertFalse(range16.equals((Object)range15));
      assertFalse(range16.equals((Object)range11));
      assertFalse(range16.equals((Object)range2));
      assertFalse(range16.equals((Object)range13));
      assertFalse(range16.equals((Object)range9));
      assertFalse(range16.equals((Object)range3));
      assertFalse(range16.equals((Object)range5));
      assertFalse(range16.equals((Object)range8));
      assertFalse(range16.equals((Object)range0));
      assertFalse(range16.equals((Object)range7));
      assertFalse(range16.equals((Object)range12));
      assertFalse(range16.equals((Object)range4));
      assertFalse(range16.equals((Object)range10));
      assertFalse(range16.equals((Object)range1));
      assertFalse(range16.equals((Object)range6));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range10));
      assertTrue(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range3));
      assertTrue(range9.equals((Object)range11));
      assertFalse(range9.equals((Object)range15));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range12));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range14));
      assertTrue(range9.equals((Object)range1));
      assertTrue(range9.equals((Object)range13));
      assertFalse(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range13));
      assertFalse(range10.equals((Object)range15));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range14));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range8));
      assertTrue(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range12));
      assertFalse(range10.equals((Object)range7));
      
      range16.hashCode();
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range15);
      assertNotSame(range1, range16);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range11);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range14);
      assertNotSame(range1, range10);
      assertNotSame(range1, range13);
      assertNotSame(range14, range3);
      assertNotSame(range14, range1);
      assertNotSame(range14, range6);
      assertNotSame(range14, range2);
      assertNotSame(range14, range10);
      assertNotSame(range14, range13);
      assertNotSame(range14, range4);
      assertNotSame(range14, range7);
      assertNotSame(range14, range15);
      assertNotSame(range14, range11);
      assertNotSame(range14, range8);
      assertNotSame(range14, range0);
      assertNotSame(range14, range5);
      assertNotSame(range14, range12);
      assertNotSame(range14, range9);
      assertNotSame(range14, range16);
      assertNotSame(range3, range12);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range15);
      assertNotSame(range3, range6);
      assertNotSame(range3, range16);
      assertNotSame(range3, range14);
      assertNotSame(range3, range4);
      assertNotSame(range3, range13);
      assertNotSame(range3, range1);
      assertNotSame(range16, range14);
      assertNotSame(range16, range15);
      assertNotSame(range16, range11);
      assertNotSame(range16, range2);
      assertNotSame(range16, range13);
      assertNotSame(range16, range9);
      assertNotSame(range16, range3);
      assertNotSame(range16, range5);
      assertNotSame(range16, range8);
      assertNotSame(range16, range0);
      assertNotSame(range16, range7);
      assertNotSame(range16, range12);
      assertNotSame(range16, range4);
      assertNotSame(range16, range10);
      assertNotSame(range16, range1);
      assertNotSame(range16, range6);
      assertNotSame(range9, range2);
      assertNotSame(range9, range13);
      assertNotSame(range9, range16);
      assertNotSame(range9, range10);
      assertNotSame(range9, range11);
      assertNotSame(range9, range3);
      assertNotSame(range9, range15);
      assertNotSame(range9, range8);
      assertNotSame(range9, range0);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range12);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertNotSame(range9, range1);
      assertNotSame(range9, range14);
      assertNotSame(range10, range11);
      assertNotSame(range10, range2);
      assertNotSame(range10, range13);
      assertNotSame(range10, range15);
      assertNotSame(range10, range0);
      assertNotSame(range10, range3);
      assertNotSame(range10, range14);
      assertNotSame(range10, range1);
      assertNotSame(range10, range8);
      assertNotSame(range10, range4);
      assertNotSame(range10, range5);
      assertNotSame(range10, range12);
      assertNotSame(range10, range7);
      assertNotSame(range10, range6);
      assertNotSame(range10, range9);
      assertNotSame(range10, range16);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertEquals(1.0065221682028044E10, range14.getLowerBound(), 0.01);
      assertEquals(1.0065221682028044E10, range14.getCentralValue(), 0.01);
      assertEquals(1.0065221682028044E10, range14.getUpperBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertEquals(5.032611690036001E9, range16.getCentralValue(), 0.01);
      assertEquals(1.0065221682028044E10, range16.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range16.getLowerBound(), 0.01);
      assertEquals(1.0065219983984085E10, range16.getLength(), 0.01);
      assertFalse(range16.isNaNRange());
      assertFalse(range9.isNaNRange());
      assertEquals(1698.043959612, range9.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range9.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range9.getLowerBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(3821013.3575083986, range10.getLowerBound(), 0.01);
      assertEquals(3821013.3575083986, range10.getUpperBound(), 0.01);
      assertEquals(3821013.3575083986, range10.getCentralValue(), 0.01);
      
      boolean boolean3 = range6.contains((-548.44320186));
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range15);
      assertNotSame(range1, range16);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range11);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range14);
      assertNotSame(range1, range10);
      assertNotSame(range1, range13);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range11);
      assertNotSame(range6, range13);
      assertNotSame(range6, range2);
      assertNotSame(range6, range10);
      assertNotSame(range6, range14);
      assertNotSame(range6, range16);
      assertNotSame(range6, range5);
      assertNotSame(range6, range12);
      assertNotSame(range6, range9);
      assertNotSame(range6, range7);
      assertNotSame(range6, range4);
      assertNotSame(range6, range8);
      assertNotSame(range6, range15);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(2250.244074, range6.getUpperBound(), 0.01);
      assertEquals(1974.144016806, range6.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(552.2001143880002, range6.getLength(), 0.01);
      assertFalse(boolean3);
      
      double double0 = range0.getCentralValue();
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertEquals(1698.043959612, double0, 0.01);
      
      Range range17 = Range.shift(range9, 653.7574003864);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range17);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range17);
      assertNotSame(range1, range15);
      assertNotSame(range1, range16);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range11);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range14);
      assertNotSame(range1, range10);
      assertNotSame(range1, range13);
      assertNotSame(range17, range9);
      assertNotSame(range17, range8);
      assertNotSame(range17, range5);
      assertNotSame(range17, range13);
      assertNotSame(range17, range12);
      assertNotSame(range17, range14);
      assertNotSame(range17, range10);
      assertNotSame(range17, range1);
      assertNotSame(range17, range6);
      assertNotSame(range17, range4);
      assertNotSame(range17, range16);
      assertNotSame(range17, range2);
      assertNotSame(range17, range0);
      assertNotSame(range17, range15);
      assertNotSame(range17, range3);
      assertNotSame(range17, range7);
      assertNotSame(range17, range11);
      assertNotSame(range9, range2);
      assertNotSame(range9, range13);
      assertNotSame(range9, range16);
      assertNotSame(range9, range10);
      assertNotSame(range9, range11);
      assertNotSame(range9, range17);
      assertNotSame(range9, range3);
      assertNotSame(range9, range15);
      assertNotSame(range9, range8);
      assertNotSame(range9, range0);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range12);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertNotSame(range9, range1);
      assertNotSame(range9, range14);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(2351.8013599984, range17.getCentralValue(), 0.01);
      assertEquals(2351.8013599984, range17.getUpperBound(), 0.01);
      assertEquals(0.0, range17.getLength(), 0.01);
      assertFalse(range17.isNaNRange());
      assertEquals(2351.8013599984, range17.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(1698.043959612, range9.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range9.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range9.getLowerBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertNotNull(range17);
      
      double double1 = range4.getUpperBound();
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range17);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range17);
      assertNotSame(range1, range15);
      assertNotSame(range1, range16);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range11);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range14);
      assertNotSame(range1, range10);
      assertNotSame(range1, range13);
      assertNotSame(range2, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range17);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range13);
      assertNotSame(range2, range14);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range9);
      assertNotSame(range2, range5);
      assertNotSame(range2, range16);
      assertNotSame(range2, range0);
      assertNotSame(range2, range15);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range11);
      assertNotSame(range3, range12);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range15);
      assertNotSame(range3, range17);
      assertNotSame(range3, range6);
      assertNotSame(range3, range16);
      assertNotSame(range3, range14);
      assertNotSame(range3, range4);
      assertNotSame(range3, range13);
      assertNotSame(range3, range1);
      assertNotSame(range4, range14);
      assertNotSame(range4, range8);
      assertNotSame(range4, range9);
      assertNotSame(range4, range2);
      assertNotSame(range4, range13);
      assertNotSame(range4, range11);
      assertNotSame(range4, range10);
      assertNotSame(range4, range12);
      assertNotSame(range4, range0);
      assertNotSame(range4, range15);
      assertNotSame(range4, range17);
      assertNotSame(range4, range5);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range16);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2883353.2887747996, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2883353.2887747996, range2.getCentralValue(), 0.01);
      assertEquals(2883353.2887747996, range2.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertEquals(937660.068733599, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3352183.323141599, range4.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range4.getUpperBound(), 0.01);
      assertEquals(2883353.2887747996, range4.getLowerBound(), 0.01);
      assertEquals(3821013.3575083986, double1, 0.01);
      
      Range range18 = Range.combine(range5, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range17);
      assertNotSame(range0, range18);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range17);
      assertNotSame(range1, range18);
      assertNotSame(range1, range15);
      assertNotSame(range1, range16);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range11);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range14);
      assertNotSame(range1, range10);
      assertNotSame(range1, range13);
      assertNotSame(range2, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range17);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range13);
      assertNotSame(range2, range14);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range9);
      assertNotSame(range2, range18);
      assertNotSame(range2, range5);
      assertNotSame(range2, range16);
      assertNotSame(range2, range0);
      assertNotSame(range2, range15);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range11);
      assertNotSame(range3, range12);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range15);
      assertNotSame(range3, range17);
      assertNotSame(range3, range18);
      assertNotSame(range3, range6);
      assertNotSame(range3, range16);
      assertNotSame(range3, range14);
      assertNotSame(range3, range4);
      assertNotSame(range3, range13);
      assertNotSame(range3, range1);
      assertNotSame(range4, range14);
      assertNotSame(range4, range8);
      assertNotSame(range4, range9);
      assertNotSame(range4, range2);
      assertNotSame(range4, range13);
      assertNotSame(range4, range11);
      assertNotSame(range4, range10);
      assertNotSame(range4, range12);
      assertNotSame(range4, range0);
      assertNotSame(range4, range15);
      assertNotSame(range4, range17);
      assertNotSame(range4, range18);
      assertNotSame(range4, range5);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range16);
      assertNotSame(range5, range12);
      assertNotSame(range5, range7);
      assertNotSame(range5, range8);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range18);
      assertNotSame(range5, range17);
      assertNotSame(range5, range10);
      assertNotSame(range5, range2);
      assertNotSame(range5, range13);
      assertNotSame(range5, range16);
      assertNotSame(range5, range11);
      assertNotSame(range5, range3);
      assertNotSame(range5, range15);
      assertNotSame(range5, range14);
      assertNotSame(range5, range0);
      assertNotSame(range5, range6);
      assertNotSame(range5, range9);
      assertNotSame(range18, range10);
      assertNotSame(range18, range3);
      assertNotSame(range18, range16);
      assertNotSame(range18, range6);
      assertNotSame(range18, range0);
      assertNotSame(range18, range15);
      assertNotSame(range18, range14);
      assertNotSame(range18, range1);
      assertNotSame(range18, range17);
      assertNotSame(range18, range13);
      assertNotSame(range18, range12);
      assertNotSame(range18, range4);
      assertNotSame(range18, range5);
      assertNotSame(range18, range8);
      assertNotSame(range18, range7);
      assertNotSame(range18, range11);
      assertNotSame(range18, range9);
      assertNotSame(range18, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1698.043959612, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1698.043959612, range0.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1698.043959612, range1.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range1.getUpperBound(), 0.01);
      assertEquals(1698.043959612, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2883353.2887747996, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2883353.2887747996, range2.getCentralValue(), 0.01);
      assertEquals(2883353.2887747996, range2.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3821013.3575083986, range3.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3821013.3575083986, range3.getLowerBound(), 0.01);
      assertEquals(937660.068733599, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3352183.323141599, range4.getCentralValue(), 0.01);
      assertEquals(3821013.3575083986, range4.getUpperBound(), 0.01);
      assertEquals(2883353.2887747996, range4.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(3352183.323141599, range5.getCentralValue(), 0.01);
      assertEquals(937660.068733599, range5.getLength(), 0.01);
      assertEquals(3821013.3575083986, range5.getUpperBound(), 0.01);
      assertEquals(2883353.2887747996, range5.getLowerBound(), 0.01);
      assertEquals(3821013.3575083986, range18.getUpperBound(), 0.01);
      assertFalse(range18.isNaNRange());
      assertEquals(3819315.3135487866, range18.getLength(), 0.01);
      assertEquals(1911355.7007340053, range18.getCentralValue(), 0.01);
      assertEquals(1698.043959612, range18.getLowerBound(), 0.01);
      assertNotNull(range18);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = new Range(2.0, 1767.3186189);
      assertEquals(1765.3186189, range0.getLength(), 0.01);
      assertEquals(1767.3186189, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(884.65930945, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      double double0 = (-292.59392);
      Range range1 = Range.expand(range0, (-292.59392), 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1765.3186189, range0.getLength(), 0.01);
      assertEquals(1767.3186189, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(884.65930945, range0.getCentralValue(), 0.01);
      assertEquals(259145.4066859186, range1.getUpperBound(), 0.01);
      assertEquals(259145.4066859186, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(259145.4066859186, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range0, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1765.3186189, range0.getLength(), 0.01);
      assertEquals(1767.3186189, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(884.65930945, range0.getCentralValue(), 0.01);
      assertEquals(1765.3186189, range2.getLength(), 0.01);
      assertEquals(884.65930945, range2.getCentralValue(), 0.01);
      assertEquals(1767.3186189, range2.getUpperBound(), 0.01);
      assertEquals(2.0, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = Range.shift(range0, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(1765.3186189, range0.getLength(), 0.01);
      assertEquals(1767.3186189, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(884.65930945, range0.getCentralValue(), 0.01);
      assertEquals(1767.3186189, range3.getUpperBound(), 0.01);
      assertEquals(884.65930945, range3.getCentralValue(), 0.01);
      assertEquals(1765.3186189, range3.getLength(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = Range.combine(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertEquals(1765.3186189, range0.getLength(), 0.01);
      assertEquals(1767.3186189, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(884.65930945, range0.getCentralValue(), 0.01);
      assertEquals(259145.4066859186, range1.getUpperBound(), 0.01);
      assertEquals(259145.4066859186, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(259145.4066859186, range1.getCentralValue(), 0.01);
      assertEquals(259143.4066859186, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(129573.7033429593, range4.getCentralValue(), 0.01);
      assertEquals(259145.4066859186, range4.getUpperBound(), 0.01);
      assertEquals(2.0, range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      
      Range range5 = Range.scale(range3, 2.0);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range5);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertEquals(1765.3186189, range0.getLength(), 0.01);
      assertEquals(1767.3186189, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(884.65930945, range0.getCentralValue(), 0.01);
      assertEquals(1767.3186189, range3.getUpperBound(), 0.01);
      assertEquals(884.65930945, range3.getCentralValue(), 0.01);
      assertEquals(1765.3186189, range3.getLength(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3530.6372378, range5.getLength(), 0.01);
      assertEquals(1769.3186189, range5.getCentralValue(), 0.01);
      assertEquals(3534.6372378, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(4.0, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      
      double double1 = range5.getLowerBound();
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range5);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertEquals(1765.3186189, range0.getLength(), 0.01);
      assertEquals(1767.3186189, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(884.65930945, range0.getCentralValue(), 0.01);
      assertEquals(1767.3186189, range3.getUpperBound(), 0.01);
      assertEquals(884.65930945, range3.getCentralValue(), 0.01);
      assertEquals(1765.3186189, range3.getLength(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3530.6372378, range5.getLength(), 0.01);
      assertEquals(1769.3186189, range5.getCentralValue(), 0.01);
      assertEquals(3534.6372378, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(4.0, range5.getLowerBound(), 0.01);
      assertEquals(4.0, double1, 0.01);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Range.scale(range0, (-292.59392));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 0.0, (-855.8337649514));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.scale(range0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = Range.combineIgnoringNaN(range1, range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      
      Range range4 = Range.shift(range0, 2.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range4.getUpperBound(), 0.01);
      assertEquals(4.0, range4.getCentralValue(), 0.01);
      assertEquals(4.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      
      Range range5 = Range.combineIgnoringNaN(range1, range0);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range5, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2.0, range5.getCentralValue(), 0.01);
      assertEquals(2.0, range5.getUpperBound(), 0.01);
      assertEquals(2.0, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range4));
      
      Range range6 = Range.shift(range4, 2.0, false);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range4.getUpperBound(), 0.01);
      assertEquals(4.0, range4.getCentralValue(), 0.01);
      assertEquals(4.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(6.0, range6.getUpperBound(), 0.01);
      assertEquals(6.0, range6.getCentralValue(), 0.01);
      assertEquals(6.0, range6.getLowerBound(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range3));
      
      Range range7 = Range.expandToInclude(range6, 0.0);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range0);
      assertNotSame(range6, range7);
      assertNotSame(range6, range3);
      assertNotSame(range7, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range4.getUpperBound(), 0.01);
      assertEquals(4.0, range4.getCentralValue(), 0.01);
      assertEquals(4.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(6.0, range6.getUpperBound(), 0.01);
      assertEquals(6.0, range6.getCentralValue(), 0.01);
      assertEquals(6.0, range6.getLowerBound(), 0.01);
      assertEquals(3.0, range7.getCentralValue(), 0.01);
      assertEquals(6.0, range7.getUpperBound(), 0.01);
      assertEquals(6.0, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      
      Range range8 = Range.expandToInclude(range1, 2.0);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertSame(range1, range8);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertSame(range8, range1);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertNotSame(range8, range4);
      assertNotSame(range8, range2);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertNotSame(range8, range6);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(2.0, range8.getCentralValue(), 0.01);
      assertEquals(2.0, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertEquals(2.0, range8.getLowerBound(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range6));
      
      String string0 = range7.toString();
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range8);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range8);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range0);
      assertNotSame(range6, range7);
      assertNotSame(range6, range3);
      assertNotSame(range7, range4);
      assertNotSame(range7, range8);
      assertNotSame(range7, range3);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range4.getUpperBound(), 0.01);
      assertEquals(4.0, range4.getCentralValue(), 0.01);
      assertEquals(4.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(6.0, range6.getUpperBound(), 0.01);
      assertEquals(6.0, range6.getCentralValue(), 0.01);
      assertEquals(6.0, range6.getLowerBound(), 0.01);
      assertEquals(3.0, range7.getCentralValue(), 0.01);
      assertEquals(6.0, range7.getUpperBound(), 0.01);
      assertEquals(6.0, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals("Range[0.0,6.0]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      
      Range range9 = Range.combine(range7, range0);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range9);
      assertNotSame(range4, range8);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range8);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range9);
      assertNotSame(range6, range0);
      assertNotSame(range6, range7);
      assertNotSame(range6, range3);
      assertNotSame(range7, range4);
      assertNotSame(range7, range8);
      assertNotSame(range7, range3);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range9);
      assertNotSame(range7, range6);
      assertNotSame(range9, range6);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range8);
      assertNotSame(range9, range3);
      assertNotSame(range9, range4);
      assertNotSame(range9, range2);
      assertNotSame(range9, range0);
      assertNotSame(range9, range1);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range4.getUpperBound(), 0.01);
      assertEquals(4.0, range4.getCentralValue(), 0.01);
      assertEquals(4.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(6.0, range6.getUpperBound(), 0.01);
      assertEquals(6.0, range6.getCentralValue(), 0.01);
      assertEquals(6.0, range6.getLowerBound(), 0.01);
      assertEquals(3.0, range7.getCentralValue(), 0.01);
      assertEquals(6.0, range7.getUpperBound(), 0.01);
      assertEquals(6.0, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(6.0, range9.getLength(), 0.01);
      assertEquals(3.0, range9.getCentralValue(), 0.01);
      assertEquals(6.0, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range1));
      assertTrue(range9.equals((Object)range7));
      
      Range range10 = Range.shift(range3, 2.0, true);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range9);
      assertSame(range1, range8);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range10);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range9);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range10);
      assertNotSame(range10, range4);
      assertNotSame(range10, range8);
      assertNotSame(range10, range1);
      assertNotSame(range10, range7);
      assertNotSame(range10, range2);
      assertNotSame(range10, range0);
      assertNotSame(range10, range3);
      assertNotSame(range10, range9);
      assertNotSame(range10, range6);
      assertNotSame(range10, range5);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(4.0, range10.getLowerBound(), 0.01);
      assertEquals(4.0, range10.getCentralValue(), 0.01);
      assertEquals(4.0, range10.getUpperBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range3));
      assertTrue(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range5));
      
      Range range11 = Range.shift(range7, (-4208.41660659), true);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range4, range1);
      assertNotSame(range4, range11);
      assertNotSame(range4, range9);
      assertNotSame(range4, range8);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range11);
      assertNotSame(range6, range1);
      assertNotSame(range6, range8);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range9);
      assertNotSame(range6, range0);
      assertNotSame(range6, range7);
      assertNotSame(range6, range3);
      assertNotSame(range6, range10);
      assertNotSame(range7, range4);
      assertNotSame(range7, range8);
      assertNotSame(range7, range11);
      assertNotSame(range7, range3);
      assertNotSame(range7, range10);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range9);
      assertNotSame(range7, range6);
      assertNotSame(range11, range4);
      assertNotSame(range11, range8);
      assertNotSame(range11, range6);
      assertNotSame(range11, range2);
      assertNotSame(range11, range0);
      assertNotSame(range11, range5);
      assertNotSame(range11, range1);
      assertNotSame(range11, range9);
      assertNotSame(range11, range3);
      assertNotSame(range11, range10);
      assertNotSame(range11, range7);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range4.getUpperBound(), 0.01);
      assertEquals(4.0, range4.getCentralValue(), 0.01);
      assertEquals(4.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(6.0, range6.getUpperBound(), 0.01);
      assertEquals(6.0, range6.getCentralValue(), 0.01);
      assertEquals(6.0, range6.getLowerBound(), 0.01);
      assertEquals(3.0, range7.getCentralValue(), 0.01);
      assertEquals(6.0, range7.getUpperBound(), 0.01);
      assertEquals(6.0, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals((-4205.41660659), range11.getCentralValue(), 0.01);
      assertEquals((-4208.41660659), range11.getLowerBound(), 0.01);
      assertEquals((-4202.41660659), range11.getUpperBound(), 0.01);
      assertEquals(6.0, range11.getLength(), 0.01);
      assertFalse(range11.isNaNRange());
      assertNotNull(range11);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range8));
      assertTrue(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range7));
      
      Range range12 = Range.scale(range5, 0.0);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range12);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range6);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range5, range2);
      assertNotSame(range5, range6);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range9);
      assertNotSame(range5, range12);
      assertNotSame(range5, range11);
      assertNotSame(range5, range8);
      assertNotSame(range5, range3);
      assertNotSame(range5, range10);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range12, range9);
      assertNotSame(range12, range0);
      assertNotSame(range12, range3);
      assertNotSame(range12, range10);
      assertNotSame(range12, range1);
      assertNotSame(range12, range7);
      assertNotSame(range12, range4);
      assertNotSame(range12, range8);
      assertNotSame(range12, range11);
      assertNotSame(range12, range2);
      assertNotSame(range12, range6);
      assertNotSame(range12, range5);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2.0, range5.getCentralValue(), 0.01);
      assertEquals(2.0, range5.getUpperBound(), 0.01);
      assertEquals(2.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range12.getCentralValue(), 0.01);
      assertEquals(0.0, range12.getUpperBound(), 0.01);
      assertEquals(0.0, range12.getLowerBound(), 0.01);
      assertEquals(0.0, range12.getLength(), 0.01);
      assertFalse(range12.isNaNRange());
      assertNotNull(range12);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range8));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range5));
      assertTrue(range12.equals((Object)range2));
      
      String string1 = range10.toString();
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range12);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range6);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range9);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range11);
      assertNotSame(range3, range4);
      assertNotSame(range3, range10);
      assertNotSame(range3, range12);
      assertNotSame(range10, range4);
      assertNotSame(range10, range12);
      assertNotSame(range10, range8);
      assertNotSame(range10, range1);
      assertNotSame(range10, range2);
      assertNotSame(range10, range0);
      assertNotSame(range10, range7);
      assertNotSame(range10, range11);
      assertNotSame(range10, range3);
      assertNotSame(range10, range9);
      assertNotSame(range10, range6);
      assertNotSame(range10, range5);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(4.0, range10.getLowerBound(), 0.01);
      assertEquals(4.0, range10.getCentralValue(), 0.01);
      assertEquals(4.0, range10.getUpperBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals("Range[4.0,4.0]", string1);
      assertNotNull(string1);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range10.equals((Object)range12));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range3));
      assertTrue(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range5));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = range9.isNaNRange();
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range12);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range4, range1);
      assertNotSame(range4, range12);
      assertNotSame(range4, range11);
      assertNotSame(range4, range9);
      assertNotSame(range4, range0);
      assertNotSame(range4, range8);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range11);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range8);
      assertNotSame(range6, range5);
      assertNotSame(range6, range9);
      assertNotSame(range6, range0);
      assertNotSame(range6, range12);
      assertNotSame(range6, range3);
      assertNotSame(range6, range10);
      assertNotSame(range6, range7);
      assertNotSame(range7, range4);
      assertNotSame(range7, range12);
      assertNotSame(range7, range8);
      assertNotSame(range7, range11);
      assertNotSame(range7, range3);
      assertNotSame(range7, range10);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range9);
      assertNotSame(range7, range6);
      assertNotSame(range9, range6);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range3);
      assertNotSame(range9, range10);
      assertNotSame(range9, range8);
      assertNotSame(range9, range4);
      assertNotSame(range9, range2);
      assertNotSame(range9, range0);
      assertNotSame(range9, range11);
      assertNotSame(range9, range1);
      assertNotSame(range9, range12);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range4.getUpperBound(), 0.01);
      assertEquals(4.0, range4.getCentralValue(), 0.01);
      assertEquals(4.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(6.0, range6.getUpperBound(), 0.01);
      assertEquals(6.0, range6.getCentralValue(), 0.01);
      assertEquals(6.0, range6.getLowerBound(), 0.01);
      assertEquals(3.0, range7.getCentralValue(), 0.01);
      assertEquals(6.0, range7.getUpperBound(), 0.01);
      assertEquals(6.0, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(6.0, range9.getLength(), 0.01);
      assertEquals(3.0, range9.getCentralValue(), 0.01);
      assertEquals(6.0, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range12));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range11));
      assertTrue(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range10));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range11));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range12));
      assertTrue(range9.equals((Object)range7));
      
      String string2 = range4.toString();
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range12);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range4, range1);
      assertNotSame(range4, range12);
      assertNotSame(range4, range11);
      assertNotSame(range4, range9);
      assertNotSame(range4, range0);
      assertNotSame(range4, range8);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range10);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range4.getUpperBound(), 0.01);
      assertEquals(4.0, range4.getCentralValue(), 0.01);
      assertEquals(4.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals("Range[4.0,4.0]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      
      double double0 = range2.constrain(0.0);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range12);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range3);
      assertNotSame(range2, range10);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range8);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range12));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range8));
      
      Range range13 = Range.expand(range4, 0.0, 1850.0693);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range11);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range12);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range13, range7);
      assertNotSame(range13, range4);
      assertNotSame(range13, range8);
      assertNotSame(range13, range0);
      assertNotSame(range13, range2);
      assertNotSame(range13, range5);
      assertNotSame(range13, range11);
      assertNotSame(range13, range1);
      assertNotSame(range13, range9);
      assertNotSame(range13, range6);
      assertNotSame(range13, range3);
      assertNotSame(range13, range10);
      assertNotSame(range13, range12);
      assertNotSame(range4, range13);
      assertNotSame(range4, range9);
      assertNotSame(range4, range8);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range10);
      assertNotSame(range4, range1);
      assertNotSame(range4, range12);
      assertNotSame(range4, range11);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range5);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range13.getLowerBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(4.0, range13.getCentralValue(), 0.01);
      assertEquals(4.0, range13.getUpperBound(), 0.01);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertEquals(4.0, range4.getUpperBound(), 0.01);
      assertEquals(4.0, range4.getCentralValue(), 0.01);
      assertEquals(4.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range13);
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range6));
      assertTrue(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      
      boolean boolean1 = range1.equals(range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range11);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range12);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range11);
      assertNotSame(range1, range6);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range13);
      assertNotSame(range1, range3);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range3, range7);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range13);
      assertNotSame(range3, range11);
      assertNotSame(range3, range10);
      assertNotSame(range3, range12);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertTrue(boolean1);
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range5));
      assertFalse(boolean1 == boolean0);
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      
      double double1 = range6.constrain((-855.8337649514));
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range11);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range12);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range4, range13);
      assertNotSame(range4, range9);
      assertNotSame(range4, range8);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range10);
      assertNotSame(range4, range1);
      assertNotSame(range4, range12);
      assertNotSame(range4, range11);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range5);
      assertNotSame(range6, range11);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range9);
      assertNotSame(range6, range12);
      assertNotSame(range6, range3);
      assertNotSame(range6, range10);
      assertNotSame(range6, range7);
      assertNotSame(range6, range4);
      assertNotSame(range6, range8);
      assertNotSame(range6, range13);
      assertNotSame(range6, range0);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range4.getUpperBound(), 0.01);
      assertEquals(4.0, range4.getCentralValue(), 0.01);
      assertEquals(4.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(6.0, range6.getUpperBound(), 0.01);
      assertEquals(6.0, range6.getCentralValue(), 0.01);
      assertEquals(6.0, range6.getLowerBound(), 0.01);
      assertEquals(6.0, double1, 0.01);
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range13));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range13));
      assertFalse(range6.equals((Object)range0));
      
      Range range14 = Range.shift(range1, 0.0);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range11);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range12);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range11);
      assertNotSame(range1, range6);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range14);
      assertNotSame(range1, range13);
      assertNotSame(range1, range3);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range14, range11);
      assertNotSame(range14, range12);
      assertNotSame(range14, range6);
      assertNotSame(range14, range1);
      assertNotSame(range14, range2);
      assertNotSame(range14, range0);
      assertNotSame(range14, range3);
      assertNotSame(range14, range10);
      assertNotSame(range14, range7);
      assertNotSame(range14, range4);
      assertNotSame(range14, range9);
      assertNotSame(range14, range8);
      assertNotSame(range14, range13);
      assertNotSame(range14, range5);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(2.0, range14.getCentralValue(), 0.01);
      assertEquals(2.0, range14.getLowerBound(), 0.01);
      assertEquals(2.0, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertNotNull(range14);
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range14.equals((Object)range11));
      assertTrue(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range7));
      assertTrue(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range4));
      assertTrue(range14.equals((Object)range3));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range13));
      assertTrue(range14.equals((Object)range1));
      assertTrue(range14.equals((Object)range8));
      
      boolean boolean2 = range7.intersects(range14);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range11);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range12);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range11);
      assertNotSame(range1, range6);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range14);
      assertNotSame(range1, range13);
      assertNotSame(range1, range3);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range4, range13);
      assertNotSame(range4, range9);
      assertNotSame(range4, range8);
      assertNotSame(range4, range14);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range10);
      assertNotSame(range4, range1);
      assertNotSame(range4, range12);
      assertNotSame(range4, range11);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range5);
      assertNotSame(range14, range11);
      assertNotSame(range14, range12);
      assertNotSame(range14, range6);
      assertNotSame(range14, range1);
      assertNotSame(range14, range2);
      assertNotSame(range14, range0);
      assertNotSame(range14, range3);
      assertNotSame(range14, range10);
      assertNotSame(range14, range7);
      assertNotSame(range14, range4);
      assertNotSame(range14, range9);
      assertNotSame(range14, range8);
      assertNotSame(range14, range13);
      assertNotSame(range14, range5);
      assertNotSame(range6, range11);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range9);
      assertNotSame(range6, range12);
      assertNotSame(range6, range3);
      assertNotSame(range6, range10);
      assertNotSame(range6, range7);
      assertNotSame(range6, range4);
      assertNotSame(range6, range14);
      assertNotSame(range6, range8);
      assertNotSame(range6, range13);
      assertNotSame(range6, range0);
      assertNotSame(range7, range12);
      assertNotSame(range7, range11);
      assertNotSame(range7, range3);
      assertNotSame(range7, range10);
      assertNotSame(range7, range2);
      assertNotSame(range7, range13);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range9);
      assertNotSame(range7, range14);
      assertNotSame(range7, range4);
      assertNotSame(range7, range8);
      assertNotSame(range7, range0);
      assertNotSame(range7, range6);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(4.0, range4.getUpperBound(), 0.01);
      assertEquals(4.0, range4.getCentralValue(), 0.01);
      assertEquals(4.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(2.0, range14.getCentralValue(), 0.01);
      assertEquals(2.0, range14.getLowerBound(), 0.01);
      assertEquals(2.0, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(6.0, range6.getUpperBound(), 0.01);
      assertEquals(6.0, range6.getCentralValue(), 0.01);
      assertEquals(6.0, range6.getLowerBound(), 0.01);
      assertEquals(3.0, range7.getCentralValue(), 0.01);
      assertEquals(6.0, range7.getUpperBound(), 0.01);
      assertEquals(6.0, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertTrue(boolean2);
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range14));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range14));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range13));
      assertFalse(range14.equals((Object)range11));
      assertTrue(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range7));
      assertTrue(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range4));
      assertTrue(range14.equals((Object)range3));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range13));
      assertTrue(range14.equals((Object)range1));
      assertTrue(range14.equals((Object)range8));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range14));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range13));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range7.equals((Object)range12));
      assertFalse(range7.equals((Object)range11));
      assertTrue(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range13));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range14));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range6));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = null;
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 2225.335276234);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = new Range(0.0, 1.0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range range1 = Range.shift(range0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      boolean boolean0 = range0.equals(object0);
      assertNotSame(range0, range1);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertTrue(range0.equals((Object)range1));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = range0.equals(object1);
      assertNotSame(range0, range1);
      assertNotSame(object1, object0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(boolean1);
      assertTrue(range0.equals((Object)range1));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      
      double double0 = range0.getLength();
      assertNotSame(range0, range1);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertTrue(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = new Range(0.0, 3701.6549);
      assertEquals(3701.6549, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1850.82745, range0.getCentralValue(), 0.01);
      assertEquals(3701.6549, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      double double0 = range0.constrain(0.0);
      assertEquals(3701.6549, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1850.82745, range0.getCentralValue(), 0.01);
      assertEquals(3701.6549, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, double0, 0.01);
      
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(3701.6549, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1850.82745, range0.getCentralValue(), 0.01);
      assertEquals(3701.6549, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1850.82745, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3701.6549, range1.getUpperBound(), 0.01);
      assertEquals(3701.6549, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range1, range0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(3701.6549, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1850.82745, range0.getCentralValue(), 0.01);
      assertEquals(3701.6549, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1850.82745, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3701.6549, range1.getUpperBound(), 0.01);
      assertEquals(3701.6549, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(3701.6549, range2.getLength(), 0.01);
      assertEquals(1850.82745, range2.getCentralValue(), 0.01);
      assertEquals(3701.6549, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.shift(range1, 0.0, true);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(3701.6549, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1850.82745, range0.getCentralValue(), 0.01);
      assertEquals(3701.6549, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1850.82745, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3701.6549, range1.getUpperBound(), 0.01);
      assertEquals(3701.6549, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1850.82745, range3.getCentralValue(), 0.01);
      assertEquals(3701.6549, range3.getUpperBound(), 0.01);
      assertEquals(3701.6549, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = Range.combineIgnoringNaN(range1, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertEquals(3701.6549, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1850.82745, range0.getCentralValue(), 0.01);
      assertEquals(3701.6549, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1850.82745, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3701.6549, range1.getUpperBound(), 0.01);
      assertEquals(3701.6549, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1850.82745, range3.getCentralValue(), 0.01);
      assertEquals(3701.6549, range3.getUpperBound(), 0.01);
      assertEquals(3701.6549, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3701.6549, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(3701.6549, range4.getUpperBound(), 0.01);
      assertEquals(1850.82745, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      
      Range range5 = Range.combine(range4, range0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertEquals(3701.6549, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1850.82745, range0.getCentralValue(), 0.01);
      assertEquals(3701.6549, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1850.82745, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3701.6549, range1.getUpperBound(), 0.01);
      assertEquals(3701.6549, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1850.82745, range3.getCentralValue(), 0.01);
      assertEquals(3701.6549, range3.getUpperBound(), 0.01);
      assertEquals(3701.6549, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3701.6549, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(3701.6549, range4.getUpperBound(), 0.01);
      assertEquals(1850.82745, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertFalse(range5.isNaNRange());
      assertEquals(1850.82745, range5.getCentralValue(), 0.01);
      assertEquals(3701.6549, range5.getUpperBound(), 0.01);
      assertEquals(3701.6549, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range0));
      
      Range range6 = Range.scale(range1, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range6, range5);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertEquals(3701.6549, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1850.82745, range0.getCentralValue(), 0.01);
      assertEquals(3701.6549, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1850.82745, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3701.6549, range1.getUpperBound(), 0.01);
      assertEquals(3701.6549, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range2));
      
      Range range7 = Range.expand(range6, 3701.6549, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range6, range5);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range7);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range7, range2);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range0);
      assertNotSame(range7, range4);
      assertEquals(3701.6549, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1850.82745, range0.getCentralValue(), 0.01);
      assertEquals(3701.6549, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1850.82745, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3701.6549, range1.getUpperBound(), 0.01);
      assertEquals(3701.6549, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getCentralValue(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range0));
      assertTrue(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range4));
      
      Range range8 = Range.combine(range4, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range8);
      assertNotSame(range4, range5);
      assertNotSame(range4, range6);
      assertNotSame(range4, range1);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range8);
      assertNotSame(range4, range0);
      assertNotSame(range8, range3);
      assertNotSame(range8, range2);
      assertNotSame(range8, range7);
      assertNotSame(range8, range6);
      assertNotSame(range8, range5);
      assertNotSame(range8, range1);
      assertNotSame(range8, range0);
      assertNotSame(range8, range4);
      assertEquals(3701.6549, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1850.82745, range0.getCentralValue(), 0.01);
      assertEquals(3701.6549, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1850.82745, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3701.6549, range1.getUpperBound(), 0.01);
      assertEquals(3701.6549, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1850.82745, range3.getCentralValue(), 0.01);
      assertEquals(3701.6549, range3.getUpperBound(), 0.01);
      assertEquals(3701.6549, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3701.6549, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(3701.6549, range4.getUpperBound(), 0.01);
      assertEquals(1850.82745, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(1850.82745, range8.getCentralValue(), 0.01);
      assertEquals(3701.6549, range8.getUpperBound(), 0.01);
      assertEquals(3701.6549, range8.getLength(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range1));
      assertTrue(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range2));
      
      Range range9 = Range.combine(range5, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range9);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range3, range9);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range8);
      assertNotSame(range4, range5);
      assertNotSame(range4, range6);
      assertNotSame(range4, range1);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range9);
      assertNotSame(range4, range2);
      assertNotSame(range4, range8);
      assertNotSame(range4, range0);
      assertNotSame(range5, range9);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertNotSame(range5, range8);
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range9, range2);
      assertNotSame(range9, range7);
      assertNotSame(range9, range6);
      assertNotSame(range9, range3);
      assertNotSame(range9, range4);
      assertNotSame(range9, range1);
      assertNotSame(range9, range5);
      assertNotSame(range9, range8);
      assertNotSame(range9, range0);
      assertEquals(3701.6549, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1850.82745, range0.getCentralValue(), 0.01);
      assertEquals(3701.6549, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1850.82745, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3701.6549, range1.getUpperBound(), 0.01);
      assertEquals(3701.6549, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1850.82745, range3.getCentralValue(), 0.01);
      assertEquals(3701.6549, range3.getUpperBound(), 0.01);
      assertEquals(3701.6549, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3701.6549, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(3701.6549, range4.getUpperBound(), 0.01);
      assertEquals(1850.82745, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertFalse(range5.isNaNRange());
      assertEquals(1850.82745, range5.getCentralValue(), 0.01);
      assertEquals(3701.6549, range5.getUpperBound(), 0.01);
      assertEquals(3701.6549, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(3701.6549, range9.getLength(), 0.01);
      assertEquals(1850.82745, range9.getCentralValue(), 0.01);
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertEquals(3701.6549, range9.getUpperBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertNotNull(range9);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range7));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range8));
      assertTrue(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range6));
      assertTrue(range9.equals((Object)range1));
      assertTrue(range9.equals((Object)range4));
      assertTrue(range9.equals((Object)range2));
      assertTrue(range9.equals((Object)range8));
      assertTrue(range9.equals((Object)range3));
      assertTrue(range9.equals((Object)range5));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = 459.436843207;
      Range range0 = new Range(459.436843207, 459.436843207);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(459.436843207, range0.getCentralValue(), 0.01);
      assertEquals(459.436843207, range0.getUpperBound(), 0.01);
      assertEquals(459.436843207, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 459.436843207, 1.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(459.436843207, range0.getCentralValue(), 0.01);
      assertEquals(459.436843207, range0.getUpperBound(), 0.01);
      assertEquals(459.436843207, range0.getLowerBound(), 0.01);
      assertEquals(459.436843207, range1.getCentralValue(), 0.01);
      assertEquals(459.436843207, range1.getUpperBound(), 0.01);
      assertEquals(459.436843207, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range1, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(459.436843207, range0.getCentralValue(), 0.01);
      assertEquals(459.436843207, range0.getUpperBound(), 0.01);
      assertEquals(459.436843207, range0.getLowerBound(), 0.01);
      assertEquals(459.436843207, range1.getCentralValue(), 0.01);
      assertEquals(459.436843207, range1.getUpperBound(), 0.01);
      assertEquals(459.436843207, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(459.436843207, range2.getCentralValue(), 0.01);
      assertEquals(459.436843207, range2.getUpperBound(), 0.01);
      assertEquals(459.436843207, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.combineIgnoringNaN(range2, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(459.436843207, range0.getCentralValue(), 0.01);
      assertEquals(459.436843207, range0.getUpperBound(), 0.01);
      assertEquals(459.436843207, range0.getLowerBound(), 0.01);
      assertEquals(459.436843207, range1.getCentralValue(), 0.01);
      assertEquals(459.436843207, range1.getUpperBound(), 0.01);
      assertEquals(459.436843207, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(459.436843207, range2.getCentralValue(), 0.01);
      assertEquals(459.436843207, range2.getUpperBound(), 0.01);
      assertEquals(459.436843207, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(459.436843207, range3.getCentralValue(), 0.01);
      assertEquals(459.436843207, range3.getUpperBound(), 0.01);
      assertEquals(459.436843207, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      
      double double1 = 0.0;
      Range range4 = Range.expandToInclude(range2, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(459.436843207, range0.getCentralValue(), 0.01);
      assertEquals(459.436843207, range0.getUpperBound(), 0.01);
      assertEquals(459.436843207, range0.getLowerBound(), 0.01);
      assertEquals(459.436843207, range1.getCentralValue(), 0.01);
      assertEquals(459.436843207, range1.getUpperBound(), 0.01);
      assertEquals(459.436843207, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(459.436843207, range2.getCentralValue(), 0.01);
      assertEquals(459.436843207, range2.getUpperBound(), 0.01);
      assertEquals(459.436843207, range2.getLowerBound(), 0.01);
      assertEquals(229.7184216035, range4.getCentralValue(), 0.01);
      assertEquals(459.436843207, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(459.436843207, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      
      Range range5 = Range.expandToInclude(range0, 1992.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(459.436843207, range0.getCentralValue(), 0.01);
      assertEquals(459.436843207, range0.getUpperBound(), 0.01);
      assertEquals(459.436843207, range0.getLowerBound(), 0.01);
      assertEquals(1532.563156793, range5.getLength(), 0.01);
      assertEquals(1992.0, range5.getUpperBound(), 0.01);
      assertEquals(1225.7184216035, range5.getCentralValue(), 0.01);
      assertEquals(459.436843207, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      
      Range range6 = Range.expand(range5, 1.0, (-1.0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range6);
      assertNotSame(range5, range3);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(459.436843207, range0.getCentralValue(), 0.01);
      assertEquals(459.436843207, range0.getUpperBound(), 0.01);
      assertEquals(459.436843207, range0.getLowerBound(), 0.01);
      assertEquals(1532.563156793, range5.getLength(), 0.01);
      assertEquals(1992.0, range5.getUpperBound(), 0.01);
      assertEquals(1225.7184216035, range5.getCentralValue(), 0.01);
      assertEquals(459.436843207, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1073.126313586), range6.getLowerBound(), 0.01);
      assertEquals((-306.84473518949994), range6.getCentralValue(), 0.01);
      assertEquals(459.43684320700004, range6.getUpperBound(), 0.01);
      assertEquals(1532.563156793, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range2));
      
      Range range7 = Range.shift(range3, 1.0, false);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range7, range0);
      assertNotSame(range7, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range1);
      assertNotSame(range7, range2);
      assertNotSame(range7, range5);
      assertNotSame(range7, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(459.436843207, range0.getCentralValue(), 0.01);
      assertEquals(459.436843207, range0.getUpperBound(), 0.01);
      assertEquals(459.436843207, range0.getLowerBound(), 0.01);
      assertEquals(459.436843207, range1.getCentralValue(), 0.01);
      assertEquals(459.436843207, range1.getUpperBound(), 0.01);
      assertEquals(459.436843207, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(459.436843207, range2.getCentralValue(), 0.01);
      assertEquals(459.436843207, range2.getUpperBound(), 0.01);
      assertEquals(459.436843207, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(459.436843207, range3.getCentralValue(), 0.01);
      assertEquals(459.436843207, range3.getUpperBound(), 0.01);
      assertEquals(459.436843207, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(460.436843207, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(460.436843207, range7.getCentralValue(), 0.01);
      assertEquals(460.436843207, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range6));
      
      Range range8 = Range.combine(range4, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range6);
      assertNotSame(range4, range1);
      assertNotSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range8);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range8, range6);
      assertNotSame(range8, range5);
      assertNotSame(range8, range0);
      assertNotSame(range8, range4);
      assertNotSame(range8, range1);
      assertNotSame(range8, range2);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(459.436843207, range0.getCentralValue(), 0.01);
      assertEquals(459.436843207, range0.getUpperBound(), 0.01);
      assertEquals(459.436843207, range0.getLowerBound(), 0.01);
      assertEquals(459.436843207, range1.getCentralValue(), 0.01);
      assertEquals(459.436843207, range1.getUpperBound(), 0.01);
      assertEquals(459.436843207, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(459.436843207, range2.getCentralValue(), 0.01);
      assertEquals(459.436843207, range2.getUpperBound(), 0.01);
      assertEquals(459.436843207, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(459.436843207, range3.getCentralValue(), 0.01);
      assertEquals(459.436843207, range3.getUpperBound(), 0.01);
      assertEquals(459.436843207, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(229.7184216035, range4.getCentralValue(), 0.01);
      assertEquals(459.436843207, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(459.436843207, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(229.7184216035, range8.getCentralValue(), 0.01);
      assertEquals(459.436843207, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(459.436843207, range8.getLength(), 0.01);
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range3));
      
      Range range9 = Range.combineIgnoringNaN(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range5);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range3, range9);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range7, range0);
      assertNotSame(range7, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range1);
      assertNotSame(range7, range8);
      assertNotSame(range7, range2);
      assertNotSame(range7, range5);
      assertNotSame(range7, range6);
      assertNotSame(range7, range9);
      assertNotSame(range9, range5);
      assertNotSame(range9, range8);
      assertNotSame(range9, range2);
      assertNotSame(range9, range1);
      assertNotSame(range9, range7);
      assertNotSame(range9, range3);
      assertNotSame(range9, range0);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(459.436843207, range0.getCentralValue(), 0.01);
      assertEquals(459.436843207, range0.getUpperBound(), 0.01);
      assertEquals(459.436843207, range0.getLowerBound(), 0.01);
      assertEquals(459.436843207, range1.getCentralValue(), 0.01);
      assertEquals(459.436843207, range1.getUpperBound(), 0.01);
      assertEquals(459.436843207, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(459.436843207, range2.getCentralValue(), 0.01);
      assertEquals(459.436843207, range2.getUpperBound(), 0.01);
      assertEquals(459.436843207, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(459.436843207, range3.getCentralValue(), 0.01);
      assertEquals(459.436843207, range3.getUpperBound(), 0.01);
      assertEquals(459.436843207, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(460.436843207, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(460.436843207, range7.getCentralValue(), 0.01);
      assertEquals(460.436843207, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(459.436843207, range9.getLowerBound(), 0.01);
      assertEquals(460.436843207, range9.getUpperBound(), 0.01);
      assertEquals(459.936843207, range9.getCentralValue(), 0.01);
      assertEquals(1.0, range9.getLength(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range6));
      
      double double2 = 0.0;
      Range range10 = null;
      try {
        range10 = new Range(0.0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = (-1222.890902138695);
      Range range0 = new Range((-1222.890902138695), (-128.146026722856));
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (-5308.04284228));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertEquals((-6530.933744418695), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-5983.561306710775), range1.getCentralValue(), 0.01);
      assertEquals(1094.7448754158395, range1.getLength(), 0.01);
      assertEquals((-5436.188869002855), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range1, range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertEquals((-6530.933744418695), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-5983.561306710775), range1.getCentralValue(), 0.01);
      assertEquals(1094.7448754158395, range1.getLength(), 0.01);
      assertEquals((-5436.188869002855), range1.getUpperBound(), 0.01);
      assertEquals(1094.7448754158395, range2.getLength(), 0.01);
      assertEquals((-5983.561306710775), range2.getCentralValue(), 0.01);
      assertEquals((-5436.188869002855), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-6530.933744418695), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = Range.expand(range2, (-128.146026722856), (-1222.890902138695));
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertEquals((-6530.933744418695), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-5983.561306710775), range1.getCentralValue(), 0.01);
      assertEquals(1094.7448754158395, range1.getLength(), 0.01);
      assertEquals((-5436.188869002855), range1.getUpperBound(), 0.01);
      assertEquals(1094.7448754158395, range2.getLength(), 0.01);
      assertEquals((-5983.561306710775), range2.getCentralValue(), 0.01);
      assertEquals((-5436.188869002855), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-6530.933744418695), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-605216.7324313314), range3.getUpperBound(), 0.01);
      assertEquals((-605216.7324313314), range3.getLowerBound(), 0.01);
      assertEquals((-605216.7324313314), range3.getCentralValue(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      
      Range range4 = Range.scale(range3, 864.8501674953);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertEquals((-6530.933744418695), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-5983.561306710775), range1.getCentralValue(), 0.01);
      assertEquals(1094.7448754158395, range1.getLength(), 0.01);
      assertEquals((-5436.188869002855), range1.getUpperBound(), 0.01);
      assertEquals(1094.7448754158395, range2.getLength(), 0.01);
      assertEquals((-5983.561306710775), range2.getCentralValue(), 0.01);
      assertEquals((-5436.188869002855), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-6530.933744418695), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-605216.7324313314), range3.getUpperBound(), 0.01);
      assertEquals((-605216.7324313314), range3.getLowerBound(), 0.01);
      assertEquals((-605216.7324313314), range3.getCentralValue(), 0.01);
      assertEquals((-5.234217924141951E8), range4.getCentralValue(), 0.01);
      assertEquals((-5.234217924141951E8), range4.getUpperBound(), 0.01);
      assertEquals((-5.234217924141951E8), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      
      Range range5 = Range.shift(range3, 79.456751);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertEquals((-6530.933744418695), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-5983.561306710775), range1.getCentralValue(), 0.01);
      assertEquals(1094.7448754158395, range1.getLength(), 0.01);
      assertEquals((-5436.188869002855), range1.getUpperBound(), 0.01);
      assertEquals(1094.7448754158395, range2.getLength(), 0.01);
      assertEquals((-5983.561306710775), range2.getCentralValue(), 0.01);
      assertEquals((-5436.188869002855), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-6530.933744418695), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-605216.7324313314), range3.getUpperBound(), 0.01);
      assertEquals((-605216.7324313314), range3.getLowerBound(), 0.01);
      assertEquals((-605216.7324313314), range3.getCentralValue(), 0.01);
      assertEquals((-605137.2756803314), range5.getCentralValue(), 0.01);
      assertEquals((-605137.2756803314), range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals((-605137.2756803314), range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      
      Range range6 = Range.expand(range4, 823.58, (-1196.38));
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range6, range1);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertEquals((-6530.933744418695), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-5983.561306710775), range1.getCentralValue(), 0.01);
      assertEquals(1094.7448754158395, range1.getLength(), 0.01);
      assertEquals((-5436.188869002855), range1.getUpperBound(), 0.01);
      assertEquals(1094.7448754158395, range2.getLength(), 0.01);
      assertEquals((-5983.561306710775), range2.getCentralValue(), 0.01);
      assertEquals((-5436.188869002855), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-6530.933744418695), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-605216.7324313314), range3.getUpperBound(), 0.01);
      assertEquals((-605216.7324313314), range3.getLowerBound(), 0.01);
      assertEquals((-605216.7324313314), range3.getCentralValue(), 0.01);
      assertEquals((-5.234217924141951E8), range4.getCentralValue(), 0.01);
      assertEquals((-5.234217924141951E8), range4.getUpperBound(), 0.01);
      assertEquals((-5.234217924141951E8), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-5.234217924141951E8), range6.getUpperBound(), 0.01);
      assertEquals((-5.234217924141951E8), range6.getCentralValue(), 0.01);
      assertEquals((-5.234217924141951E8), range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range3));
      
      double double1 = (-270.8846630745);
      Range range7 = Range.expand(range2, (-270.8846630745), (-270.8846630745));
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range4);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range5);
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertEquals((-6530.933744418695), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-5983.561306710775), range1.getCentralValue(), 0.01);
      assertEquals(1094.7448754158395, range1.getLength(), 0.01);
      assertEquals((-5436.188869002855), range1.getUpperBound(), 0.01);
      assertEquals(1094.7448754158395, range2.getLength(), 0.01);
      assertEquals((-5983.561306710775), range2.getCentralValue(), 0.01);
      assertEquals((-5436.188869002855), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-6530.933744418695), range2.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals((-5983.561306710762), range7.getCentralValue(), 0.01);
      assertEquals((-5983.561306710762), range7.getUpperBound(), 0.01);
      assertEquals((-5983.561306710762), range7.getLowerBound(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      
      Range range8 = Range.combine(range7, range0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range8);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range4);
      assertNotSame(range7, range1);
      assertNotSame(range7, range8);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range5);
      assertNotSame(range8, range1);
      assertNotSame(range8, range7);
      assertNotSame(range8, range4);
      assertNotSame(range8, range2);
      assertNotSame(range8, range6);
      assertNotSame(range8, range3);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertEquals((-6530.933744418695), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-5983.561306710775), range1.getCentralValue(), 0.01);
      assertEquals(1094.7448754158395, range1.getLength(), 0.01);
      assertEquals((-5436.188869002855), range1.getUpperBound(), 0.01);
      assertEquals(1094.7448754158395, range2.getLength(), 0.01);
      assertEquals((-5983.561306710775), range2.getCentralValue(), 0.01);
      assertEquals((-5436.188869002855), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-6530.933744418695), range2.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals((-5983.561306710762), range7.getCentralValue(), 0.01);
      assertEquals((-5983.561306710762), range7.getUpperBound(), 0.01);
      assertEquals((-5983.561306710762), range7.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range8.getUpperBound(), 0.01);
      assertEquals(5855.415279987907, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals((-3055.853666716809), range8.getCentralValue(), 0.01);
      assertEquals((-5983.561306710762), range8.getLowerBound(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range5));
      
      Range range9 = Range.combineIgnoringNaN(range8, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range8);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range4);
      assertNotSame(range7, range1);
      assertNotSame(range7, range8);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range9);
      assertNotSame(range7, range5);
      assertNotSame(range8, range1);
      assertNotSame(range8, range7);
      assertNotSame(range8, range4);
      assertNotSame(range8, range2);
      assertNotSame(range8, range6);
      assertNotSame(range8, range3);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertNotSame(range8, range9);
      assertNotSame(range9, range6);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range3);
      assertNotSame(range9, range5);
      assertNotSame(range9, range7);
      assertNotSame(range9, range1);
      assertNotSame(range9, range4);
      assertNotSame(range9, range8);
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertEquals((-6530.933744418695), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-5983.561306710775), range1.getCentralValue(), 0.01);
      assertEquals(1094.7448754158395, range1.getLength(), 0.01);
      assertEquals((-5436.188869002855), range1.getUpperBound(), 0.01);
      assertEquals(1094.7448754158395, range2.getLength(), 0.01);
      assertEquals((-5983.561306710775), range2.getCentralValue(), 0.01);
      assertEquals((-5436.188869002855), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-6530.933744418695), range2.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals((-5983.561306710762), range7.getCentralValue(), 0.01);
      assertEquals((-5983.561306710762), range7.getUpperBound(), 0.01);
      assertEquals((-5983.561306710762), range7.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range8.getUpperBound(), 0.01);
      assertEquals(5855.415279987907, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals((-3055.853666716809), range8.getCentralValue(), 0.01);
      assertEquals((-5983.561306710762), range8.getLowerBound(), 0.01);
      assertEquals(5855.415279987907, range9.getLength(), 0.01);
      assertEquals((-5983.561306710762), range9.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range9.getUpperBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals((-3055.853666716809), range9.getCentralValue(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range2));
      assertTrue(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range4));
      
      Range range10 = Range.shift(range6, (-1196.38));
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range10);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range10);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range9);
      assertNotSame(range4, range7);
      assertNotSame(range4, range1);
      assertNotSame(range4, range8);
      assertNotSame(range4, range10);
      assertNotSame(range4, range6);
      assertNotSame(range6, range7);
      assertNotSame(range6, range10);
      assertNotSame(range6, range1);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range9);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range8);
      assertNotSame(range10, range9);
      assertNotSame(range10, range6);
      assertNotSame(range10, range5);
      assertNotSame(range10, range0);
      assertNotSame(range10, range1);
      assertNotSame(range10, range2);
      assertNotSame(range10, range8);
      assertNotSame(range10, range7);
      assertNotSame(range10, range3);
      assertNotSame(range10, range4);
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertEquals((-6530.933744418695), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-5983.561306710775), range1.getCentralValue(), 0.01);
      assertEquals(1094.7448754158395, range1.getLength(), 0.01);
      assertEquals((-5436.188869002855), range1.getUpperBound(), 0.01);
      assertEquals(1094.7448754158395, range2.getLength(), 0.01);
      assertEquals((-5983.561306710775), range2.getCentralValue(), 0.01);
      assertEquals((-5436.188869002855), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-6530.933744418695), range2.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-605216.7324313314), range3.getUpperBound(), 0.01);
      assertEquals((-605216.7324313314), range3.getLowerBound(), 0.01);
      assertEquals((-605216.7324313314), range3.getCentralValue(), 0.01);
      assertEquals((-5.234217924141951E8), range4.getCentralValue(), 0.01);
      assertEquals((-5.234217924141951E8), range4.getUpperBound(), 0.01);
      assertEquals((-5.234217924141951E8), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-5.234217924141951E8), range6.getUpperBound(), 0.01);
      assertEquals((-5.234217924141951E8), range6.getCentralValue(), 0.01);
      assertEquals((-5.234217924141951E8), range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals((-5.234229887941951E8), range10.getCentralValue(), 0.01);
      assertEquals((-5.234229887941951E8), range10.getUpperBound(), 0.01);
      assertEquals((-5.234229887941951E8), range10.getLowerBound(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range4));
      
      double double2 = range0.getLength();
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertEquals(1094.744875415839, double2, 0.01);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = range1.getCentralValue();
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range10);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range5);
      assertEquals(1094.744875415839, range0.getLength(), 0.01);
      assertEquals((-675.5184644307756), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1222.890902138695), range0.getLowerBound(), 0.01);
      assertEquals((-128.146026722856), range0.getUpperBound(), 0.01);
      assertEquals((-6530.933744418695), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-5983.561306710775), range1.getCentralValue(), 0.01);
      assertEquals(1094.7448754158395, range1.getLength(), 0.01);
      assertEquals((-5436.188869002855), range1.getUpperBound(), 0.01);
      assertEquals((-5983.561306710775), double3, 0.01);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Range.scale(range0, (-1222.890902138695));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = new Range((-2547.55294159), 0.0);
      assertEquals(2547.55294159, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1273.776470795), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-628.0));
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(2547.55294159, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1273.776470795), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range0.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range1.getLength(), 0.01);
      assertEquals((-2547.55294159), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1273.776470795), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      Range range2 = Range.expand(range1, 0.0, 0.0);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(2547.55294159, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1273.776470795), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range0.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range1.getLength(), 0.01);
      assertEquals((-2547.55294159), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1273.776470795), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1273.776470795), range2.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range2.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.shift(range2, 0.0);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(2547.55294159, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1273.776470795), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range0.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range1.getLength(), 0.01);
      assertEquals((-2547.55294159), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1273.776470795), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1273.776470795), range2.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range2.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range2.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-1273.776470795), range3.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(2547.55294159, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      
      Range range4 = Range.combine(range3, range2);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertEquals(2547.55294159, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1273.776470795), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range0.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range1.getLength(), 0.01);
      assertEquals((-2547.55294159), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1273.776470795), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1273.776470795), range2.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range2.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range2.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-1273.776470795), range3.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(2547.55294159, range3.getLength(), 0.01);
      assertEquals(2547.55294159, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-1273.776470795), range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
      
      boolean boolean0 = range3.contains(0.0);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertEquals(2547.55294159, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1273.776470795), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range0.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range1.getLength(), 0.01);
      assertEquals((-2547.55294159), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1273.776470795), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1273.776470795), range2.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range2.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range2.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-1273.776470795), range3.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(2547.55294159, range3.getLength(), 0.01);
      assertTrue(boolean0);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      
      Range range5 = Range.combineIgnoringNaN(range4, range4);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertEquals(2547.55294159, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1273.776470795), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range0.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range1.getLength(), 0.01);
      assertEquals((-2547.55294159), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1273.776470795), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1273.776470795), range2.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range2.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range2.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-1273.776470795), range3.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(2547.55294159, range3.getLength(), 0.01);
      assertEquals(2547.55294159, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-1273.776470795), range4.getCentralValue(), 0.01);
      assertEquals(2547.55294159, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1273.776470795), range5.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range1));
      
      boolean boolean1 = range3.intersects((-628.0), (-628.0));
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertEquals(2547.55294159, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1273.776470795), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range0.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range1.getLength(), 0.01);
      assertEquals((-2547.55294159), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1273.776470795), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1273.776470795), range2.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range2.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range2.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-1273.776470795), range3.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(2547.55294159, range3.getLength(), 0.01);
      assertTrue(boolean1);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      
      Range range6 = Range.scale(range3, 0.0);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertEquals(2547.55294159, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1273.776470795), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range0.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range1.getLength(), 0.01);
      assertEquals((-2547.55294159), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1273.776470795), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1273.776470795), range2.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range2.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range2.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-1273.776470795), range3.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(2547.55294159, range3.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(-0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      
      Range range7 = Range.scale(range0, 2.0);
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range7, range1);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range6);
      assertNotSame(range7, range5);
      assertEquals(2547.55294159, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1273.776470795), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range0.getLowerBound(), 0.01);
      assertEquals((-2547.55294159), range7.getCentralValue(), 0.01);
      assertEquals((-5095.10588318), range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertEquals(5095.10588318, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range5));
      
      double double0 = range3.constrain((-2547.55294159));
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range7);
      assertNotSame(range3, range6);
      assertEquals(2547.55294159, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1273.776470795), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range0.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range1.getLength(), 0.01);
      assertEquals((-2547.55294159), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1273.776470795), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1273.776470795), range2.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range2.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range2.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-1273.776470795), range3.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(2547.55294159, range3.getLength(), 0.01);
      assertEquals((-2547.55294159), double0, 0.01);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      
      range2.hashCode();
      assertNotSame(range0, range4);
      assertSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertEquals(2547.55294159, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1273.776470795), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2547.55294159), range0.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range1.getLength(), 0.01);
      assertEquals((-2547.55294159), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1273.776470795), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1273.776470795), range2.getCentralValue(), 0.01);
      assertEquals((-2547.55294159), range2.getLowerBound(), 0.01);
      assertEquals(2547.55294159, range2.getLength(), 0.01);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range4));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.combineIgnoringNaN(range0, (Range) null);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = Range.expand(range1, 0.0, 0.0);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.expandToInclude(range1, (-704.1044637954163));
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-352.05223189770817), range3.getCentralValue(), 0.01);
      assertEquals((-704.1044637954163), range3.getLowerBound(), 0.01);
      assertEquals(704.1044637954163, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      
      Range range4 = Range.combine(range1, range0);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range1));
      
      double double0 = (-684.263);
      Range range5 = Range.shift(range0, (-684.263));
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-684.263), range5.getCentralValue(), 0.01);
      assertEquals((-684.263), range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-684.263), range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      
      Range range6 = Range.scale(range3, 1796.69942973);
      assertNotSame(range0, range3);
      assertNotSame(range0, range6);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range3, range5);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-352.05223189770817), range3.getCentralValue(), 0.01);
      assertEquals((-704.1044637954163), range3.getLowerBound(), 0.01);
      assertEquals(704.1044637954163, range3.getLength(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals((-632532.044285786), range6.getCentralValue(), 0.01);
      assertEquals((-1265064.088571572), range6.getLowerBound(), 0.01);
      assertEquals(1265064.088571572, range6.getLength(), 0.01);
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range1));
      
      Range range7 = Range.shift(range2, (-3762.8986716444));
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range5);
      assertNotSame(range7, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range2);
      assertNotSame(range7, range6);
      assertNotSame(range7, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-3762.8986716444), range7.getUpperBound(), 0.01);
      assertEquals((-3762.8986716444), range7.getCentralValue(), 0.01);
      assertEquals((-3762.8986716444), range7.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range0));
      
      double double1 = range0.getUpperBound();
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = range2.intersects(range0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range5));
      
      // Undeclared exception!
      try { 
        range1.intersects((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, 1645.6493906771818);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1645.6493906771818, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(822.8246953385909, range1.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range1, range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1645.6493906771818, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(822.8246953385909, range1.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range1.getUpperBound(), 0.01);
      assertEquals(1645.6493906771818, range2.getLength(), 0.01);
      assertEquals(822.8246953385909, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1645.6493906771818, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = Range.combineIgnoringNaN(range1, range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1645.6493906771818, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(822.8246953385909, range1.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(822.8246953385909, range3.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range3.getUpperBound(), 0.01);
      assertEquals(1645.6493906771818, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      
      String string0 = range0.toString();
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Range[0.0,0.0]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      
      Range range4 = Range.expandToInclude(range1, 2.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range4, range0);
      assertSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1645.6493906771818, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(822.8246953385909, range1.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(1645.6493906771818, range4.getLength(), 0.01);
      assertEquals(822.8246953385909, range4.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range4.getUpperBound(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
      
      Range range5 = Range.shift(range0, 1.0, true);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      
      Range range6 = Range.scale(range5, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      
      Range range7 = Range.expandToInclude(range6, 1645.6493906771818);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range5);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertFalse(range7.isNaNRange());
      assertEquals(1645.6493906771818, range7.getUpperBound(), 0.01);
      assertEquals(822.8246953385909, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(1645.6493906771818, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range4));
      
      Range range8 = Range.combineIgnoringNaN(range2, range0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range8);
      assertNotSame(range2, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range5);
      assertNotSame(range8, range6);
      assertNotSame(range8, range2);
      assertNotSame(range8, range0);
      assertNotSame(range8, range1);
      assertNotSame(range8, range4);
      assertNotSame(range8, range7);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1645.6493906771818, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(822.8246953385909, range1.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range1.getUpperBound(), 0.01);
      assertEquals(1645.6493906771818, range2.getLength(), 0.01);
      assertEquals(822.8246953385909, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1645.6493906771818, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1645.6493906771818, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(822.8246953385909, range8.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range3));
      
      Range range9 = Range.combineIgnoringNaN(range6, range4);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range4, range8);
      assertNotSame(range4, range0);
      assertNotSame(range4, range6);
      assertSame(range4, range1);
      assertNotSame(range4, range7);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range9);
      assertNotSame(range4, range3);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range5, range0);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range8);
      assertNotSame(range6, range1);
      assertNotSame(range6, range0);
      assertNotSame(range6, range9);
      assertNotSame(range6, range2);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range9, range4);
      assertNotSame(range9, range8);
      assertNotSame(range9, range0);
      assertNotSame(range9, range6);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range2);
      assertNotSame(range9, range1);
      assertNotSame(range9, range3);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1645.6493906771818, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(822.8246953385909, range1.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(1645.6493906771818, range4.getLength(), 0.01);
      assertEquals(822.8246953385909, range4.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range4.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(1645.6493906771818, range9.getLength(), 0.01);
      assertEquals(822.8246953385909, range9.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range9.getUpperBound(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range7));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range6));
      assertTrue(range9.equals((Object)range8));
      assertTrue(range9.equals((Object)range1));
      assertTrue(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range5));
      assertTrue(range9.equals((Object)range2));
      assertTrue(range9.equals((Object)range7));
      
      Range range10 = Range.expand(range3, 0.0, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range10, range7);
      assertNotSame(range10, range5);
      assertNotSame(range10, range0);
      assertNotSame(range10, range6);
      assertNotSame(range10, range9);
      assertNotSame(range10, range2);
      assertNotSame(range10, range8);
      assertNotSame(range10, range1);
      assertNotSame(range10, range4);
      assertNotSame(range10, range3);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1645.6493906771818, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(822.8246953385909, range1.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(822.8246953385909, range3.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range3.getUpperBound(), 0.01);
      assertEquals(1645.6493906771818, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(1645.6493906771818, range10.getUpperBound(), 0.01);
      assertEquals(822.8246953385909, range10.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range10.getLength(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range10.equals((Object)range9));
      assertTrue(range10.equals((Object)range2));
      assertTrue(range10.equals((Object)range4));
      assertTrue(range10.equals((Object)range8));
      assertTrue(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range5));
      assertTrue(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range6));
      assertTrue(range10.equals((Object)range7));
      
      Range range11 = Range.combine(range6, range0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range5, range0);
      assertNotSame(range5, range11);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertNotSame(range5, range10);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range6, range3);
      assertNotSame(range6, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range11);
      assertNotSame(range6, range8);
      assertNotSame(range6, range1);
      assertNotSame(range6, range0);
      assertNotSame(range6, range9);
      assertNotSame(range6, range2);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range11, range10);
      assertNotSame(range11, range5);
      assertNotSame(range11, range3);
      assertNotSame(range11, range2);
      assertNotSame(range11, range9);
      assertNotSame(range11, range6);
      assertNotSame(range11, range0);
      assertNotSame(range11, range7);
      assertNotSame(range11, range4);
      assertNotSame(range11, range1);
      assertNotSame(range11, range8);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range11.getLength(), 0.01);
      assertEquals(0.0, range11.getUpperBound(), 0.01);
      assertEquals(0.0, range11.getLowerBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(0.0, range11.getCentralValue(), 0.01);
      assertNotNull(range11);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range11.equals((Object)range10));
      assertTrue(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range3));
      assertTrue(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range8));
      
      Range range12 = Range.scale(range7, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range5, range0);
      assertNotSame(range5, range11);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertNotSame(range5, range12);
      assertNotSame(range5, range10);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range6, range3);
      assertNotSame(range6, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range11);
      assertNotSame(range6, range8);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range9);
      assertNotSame(range6, range2);
      assertNotSame(range6, range12);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range7, range0);
      assertNotSame(range7, range9);
      assertNotSame(range7, range2);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range11);
      assertNotSame(range7, range8);
      assertNotSame(range7, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range10);
      assertNotSame(range7, range5);
      assertNotSame(range7, range12);
      assertNotSame(range12, range3);
      assertNotSame(range12, range10);
      assertNotSame(range12, range8);
      assertNotSame(range12, range11);
      assertNotSame(range12, range4);
      assertNotSame(range12, range1);
      assertNotSame(range12, range0);
      assertNotSame(range12, range9);
      assertNotSame(range12, range6);
      assertNotSame(range12, range2);
      assertNotSame(range12, range7);
      assertNotSame(range12, range5);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertFalse(range7.isNaNRange());
      assertEquals(1645.6493906771818, range7.getUpperBound(), 0.01);
      assertEquals(822.8246953385909, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(1645.6493906771818, range7.getLength(), 0.01);
      assertEquals(0.0, range12.getLength(), 0.01);
      assertEquals(0.0, range12.getCentralValue(), 0.01);
      assertEquals(0.0, range12.getLowerBound(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(0.0, range12.getUpperBound(), 0.01);
      assertNotNull(range12);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range11));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range11));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      assertTrue(range7.equals((Object)range9));
      assertTrue(range7.equals((Object)range3));
      assertTrue(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range4));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range4));
      assertTrue(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range7));
      assertTrue(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range5));
      assertTrue(range12.equals((Object)range11));
      
      double double0 = range6.getLength();
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range5, range0);
      assertNotSame(range5, range11);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertNotSame(range5, range12);
      assertNotSame(range5, range10);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range6, range3);
      assertNotSame(range6, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range11);
      assertNotSame(range6, range8);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range9);
      assertNotSame(range6, range2);
      assertNotSame(range6, range12);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, double0, 0.01);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range11));
      
      boolean boolean0 = range0.equals(range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range5, range0);
      assertNotSame(range5, range11);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertNotSame(range5, range12);
      assertNotSame(range5, range10);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range6, range3);
      assertNotSame(range6, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range11);
      assertNotSame(range6, range8);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range9);
      assertNotSame(range6, range2);
      assertNotSame(range6, range12);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range7, range0);
      assertNotSame(range7, range9);
      assertNotSame(range7, range2);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range11);
      assertNotSame(range7, range8);
      assertNotSame(range7, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range10);
      assertNotSame(range7, range5);
      assertNotSame(range7, range12);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertFalse(range7.isNaNRange());
      assertEquals(1645.6493906771818, range7.getUpperBound(), 0.01);
      assertEquals(822.8246953385909, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(1645.6493906771818, range7.getLength(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range11));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range11));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      assertTrue(range7.equals((Object)range9));
      assertTrue(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range3));
      assertTrue(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range12));
      
      boolean boolean1 = range6.contains(2.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range5, range0);
      assertNotSame(range5, range11);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertNotSame(range5, range12);
      assertNotSame(range5, range10);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range6, range3);
      assertNotSame(range6, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range11);
      assertNotSame(range6, range8);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range9);
      assertNotSame(range6, range2);
      assertNotSame(range6, range12);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range11));
      
      Range range13 = Range.scale(range12, 2.0);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range13, range0);
      assertNotSame(range13, range1);
      assertNotSame(range13, range6);
      assertNotSame(range13, range5);
      assertNotSame(range13, range3);
      assertNotSame(range13, range10);
      assertNotSame(range13, range8);
      assertNotSame(range13, range4);
      assertNotSame(range13, range9);
      assertNotSame(range13, range2);
      assertNotSame(range13, range11);
      assertNotSame(range13, range12);
      assertNotSame(range13, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range5, range0);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range11);
      assertNotSame(range5, range13);
      assertNotSame(range5, range7);
      assertNotSame(range5, range12);
      assertNotSame(range5, range10);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range6, range3);
      assertNotSame(range6, range11);
      assertNotSame(range6, range1);
      assertNotSame(range6, range9);
      assertNotSame(range6, range7);
      assertNotSame(range6, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range8);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range12);
      assertNotSame(range6, range5);
      assertNotSame(range6, range13);
      assertNotSame(range7, range9);
      assertNotSame(range7, range2);
      assertNotSame(range7, range11);
      assertNotSame(range7, range3);
      assertNotSame(range7, range13);
      assertNotSame(range7, range5);
      assertNotSame(range7, range12);
      assertNotSame(range7, range0);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range8);
      assertNotSame(range7, range4);
      assertNotSame(range7, range10);
      assertNotSame(range12, range3);
      assertNotSame(range12, range11);
      assertNotSame(range12, range1);
      assertNotSame(range12, range9);
      assertNotSame(range12, range6);
      assertNotSame(range12, range7);
      assertNotSame(range12, range10);
      assertNotSame(range12, range8);
      assertNotSame(range12, range4);
      assertNotSame(range12, range0);
      assertNotSame(range12, range2);
      assertNotSame(range12, range5);
      assertNotSame(range12, range13);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getCentralValue(), 0.01);
      assertEquals(0.0, range13.getUpperBound(), 0.01);
      assertEquals(0.0, range13.getLowerBound(), 0.01);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertFalse(range7.isNaNRange());
      assertEquals(1645.6493906771818, range7.getUpperBound(), 0.01);
      assertEquals(822.8246953385909, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(1645.6493906771818, range7.getLength(), 0.01);
      assertEquals(0.0, range12.getLength(), 0.01);
      assertEquals(0.0, range12.getCentralValue(), 0.01);
      assertEquals(0.0, range12.getLowerBound(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(0.0, range12.getUpperBound(), 0.01);
      assertNotNull(range13);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range13.equals((Object)range1));
      assertTrue(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range4));
      assertTrue(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range2));
      assertTrue(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range7));
      assertTrue(range13.equals((Object)range12));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range11));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range11));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      assertTrue(range7.equals((Object)range9));
      assertTrue(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range3));
      assertTrue(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range12));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range4));
      assertTrue(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range7));
      assertTrue(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range5));
      assertTrue(range12.equals((Object)range11));
      
      Range range14 = Range.combineIgnoringNaN(range13, range0);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range14);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range13, range0);
      assertNotSame(range13, range1);
      assertNotSame(range13, range6);
      assertNotSame(range13, range5);
      assertNotSame(range13, range14);
      assertNotSame(range13, range3);
      assertNotSame(range13, range10);
      assertNotSame(range13, range8);
      assertNotSame(range13, range4);
      assertNotSame(range13, range9);
      assertNotSame(range13, range2);
      assertNotSame(range13, range11);
      assertNotSame(range13, range12);
      assertNotSame(range13, range7);
      assertNotSame(range14, range10);
      assertNotSame(range14, range4);
      assertNotSame(range14, range8);
      assertNotSame(range14, range0);
      assertNotSame(range14, range12);
      assertNotSame(range14, range2);
      assertNotSame(range14, range13);
      assertNotSame(range14, range3);
      assertNotSame(range14, range5);
      assertNotSame(range14, range11);
      assertNotSame(range14, range1);
      assertNotSame(range14, range9);
      assertNotSame(range14, range6);
      assertNotSame(range14, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range5, range0);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range11);
      assertNotSame(range5, range13);
      assertNotSame(range5, range7);
      assertNotSame(range5, range12);
      assertNotSame(range5, range10);
      assertNotSame(range5, range14);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range6, range3);
      assertNotSame(range6, range11);
      assertNotSame(range6, range1);
      assertNotSame(range6, range9);
      assertNotSame(range6, range7);
      assertNotSame(range6, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range14);
      assertNotSame(range6, range8);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range12);
      assertNotSame(range6, range5);
      assertNotSame(range6, range13);
      assertNotSame(range7, range9);
      assertNotSame(range7, range2);
      assertNotSame(range7, range11);
      assertNotSame(range7, range3);
      assertNotSame(range7, range14);
      assertNotSame(range7, range13);
      assertNotSame(range7, range5);
      assertNotSame(range7, range12);
      assertNotSame(range7, range0);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range8);
      assertNotSame(range7, range4);
      assertNotSame(range7, range10);
      assertNotSame(range12, range3);
      assertNotSame(range12, range11);
      assertNotSame(range12, range1);
      assertNotSame(range12, range9);
      assertNotSame(range12, range6);
      assertNotSame(range12, range7);
      assertNotSame(range12, range14);
      assertNotSame(range12, range10);
      assertNotSame(range12, range8);
      assertNotSame(range12, range4);
      assertNotSame(range12, range0);
      assertNotSame(range12, range2);
      assertNotSame(range12, range5);
      assertNotSame(range12, range13);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getCentralValue(), 0.01);
      assertEquals(0.0, range13.getUpperBound(), 0.01);
      assertEquals(0.0, range13.getLowerBound(), 0.01);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(0.0, range14.getCentralValue(), 0.01);
      assertEquals(0.0, range14.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertFalse(range7.isNaNRange());
      assertEquals(1645.6493906771818, range7.getUpperBound(), 0.01);
      assertEquals(822.8246953385909, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(1645.6493906771818, range7.getLength(), 0.01);
      assertEquals(0.0, range12.getLength(), 0.01);
      assertEquals(0.0, range12.getCentralValue(), 0.01);
      assertEquals(0.0, range12.getLowerBound(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(0.0, range12.getUpperBound(), 0.01);
      assertNotNull(range14);
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range13.equals((Object)range1));
      assertTrue(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range4));
      assertTrue(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range2));
      assertTrue(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range7));
      assertTrue(range13.equals((Object)range12));
      assertTrue(range14.equals((Object)range13));
      assertTrue(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range8));
      assertTrue(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range14.equals((Object)range5));
      assertTrue(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range7));
      assertTrue(range14.equals((Object)range11));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range13));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range11));
      assertTrue(range6.equals((Object)range13));
      assertTrue(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range7.equals((Object)range11));
      assertTrue(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range13));
      assertTrue(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range3));
      assertTrue(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range12));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range10));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      assertFalse(range12.equals((Object)range3));
      assertTrue(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range7));
      assertTrue(range12.equals((Object)range11));
      assertTrue(range12.equals((Object)range13));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range2));
      assertTrue(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range5));
      
      Range range15 = Range.shift(range8, 0.0);
      assertNotSame(range0, range7);
      assertNotSame(range0, range15);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range14);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range1, range14);
      assertNotSame(range1, range8);
      assertSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range12);
      assertNotSame(range1, range13);
      assertNotSame(range1, range3);
      assertNotSame(range1, range15);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range11);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range2, range14);
      assertNotSame(range2, range6);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range13);
      assertNotSame(range2, range8);
      assertNotSame(range2, range12);
      assertNotSame(range2, range3);
      assertNotSame(range2, range15);
      assertNotSame(range2, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range2, range11);
      assertNotSame(range15, range5);
      assertNotSame(range15, range1);
      assertNotSame(range15, range0);
      assertNotSame(range15, range11);
      assertNotSame(range15, range2);
      assertNotSame(range15, range12);
      assertNotSame(range15, range13);
      assertNotSame(range15, range8);
      assertNotSame(range15, range6);
      assertNotSame(range15, range7);
      assertNotSame(range15, range4);
      assertNotSame(range15, range14);
      assertNotSame(range15, range3);
      assertNotSame(range15, range10);
      assertNotSame(range15, range9);
      assertNotSame(range8, range3);
      assertNotSame(range8, range15);
      assertNotSame(range8, range5);
      assertNotSame(range8, range1);
      assertNotSame(range8, range7);
      assertNotSame(range8, range11);
      assertNotSame(range8, range14);
      assertNotSame(range8, range6);
      assertNotSame(range8, range10);
      assertNotSame(range8, range2);
      assertNotSame(range8, range9);
      assertNotSame(range8, range0);
      assertNotSame(range8, range4);
      assertNotSame(range8, range13);
      assertNotSame(range8, range12);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1645.6493906771818, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(822.8246953385909, range1.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range1.getUpperBound(), 0.01);
      assertEquals(1645.6493906771818, range2.getLength(), 0.01);
      assertEquals(822.8246953385909, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1645.6493906771818, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range15.getLowerBound(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(1645.6493906771818, range15.getLength(), 0.01);
      assertEquals(1645.6493906771818, range15.getUpperBound(), 0.01);
      assertEquals(822.8246953385909, range15.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(822.8246953385909, range8.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertNotNull(range15);
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range1.equals((Object)range14));
      assertTrue(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range2.equals((Object)range14));
      assertTrue(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range13));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range11));
      assertTrue(range15.equals((Object)range4));
      assertTrue(range15.equals((Object)range8));
      assertFalse(range15.equals((Object)range5));
      assertFalse(range15.equals((Object)range0));
      assertTrue(range15.equals((Object)range1));
      assertFalse(range15.equals((Object)range11));
      assertFalse(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range13));
      assertTrue(range15.equals((Object)range2));
      assertTrue(range15.equals((Object)range9));
      assertTrue(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range6));
      assertTrue(range15.equals((Object)range10));
      assertFalse(range15.equals((Object)range14));
      assertTrue(range15.equals((Object)range7));
      assertTrue(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range11));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range14));
      assertFalse(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range13));
      assertTrue(range8.equals((Object)range10));
      assertTrue(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range12));
      assertTrue(range8.equals((Object)range3));
      
      Range range16 = Range.combine(range1, range0);
      assertNotSame(range0, range7);
      assertNotSame(range0, range15);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range16);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range14);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range1, range14);
      assertNotSame(range1, range8);
      assertSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range12);
      assertNotSame(range1, range13);
      assertNotSame(range1, range3);
      assertNotSame(range1, range15);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range11);
      assertNotSame(range1, range16);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range16, range0);
      assertNotSame(range16, range6);
      assertNotSame(range16, range1);
      assertNotSame(range16, range11);
      assertNotSame(range16, range9);
      assertNotSame(range16, range12);
      assertNotSame(range16, range7);
      assertNotSame(range16, range13);
      assertNotSame(range16, range2);
      assertNotSame(range16, range3);
      assertNotSame(range16, range15);
      assertNotSame(range16, range14);
      assertNotSame(range16, range10);
      assertNotSame(range16, range5);
      assertNotSame(range16, range8);
      assertNotSame(range16, range4);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1645.6493906771818, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(822.8246953385909, range1.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range1.getUpperBound(), 0.01);
      assertFalse(range16.isNaNRange());
      assertEquals(822.8246953385909, range16.getCentralValue(), 0.01);
      assertEquals(1645.6493906771818, range16.getUpperBound(), 0.01);
      assertEquals(1645.6493906771818, range16.getLength(), 0.01);
      assertEquals(0.0, range16.getLowerBound(), 0.01);
      assertNotNull(range16);
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range1.equals((Object)range14));
      assertTrue(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range15));
      assertFalse(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range16.equals((Object)range0));
      assertTrue(range16.equals((Object)range8));
      assertTrue(range16.equals((Object)range4));
      assertFalse(range16.equals((Object)range6));
      assertTrue(range16.equals((Object)range2));
      assertTrue(range16.equals((Object)range1));
      assertFalse(range16.equals((Object)range11));
      assertTrue(range16.equals((Object)range3));
      assertTrue(range16.equals((Object)range15));
      assertTrue(range16.equals((Object)range7));
      assertFalse(range16.equals((Object)range12));
      assertFalse(range16.equals((Object)range13));
      assertFalse(range16.equals((Object)range14));
      assertFalse(range16.equals((Object)range5));
      assertTrue(range16.equals((Object)range10));
      assertTrue(range16.equals((Object)range9));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = new Range(1398.79, 1398.79);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      double double0 = range0.getLowerBound();
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1398.79, double0, 0.01);
      
      Range range1 = Range.scale(range0, 1398.79);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1956613.4641, range1.getCentralValue(), 0.01);
      assertEquals(1956613.4641, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1956613.4641, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range1, 1398.79);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1956613.4641, range1.getCentralValue(), 0.01);
      assertEquals(1956613.4641, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1956613.4641, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1398.79, range2.getLowerBound(), 0.01);
      assertEquals(1956613.4641, range2.getUpperBound(), 0.01);
      assertEquals(979006.12705, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1955214.6741, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = Range.shift(range0, (-323.34322890141), true);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1075.44677109859, range3.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range3.getUpperBound(), 0.01);
      assertEquals(1075.44677109859, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      
      Range range4 = Range.scale(range3, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1075.44677109859, range3.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range3.getUpperBound(), 0.01);
      assertEquals(1075.44677109859, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      
      Range range5 = Range.combine(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range5);
      assertNotSame(range3, range4);
      assertNotSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1075.44677109859, range3.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range3.getUpperBound(), 0.01);
      assertEquals(1075.44677109859, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(1398.79, range5.getUpperBound(), 0.01);
      assertEquals(699.395, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1398.79, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      
      Range range6 = Range.expandToInclude(range5, (-323.34322890141));
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range5);
      assertNotSame(range3, range4);
      assertNotSame(range4, range5);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range5, range1);
      assertNotSame(range5, range6);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1075.44677109859, range3.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range3.getUpperBound(), 0.01);
      assertEquals(1075.44677109859, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(1398.79, range5.getUpperBound(), 0.01);
      assertEquals(699.395, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1398.79, range5.getLength(), 0.01);
      assertEquals(1722.13322890141, range6.getLength(), 0.01);
      assertEquals(1398.79, range6.getUpperBound(), 0.01);
      assertEquals((-323.34322890141), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(537.723385549295, range6.getCentralValue(), 0.01);
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      
      Range range7 = Range.expand(range3, 0.0, (-323.34322890141));
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range5);
      assertNotSame(range7, range4);
      assertNotSame(range7, range1);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1075.44677109859, range3.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range3.getUpperBound(), 0.01);
      assertEquals(1075.44677109859, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(1075.44677109859, range7.getLowerBound(), 0.01);
      assertEquals(1075.44677109859, range7.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range7.getUpperBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range6));
      
      Range range8 = Range.expandToInclude(range0, 2.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range8, range2);
      assertNotSame(range8, range1);
      assertNotSame(range8, range3);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range4);
      assertNotSame(range8, range6);
      assertNotSame(range8, range5);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(700.395, range8.getCentralValue(), 0.01);
      assertEquals(1396.79, range8.getLength(), 0.01);
      assertEquals(2.0, range8.getLowerBound(), 0.01);
      assertEquals(1398.79, range8.getUpperBound(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range5));
      
      double double1 = range1.getLowerBound();
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1956613.4641, range1.getCentralValue(), 0.01);
      assertEquals(1956613.4641, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1956613.4641, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1956613.4641, double1, 0.01);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertNotEquals(double1, double0, 0.01);
      
      Range range9 = Range.scale(range0, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range9, range7);
      assertNotSame(range9, range2);
      assertNotSame(range9, range5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range6);
      assertNotSame(range9, range3);
      assertNotSame(range9, range8);
      assertNotSame(range9, range4);
      assertNotSame(range9, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getCentralValue(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range5));
      assertTrue(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range0));
      
      String string0 = range7.toString();
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range5);
      assertNotSame(range7, range4);
      assertNotSame(range7, range9);
      assertNotSame(range7, range1);
      assertNotSame(range7, range0);
      assertNotSame(range7, range8);
      assertNotSame(range7, range2);
      assertNotSame(range7, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1075.44677109859, range3.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range3.getUpperBound(), 0.01);
      assertEquals(1075.44677109859, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(1075.44677109859, range7.getLowerBound(), 0.01);
      assertEquals(1075.44677109859, range7.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range7.getUpperBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals("Range[1075.44677109859,1075.44677109859]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range6));
      
      double double2 = range0.getUpperBound();
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1398.79, double2, 0.01);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      boolean boolean0 = range2.intersects(range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range9);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range4, range7);
      assertNotSame(range4, range9);
      assertNotSame(range4, range5);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range8);
      assertNotSame(range4, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1956613.4641, range1.getCentralValue(), 0.01);
      assertEquals(1956613.4641, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1956613.4641, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1398.79, range2.getLowerBound(), 0.01);
      assertEquals(1956613.4641, range2.getUpperBound(), 0.01);
      assertEquals(979006.12705, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1955214.6741, range2.getLength(), 0.01);
      assertEquals(1075.44677109859, range3.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range3.getUpperBound(), 0.01);
      assertEquals(1075.44677109859, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range1));
      
      double double3 = range2.constrain((-1130.678552108));
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range9);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1956613.4641, range1.getCentralValue(), 0.01);
      assertEquals(1956613.4641, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1956613.4641, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1398.79, range2.getLowerBound(), 0.01);
      assertEquals(1956613.4641, range2.getUpperBound(), 0.01);
      assertEquals(979006.12705, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1955214.6741, range2.getLength(), 0.01);
      assertEquals(1398.79, double3, 0.01);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      boolean boolean1 = range8.intersects(range7);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range5);
      assertNotSame(range7, range4);
      assertNotSame(range7, range9);
      assertNotSame(range7, range1);
      assertNotSame(range7, range0);
      assertNotSame(range7, range8);
      assertNotSame(range7, range2);
      assertNotSame(range7, range6);
      assertNotSame(range8, range2);
      assertNotSame(range8, range1);
      assertNotSame(range8, range3);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range9);
      assertNotSame(range8, range4);
      assertNotSame(range8, range6);
      assertNotSame(range8, range5);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1075.44677109859, range3.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range3.getUpperBound(), 0.01);
      assertEquals(1075.44677109859, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(1075.44677109859, range7.getLowerBound(), 0.01);
      assertEquals(1075.44677109859, range7.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range7.getUpperBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertFalse(range8.isNaNRange());
      assertEquals(700.395, range8.getCentralValue(), 0.01);
      assertEquals(1396.79, range8.getLength(), 0.01);
      assertEquals(2.0, range8.getLowerBound(), 0.01);
      assertEquals(1398.79, range8.getUpperBound(), 0.01);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range5));
      
      double double4 = range3.getUpperBound();
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1075.44677109859, range3.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range3.getUpperBound(), 0.01);
      assertEquals(1075.44677109859, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1075.44677109859, double4, 0.01);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      
      boolean boolean2 = range1.isNaNRange();
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range9);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1956613.4641, range1.getCentralValue(), 0.01);
      assertEquals(1956613.4641, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1956613.4641, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertFalse(boolean2);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range9));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean3 = range5.equals(object0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range4, range7);
      assertNotSame(range4, range9);
      assertNotSame(range4, range5);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range8);
      assertNotSame(range4, range1);
      assertNotSame(range5, range1);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range8);
      assertNotSame(range5, range0);
      assertNotSame(range5, range9);
      assertNotSame(range5, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1075.44677109859, range3.getCentralValue(), 0.01);
      assertEquals(1075.44677109859, range3.getUpperBound(), 0.01);
      assertEquals(1075.44677109859, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(1398.79, range5.getUpperBound(), 0.01);
      assertEquals(699.395, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1398.79, range5.getLength(), 0.01);
      assertFalse(boolean3);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range2));
      
      double double5 = range0.constrain(0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(1398.79, range0.getCentralValue(), 0.01);
      assertEquals(1398.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1398.79, range0.getLowerBound(), 0.01);
      assertEquals(1398.79, double5, 0.01);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = null;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-1.0));
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertNotNull(range1);
      
      Range range2 = Range.shift(range0, (-1.0));
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-2.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2.0), range2.getCentralValue(), 0.01);
      assertEquals((-2.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      double double0 = 0.0;
      Range range3 = Range.expand(range1, 0.0, 0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      
      Range range4 = Range.scale(range3, 0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(range0, range4);
      assertSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(-0.0, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(-0.0, range4.getUpperBound(), 0.01);
      assertEquals(-0.0, range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      
      Range range5 = Range.shift(range0, (-1.0), false);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-2.0), range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals((-2.0), range5.getCentralValue(), 0.01);
      assertEquals((-2.0), range5.getUpperBound(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 0.0, (-2119.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = null;
      double double0 = 3020.2173;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 3020.2173, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = 5715.605798667351;
      double double1 = 1870.414863777;
      Range range0 = null;
      try {
        range0 = new Range(5715.605798667351, 1870.414863777);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (5715.605798667351) <= upper (1870.414863777).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = (-1276.0747991299427);
      Range range0 = new Range((-1276.0747991299427), (-1276.0747991299427));
      assertEquals((-1276.0747991299427), range0.getUpperBound(), 0.01);
      assertEquals((-1276.0747991299427), range0.getLowerBound(), 0.01);
      assertEquals((-1276.0747991299427), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        Range.scale(range0, (-1276.0747991299427));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = new Range(630.0, 630.0);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range1, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.combineIgnoringNaN(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(630.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(630.0, range3.getCentralValue(), 0.01);
      assertEquals(630.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      
      boolean boolean0 = range2.contains(852.4181836);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(boolean0);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      
      String string0 = range3.toString();
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(630.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(630.0, range3.getCentralValue(), 0.01);
      assertEquals(630.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals("Range[630.0,630.0]", string0);
      assertNotNull(string0);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = Range.combineIgnoringNaN(range3, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(630.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(630.0, range3.getCentralValue(), 0.01);
      assertEquals(630.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(630.0, range4.getCentralValue(), 0.01);
      assertEquals(630.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(630.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      
      Range range5 = Range.combineIgnoringNaN(range4, range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range2);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(630.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(630.0, range3.getCentralValue(), 0.01);
      assertEquals(630.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(630.0, range4.getCentralValue(), 0.01);
      assertEquals(630.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(630.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(630.0, range5.getCentralValue(), 0.01);
      assertEquals(630.0, range5.getUpperBound(), 0.01);
      assertEquals(630.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range0));
      
      boolean boolean1 = range1.equals(range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(boolean1);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertFalse(boolean1 == boolean0);
      
      Range range6 = Range.expand(range4, 630.0, 630.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range6);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(630.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(630.0, range3.getCentralValue(), 0.01);
      assertEquals(630.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(630.0, range4.getCentralValue(), 0.01);
      assertEquals(630.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(630.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(630.0, range6.getCentralValue(), 0.01);
      assertEquals(630.0, range6.getUpperBound(), 0.01);
      assertEquals(630.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range2));
      
      double double0 = range2.getCentralValue();
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(630.0, double0, 0.01);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      
      Range range7 = Range.expandToInclude(range3, (-1.0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range7, range5);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range1);
      assertNotSame(range7, range4);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(630.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(630.0, range3.getCentralValue(), 0.01);
      assertEquals(630.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-1.0), range7.getLowerBound(), 0.01);
      assertEquals(314.5, range7.getCentralValue(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(630.0, range7.getUpperBound(), 0.01);
      assertEquals(631.0, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range4));
      
      Range range8 = Range.expand(range1, (-108.0364537), (-1.0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range8, range2);
      assertNotSame(range8, range6);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertNotSame(range8, range1);
      assertNotSame(range8, range4);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(630.0, range8.getLowerBound(), 0.01);
      assertEquals(630.0, range8.getCentralValue(), 0.01);
      assertEquals(630.0, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range4));
      
      Range range9 = Range.combine(range1, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range2);
      assertNotSame(range9, range0);
      assertNotSame(range9, range6);
      assertNotSame(range9, range3);
      assertNotSame(range9, range1);
      assertNotSame(range9, range8);
      assertNotSame(range9, range4);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(630.0, range9.getLowerBound(), 0.01);
      assertEquals(630.0, range9.getCentralValue(), 0.01);
      assertEquals(630.0, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertNotNull(range9);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range9.equals((Object)range7));
      assertTrue(range9.equals((Object)range3));
      assertTrue(range9.equals((Object)range4));
      assertTrue(range9.equals((Object)range0));
      assertTrue(range9.equals((Object)range5));
      assertTrue(range9.equals((Object)range8));
      assertTrue(range9.equals((Object)range6));
      assertTrue(range9.equals((Object)range1));
      assertTrue(range9.equals((Object)range2));
      
      Range range10 = Range.expandToInclude(range0, 630.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertSame(range0, range10);
      assertNotSame(range10, range8);
      assertSame(range10, range0);
      assertNotSame(range10, range6);
      assertNotSame(range10, range7);
      assertNotSame(range10, range4);
      assertNotSame(range10, range5);
      assertNotSame(range10, range1);
      assertNotSame(range10, range3);
      assertNotSame(range10, range2);
      assertNotSame(range10, range9);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(630.0, range10.getLowerBound(), 0.01);
      assertEquals(630.0, range10.getCentralValue(), 0.01);
      assertEquals(630.0, range10.getUpperBound(), 0.01);
      assertEquals(0.0, range10.getLength(), 0.01);
      assertNotNull(range10);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range10.equals((Object)range5));
      assertTrue(range10.equals((Object)range4));
      assertTrue(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range7));
      assertTrue(range10.equals((Object)range3));
      assertTrue(range10.equals((Object)range2));
      assertTrue(range10.equals((Object)range9));
      assertTrue(range10.equals((Object)range6));
      assertTrue(range10.equals((Object)range8));
      
      Range range11 = Range.combine(range2, range10);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertSame(range0, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range10);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range10, range8);
      assertSame(range10, range0);
      assertNotSame(range10, range6);
      assertNotSame(range10, range7);
      assertNotSame(range10, range11);
      assertNotSame(range10, range4);
      assertNotSame(range10, range5);
      assertNotSame(range10, range1);
      assertNotSame(range10, range3);
      assertNotSame(range10, range2);
      assertNotSame(range10, range9);
      assertNotSame(range11, range4);
      assertNotSame(range11, range7);
      assertNotSame(range11, range9);
      assertNotSame(range11, range2);
      assertNotSame(range11, range8);
      assertNotSame(range11, range3);
      assertNotSame(range11, range1);
      assertNotSame(range11, range5);
      assertNotSame(range11, range0);
      assertNotSame(range11, range6);
      assertNotSame(range11, range10);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(630.0, range10.getLowerBound(), 0.01);
      assertEquals(630.0, range10.getCentralValue(), 0.01);
      assertEquals(630.0, range10.getUpperBound(), 0.01);
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(0.0, range11.getLength(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(630.0, range11.getCentralValue(), 0.01);
      assertEquals(630.0, range11.getUpperBound(), 0.01);
      assertEquals(630.0, range11.getLowerBound(), 0.01);
      assertNotNull(range11);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range10.equals((Object)range5));
      assertTrue(range10.equals((Object)range4));
      assertTrue(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range7));
      assertTrue(range10.equals((Object)range3));
      assertTrue(range10.equals((Object)range2));
      assertTrue(range10.equals((Object)range9));
      assertTrue(range10.equals((Object)range6));
      assertTrue(range10.equals((Object)range8));
      assertTrue(range11.equals((Object)range2));
      assertTrue(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range7));
      assertTrue(range11.equals((Object)range10));
      assertTrue(range11.equals((Object)range3));
      assertTrue(range11.equals((Object)range1));
      assertTrue(range11.equals((Object)range9));
      assertTrue(range11.equals((Object)range5));
      assertTrue(range11.equals((Object)range0));
      assertTrue(range11.equals((Object)range8));
      assertTrue(range11.equals((Object)range4));
      
      Range range12 = Range.combineIgnoringNaN(range4, range6);
      assertNotSame(range12, range11);
      assertNotSame(range12, range2);
      assertNotSame(range12, range6);
      assertNotSame(range12, range3);
      assertNotSame(range12, range9);
      assertNotSame(range12, range7);
      assertNotSame(range12, range5);
      assertNotSame(range12, range0);
      assertNotSame(range12, range4);
      assertNotSame(range12, range1);
      assertNotSame(range12, range8);
      assertNotSame(range12, range10);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertSame(range0, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range10);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range2, range12);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range10);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range6);
      assertNotSame(range3, range11);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range4, range7);
      assertNotSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range9);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range12);
      assertNotSame(range4, range11);
      assertNotSame(range4, range6);
      assertNotSame(range4, range10);
      assertNotSame(range4, range8);
      assertNotSame(range6, range7);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range0);
      assertNotSame(range6, range9);
      assertNotSame(range6, range2);
      assertNotSame(range6, range12);
      assertNotSame(range6, range3);
      assertNotSame(range6, range11);
      assertNotSame(range6, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range8);
      assertEquals(630.0, range12.getCentralValue(), 0.01);
      assertEquals(630.0, range12.getUpperBound(), 0.01);
      assertEquals(630.0, range12.getLowerBound(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(0.0, range12.getLength(), 0.01);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(630.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(630.0, range3.getCentralValue(), 0.01);
      assertEquals(630.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(630.0, range4.getCentralValue(), 0.01);
      assertEquals(630.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(630.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(630.0, range6.getCentralValue(), 0.01);
      assertEquals(630.0, range6.getUpperBound(), 0.01);
      assertEquals(630.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertNotNull(range12);
      assertTrue(range12.equals((Object)range1));
      assertTrue(range12.equals((Object)range8));
      assertTrue(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range7));
      assertTrue(range12.equals((Object)range5));
      assertTrue(range12.equals((Object)range11));
      assertTrue(range12.equals((Object)range0));
      assertTrue(range12.equals((Object)range6));
      assertTrue(range12.equals((Object)range10));
      assertTrue(range12.equals((Object)range3));
      assertTrue(range12.equals((Object)range2));
      assertTrue(range12.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range11));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range9));
      assertFalse(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range10));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range11));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range6.equals((Object)range7));
      assertTrue(range6.equals((Object)range10));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range11));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range8));
      assertTrue(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range9));
      assertTrue(range6.equals((Object)range2));
      
      range0.hashCode();
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertSame(range0, range10);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range11));
      
      boolean boolean2 = range3.contains((-276.48334636));
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertSame(range0, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range10);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range2, range12);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range10);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range6);
      assertNotSame(range3, range11);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(630.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(630.0, range3.getCentralValue(), 0.01);
      assertEquals(630.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(boolean2);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range8));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range11));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range9));
      
      double double1 = range8.getCentralValue();
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertSame(range0, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range8, range2);
      assertNotSame(range8, range9);
      assertNotSame(range8, range6);
      assertNotSame(range8, range11);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertNotSame(range8, range12);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertNotSame(range8, range1);
      assertNotSame(range8, range10);
      assertNotSame(range8, range4);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(630.0, range8.getLowerBound(), 0.01);
      assertEquals(630.0, range8.getCentralValue(), 0.01);
      assertEquals(630.0, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(630.0, double1, 0.01);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range8));
      assertEquals(double1, double0, 0.01);
      assertTrue(range8.equals((Object)range1));
      assertTrue(range8.equals((Object)range10));
      assertFalse(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range11));
      assertTrue(range8.equals((Object)range12));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range9));
      assertTrue(range8.equals((Object)range4));
      
      double double2 = range9.constrain((-1.0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertSame(range0, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range10);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range2, range12);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range6);
      assertNotSame(range9, range10);
      assertNotSame(range9, range3);
      assertNotSame(range9, range1);
      assertNotSame(range9, range11);
      assertNotSame(range9, range12);
      assertNotSame(range9, range8);
      assertNotSame(range9, range4);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(630.0, range2.getCentralValue(), 0.01);
      assertEquals(630.0, range2.getLowerBound(), 0.01);
      assertEquals(630.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(630.0, range9.getLowerBound(), 0.01);
      assertEquals(630.0, range9.getCentralValue(), 0.01);
      assertEquals(630.0, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals(630.0, double2, 0.01);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range11));
      assertTrue(range2.equals((Object)range10));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertFalse(range9.equals((Object)range7));
      assertTrue(range9.equals((Object)range3));
      assertTrue(range9.equals((Object)range4));
      assertTrue(range9.equals((Object)range0));
      assertTrue(range9.equals((Object)range10));
      assertTrue(range9.equals((Object)range5));
      assertTrue(range9.equals((Object)range11));
      assertTrue(range9.equals((Object)range8));
      assertTrue(range9.equals((Object)range6));
      assertTrue(range9.equals((Object)range12));
      assertTrue(range9.equals((Object)range1));
      assertTrue(range9.equals((Object)range2));
      
      double double3 = range8.getLowerBound();
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertSame(range0, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range8, range2);
      assertNotSame(range8, range9);
      assertNotSame(range8, range6);
      assertNotSame(range8, range11);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertNotSame(range8, range12);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertNotSame(range8, range1);
      assertNotSame(range8, range10);
      assertNotSame(range8, range4);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(630.0, range8.getLowerBound(), 0.01);
      assertEquals(630.0, range8.getCentralValue(), 0.01);
      assertEquals(630.0, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(630.0, double3, 0.01);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range8));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertTrue(range8.equals((Object)range1));
      assertTrue(range8.equals((Object)range10));
      assertFalse(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range11));
      assertTrue(range8.equals((Object)range12));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range9));
      assertTrue(range8.equals((Object)range4));
      
      Range range13 = Range.shift(range8, (-1.0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertSame(range0, range10);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range1, range8);
      assertNotSame(range13, range8);
      assertNotSame(range13, range10);
      assertNotSame(range13, range12);
      assertNotSame(range13, range5);
      assertNotSame(range13, range2);
      assertNotSame(range13, range11);
      assertNotSame(range13, range6);
      assertNotSame(range13, range3);
      assertNotSame(range13, range1);
      assertNotSame(range13, range9);
      assertNotSame(range13, range7);
      assertNotSame(range13, range4);
      assertNotSame(range13, range0);
      assertNotSame(range8, range2);
      assertNotSame(range8, range7);
      assertNotSame(range8, range0);
      assertNotSame(range8, range9);
      assertNotSame(range8, range6);
      assertNotSame(range8, range11);
      assertNotSame(range8, range3);
      assertNotSame(range8, range12);
      assertNotSame(range8, range5);
      assertNotSame(range8, range1);
      assertNotSame(range8, range10);
      assertNotSame(range8, range4);
      assertNotSame(range8, range13);
      assertEquals(630.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(630.0, range0.getCentralValue(), 0.01);
      assertEquals(630.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(630.0, range1.getCentralValue(), 0.01);
      assertEquals(630.0, range1.getUpperBound(), 0.01);
      assertEquals(630.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(629.0, range13.getLowerBound(), 0.01);
      assertEquals(629.0, range13.getCentralValue(), 0.01);
      assertEquals(629.0, range13.getUpperBound(), 0.01);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertEquals(630.0, range8.getLowerBound(), 0.01);
      assertEquals(630.0, range8.getCentralValue(), 0.01);
      assertEquals(630.0, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertNotNull(range13);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range0));
      assertTrue(range8.equals((Object)range1));
      assertTrue(range8.equals((Object)range10));
      assertFalse(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range11));
      assertTrue(range8.equals((Object)range12));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range9));
      assertTrue(range8.equals((Object)range4));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range((-1.0), (-227.863388111586));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-1.0) <= upper (-227.863388111586).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = null;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = null;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, (-2924.194948446), (-2924.194948446));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range0, range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.combineIgnoringNaN(range2, range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      
      String string0 = range3.toString();
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals("Range[-1.0,-1.0]", string0);
      assertNotNull(string0);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      
      boolean boolean0 = range3.intersects(1.0, (-526.5384095944));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(boolean0);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      
      double double0 = range0.constrain(1.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = null;
      double double0 = 2.0;
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 2.0, 2.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = new Range(4454.885790422, 4454.885790422);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.scale(range0, 4454.885790422);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range1, (-3521.748467198849));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.984248565723665E7, range2.getUpperBound(), 0.01);
      assertEquals(1.984248565723665E7, range2.getLowerBound(), 0.01);
      assertEquals(1.984248565723665E7, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = Range.expand(range1, 0.0, 4454.885790422);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range3.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range3.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range3.getCentralValue(), 0.01);
      assertFalse(range3.isNaNRange());
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      
      Range range4 = Range.scale(range0, 0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      
      Range range5 = Range.expand(range1, 4454.885790422, 4454.885790422);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range5.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1.984600740570385E7, range5.getCentralValue(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range1));
      
      double double0 = range5.constrain(4454.885790422);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range5.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1.984600740570385E7, range5.getCentralValue(), 0.01);
      assertEquals(1.984600740570385E7, double0, 0.01);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range1));
      
      boolean boolean0 = range2.contains((-3521.748467198849));
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.984248565723665E7, range2.getUpperBound(), 0.01);
      assertEquals(1.984248565723665E7, range2.getLowerBound(), 0.01);
      assertEquals(1.984248565723665E7, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      
      Range range6 = Range.combineIgnoringNaN(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range0);
      assertNotSame(range6, range5);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.984248565723665E7, range2.getUpperBound(), 0.01);
      assertEquals(1.984248565723665E7, range2.getLowerBound(), 0.01);
      assertEquals(1.984248565723665E7, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(9923470.271513537, range6.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(4454.885790422, range6.getLowerBound(), 0.01);
      assertEquals(1.9838030771446228E7, range6.getLength(), 0.01);
      assertEquals(1.984248565723665E7, range6.getUpperBound(), 0.01);
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      
      Range range7 = Range.shift(range5, (-3521.748467198849), false);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertNotSame(range7, range5);
      assertNotSame(range7, range6);
      assertNotSame(range7, range4);
      assertNotSame(range7, range2);
      assertNotSame(range7, range1);
      assertNotSame(range7, range0);
      assertNotSame(range7, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range5.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1.984600740570385E7, range5.getCentralValue(), 0.01);
      assertEquals(1.984248565723665E7, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(1.984248565723665E7, range7.getCentralValue(), 0.01);
      assertEquals(1.984248565723665E7, range7.getUpperBound(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range3));
      
      Range range8 = Range.combine(range6, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range8);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range0);
      assertNotSame(range6, range5);
      assertNotSame(range6, range7);
      assertNotSame(range6, range8);
      assertNotSame(range8, range7);
      assertNotSame(range8, range1);
      assertNotSame(range8, range4);
      assertNotSame(range8, range6);
      assertNotSame(range8, range5);
      assertNotSame(range8, range3);
      assertNotSame(range8, range0);
      assertNotSame(range8, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.984248565723665E7, range2.getUpperBound(), 0.01);
      assertEquals(1.984248565723665E7, range2.getLowerBound(), 0.01);
      assertEquals(1.984248565723665E7, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(9923470.271513537, range6.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(4454.885790422, range6.getLowerBound(), 0.01);
      assertEquals(1.9838030771446228E7, range6.getLength(), 0.01);
      assertEquals(1.984248565723665E7, range6.getUpperBound(), 0.01);
      assertEquals(1.984248565723665E7, range8.getUpperBound(), 0.01);
      assertEquals(1.9838030771446228E7, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(9923470.271513537, range8.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range8.getLowerBound(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range6));
      
      Range range9 = Range.shift(range5, 240.633413712443);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range9);
      assertNotSame(range5, range6);
      assertNotSame(range5, range8);
      assertNotSame(range5, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertNotSame(range9, range0);
      assertNotSame(range9, range8);
      assertNotSame(range9, range7);
      assertNotSame(range9, range1);
      assertNotSame(range9, range2);
      assertNotSame(range9, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range5.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1.984600740570385E7, range5.getCentralValue(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals(1.9846248039117564E7, range9.getCentralValue(), 0.01);
      assertEquals(1.9846248039117564E7, range9.getUpperBound(), 0.01);
      assertEquals(1.9846248039117564E7, range9.getLowerBound(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range8));
      assertTrue(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range3));
      
      range9.hashCode();
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range9);
      assertNotSame(range5, range6);
      assertNotSame(range5, range8);
      assertNotSame(range5, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertNotSame(range9, range0);
      assertNotSame(range9, range8);
      assertNotSame(range9, range7);
      assertNotSame(range9, range1);
      assertNotSame(range9, range2);
      assertNotSame(range9, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range5.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1.984600740570385E7, range5.getCentralValue(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals(1.9846248039117564E7, range9.getCentralValue(), 0.01);
      assertEquals(1.9846248039117564E7, range9.getUpperBound(), 0.01);
      assertEquals(1.9846248039117564E7, range9.getLowerBound(), 0.01);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range8));
      assertTrue(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range3));
      
      Range range10 = Range.scale(range3, 992.021571260002);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range1, range5);
      assertNotSame(range1, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range3, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range10);
      assertNotSame(range10, range8);
      assertNotSame(range10, range7);
      assertNotSame(range10, range9);
      assertNotSame(range10, range1);
      assertNotSame(range10, range2);
      assertNotSame(range10, range0);
      assertNotSame(range10, range3);
      assertNotSame(range10, range5);
      assertNotSame(range10, range6);
      assertNotSame(range10, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range3.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range3.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range3.getCentralValue(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.968766744984397E10, range10.getCentralValue(), 0.01);
      assertEquals(1.968766744984397E10, range10.getUpperBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(1.968766744984397E10, range10.getLowerBound(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range4));
      
      Range range11 = Range.combineIgnoringNaN(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range1, range5);
      assertNotSame(range1, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range10);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range9);
      assertNotSame(range5, range6);
      assertNotSame(range5, range8);
      assertNotSame(range5, range11);
      assertNotSame(range5, range7);
      assertNotSame(range11, range8);
      assertNotSame(range11, range0);
      assertNotSame(range11, range6);
      assertNotSame(range11, range10);
      assertNotSame(range11, range4);
      assertNotSame(range11, range5);
      assertNotSame(range11, range1);
      assertNotSame(range11, range3);
      assertNotSame(range11, range7);
      assertNotSame(range11, range2);
      assertNotSame(range11, range9);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range5.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1.984600740570385E7, range5.getCentralValue(), 0.01);
      assertEquals(1.9841552519913428E7, range11.getLength(), 0.01);
      assertEquals(9925231.145747136, range11.getCentralValue(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(1.984600740570385E7, range11.getUpperBound(), 0.01);
      assertEquals(4454.885790422, range11.getLowerBound(), 0.01);
      assertNotNull(range11);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range8));
      assertTrue(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range9));
      
      Range range12 = Range.shift(range6, (-795.47663644001), false);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range1, range5);
      assertNotSame(range1, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range11);
      assertNotSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range12);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range10);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range9);
      assertNotSame(range6, range4);
      assertNotSame(range6, range3);
      assertNotSame(range6, range9);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range0);
      assertNotSame(range6, range5);
      assertNotSame(range6, range10);
      assertNotSame(range6, range11);
      assertNotSame(range6, range12);
      assertNotSame(range6, range7);
      assertNotSame(range6, range8);
      assertNotSame(range12, range2);
      assertNotSame(range12, range7);
      assertNotSame(range12, range9);
      assertNotSame(range12, range11);
      assertNotSame(range12, range1);
      assertNotSame(range12, range0);
      assertNotSame(range12, range3);
      assertNotSame(range12, range10);
      assertNotSame(range12, range8);
      assertNotSame(range12, range5);
      assertNotSame(range12, range6);
      assertNotSame(range12, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.984248565723665E7, range2.getUpperBound(), 0.01);
      assertEquals(1.984248565723665E7, range2.getLowerBound(), 0.01);
      assertEquals(1.984248565723665E7, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(9923470.271513537, range6.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(4454.885790422, range6.getLowerBound(), 0.01);
      assertEquals(1.9838030771446228E7, range6.getLength(), 0.01);
      assertEquals(1.984248565723665E7, range6.getUpperBound(), 0.01);
      assertEquals(9922674.794877097, range12.getCentralValue(), 0.01);
      assertEquals(3659.40915398199, range12.getLowerBound(), 0.01);
      assertEquals(1.984169018060021E7, range12.getUpperBound(), 0.01);
      assertEquals(1.9838030771446228E7, range12.getLength(), 0.01);
      assertFalse(range12.isNaNRange());
      assertNotNull(range12);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range4));
      
      Range range13 = Range.expand(range4, 0.0, 0.0);
      assertNotSame(range13, range4);
      assertNotSame(range13, range8);
      assertNotSame(range13, range6);
      assertNotSame(range13, range10);
      assertNotSame(range13, range5);
      assertNotSame(range13, range2);
      assertNotSame(range13, range3);
      assertNotSame(range13, range11);
      assertNotSame(range13, range12);
      assertNotSame(range13, range9);
      assertNotSame(range13, range7);
      assertNotSame(range13, range0);
      assertNotSame(range13, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range4, range6);
      assertNotSame(range4, range10);
      assertNotSame(range4, range5);
      assertNotSame(range4, range12);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range9);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range13);
      assertNotSame(range4, range11);
      assertNotSame(range4, range8);
      assertNotSame(range4, range7);
      assertEquals(0.0, range13.getCentralValue(), 0.01);
      assertEquals(0.0, range13.getUpperBound(), 0.01);
      assertEquals(0.0, range13.getLowerBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range13);
      assertTrue(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range7));
      
      boolean boolean1 = range3.intersects(1.984600740570385E7, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range11);
      assertNotSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range3, range11);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range12);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range10);
      assertNotSame(range3, range8);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range13);
      assertNotSame(range3, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range3.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range3.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range3.getCentralValue(), 0.01);
      assertFalse(range3.isNaNRange());
      assertFalse(boolean1);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range7));
      assertTrue(boolean1 == boolean0);
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range13));
      
      Range range14 = Range.shift(range1, (-2752.31));
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range11);
      assertNotSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range14);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range14, range11);
      assertNotSame(range14, range12);
      assertNotSame(range14, range9);
      assertNotSame(range14, range0);
      assertNotSame(range14, range1);
      assertNotSame(range14, range7);
      assertNotSame(range14, range2);
      assertNotSame(range14, range3);
      assertNotSame(range14, range13);
      assertNotSame(range14, range4);
      assertNotSame(range14, range8);
      assertNotSame(range14, range6);
      assertNotSame(range14, range5);
      assertNotSame(range14, range10);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.984325509570385E7, range14.getLowerBound(), 0.01);
      assertEquals(1.984325509570385E7, range14.getCentralValue(), 0.01);
      assertEquals(1.984325509570385E7, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertNotNull(range14);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range10));
      
      Range range15 = Range.expandToInclude(range9, 0.0);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range0, range15);
      assertNotSame(range1, range5);
      assertNotSame(range1, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range15);
      assertNotSame(range1, range11);
      assertNotSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range14);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range15, range7);
      assertNotSame(range15, range11);
      assertNotSame(range15, range12);
      assertNotSame(range15, range9);
      assertNotSame(range15, range1);
      assertNotSame(range15, range2);
      assertNotSame(range15, range0);
      assertNotSame(range15, range3);
      assertNotSame(range15, range13);
      assertNotSame(range15, range14);
      assertNotSame(range15, range4);
      assertNotSame(range15, range8);
      assertNotSame(range15, range5);
      assertNotSame(range15, range10);
      assertNotSame(range15, range6);
      assertNotSame(range5, range10);
      assertNotSame(range5, range2);
      assertNotSame(range5, range6);
      assertNotSame(range5, range12);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range15);
      assertNotSame(range5, range13);
      assertNotSame(range5, range4);
      assertNotSame(range5, range9);
      assertNotSame(range5, range11);
      assertNotSame(range5, range14);
      assertNotSame(range5, range8);
      assertNotSame(range5, range7);
      assertNotSame(range9, range13);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertNotSame(range9, range0);
      assertNotSame(range9, range12);
      assertNotSame(range9, range1);
      assertNotSame(range9, range15);
      assertNotSame(range9, range2);
      assertNotSame(range9, range5);
      assertNotSame(range9, range10);
      assertNotSame(range9, range11);
      assertNotSame(range9, range7);
      assertNotSame(range9, range8);
      assertNotSame(range9, range14);
      assertNotSame(range9, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.9846248039117564E7, range15.getUpperBound(), 0.01);
      assertEquals(9923124.019558782, range15.getCentralValue(), 0.01);
      assertEquals(0.0, range15.getLowerBound(), 0.01);
      assertEquals(1.9846248039117564E7, range15.getLength(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range5.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1.984600740570385E7, range5.getCentralValue(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals(1.9846248039117564E7, range9.getCentralValue(), 0.01);
      assertEquals(1.9846248039117564E7, range9.getUpperBound(), 0.01);
      assertEquals(1.9846248039117564E7, range9.getLowerBound(), 0.01);
      assertNotNull(range15);
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range15.equals((Object)range7));
      assertFalse(range15.equals((Object)range11));
      assertFalse(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range9));
      assertFalse(range15.equals((Object)range1));
      assertFalse(range15.equals((Object)range2));
      assertFalse(range15.equals((Object)range0));
      assertFalse(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range13));
      assertFalse(range15.equals((Object)range14));
      assertFalse(range15.equals((Object)range4));
      assertFalse(range15.equals((Object)range8));
      assertFalse(range15.equals((Object)range5));
      assertFalse(range15.equals((Object)range10));
      assertFalse(range15.equals((Object)range6));
      assertFalse(range5.equals((Object)range10));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range13));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range14));
      assertTrue(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range9.equals((Object)range13));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range12));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range10));
      assertFalse(range9.equals((Object)range11));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range14));
      assertFalse(range9.equals((Object)range3));
      
      Range range16 = Range.shift(range11, (-2752.31), false);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range16);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range0, range15);
      assertNotSame(range1, range5);
      assertNotSame(range1, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range16);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range15);
      assertNotSame(range1, range11);
      assertNotSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range14);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range16, range8);
      assertNotSame(range16, range6);
      assertNotSame(range16, range4);
      assertNotSame(range16, range14);
      assertNotSame(range16, range13);
      assertNotSame(range16, range5);
      assertNotSame(range16, range10);
      assertNotSame(range16, range11);
      assertNotSame(range16, range12);
      assertNotSame(range16, range0);
      assertNotSame(range16, range3);
      assertNotSame(range16, range2);
      assertNotSame(range16, range9);
      assertNotSame(range16, range7);
      assertNotSame(range16, range15);
      assertNotSame(range16, range1);
      assertNotSame(range5, range10);
      assertNotSame(range5, range16);
      assertNotSame(range5, range2);
      assertNotSame(range5, range6);
      assertNotSame(range5, range12);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range15);
      assertNotSame(range5, range13);
      assertNotSame(range5, range4);
      assertNotSame(range5, range9);
      assertNotSame(range5, range11);
      assertNotSame(range5, range14);
      assertNotSame(range5, range8);
      assertNotSame(range5, range7);
      assertNotSame(range11, range8);
      assertNotSame(range11, range6);
      assertNotSame(range11, range4);
      assertNotSame(range11, range10);
      assertNotSame(range11, range16);
      assertNotSame(range11, range5);
      assertNotSame(range11, range13);
      assertNotSame(range11, range3);
      assertNotSame(range11, range7);
      assertNotSame(range11, range9);
      assertNotSame(range11, range14);
      assertNotSame(range11, range0);
      assertNotSame(range11, range15);
      assertNotSame(range11, range1);
      assertNotSame(range11, range2);
      assertNotSame(range11, range12);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.984155251991343E7, range16.getLength(), 0.01);
      assertEquals(9922478.835747136, range16.getCentralValue(), 0.01);
      assertEquals(1.984325509570385E7, range16.getUpperBound(), 0.01);
      assertFalse(range16.isNaNRange());
      assertEquals(1702.5757904220004, range16.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range5.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1.984600740570385E7, range5.getCentralValue(), 0.01);
      assertEquals(1.9841552519913428E7, range11.getLength(), 0.01);
      assertEquals(9925231.145747136, range11.getCentralValue(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(1.984600740570385E7, range11.getUpperBound(), 0.01);
      assertEquals(4454.885790422, range11.getLowerBound(), 0.01);
      assertNotNull(range16);
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range15));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range15));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range16.equals((Object)range8));
      assertFalse(range16.equals((Object)range6));
      assertFalse(range16.equals((Object)range4));
      assertFalse(range16.equals((Object)range14));
      assertFalse(range16.equals((Object)range13));
      assertFalse(range16.equals((Object)range5));
      assertFalse(range16.equals((Object)range10));
      assertFalse(range16.equals((Object)range11));
      assertFalse(range16.equals((Object)range12));
      assertFalse(range16.equals((Object)range0));
      assertFalse(range16.equals((Object)range3));
      assertFalse(range16.equals((Object)range2));
      assertFalse(range16.equals((Object)range9));
      assertFalse(range16.equals((Object)range7));
      assertFalse(range16.equals((Object)range15));
      assertFalse(range16.equals((Object)range1));
      assertFalse(range5.equals((Object)range10));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range15));
      assertFalse(range5.equals((Object)range13));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range14));
      assertTrue(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range13));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range14));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range15));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range12));
      
      Range range17 = Range.scale(range14, 0.0);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range16);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range0, range15);
      assertNotSame(range0, range17);
      assertNotSame(range1, range5);
      assertNotSame(range1, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range17);
      assertNotSame(range1, range0);
      assertNotSame(range1, range16);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range15);
      assertNotSame(range1, range11);
      assertNotSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range14);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range14, range11);
      assertNotSame(range14, range12);
      assertNotSame(range14, range9);
      assertNotSame(range14, range0);
      assertNotSame(range14, range1);
      assertNotSame(range14, range7);
      assertNotSame(range14, range2);
      assertNotSame(range14, range3);
      assertNotSame(range14, range13);
      assertNotSame(range14, range15);
      assertNotSame(range14, range4);
      assertNotSame(range14, range8);
      assertNotSame(range14, range6);
      assertNotSame(range14, range16);
      assertNotSame(range14, range17);
      assertNotSame(range14, range5);
      assertNotSame(range14, range10);
      assertNotSame(range17, range10);
      assertNotSame(range17, range5);
      assertNotSame(range17, range6);
      assertNotSame(range17, range8);
      assertNotSame(range17, range14);
      assertNotSame(range17, range3);
      assertNotSame(range17, range9);
      assertNotSame(range17, range16);
      assertNotSame(range17, range15);
      assertNotSame(range17, range12);
      assertNotSame(range17, range11);
      assertNotSame(range17, range7);
      assertNotSame(range17, range13);
      assertNotSame(range17, range1);
      assertNotSame(range17, range4);
      assertNotSame(range17, range2);
      assertNotSame(range17, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.984325509570385E7, range14.getLowerBound(), 0.01);
      assertEquals(1.984325509570385E7, range14.getCentralValue(), 0.01);
      assertEquals(1.984325509570385E7, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(0.0, range17.getLength(), 0.01);
      assertEquals(0.0, range17.getLowerBound(), 0.01);
      assertFalse(range17.isNaNRange());
      assertEquals(0.0, range17.getCentralValue(), 0.01);
      assertEquals(0.0, range17.getUpperBound(), 0.01);
      assertNotNull(range17);
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range16));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range15));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range16));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range15));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range15));
      assertFalse(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range16));
      assertFalse(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range17.equals((Object)range10));
      assertFalse(range17.equals((Object)range5));
      assertFalse(range17.equals((Object)range6));
      assertFalse(range17.equals((Object)range8));
      assertFalse(range17.equals((Object)range14));
      assertFalse(range17.equals((Object)range3));
      assertFalse(range17.equals((Object)range9));
      assertFalse(range17.equals((Object)range16));
      assertFalse(range17.equals((Object)range15));
      assertTrue(range17.equals((Object)range13));
      assertTrue(range17.equals((Object)range4));
      assertFalse(range17.equals((Object)range12));
      assertFalse(range17.equals((Object)range11));
      assertFalse(range17.equals((Object)range7));
      assertFalse(range17.equals((Object)range1));
      assertFalse(range17.equals((Object)range2));
      assertFalse(range17.equals((Object)range0));
      
      Range range18 = Range.combineIgnoringNaN(range3, range13);
      assertNotSame(range13, range14);
      assertNotSame(range13, range4);
      assertNotSame(range13, range8);
      assertNotSame(range13, range6);
      assertNotSame(range13, range10);
      assertNotSame(range13, range5);
      assertNotSame(range13, range16);
      assertNotSame(range13, range2);
      assertNotSame(range13, range3);
      assertNotSame(range13, range11);
      assertNotSame(range13, range12);
      assertNotSame(range13, range9);
      assertNotSame(range13, range18);
      assertNotSame(range13, range7);
      assertNotSame(range13, range15);
      assertNotSame(range13, range17);
      assertNotSame(range13, range0);
      assertNotSame(range13, range1);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range16);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range0, range15);
      assertNotSame(range0, range18);
      assertNotSame(range0, range17);
      assertNotSame(range1, range5);
      assertNotSame(range1, range18);
      assertNotSame(range1, range10);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range17);
      assertNotSame(range1, range0);
      assertNotSame(range1, range16);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range15);
      assertNotSame(range1, range11);
      assertNotSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range1, range14);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range3, range11);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range12);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range10);
      assertNotSame(range3, range8);
      assertNotSame(range3, range16);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range14);
      assertNotSame(range3, range18);
      assertNotSame(range3, range13);
      assertNotSame(range3, range17);
      assertNotSame(range3, range15);
      assertNotSame(range3, range1);
      assertNotSame(range4, range14);
      assertNotSame(range4, range6);
      assertNotSame(range4, range16);
      assertNotSame(range4, range18);
      assertNotSame(range4, range17);
      assertNotSame(range4, range10);
      assertNotSame(range4, range5);
      assertNotSame(range4, range12);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range9);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range15);
      assertNotSame(range4, range13);
      assertNotSame(range4, range11);
      assertNotSame(range4, range8);
      assertNotSame(range4, range7);
      assertNotSame(range18, range7);
      assertNotSame(range18, range9);
      assertNotSame(range18, range12);
      assertNotSame(range18, range11);
      assertNotSame(range18, range2);
      assertNotSame(range18, range13);
      assertNotSame(range18, range4);
      assertNotSame(range18, range0);
      assertNotSame(range18, range15);
      assertNotSame(range18, range1);
      assertNotSame(range18, range17);
      assertNotSame(range18, range6);
      assertNotSame(range18, range8);
      assertNotSame(range18, range14);
      assertNotSame(range18, range3);
      assertNotSame(range18, range16);
      assertNotSame(range18, range10);
      assertNotSame(range18, range5);
      assertEquals(0.0, range13.getCentralValue(), 0.01);
      assertEquals(0.0, range13.getUpperBound(), 0.01);
      assertEquals(0.0, range13.getLowerBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4454.885790422, range0.getLowerBound(), 0.01);
      assertEquals(4454.885790422, range0.getCentralValue(), 0.01);
      assertEquals(4454.885790422, range0.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range3.getUpperBound(), 0.01);
      assertEquals(1.984600740570385E7, range3.getLowerBound(), 0.01);
      assertEquals(1.984600740570385E7, range3.getCentralValue(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(1.984600740570385E7, range18.getLength(), 0.01);
      assertFalse(range18.isNaNRange());
      assertEquals(9923003.702851925, range18.getCentralValue(), 0.01);
      assertEquals(1.984600740570385E7, range18.getUpperBound(), 0.01);
      assertEquals(0.0, range18.getLowerBound(), 0.01);
      assertNotNull(range18);
      assertFalse(range13.equals((Object)range14));
      assertTrue(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range16));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range15));
      assertTrue(range13.equals((Object)range17));
      assertFalse(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range1));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range16));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range17));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range17));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range16));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range15));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range16));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range14));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range17));
      assertFalse(range3.equals((Object)range15));
      assertFalse(range4.equals((Object)range14));
      assertFalse(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range17));
      assertFalse(range4.equals((Object)range16));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range15));
      assertTrue(range4.equals((Object)range13));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range18.equals((Object)range7));
      assertFalse(range18.equals((Object)range9));
      assertFalse(range18.equals((Object)range12));
      assertFalse(range18.equals((Object)range11));
      assertFalse(range18.equals((Object)range2));
      assertFalse(range18.equals((Object)range13));
      assertFalse(range18.equals((Object)range4));
      assertFalse(range18.equals((Object)range0));
      assertFalse(range18.equals((Object)range15));
      assertFalse(range18.equals((Object)range1));
      assertFalse(range18.equals((Object)range17));
      assertFalse(range18.equals((Object)range6));
      assertFalse(range18.equals((Object)range8));
      assertFalse(range18.equals((Object)range14));
      assertFalse(range18.equals((Object)range3));
      assertFalse(range18.equals((Object)range16));
      assertFalse(range18.equals((Object)range10));
      assertFalse(range18.equals((Object)range5));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2404.8376337430645);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2404.8376337430645, range1.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range1.getUpperBound(), 0.01);
      assertEquals(2404.8376337430645, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.combineIgnoringNaN((Range) null, range0);
      assertNotSame(range0, range1);
      assertSame(range0, range2);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2404.8376337430645, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2404.8376337430645, range2.getLowerBound(), 0.01);
      assertEquals(2404.8376337430645, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.shift(range0, (-3107.4273839703));
      assertNotSame(range0, range1);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      
      Range range4 = Range.shift(range1, (-3107.4273839703));
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2404.8376337430645, range1.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range1.getUpperBound(), 0.01);
      assertEquals(2404.8376337430645, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      
      Range range5 = Range.expandToInclude((Range) null, (-3107.4273839703));
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-3107.4273839703), range5.getCentralValue(), 0.01);
      assertEquals((-3107.4273839703), range5.getUpperBound(), 0.01);
      assertEquals((-3107.4273839703), range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      
      Range range6 = Range.combine((Range) null, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertSame(range6, range2);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertSame(range6, range0);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2404.8376337430645, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2404.8376337430645, range2.getLowerBound(), 0.01);
      assertEquals(2404.8376337430645, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(2404.8376337430645, range6.getLowerBound(), 0.01);
      assertEquals(2404.8376337430645, range6.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range1));
      
      Range range7 = Range.shift(range3, 2404.8376337430645, false);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range7, range5);
      assertNotSame(range7, range0);
      assertNotSame(range7, range3);
      assertNotSame(range7, range6);
      assertNotSame(range7, range1);
      assertNotSame(range7, range2);
      assertNotSame(range7, range4);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2404.8376337430645, range7.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range7.getLowerBound(), 0.01);
      assertEquals(2404.8376337430645, range7.getUpperBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range3));
      assertTrue(range7.equals((Object)range1));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range4));
      
      Range range8 = Range.scale(range1, 2404.8376337430645);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range8, range7);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertNotSame(range8, range4);
      assertNotSame(range8, range2);
      assertNotSame(range8, range3);
      assertNotSame(range8, range1);
      assertNotSame(range8, range6);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2404.8376337430645, range1.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range1.getUpperBound(), 0.01);
      assertEquals(2404.8376337430645, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5783244.044666942, range8.getCentralValue(), 0.01);
      assertEquals(5783244.044666942, range8.getUpperBound(), 0.01);
      assertEquals(5783244.044666942, range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(0.0, range8.getLength(), 0.01);
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range6));
      
      String string0 = range3.toString();
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals("Range[0.0,0.0]", string0);
      assertNotNull(string0);
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      
      Range range9 = Range.shift(range2, (-1.0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range5);
      assertSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range7);
      assertNotSame(range9, range6);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range8);
      assertNotSame(range9, range4);
      assertNotSame(range9, range1);
      assertNotSame(range9, range3);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2404.8376337430645, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2404.8376337430645, range2.getLowerBound(), 0.01);
      assertEquals(2404.8376337430645, range2.getCentralValue(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals(2403.8376337430645, range9.getLowerBound(), 0.01);
      assertEquals(2403.8376337430645, range9.getCentralValue(), 0.01);
      assertEquals(2403.8376337430645, range9.getUpperBound(), 0.01);
      assertNotNull(range9);
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range3));
      
      String string1 = range3.toString();
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals("Range[0.0,0.0]", string1);
      assertNotNull(string1);
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(string1.equals((Object)string0));
      
      Range range10 = Range.shift(range3, (-3107.4273839703), false);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range10);
      assertNotSame(range10, range4);
      assertNotSame(range10, range9);
      assertNotSame(range10, range5);
      assertNotSame(range10, range6);
      assertNotSame(range10, range3);
      assertNotSame(range10, range8);
      assertNotSame(range10, range7);
      assertNotSame(range10, range1);
      assertNotSame(range10, range0);
      assertNotSame(range10, range2);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-3107.4273839703), range10.getCentralValue(), 0.01);
      assertEquals((-3107.4273839703), range10.getUpperBound(), 0.01);
      assertEquals(0.0, range10.getLength(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals((-3107.4273839703), range10.getLowerBound(), 0.01);
      assertNotNull(range10);
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range2));
      
      Range range11 = Range.expand(range0, 583.0, 2404.8376337430645);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range11, range1);
      assertNotSame(range11, range10);
      assertNotSame(range11, range3);
      assertNotSame(range11, range5);
      assertNotSame(range11, range0);
      assertNotSame(range11, range6);
      assertNotSame(range11, range8);
      assertNotSame(range11, range4);
      assertNotSame(range11, range9);
      assertNotSame(range11, range2);
      assertNotSame(range11, range7);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertEquals(2404.8376337430645, range11.getUpperBound(), 0.01);
      assertEquals(2404.8376337430645, range11.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range11.getLowerBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(0.0, range11.getLength(), 0.01);
      assertNotNull(range11);
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range11.equals((Object)range7));
      assertTrue(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range10));
      assertTrue(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range5));
      assertTrue(range11.equals((Object)range1));
      assertTrue(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range9));
      
      Range range12 = Range.shift(range10, 0.0, false);
      assertNotSame(range0, range1);
      assertNotSame(range0, range12);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range12);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range10);
      assertNotSame(range10, range9);
      assertNotSame(range10, range4);
      assertNotSame(range10, range5);
      assertNotSame(range10, range6);
      assertNotSame(range10, range11);
      assertNotSame(range10, range3);
      assertNotSame(range10, range8);
      assertNotSame(range10, range7);
      assertNotSame(range10, range1);
      assertNotSame(range10, range12);
      assertNotSame(range10, range0);
      assertNotSame(range10, range2);
      assertNotSame(range12, range8);
      assertNotSame(range12, range1);
      assertNotSame(range12, range2);
      assertNotSame(range12, range10);
      assertNotSame(range12, range3);
      assertNotSame(range12, range7);
      assertNotSame(range12, range0);
      assertNotSame(range12, range11);
      assertNotSame(range12, range5);
      assertNotSame(range12, range4);
      assertNotSame(range12, range6);
      assertNotSame(range12, range9);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-3107.4273839703), range10.getCentralValue(), 0.01);
      assertEquals((-3107.4273839703), range10.getUpperBound(), 0.01);
      assertEquals(0.0, range10.getLength(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals((-3107.4273839703), range10.getLowerBound(), 0.01);
      assertEquals(0.0, range12.getLength(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals((-3107.4273839703), range12.getCentralValue(), 0.01);
      assertEquals((-3107.4273839703), range12.getUpperBound(), 0.01);
      assertEquals((-3107.4273839703), range12.getLowerBound(), 0.01);
      assertNotNull(range12);
      assertTrue(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range12.equals((Object)range8));
      assertTrue(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range2));
      assertTrue(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range9));
      
      boolean boolean0 = range1.intersects(0.0, 1.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range12);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range1, range9);
      assertNotSame(range1, range10);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range12);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range11);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2404.8376337430645, range1.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range1.getUpperBound(), 0.01);
      assertEquals(2404.8376337430645, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(boolean0);
      assertTrue(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range7));
      
      Range range13 = Range.combineIgnoringNaN(range0, range1);
      assertNotSame(range13, range4);
      assertNotSame(range13, range11);
      assertNotSame(range13, range5);
      assertNotSame(range13, range3);
      assertNotSame(range13, range1);
      assertNotSame(range13, range12);
      assertNotSame(range13, range9);
      assertNotSame(range13, range10);
      assertNotSame(range13, range6);
      assertNotSame(range13, range2);
      assertNotSame(range13, range8);
      assertNotSame(range13, range7);
      assertNotSame(range13, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertSame(range0, range6);
      assertNotSame(range1, range9);
      assertNotSame(range1, range10);
      assertNotSame(range1, range7);
      assertNotSame(range1, range12);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range11);
      assertNotSame(range1, range6);
      assertEquals(2404.8376337430645, range13.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range13.getUpperBound(), 0.01);
      assertEquals(2404.8376337430645, range13.getLowerBound(), 0.01);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2404.8376337430645, range1.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range1.getUpperBound(), 0.01);
      assertEquals(2404.8376337430645, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range13);
      assertFalse(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range5));
      assertTrue(range13.equals((Object)range0));
      assertTrue(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range9));
      assertTrue(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range10));
      assertTrue(range13.equals((Object)range1));
      assertTrue(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range8));
      assertTrue(range13.equals((Object)range11));
      assertTrue(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range7));
      
      double double0 = range10.constrain((-251.80177303));
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertSame(range0, range6);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range7);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range12);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range13);
      assertNotSame(range3, range10);
      assertNotSame(range10, range9);
      assertNotSame(range10, range13);
      assertNotSame(range10, range11);
      assertNotSame(range10, range8);
      assertNotSame(range10, range7);
      assertNotSame(range10, range0);
      assertNotSame(range10, range2);
      assertNotSame(range10, range4);
      assertNotSame(range10, range5);
      assertNotSame(range10, range6);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertNotSame(range10, range12);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-3107.4273839703), range10.getCentralValue(), 0.01);
      assertEquals((-3107.4273839703), range10.getUpperBound(), 0.01);
      assertEquals(0.0, range10.getLength(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals((-3107.4273839703), range10.getLowerBound(), 0.01);
      assertEquals((-3107.4273839703), double0, 0.01);
      assertTrue(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range13));
      assertFalse(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range2));
      assertTrue(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range6));
      assertTrue(range10.equals((Object)range12));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      
      range0.hashCode();
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertSame(range0, range6);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertTrue(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range10));
      
      double double1 = range9.getCentralValue();
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertSame(range0, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range10);
      assertNotSame(range2, range12);
      assertSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range13);
      assertSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range9, range7);
      assertNotSame(range9, range6);
      assertNotSame(range9, range8);
      assertNotSame(range9, range11);
      assertNotSame(range9, range5);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range4);
      assertNotSame(range9, range1);
      assertNotSame(range9, range12);
      assertNotSame(range9, range13);
      assertNotSame(range9, range3);
      assertNotSame(range9, range10);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2404.8376337430645, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2404.8376337430645, range2.getLowerBound(), 0.01);
      assertEquals(2404.8376337430645, range2.getCentralValue(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals(2403.8376337430645, range9.getLowerBound(), 0.01);
      assertEquals(2403.8376337430645, range9.getCentralValue(), 0.01);
      assertEquals(2403.8376337430645, range9.getUpperBound(), 0.01);
      assertEquals(2403.8376337430645, double1, 0.01);
      assertTrue(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range11));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range12));
      assertFalse(range9.equals((Object)range13));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range10));
      
      boolean boolean1 = range4.contains((-1.0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertSame(range0, range6);
      assertNotSame(range1, range9);
      assertNotSame(range1, range10);
      assertNotSame(range1, range7);
      assertNotSame(range1, range12);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range11);
      assertNotSame(range1, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range11);
      assertNotSame(range4, range5);
      assertNotSame(range4, range13);
      assertNotSame(range4, range9);
      assertNotSame(range4, range10);
      assertNotSame(range4, range1);
      assertNotSame(range4, range12);
      assertNotSame(range4, range6);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range8);
      assertNotSame(range4, range7);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2404.8376337430645, range1.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range1.getUpperBound(), 0.01);
      assertEquals(2404.8376337430645, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(boolean1);
      assertTrue(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range11));
      assertTrue(boolean1 == boolean0);
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range13));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range12));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range7));
      
      Range range14 = Range.expandToInclude(range3, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range12);
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range0, range14);
      assertSame(range0, range6);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range7);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range12);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range13);
      assertSame(range3, range14);
      assertNotSame(range3, range10);
      assertNotSame(range14, range4);
      assertNotSame(range14, range1);
      assertNotSame(range14, range5);
      assertSame(range14, range3);
      assertNotSame(range14, range10);
      assertNotSame(range14, range12);
      assertNotSame(range14, range13);
      assertNotSame(range14, range7);
      assertNotSame(range14, range6);
      assertNotSame(range14, range9);
      assertNotSame(range14, range2);
      assertNotSame(range14, range8);
      assertNotSame(range14, range0);
      assertNotSame(range14, range11);
      assertEquals(2404.8376337430645, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2404.8376337430645, range0.getCentralValue(), 0.01);
      assertEquals(2404.8376337430645, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(0.0, range14.getLength(), 0.01);
      assertEquals(0.0, range14.getCentralValue(), 0.01);
      assertEquals(0.0, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      assertNotNull(range14);
      assertTrue(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range5));
      assertTrue(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range11));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = new Range((-2243.161), 0.0);
      assertEquals((-1121.5805), range0.getCentralValue(), 0.01);
      assertEquals((-2243.161), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2243.161, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals((-1121.5805), range0.getCentralValue(), 0.01);
      assertEquals((-2243.161), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2243.161, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(2243.161, range1.getLength(), 0.01);
      assertEquals((-2243.161), range1.getLowerBound(), 0.01);
      assertEquals((-1121.5805), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range1, (-2243.161));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals((-1121.5805), range0.getCentralValue(), 0.01);
      assertEquals((-2243.161), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2243.161, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(2243.161, range1.getLength(), 0.01);
      assertEquals((-2243.161), range1.getLowerBound(), 0.01);
      assertEquals((-1121.5805), range1.getCentralValue(), 0.01);
      assertEquals(2243.161, range2.getLength(), 0.01);
      assertEquals((-2243.161), range2.getUpperBound(), 0.01);
      assertEquals((-3364.7415), range2.getCentralValue(), 0.01);
      assertEquals((-4486.322), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = Range.expandToInclude(range2, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals((-1121.5805), range0.getCentralValue(), 0.01);
      assertEquals((-2243.161), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2243.161, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(2243.161, range1.getLength(), 0.01);
      assertEquals((-2243.161), range1.getLowerBound(), 0.01);
      assertEquals((-1121.5805), range1.getCentralValue(), 0.01);
      assertEquals(2243.161, range2.getLength(), 0.01);
      assertEquals((-2243.161), range2.getUpperBound(), 0.01);
      assertEquals((-3364.7415), range2.getCentralValue(), 0.01);
      assertEquals((-4486.322), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(4486.322, range3.getLength(), 0.01);
      assertEquals((-4486.322), range3.getLowerBound(), 0.01);
      assertEquals((-2243.161), range3.getCentralValue(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      
      range3.hashCode();
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals((-1121.5805), range0.getCentralValue(), 0.01);
      assertEquals((-2243.161), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2243.161, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(2243.161, range1.getLength(), 0.01);
      assertEquals((-2243.161), range1.getLowerBound(), 0.01);
      assertEquals((-1121.5805), range1.getCentralValue(), 0.01);
      assertEquals(2243.161, range2.getLength(), 0.01);
      assertEquals((-2243.161), range2.getUpperBound(), 0.01);
      assertEquals((-3364.7415), range2.getCentralValue(), 0.01);
      assertEquals((-4486.322), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(4486.322, range3.getLength(), 0.01);
      assertEquals((-4486.322), range3.getLowerBound(), 0.01);
      assertEquals((-2243.161), range3.getCentralValue(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = (-792.140493);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-792.140493), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = new Range(1795.7756, 1795.7756);
      assertEquals(1795.7756, range0.getCentralValue(), 0.01);
      assertEquals(1795.7756, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1795.7756, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, 1795.7756, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1795.7756, range0.getCentralValue(), 0.01);
      assertEquals(1795.7756, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1795.7756, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3591.5512, range1.getLowerBound(), 0.01);
      assertEquals(3591.5512, range1.getCentralValue(), 0.01);
      assertEquals(3591.5512, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range1, 751.5146);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(1795.7756, range0.getCentralValue(), 0.01);
      assertEquals(1795.7756, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1795.7756, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3591.5512, range1.getLowerBound(), 0.01);
      assertEquals(3591.5512, range1.getCentralValue(), 0.01);
      assertEquals(3591.5512, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertFalse(range2.isNaNRange());
      assertEquals(2840.0366, range2.getLength(), 0.01);
      assertEquals(751.5146, range2.getLowerBound(), 0.01);
      assertEquals(2171.5329, range2.getCentralValue(), 0.01);
      assertEquals(3591.5512, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = Range.combineIgnoringNaN(range2, range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(1795.7756, range0.getCentralValue(), 0.01);
      assertEquals(1795.7756, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1795.7756, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3591.5512, range1.getLowerBound(), 0.01);
      assertEquals(3591.5512, range1.getCentralValue(), 0.01);
      assertEquals(3591.5512, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertFalse(range2.isNaNRange());
      assertEquals(2840.0366, range2.getLength(), 0.01);
      assertEquals(751.5146, range2.getLowerBound(), 0.01);
      assertEquals(2171.5329, range2.getCentralValue(), 0.01);
      assertEquals(3591.5512, range2.getUpperBound(), 0.01);
      assertEquals(2171.5329, range3.getCentralValue(), 0.01);
      assertEquals(3591.5512, range3.getUpperBound(), 0.01);
      assertEquals(751.5146, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2840.0366, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range1, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.combineIgnoringNaN(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      
      Range range4 = Range.expand(range1, 0.0, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      
      Range range5 = Range.expand(range3, 0.0, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      
      Range range6 = Range.combineIgnoringNaN(range5, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range5, range6);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range1));
      
      Range range7 = Range.expandToInclude(range3, 725.2338252719026);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range6);
      assertNotSame(range7, range4);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(362.6169126359513, range7.getCentralValue(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(725.2338252719026, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(725.2338252719026, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range3));
      
      String string0 = range7.toString();
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range6);
      assertNotSame(range7, range4);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(362.6169126359513, range7.getCentralValue(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(725.2338252719026, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(725.2338252719026, range7.getLength(), 0.01);
      assertEquals("Range[0.0,725.2338252719026]", string0);
      assertNotNull(string0);
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range3));
      
      Range range8 = Range.scale(range3, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range8, range2);
      assertNotSame(range8, range6);
      assertNotSame(range8, range4);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertNotSame(range8, range1);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(0.0, range8.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(0.0, range8.getLength(), 0.01);
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range1));
      assertTrue(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range7));
      
      Range range9 = Range.shift(range2, (-3653.5), false);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range2, range8);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range7);
      assertNotSame(range9, range8);
      assertNotSame(range9, range3);
      assertNotSame(range9, range4);
      assertNotSame(range9, range5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range6);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals((-3653.5), range9.getLowerBound(), 0.01);
      assertEquals((-3653.5), range9.getCentralValue(), 0.01);
      assertEquals((-3653.5), range9.getUpperBound(), 0.01);
      assertNotNull(range9);
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range8));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range6));
      
      Range range10 = Range.expandToInclude(range8, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range1, range9);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range8, range2);
      assertNotSame(range8, range6);
      assertNotSame(range8, range4);
      assertSame(range8, range10);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertNotSame(range8, range9);
      assertNotSame(range8, range1);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertNotSame(range10, range9);
      assertNotSame(range10, range5);
      assertNotSame(range10, range1);
      assertNotSame(range10, range6);
      assertSame(range10, range8);
      assertNotSame(range10, range2);
      assertNotSame(range10, range0);
      assertNotSame(range10, range4);
      assertNotSame(range10, range7);
      assertNotSame(range10, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(0.0, range8.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(0.0, range8.getLength(), 0.01);
      assertEquals(0.0, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(0.0, range10.getCentralValue(), 0.01);
      assertEquals(0.0, range10.getUpperBound(), 0.01);
      assertNotNull(range10);
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range1));
      assertTrue(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range9));
      assertTrue(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range10.equals((Object)range9));
      assertTrue(range10.equals((Object)range4));
      assertTrue(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range7));
      assertTrue(range10.equals((Object)range1));
      assertTrue(range10.equals((Object)range6));
      assertTrue(range10.equals((Object)range0));
      assertTrue(range10.equals((Object)range2));
      assertTrue(range10.equals((Object)range5));
      
      Range range11 = Range.expand(range1, (-3436.8323694), 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range1, range9);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range11, range4);
      assertNotSame(range11, range2);
      assertNotSame(range11, range3);
      assertNotSame(range11, range7);
      assertNotSame(range11, range8);
      assertNotSame(range11, range10);
      assertNotSame(range11, range1);
      assertNotSame(range11, range0);
      assertNotSame(range11, range5);
      assertNotSame(range11, range9);
      assertNotSame(range11, range6);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(0.0, range11.getLength(), 0.01);
      assertEquals(0.0, range11.getUpperBound(), 0.01);
      assertEquals(0.0, range11.getCentralValue(), 0.01);
      assertEquals(0.0, range11.getLowerBound(), 0.01);
      assertNotNull(range11);
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range7));
      assertTrue(range11.equals((Object)range6));
      assertTrue(range11.equals((Object)range4));
      assertTrue(range11.equals((Object)range0));
      assertTrue(range11.equals((Object)range2));
      assertTrue(range11.equals((Object)range8));
      assertTrue(range11.equals((Object)range1));
      assertTrue(range11.equals((Object)range10));
      assertTrue(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range9));
      
      Range range12 = Range.combine(range9, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range12);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range1, range10);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range2, range8);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range7);
      assertNotSame(range9, range8);
      assertNotSame(range9, range11);
      assertNotSame(range9, range12);
      assertNotSame(range9, range3);
      assertNotSame(range9, range4);
      assertNotSame(range9, range5);
      assertNotSame(range9, range10);
      assertNotSame(range9, range1);
      assertNotSame(range9, range6);
      assertNotSame(range12, range6);
      assertNotSame(range12, range3);
      assertNotSame(range12, range7);
      assertNotSame(range12, range8);
      assertNotSame(range12, range11);
      assertNotSame(range12, range5);
      assertNotSame(range12, range10);
      assertNotSame(range12, range9);
      assertNotSame(range12, range1);
      assertNotSame(range12, range4);
      assertNotSame(range12, range0);
      assertNotSame(range12, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals((-3653.5), range9.getLowerBound(), 0.01);
      assertEquals((-3653.5), range9.getCentralValue(), 0.01);
      assertEquals((-3653.5), range9.getUpperBound(), 0.01);
      assertEquals(3653.5, range12.getLength(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals((-1826.75), range12.getCentralValue(), 0.01);
      assertEquals((-3653.5), range12.getLowerBound(), 0.01);
      assertEquals(0.0, range12.getUpperBound(), 0.01);
      assertNotNull(range12);
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range11));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range10));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range2));
      
      Range range13 = Range.expandToInclude(range3, 725.2338252719026);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range9);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range13);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range13, range1);
      assertNotSame(range13, range9);
      assertNotSame(range13, range11);
      assertNotSame(range13, range12);
      assertNotSame(range13, range3);
      assertNotSame(range13, range10);
      assertNotSame(range13, range4);
      assertNotSame(range13, range5);
      assertNotSame(range13, range2);
      assertNotSame(range13, range0);
      assertNotSame(range13, range7);
      assertNotSame(range13, range6);
      assertNotSame(range13, range8);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(725.2338252719026, range13.getLength(), 0.01);
      assertEquals(0.0, range13.getLowerBound(), 0.01);
      assertEquals(362.6169126359513, range13.getCentralValue(), 0.01);
      assertEquals(725.2338252719026, range13.getUpperBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertNotNull(range13);
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range9));
      assertTrue(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range8));
      
      String string1 = range9.toString();
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range9);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range2, range13);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range8);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range0);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range11);
      assertNotSame(range9, range13);
      assertNotSame(range9, range10);
      assertNotSame(range9, range7);
      assertNotSame(range9, range8);
      assertNotSame(range9, range12);
      assertNotSame(range9, range3);
      assertNotSame(range9, range4);
      assertNotSame(range9, range5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range6);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals((-3653.5), range9.getLowerBound(), 0.01);
      assertEquals((-3653.5), range9.getCentralValue(), 0.01);
      assertEquals((-3653.5), range9.getUpperBound(), 0.01);
      assertEquals("Range[-3653.5,-3653.5]", string1);
      assertNotNull(string1);
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range13));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range11));
      assertFalse(range9.equals((Object)range13));
      assertFalse(range9.equals((Object)range10));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range12));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range6));
      assertFalse(string1.equals((Object)string0));
      
      double double0 = range9.getCentralValue();
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range9);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range2, range13);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range8);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range0);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range11);
      assertNotSame(range9, range13);
      assertNotSame(range9, range10);
      assertNotSame(range9, range7);
      assertNotSame(range9, range8);
      assertNotSame(range9, range12);
      assertNotSame(range9, range3);
      assertNotSame(range9, range4);
      assertNotSame(range9, range5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range6);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals((-3653.5), range9.getLowerBound(), 0.01);
      assertEquals((-3653.5), range9.getCentralValue(), 0.01);
      assertEquals((-3653.5), range9.getUpperBound(), 0.01);
      assertEquals((-3653.5), double0, 0.01);
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range13));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range11));
      assertFalse(range9.equals((Object)range13));
      assertFalse(range9.equals((Object)range10));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range12));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range6));
      
      String string2 = range9.toString();
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range9);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range2, range13);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range8);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range0);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range11);
      assertNotSame(range9, range13);
      assertNotSame(range9, range10);
      assertNotSame(range9, range7);
      assertNotSame(range9, range8);
      assertNotSame(range9, range12);
      assertNotSame(range9, range3);
      assertNotSame(range9, range4);
      assertNotSame(range9, range5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range6);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals((-3653.5), range9.getLowerBound(), 0.01);
      assertEquals((-3653.5), range9.getCentralValue(), 0.01);
      assertEquals((-3653.5), range9.getUpperBound(), 0.01);
      assertEquals("Range[-3653.5,-3653.5]", string2);
      assertNotNull(string2);
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range9));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range13));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range11));
      assertFalse(range9.equals((Object)range13));
      assertFalse(range9.equals((Object)range10));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range12));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range6));
      
      Range range14 = Range.expandToInclude(range3, (-3653.5));
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range9);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range14, range11);
      assertNotSame(range14, range0);
      assertNotSame(range14, range9);
      assertNotSame(range14, range1);
      assertNotSame(range14, range4);
      assertNotSame(range14, range12);
      assertNotSame(range14, range7);
      assertNotSame(range14, range5);
      assertNotSame(range14, range6);
      assertNotSame(range14, range10);
      assertNotSame(range14, range13);
      assertNotSame(range14, range8);
      assertNotSame(range14, range2);
      assertNotSame(range14, range3);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range14);
      assertNotSame(range3, range13);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getUpperBound(), 0.01);
      assertEquals(3653.5, range14.getLength(), 0.01);
      assertEquals((-1826.75), range14.getCentralValue(), 0.01);
      assertEquals((-3653.5), range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertNotNull(range14);
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range10));
      assertTrue(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range3));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range13));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range10));
      
      Range range15 = Range.combineIgnoringNaN(range14, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range9);
      assertNotSame(range1, range15);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range14, range11);
      assertNotSame(range14, range0);
      assertNotSame(range14, range9);
      assertNotSame(range14, range1);
      assertNotSame(range14, range4);
      assertNotSame(range14, range12);
      assertNotSame(range14, range7);
      assertNotSame(range14, range5);
      assertNotSame(range14, range6);
      assertNotSame(range14, range10);
      assertNotSame(range14, range13);
      assertNotSame(range14, range8);
      assertNotSame(range14, range2);
      assertNotSame(range14, range3);
      assertNotSame(range14, range15);
      assertNotSame(range2, range14);
      assertNotSame(range2, range13);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range8);
      assertNotSame(range2, range15);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range0);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range15, range7);
      assertNotSame(range15, range6);
      assertNotSame(range15, range5);
      assertNotSame(range15, range1);
      assertNotSame(range15, range3);
      assertNotSame(range15, range8);
      assertNotSame(range15, range0);
      assertNotSame(range15, range9);
      assertNotSame(range15, range4);
      assertNotSame(range15, range2);
      assertNotSame(range15, range14);
      assertNotSame(range15, range13);
      assertNotSame(range15, range10);
      assertNotSame(range15, range12);
      assertNotSame(range15, range11);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range14);
      assertNotSame(range3, range13);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range3, range15);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range11);
      assertNotSame(range9, range15);
      assertNotSame(range9, range13);
      assertNotSame(range9, range10);
      assertNotSame(range9, range14);
      assertNotSame(range9, range7);
      assertNotSame(range9, range8);
      assertNotSame(range9, range12);
      assertNotSame(range9, range3);
      assertNotSame(range9, range4);
      assertNotSame(range9, range5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range6);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getUpperBound(), 0.01);
      assertEquals(3653.5, range14.getLength(), 0.01);
      assertEquals((-1826.75), range14.getCentralValue(), 0.01);
      assertEquals((-3653.5), range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(0.0, range15.getUpperBound(), 0.01);
      assertEquals(3653.5, range15.getLength(), 0.01);
      assertEquals((-1826.75), range15.getCentralValue(), 0.01);
      assertEquals((-3653.5), range15.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals((-3653.5), range9.getLowerBound(), 0.01);
      assertEquals((-3653.5), range9.getCentralValue(), 0.01);
      assertEquals((-3653.5), range9.getUpperBound(), 0.01);
      assertNotNull(range15);
      assertFalse(range0.equals((Object)range14));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range14));
      assertTrue(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range10));
      assertTrue(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range13));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range15.equals((Object)range7));
      assertTrue(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range6));
      assertFalse(range15.equals((Object)range5));
      assertFalse(range15.equals((Object)range1));
      assertTrue(range15.equals((Object)range14));
      assertFalse(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range8));
      assertFalse(range15.equals((Object)range0));
      assertFalse(range15.equals((Object)range9));
      assertFalse(range15.equals((Object)range4));
      assertFalse(range15.equals((Object)range2));
      assertFalse(range15.equals((Object)range13));
      assertFalse(range15.equals((Object)range10));
      assertFalse(range15.equals((Object)range11));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range14));
      assertFalse(range3.equals((Object)range13));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range11));
      assertFalse(range9.equals((Object)range13));
      assertFalse(range9.equals((Object)range10));
      assertFalse(range9.equals((Object)range14));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range12));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range6));
      
      boolean boolean0 = range8.contains((-3653.5));
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range9);
      assertNotSame(range1, range15);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range14);
      assertNotSame(range3, range13);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range3, range15);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range8, range6);
      assertSame(range8, range10);
      assertNotSame(range8, range5);
      assertNotSame(range8, range15);
      assertNotSame(range8, range1);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertNotSame(range8, range2);
      assertNotSame(range8, range13);
      assertNotSame(range8, range14);
      assertNotSame(range8, range4);
      assertNotSame(range8, range0);
      assertNotSame(range8, range9);
      assertNotSame(range8, range12);
      assertNotSame(range8, range11);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(0.0, range8.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(0.0, range8.getLength(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range14));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range15));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range14));
      assertTrue(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range14));
      assertFalse(range3.equals((Object)range13));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range15));
      assertTrue(range3.equals((Object)range10));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range15));
      assertTrue(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range11));
      assertFalse(range8.equals((Object)range13));
      assertTrue(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range14));
      assertTrue(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range9));
      assertTrue(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range12));
      
      Range range16 = Range.shift(range8, (-3535.924485487011));
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range16);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range9);
      assertNotSame(range1, range15);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range16);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range14);
      assertNotSame(range3, range13);
      assertNotSame(range3, range16);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range3, range15);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range16, range1);
      assertNotSame(range16, range9);
      assertNotSame(range16, range15);
      assertNotSame(range16, range8);
      assertNotSame(range16, range11);
      assertNotSame(range16, range6);
      assertNotSame(range16, range12);
      assertNotSame(range16, range4);
      assertNotSame(range16, range3);
      assertNotSame(range16, range5);
      assertNotSame(range16, range13);
      assertNotSame(range16, range14);
      assertNotSame(range16, range10);
      assertNotSame(range16, range0);
      assertNotSame(range16, range7);
      assertNotSame(range16, range2);
      assertNotSame(range8, range6);
      assertSame(range8, range10);
      assertNotSame(range8, range5);
      assertNotSame(range8, range15);
      assertNotSame(range8, range1);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertNotSame(range8, range2);
      assertNotSame(range8, range16);
      assertNotSame(range8, range13);
      assertNotSame(range8, range14);
      assertNotSame(range8, range4);
      assertNotSame(range8, range0);
      assertNotSame(range8, range9);
      assertNotSame(range8, range12);
      assertNotSame(range8, range11);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range16.getLength(), 0.01);
      assertEquals((-3535.924485487011), range16.getLowerBound(), 0.01);
      assertEquals((-3535.924485487011), range16.getCentralValue(), 0.01);
      assertEquals((-3535.924485487011), range16.getUpperBound(), 0.01);
      assertFalse(range16.isNaNRange());
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(0.0, range8.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(0.0, range8.getLength(), 0.01);
      assertNotNull(range16);
      assertFalse(range0.equals((Object)range14));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range15));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range14));
      assertTrue(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range14));
      assertFalse(range3.equals((Object)range13));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range15));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range16.equals((Object)range1));
      assertFalse(range16.equals((Object)range9));
      assertFalse(range16.equals((Object)range15));
      assertFalse(range16.equals((Object)range8));
      assertFalse(range16.equals((Object)range11));
      assertFalse(range16.equals((Object)range6));
      assertFalse(range16.equals((Object)range12));
      assertFalse(range16.equals((Object)range4));
      assertFalse(range16.equals((Object)range3));
      assertFalse(range16.equals((Object)range5));
      assertFalse(range16.equals((Object)range13));
      assertFalse(range16.equals((Object)range14));
      assertFalse(range16.equals((Object)range10));
      assertFalse(range16.equals((Object)range0));
      assertFalse(range16.equals((Object)range7));
      assertFalse(range16.equals((Object)range2));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range3));
      
      range10.hashCode();
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range16);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range9);
      assertNotSame(range1, range15);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range16);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range14);
      assertNotSame(range3, range13);
      assertNotSame(range3, range16);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range3, range15);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range8, range6);
      assertSame(range8, range10);
      assertNotSame(range8, range5);
      assertNotSame(range8, range15);
      assertNotSame(range8, range1);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertNotSame(range8, range2);
      assertNotSame(range8, range16);
      assertNotSame(range8, range13);
      assertNotSame(range8, range14);
      assertNotSame(range8, range4);
      assertNotSame(range8, range0);
      assertNotSame(range8, range9);
      assertNotSame(range8, range12);
      assertNotSame(range8, range11);
      assertNotSame(range10, range9);
      assertNotSame(range10, range11);
      assertNotSame(range10, range1);
      assertSame(range10, range8);
      assertNotSame(range10, range4);
      assertNotSame(range10, range12);
      assertNotSame(range10, range5);
      assertNotSame(range10, range13);
      assertNotSame(range10, range14);
      assertNotSame(range10, range6);
      assertNotSame(range10, range2);
      assertNotSame(range10, range0);
      assertNotSame(range10, range7);
      assertNotSame(range10, range16);
      assertNotSame(range10, range3);
      assertNotSame(range10, range15);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(0.0, range8.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(0.0, range8.getLength(), 0.01);
      assertEquals(0.0, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(0.0, range10.getCentralValue(), 0.01);
      assertEquals(0.0, range10.getUpperBound(), 0.01);
      
      Range range17 = Range.shift(range13, 725.2338252719026);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range16);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range17);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range9);
      assertNotSame(range1, range15);
      assertNotSame(range1, range9);
      assertNotSame(range1, range17);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range16);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range3, range17);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range14);
      assertNotSame(range3, range13);
      assertNotSame(range3, range16);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range3, range15);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range17, range5);
      assertNotSame(range17, range10);
      assertNotSame(range17, range12);
      assertNotSame(range17, range13);
      assertNotSame(range17, range4);
      assertNotSame(range17, range2);
      assertNotSame(range17, range14);
      assertNotSame(range17, range9);
      assertNotSame(range17, range11);
      assertNotSame(range17, range1);
      assertNotSame(range17, range15);
      assertNotSame(range17, range0);
      assertNotSame(range17, range8);
      assertNotSame(range17, range6);
      assertNotSame(range17, range3);
      assertNotSame(range17, range7);
      assertNotSame(range17, range16);
      assertNotSame(range13, range15);
      assertNotSame(range13, range1);
      assertNotSame(range13, range17);
      assertNotSame(range13, range9);
      assertNotSame(range13, range11);
      assertNotSame(range13, range12);
      assertNotSame(range13, range3);
      assertNotSame(range13, range10);
      assertNotSame(range13, range4);
      assertNotSame(range13, range14);
      assertNotSame(range13, range5);
      assertNotSame(range13, range2);
      assertNotSame(range13, range0);
      assertNotSame(range13, range7);
      assertNotSame(range13, range6);
      assertNotSame(range13, range8);
      assertNotSame(range13, range16);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1087.8507379078537, range17.getCentralValue(), 0.01);
      assertEquals(725.2338252719026, range17.getLength(), 0.01);
      assertFalse(range17.isNaNRange());
      assertEquals(1450.4676505438051, range17.getUpperBound(), 0.01);
      assertEquals(725.2338252719026, range17.getLowerBound(), 0.01);
      assertEquals(725.2338252719026, range13.getLength(), 0.01);
      assertEquals(0.0, range13.getLowerBound(), 0.01);
      assertEquals(362.6169126359513, range13.getCentralValue(), 0.01);
      assertEquals(725.2338252719026, range13.getUpperBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertNotNull(range17);
      
      Range range18 = Range.combine(range17, range3);
      assertNotSame(range0, range14);
      assertNotSame(range0, range4);
      assertNotSame(range0, range16);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range0, range18);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range17);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range13);
      assertNotSame(range0, range9);
      assertNotSame(range1, range15);
      assertNotSame(range1, range9);
      assertNotSame(range1, range17);
      assertNotSame(range1, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range13);
      assertNotSame(range1, range18);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range16);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range3, range17);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range11);
      assertNotSame(range3, range18);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range14);
      assertNotSame(range3, range13);
      assertNotSame(range3, range16);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range3, range15);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range17, range5);
      assertNotSame(range17, range10);
      assertNotSame(range17, range12);
      assertNotSame(range17, range18);
      assertNotSame(range17, range13);
      assertNotSame(range17, range4);
      assertNotSame(range17, range2);
      assertNotSame(range17, range14);
      assertNotSame(range17, range9);
      assertNotSame(range17, range11);
      assertNotSame(range17, range1);
      assertNotSame(range17, range15);
      assertNotSame(range17, range0);
      assertNotSame(range17, range8);
      assertNotSame(range17, range6);
      assertNotSame(range17, range3);
      assertNotSame(range17, range7);
      assertNotSame(range17, range16);
      assertNotSame(range18, range8);
      assertNotSame(range18, range6);
      assertNotSame(range18, range15);
      assertNotSame(range18, range5);
      assertNotSame(range18, range3);
      assertNotSame(range18, range1);
      assertNotSame(range18, range7);
      assertNotSame(range18, range16);
      assertNotSame(range18, range2);
      assertNotSame(range18, range14);
      assertNotSame(range18, range13);
      assertNotSame(range18, range4);
      assertNotSame(range18, range0);
      assertNotSame(range18, range10);
      assertNotSame(range18, range11);
      assertNotSame(range18, range9);
      assertNotSame(range18, range12);
      assertNotSame(range18, range17);
      assertNotSame(range13, range15);
      assertNotSame(range13, range1);
      assertNotSame(range13, range17);
      assertNotSame(range13, range9);
      assertNotSame(range13, range11);
      assertNotSame(range13, range12);
      assertNotSame(range13, range3);
      assertNotSame(range13, range10);
      assertNotSame(range13, range4);
      assertNotSame(range13, range18);
      assertNotSame(range13, range14);
      assertNotSame(range13, range5);
      assertNotSame(range13, range2);
      assertNotSame(range13, range0);
      assertNotSame(range13, range7);
      assertNotSame(range13, range6);
      assertNotSame(range13, range8);
      assertNotSame(range13, range16);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1087.8507379078537, range17.getCentralValue(), 0.01);
      assertEquals(725.2338252719026, range17.getLength(), 0.01);
      assertFalse(range17.isNaNRange());
      assertEquals(1450.4676505438051, range17.getUpperBound(), 0.01);
      assertEquals(725.2338252719026, range17.getLowerBound(), 0.01);
      assertFalse(range18.isNaNRange());
      assertEquals(725.2338252719026, range18.getCentralValue(), 0.01);
      assertEquals(1450.4676505438051, range18.getUpperBound(), 0.01);
      assertEquals(0.0, range18.getLowerBound(), 0.01);
      assertEquals(1450.4676505438051, range18.getLength(), 0.01);
      assertEquals(725.2338252719026, range13.getLength(), 0.01);
      assertEquals(0.0, range13.getLowerBound(), 0.01);
      assertEquals(362.6169126359513, range13.getCentralValue(), 0.01);
      assertEquals(725.2338252719026, range13.getUpperBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertNotNull(range18);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = new Range((-1.0), 3897.441);
      assertEquals(1948.2205, range0.getCentralValue(), 0.01);
      assertEquals(3897.441, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(3898.441, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(1948.2205, range0.getCentralValue(), 0.01);
      assertEquals(3897.441, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(3898.441, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3898.441, range1.getLength(), 0.01);
      assertEquals(1948.2205, range1.getCentralValue(), 0.01);
      assertEquals(3897.441, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      double double0 = range1.getUpperBound();
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(1948.2205, range0.getCentralValue(), 0.01);
      assertEquals(3897.441, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(3898.441, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3898.441, range1.getLength(), 0.01);
      assertEquals(1948.2205, range1.getCentralValue(), 0.01);
      assertEquals(3897.441, range1.getUpperBound(), 0.01);
      assertEquals(3897.441, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = new Range((-1052.304535576), 0.0);
      assertEquals((-1052.304535576), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1052.304535576, range0.getLength(), 0.01);
      assertEquals((-526.152267788), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (-1052.304535576), false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals((-1052.304535576), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1052.304535576, range0.getLength(), 0.01);
      assertEquals((-526.152267788), range0.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-2104.609071152), range1.getLowerBound(), 0.01);
      assertEquals((-1052.304535576), range1.getUpperBound(), 0.01);
      assertEquals((-1578.456803364), range1.getCentralValue(), 0.01);
      assertEquals(1052.304535576, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range0, (-1126.9862604660123), false);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals((-1052.304535576), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1052.304535576, range0.getLength(), 0.01);
      assertEquals((-526.152267788), range0.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2179.2907960420125), range2.getLowerBound(), 0.01);
      assertEquals(1052.3045355760003, range2.getLength(), 0.01);
      assertEquals((-1653.1385282540123), range2.getCentralValue(), 0.01);
      assertEquals((-1126.9862604660123), range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = Range.expandToInclude(range2, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals((-1052.304535576), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1052.304535576, range0.getLength(), 0.01);
      assertEquals((-526.152267788), range0.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2179.2907960420125), range2.getLowerBound(), 0.01);
      assertEquals(1052.3045355760003, range2.getLength(), 0.01);
      assertEquals((-1653.1385282540123), range2.getCentralValue(), 0.01);
      assertEquals((-1126.9862604660123), range2.getUpperBound(), 0.01);
      assertEquals(2179.2907960420125, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-1089.6453980210063), range3.getCentralValue(), 0.01);
      assertEquals((-2179.2907960420125), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      
      Range range4 = Range.shift(range3, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertEquals((-1052.304535576), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1052.304535576, range0.getLength(), 0.01);
      assertEquals((-526.152267788), range0.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2179.2907960420125), range2.getLowerBound(), 0.01);
      assertEquals(1052.3045355760003, range2.getLength(), 0.01);
      assertEquals((-1653.1385282540123), range2.getCentralValue(), 0.01);
      assertEquals((-1126.9862604660123), range2.getUpperBound(), 0.01);
      assertEquals(2179.2907960420125, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-1089.6453980210063), range3.getCentralValue(), 0.01);
      assertEquals((-2179.2907960420125), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-2179.2907960420125), range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-1089.6453980210063), range4.getCentralValue(), 0.01);
      assertEquals(2179.2907960420125, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      
      Range range5 = Range.combineIgnoringNaN(range4, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertEquals((-1052.304535576), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1052.304535576, range0.getLength(), 0.01);
      assertEquals((-526.152267788), range0.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2179.2907960420125), range2.getLowerBound(), 0.01);
      assertEquals(1052.3045355760003, range2.getLength(), 0.01);
      assertEquals((-1653.1385282540123), range2.getCentralValue(), 0.01);
      assertEquals((-1126.9862604660123), range2.getUpperBound(), 0.01);
      assertEquals(2179.2907960420125, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-1089.6453980210063), range3.getCentralValue(), 0.01);
      assertEquals((-2179.2907960420125), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-2179.2907960420125), range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-1089.6453980210063), range4.getCentralValue(), 0.01);
      assertEquals(2179.2907960420125, range4.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2179.2907960420125, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals((-2179.2907960420125), range5.getLowerBound(), 0.01);
      assertEquals((-1089.6453980210063), range5.getCentralValue(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      
      double double0 = range5.getLowerBound();
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertEquals((-1052.304535576), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1052.304535576, range0.getLength(), 0.01);
      assertEquals((-526.152267788), range0.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2179.2907960420125), range2.getLowerBound(), 0.01);
      assertEquals(1052.3045355760003, range2.getLength(), 0.01);
      assertEquals((-1653.1385282540123), range2.getCentralValue(), 0.01);
      assertEquals((-1126.9862604660123), range2.getUpperBound(), 0.01);
      assertEquals(2179.2907960420125, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-1089.6453980210063), range3.getCentralValue(), 0.01);
      assertEquals((-2179.2907960420125), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-2179.2907960420125), range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-1089.6453980210063), range4.getCentralValue(), 0.01);
      assertEquals(2179.2907960420125, range4.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2179.2907960420125, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals((-2179.2907960420125), range5.getLowerBound(), 0.01);
      assertEquals((-1089.6453980210063), range5.getCentralValue(), 0.01);
      assertEquals((-2179.2907960420125), double0, 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      
      Range range6 = Range.shift(range5, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range6);
      assertNotSame(range5, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertEquals((-1052.304535576), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1052.304535576, range0.getLength(), 0.01);
      assertEquals((-526.152267788), range0.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2179.2907960420125), range2.getLowerBound(), 0.01);
      assertEquals(1052.3045355760003, range2.getLength(), 0.01);
      assertEquals((-1653.1385282540123), range2.getCentralValue(), 0.01);
      assertEquals((-1126.9862604660123), range2.getUpperBound(), 0.01);
      assertEquals(2179.2907960420125, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-1089.6453980210063), range3.getCentralValue(), 0.01);
      assertEquals((-2179.2907960420125), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-2179.2907960420125), range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-1089.6453980210063), range4.getCentralValue(), 0.01);
      assertEquals(2179.2907960420125, range4.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2179.2907960420125, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals((-2179.2907960420125), range5.getLowerBound(), 0.01);
      assertEquals((-1089.6453980210063), range5.getCentralValue(), 0.01);
      assertEquals(2179.2907960420125, range6.getLength(), 0.01);
      assertEquals((-1089.6453980210063), range6.getCentralValue(), 0.01);
      assertEquals((-2179.2907960420125), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range4));
      
      Range range7 = Range.combineIgnoringNaN(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range7);
      assertNotSame(range4, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range6);
      assertNotSame(range5, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range7);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range7, range5);
      assertNotSame(range7, range2);
      assertNotSame(range7, range4);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range1);
      assertNotSame(range7, range0);
      assertEquals((-1052.304535576), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1052.304535576, range0.getLength(), 0.01);
      assertEquals((-526.152267788), range0.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2179.2907960420125), range2.getLowerBound(), 0.01);
      assertEquals(1052.3045355760003, range2.getLength(), 0.01);
      assertEquals((-1653.1385282540123), range2.getCentralValue(), 0.01);
      assertEquals((-1126.9862604660123), range2.getUpperBound(), 0.01);
      assertEquals(2179.2907960420125, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-1089.6453980210063), range3.getCentralValue(), 0.01);
      assertEquals((-2179.2907960420125), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-2179.2907960420125), range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-1089.6453980210063), range4.getCentralValue(), 0.01);
      assertEquals(2179.2907960420125, range4.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2179.2907960420125, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals((-2179.2907960420125), range5.getLowerBound(), 0.01);
      assertEquals((-1089.6453980210063), range5.getCentralValue(), 0.01);
      assertEquals(2179.2907960420125, range6.getLength(), 0.01);
      assertEquals((-1089.6453980210063), range6.getCentralValue(), 0.01);
      assertEquals((-2179.2907960420125), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(2179.2907960420125, range7.getLength(), 0.01);
      assertEquals((-1089.6453980210063), range7.getCentralValue(), 0.01);
      assertEquals((-2179.2907960420125), range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range1));
      assertTrue(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range0));
      assertTrue(range7.equals((Object)range6));
      
      Range range8 = Range.shift(range6, (-1126.9862604660123), false);
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range8);
      assertNotSame(range4, range7);
      assertNotSame(range4, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range0);
      assertNotSame(range5, range8);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range6);
      assertNotSame(range5, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range7);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range0);
      assertNotSame(range6, range8);
      assertNotSame(range6, range3);
      assertNotSame(range8, range3);
      assertNotSame(range8, range0);
      assertNotSame(range8, range1);
      assertNotSame(range8, range5);
      assertNotSame(range8, range2);
      assertNotSame(range8, range6);
      assertNotSame(range8, range4);
      assertNotSame(range8, range7);
      assertEquals((-1052.304535576), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1052.304535576, range0.getLength(), 0.01);
      assertEquals((-526.152267788), range0.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2179.2907960420125), range2.getLowerBound(), 0.01);
      assertEquals(1052.3045355760003, range2.getLength(), 0.01);
      assertEquals((-1653.1385282540123), range2.getCentralValue(), 0.01);
      assertEquals((-1126.9862604660123), range2.getUpperBound(), 0.01);
      assertEquals(2179.2907960420125, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-1089.6453980210063), range3.getCentralValue(), 0.01);
      assertEquals((-2179.2907960420125), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-2179.2907960420125), range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-1089.6453980210063), range4.getCentralValue(), 0.01);
      assertEquals(2179.2907960420125, range4.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2179.2907960420125, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals((-2179.2907960420125), range5.getLowerBound(), 0.01);
      assertEquals((-1089.6453980210063), range5.getCentralValue(), 0.01);
      assertEquals(2179.2907960420125, range6.getLength(), 0.01);
      assertEquals((-1089.6453980210063), range6.getCentralValue(), 0.01);
      assertEquals((-2179.2907960420125), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals((-1126.9862604660123), range8.getUpperBound(), 0.01);
      assertEquals((-3306.2770565080245), range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(2179.2907960420125, range8.getLength(), 0.01);
      assertEquals((-2216.6316584870183), range8.getCentralValue(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range7));
      assertTrue(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range7));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range7));
      assertTrue(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range7));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = new Range(280.05345231747, 2359.843118);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 2359.843118, (-1513.3070276751));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1762696.8019507015, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-4026348.87502077), range1.getCentralValue(), 0.01);
      assertEquals((-3145000.474045419), range1.getUpperBound(), 0.01);
      assertEquals((-4907697.275996121), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.combineIgnoringNaN(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.expandToInclude(range2, 2359.843118);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertSame(range2, range3);
      assertNotSame(range3, range0);
      assertSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2079.7896656825296, range3.getLength(), 0.01);
      assertEquals(280.05345231747, range3.getLowerBound(), 0.01);
      assertEquals(2359.843118, range3.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range3.getCentralValue(), 0.01);
      assertFalse(range3.isNaNRange());
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      
      range0.hashCode();
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      
      Range range4 = Range.expandToInclude(range0, (-1513.3070276751));
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range4.isNaNRange());
      assertEquals(3873.1501456751, range4.getLength(), 0.01);
      assertEquals(2359.843118, range4.getUpperBound(), 0.01);
      assertEquals(423.2680451624499, range4.getCentralValue(), 0.01);
      assertEquals((-1513.3070276751), range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      
      Range range5 = Range.combine(range2, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range5, range2);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2359.843118, range5.getUpperBound(), 0.01);
      assertEquals(280.05345231747, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2079.7896656825296, range5.getLength(), 0.01);
      assertEquals(1319.948285158735, range5.getCentralValue(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      
      Range range6 = Range.expandToInclude(range2, (-401.5991083406));
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range2);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals((-401.5991083406), range6.getLowerBound(), 0.01);
      assertEquals(2761.4422263406, range6.getLength(), 0.01);
      assertEquals(2359.843118, range6.getUpperBound(), 0.01);
      assertEquals(979.1220048296999, range6.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range5));
      
      boolean boolean0 = range5.intersects(range3);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range3, range0);
      assertSame(range3, range2);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2079.7896656825296, range3.getLength(), 0.01);
      assertEquals(280.05345231747, range3.getLowerBound(), 0.01);
      assertEquals(2359.843118, range3.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range3.getCentralValue(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2359.843118, range5.getUpperBound(), 0.01);
      assertEquals(280.05345231747, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2079.7896656825296, range5.getLength(), 0.01);
      assertEquals(1319.948285158735, range5.getCentralValue(), 0.01);
      assertTrue(boolean0);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range3));
      
      String string0 = range2.toString();
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals("Range[280.05345231747,2359.843118]", string0);
      assertNotNull(string0);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      
      Range range7 = Range.expand(range5, 0.0, 910.86);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range4);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range7, range1);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range6);
      assertNotSame(range7, range5);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2359.843118, range5.getUpperBound(), 0.01);
      assertEquals(280.05345231747, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2079.7896656825296, range5.getLength(), 0.01);
      assertEquals(1319.948285158735, range5.getCentralValue(), 0.01);
      assertEquals(1896757.058001589, range7.getUpperBound(), 0.01);
      assertEquals(948518.5557269532, range7.getCentralValue(), 0.01);
      assertEquals(1896477.0045492717, range7.getLength(), 0.01);
      assertEquals(280.05345231747, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range5));
      
      Range range8 = Range.shift(range0, (-1513.3070276751));
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range8, range6);
      assertNotSame(range8, range3);
      assertNotSame(range8, range0);
      assertNotSame(range8, range4);
      assertNotSame(range8, range2);
      assertNotSame(range8, range1);
      assertNotSame(range8, range7);
      assertNotSame(range8, range5);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(423.2680451624499, range8.getCentralValue(), 0.01);
      assertEquals(846.5360903248998, range8.getUpperBound(), 0.01);
      assertEquals(846.5360903248998, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range5));
      
      boolean boolean1 = range5.intersects(0.0, 0.0);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range4);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2359.843118, range5.getUpperBound(), 0.01);
      assertEquals(280.05345231747, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2079.7896656825296, range5.getLength(), 0.01);
      assertEquals(1319.948285158735, range5.getCentralValue(), 0.01);
      assertFalse(boolean1);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range7));
      assertTrue(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range3));
      assertFalse(boolean1 == boolean0);
      
      Range range9 = Range.expandToInclude(range3, (-1513.3070276751));
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range9, range8);
      assertNotSame(range9, range4);
      assertNotSame(range9, range5);
      assertNotSame(range9, range2);
      assertNotSame(range9, range6);
      assertNotSame(range9, range0);
      assertNotSame(range9, range3);
      assertNotSame(range9, range7);
      assertNotSame(range9, range1);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2079.7896656825296, range3.getLength(), 0.01);
      assertEquals(280.05345231747, range3.getLowerBound(), 0.01);
      assertEquals(2359.843118, range3.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range3.getCentralValue(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3873.1501456751, range9.getLength(), 0.01);
      assertEquals(2359.843118, range9.getUpperBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(423.2680451624499, range9.getCentralValue(), 0.01);
      assertEquals((-1513.3070276751), range9.getLowerBound(), 0.01);
      assertNotNull(range9);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range3));
      assertTrue(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range1));
      
      double double0 = range5.getCentralValue();
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range4);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2359.843118, range5.getUpperBound(), 0.01);
      assertEquals(280.05345231747, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2079.7896656825296, range5.getLength(), 0.01);
      assertEquals(1319.948285158735, range5.getCentralValue(), 0.01);
      assertEquals(1319.948285158735, double0, 0.01);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range7));
      assertTrue(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range3));
      
      Range range10 = Range.shift(range9, 1.0);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range1);
      assertNotSame(range9, range8);
      assertNotSame(range9, range10);
      assertNotSame(range9, range4);
      assertNotSame(range9, range5);
      assertNotSame(range9, range2);
      assertNotSame(range9, range6);
      assertNotSame(range9, range0);
      assertNotSame(range9, range3);
      assertNotSame(range9, range7);
      assertNotSame(range9, range1);
      assertNotSame(range10, range7);
      assertNotSame(range10, range0);
      assertNotSame(range10, range9);
      assertNotSame(range10, range8);
      assertNotSame(range10, range6);
      assertNotSame(range10, range5);
      assertNotSame(range10, range2);
      assertNotSame(range10, range4);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2079.7896656825296, range3.getLength(), 0.01);
      assertEquals(280.05345231747, range3.getLowerBound(), 0.01);
      assertEquals(2359.843118, range3.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range3.getCentralValue(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3873.1501456751, range9.getLength(), 0.01);
      assertEquals(2359.843118, range9.getUpperBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(423.2680451624499, range9.getCentralValue(), 0.01);
      assertEquals((-1513.3070276751), range9.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals((-1512.3070276751), range10.getLowerBound(), 0.01);
      assertEquals(3873.1501456751, range10.getLength(), 0.01);
      assertEquals(2360.843118, range10.getUpperBound(), 0.01);
      assertEquals(424.2680451624499, range10.getCentralValue(), 0.01);
      assertNotNull(range10);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range3));
      assertTrue(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      
      Range range11 = Range.expandToInclude(range0, 1528.0);
      assertNotSame(range11, range4);
      assertNotSame(range11, range2);
      assertNotSame(range11, range10);
      assertNotSame(range11, range1);
      assertNotSame(range11, range3);
      assertNotSame(range11, range6);
      assertNotSame(range11, range8);
      assertNotSame(range11, range9);
      assertSame(range11, range0);
      assertNotSame(range11, range5);
      assertNotSame(range11, range7);
      assertSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertEquals(2359.843118, range11.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range11.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range11.getLowerBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(2079.7896656825296, range11.getLength(), 0.01);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range11);
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range1));
      assertTrue(range11.equals((Object)range5));
      assertTrue(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range6));
      assertTrue(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range7));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      
      double double1 = range2.constrain(2359.843118);
      assertSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range11);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2359.843118, double1, 0.01);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertNotEquals(double1, double0, 0.01);
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      
      boolean boolean2 = range5.contains(0.0);
      assertSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range11);
      assertNotSame(range5, range4);
      assertNotSame(range5, range10);
      assertNotSame(range5, range11);
      assertNotSame(range5, range8);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2359.843118, range5.getUpperBound(), 0.01);
      assertEquals(280.05345231747, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2079.7896656825296, range5.getLength(), 0.01);
      assertEquals(1319.948285158735, range5.getCentralValue(), 0.01);
      assertFalse(boolean2);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range10));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range7));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range3));
      
      double double2 = range7.getUpperBound();
      assertSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range11);
      assertNotSame(range5, range4);
      assertNotSame(range5, range10);
      assertNotSame(range5, range11);
      assertNotSame(range5, range8);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range7, range11);
      assertNotSame(range7, range1);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range6);
      assertNotSame(range7, range10);
      assertNotSame(range7, range9);
      assertNotSame(range7, range8);
      assertNotSame(range7, range5);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2359.843118, range5.getUpperBound(), 0.01);
      assertEquals(280.05345231747, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2079.7896656825296, range5.getLength(), 0.01);
      assertEquals(1319.948285158735, range5.getCentralValue(), 0.01);
      assertEquals(1896757.058001589, range7.getUpperBound(), 0.01);
      assertEquals(948518.5557269532, range7.getCentralValue(), 0.01);
      assertEquals(1896477.0045492717, range7.getLength(), 0.01);
      assertEquals(280.05345231747, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(1896757.058001589, double2, 0.01);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range10));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range7));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range7.equals((Object)range11));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range5));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean3 = range5.equals(object0);
      assertSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range11);
      assertNotSame(range5, range4);
      assertNotSame(range5, range10);
      assertNotSame(range5, range11);
      assertNotSame(range5, range8);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2359.843118, range5.getUpperBound(), 0.01);
      assertEquals(280.05345231747, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2079.7896656825296, range5.getLength(), 0.01);
      assertEquals(1319.948285158735, range5.getCentralValue(), 0.01);
      assertFalse(boolean3);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range10));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range7));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range3));
      
      Range range12 = Range.scale(range3, 109.58311);
      assertSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range11);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range12);
      assertNotSame(range3, range10);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range4);
      assertNotSame(range3, range8);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range12, range7);
      assertNotSame(range12, range0);
      assertNotSame(range12, range9);
      assertNotSame(range12, range6);
      assertNotSame(range12, range5);
      assertNotSame(range12, range8);
      assertNotSame(range12, range10);
      assertNotSame(range12, range4);
      assertNotSame(range12, range2);
      assertNotSame(range12, range11);
      assertNotSame(range12, range1);
      assertNotSame(range12, range3);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2079.7896656825296, range3.getLength(), 0.01);
      assertEquals(280.05345231747, range3.getLowerBound(), 0.01);
      assertEquals(2359.843118, range3.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range3.getCentralValue(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(144644.03812686104, range12.getCentralValue(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(258598.94798253698, range12.getUpperBound(), 0.01);
      assertEquals(30689.12827118507, range12.getLowerBound(), 0.01);
      assertEquals(227909.8197113519, range12.getLength(), 0.01);
      assertNotNull(range12);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range3));
      
      boolean boolean4 = range7.intersects((-1403.9566), 1616.355);
      assertSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range11);
      assertNotSame(range5, range4);
      assertNotSame(range5, range10);
      assertNotSame(range5, range12);
      assertNotSame(range5, range11);
      assertNotSame(range5, range8);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range7, range11);
      assertNotSame(range7, range1);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range4);
      assertNotSame(range7, range3);
      assertNotSame(range7, range6);
      assertNotSame(range7, range10);
      assertNotSame(range7, range9);
      assertNotSame(range7, range12);
      assertNotSame(range7, range5);
      assertNotSame(range7, range8);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals(2359.843118, range5.getUpperBound(), 0.01);
      assertEquals(280.05345231747, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(2079.7896656825296, range5.getLength(), 0.01);
      assertEquals(1319.948285158735, range5.getCentralValue(), 0.01);
      assertEquals(1896757.058001589, range7.getUpperBound(), 0.01);
      assertEquals(948518.5557269532, range7.getCentralValue(), 0.01);
      assertEquals(1896477.0045492717, range7.getLength(), 0.01);
      assertEquals(280.05345231747, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertTrue(boolean4);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range12));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range10));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range7));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range3));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(range7.equals((Object)range11));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range12));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range8));
      
      String string1 = range6.toString();
      assertSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range8);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range11);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range2);
      assertNotSame(range6, range9);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      assertNotSame(range6, range11);
      assertNotSame(range6, range5);
      assertNotSame(range6, range7);
      assertNotSame(range6, range10);
      assertNotSame(range6, range8);
      assertNotSame(range6, range12);
      assertEquals(2359.843118, range0.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range0.getCentralValue(), 0.01);
      assertEquals(280.05345231747, range0.getLowerBound(), 0.01);
      assertEquals(2079.7896656825296, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2079.7896656825296, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(280.05345231747, range2.getLowerBound(), 0.01);
      assertEquals(2359.843118, range2.getUpperBound(), 0.01);
      assertEquals(1319.948285158735, range2.getCentralValue(), 0.01);
      assertEquals((-401.5991083406), range6.getLowerBound(), 0.01);
      assertEquals(2761.4422263406, range6.getLength(), 0.01);
      assertEquals(2359.843118, range6.getUpperBound(), 0.01);
      assertEquals(979.1220048296999, range6.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals("Range[-401.5991083406,2359.843118]", string1);
      assertNotNull(string1);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range12));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range12));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.scale(range0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.combineIgnoringNaN(range1, range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        Range.scale(range1, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = new Range((-1003.2150554), 2.0);
      assertEquals(1005.2150554, range0.getLength(), 0.01);
      assertEquals((-500.6075277), range0.getCentralValue(), 0.01);
      assertEquals((-1003.2150554), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.scale(range0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1005.2150554, range0.getLength(), 0.01);
      assertEquals((-500.6075277), range0.getCentralValue(), 0.01);
      assertEquals((-1003.2150554), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(-0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range1, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertSame(range1, range2);
      assertNotSame(range1, range0);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(1005.2150554, range0.getLength(), 0.01);
      assertEquals((-500.6075277), range0.getCentralValue(), 0.01);
      assertEquals((-1003.2150554), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(-0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      
      double double0 = range2.getUpperBound();
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertSame(range1, range2);
      assertNotSame(range1, range0);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(1005.2150554, range0.getLength(), 0.01);
      assertEquals((-500.6075277), range0.getCentralValue(), 0.01);
      assertEquals((-1003.2150554), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(-0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = new Range(842.9626641685502, 842.9626641685502);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.scale(range0, 2.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.expand(range1, 5894.3984397, (-1349.5259225531763));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = Range.combine(range1, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = Range.expandToInclude(range2, (-1349.5259225531763));
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals((-1349.5259225531763), range4.getLowerBound(), 0.01);
      assertEquals(168.19970289196203, range4.getCentralValue(), 0.01);
      assertEquals(3035.4512508902767, range4.getLength(), 0.01);
      assertEquals(1685.9253283371004, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      
      Range range5 = Range.expandToInclude(range0, 2.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(840.9626641685502, range5.getLength(), 0.01);
      assertEquals(2.0, range5.getLowerBound(), 0.01);
      assertEquals(422.4813320842751, range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(842.9626641685502, range5.getUpperBound(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range3));
      
      boolean boolean0 = range3.intersects(range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertEquals(840.9626641685502, range5.getLength(), 0.01);
      assertEquals(2.0, range5.getLowerBound(), 0.01);
      assertEquals(422.4813320842751, range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(842.9626641685502, range5.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range3));
      
      String string0 = range1.toString();
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertEquals("Range[1685.9253283371004,1685.9253283371004]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      
      String string1 = range2.toString();
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals("Range[1685.9253283371004,1685.9253283371004]", string1);
      assertNotNull(string1);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range3));
      assertTrue(string1.equals((Object)string0));
      
      Range range6 = Range.expandToInclude(range1, (-1349.5259225531763));
      assertNotSame(range0, range3);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range6, range2);
      assertNotSame(range6, range0);
      assertNotSame(range6, range5);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertEquals((-1349.5259225531763), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(168.19970289196203, range6.getCentralValue(), 0.01);
      assertEquals(3035.4512508902767, range6.getLength(), 0.01);
      assertEquals(1685.9253283371004, range6.getUpperBound(), 0.01);
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      
      Range range7 = Range.shift(range6, 399.42371838169);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range6, range7);
      assertNotSame(range6, range2);
      assertNotSame(range6, range0);
      assertNotSame(range6, range5);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range7, range0);
      assertNotSame(range7, range1);
      assertNotSame(range7, range4);
      assertNotSame(range7, range2);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range5);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertEquals((-1349.5259225531763), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(168.19970289196203, range6.getCentralValue(), 0.01);
      assertEquals(3035.4512508902767, range6.getLength(), 0.01);
      assertEquals(1685.9253283371004, range6.getUpperBound(), 0.01);
      assertEquals(2085.3490467187903, range7.getUpperBound(), 0.01);
      assertEquals(567.623421273652, range7.getCentralValue(), 0.01);
      assertEquals(3035.4512508902767, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-950.1022041714864), range7.getLowerBound(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      
      Range range8 = Range.expandToInclude(range3, 0.0);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range1, range6);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range2);
      assertNotSame(range8, range5);
      assertNotSame(range8, range6);
      assertNotSame(range8, range4);
      assertNotSame(range8, range0);
      assertNotSame(range8, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(842.9626641685502, range8.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range8.getLength(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range1));
      
      Range range9 = Range.scale(range2, 5894.3984397);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range9, range4);
      assertNotSame(range9, range1);
      assertNotSame(range9, range6);
      assertNotSame(range9, range5);
      assertNotSame(range9, range2);
      assertNotSame(range9, range7);
      assertNotSame(range9, range3);
      assertNotSame(range9, range0);
      assertNotSame(range9, range8);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(9937515.624800915, range9.getCentralValue(), 0.01);
      assertEquals(9937515.624800915, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals(9937515.624800915, range9.getLowerBound(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range8));
      
      String string2 = range3.toString();
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertEquals("Range[1685.9253283371004,1685.9253283371004]", string2);
      assertNotNull(string2);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = range2.intersects(range8);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range2);
      assertNotSame(range8, range5);
      assertNotSame(range8, range6);
      assertNotSame(range8, range9);
      assertNotSame(range8, range4);
      assertNotSame(range8, range0);
      assertNotSame(range8, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(842.9626641685502, range8.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range8.getLength(), 0.01);
      assertFalse(boolean1);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range1));
      assertTrue(boolean1 == boolean0);
      
      Range range10 = Range.expand(range2, 5894.3984397, 0.0);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range10);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range10);
      assertNotSame(range2, range7);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range10, range3);
      assertNotSame(range10, range7);
      assertNotSame(range10, range2);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range4);
      assertNotSame(range10, range1);
      assertNotSame(range10, range6);
      assertNotSame(range10, range9);
      assertNotSame(range10, range5);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(1685.9253283371004, range10.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(1685.9253283371004, range10.getCentralValue(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertTrue(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range9));
      assertTrue(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range5));
      
      Range range11 = Range.combine(range8, range10);
      assertNotSame(range11, range10);
      assertNotSame(range11, range0);
      assertNotSame(range11, range2);
      assertNotSame(range11, range3);
      assertNotSame(range11, range5);
      assertNotSame(range11, range8);
      assertNotSame(range11, range6);
      assertNotSame(range11, range7);
      assertNotSame(range11, range9);
      assertNotSame(range11, range4);
      assertNotSame(range11, range1);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range11);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range10);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range0);
      assertNotSame(range2, range10);
      assertNotSame(range2, range7);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range0);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range2);
      assertNotSame(range8, range11);
      assertNotSame(range8, range5);
      assertNotSame(range8, range6);
      assertNotSame(range8, range9);
      assertNotSame(range8, range4);
      assertNotSame(range8, range0);
      assertNotSame(range8, range10);
      assertNotSame(range8, range1);
      assertNotSame(range10, range3);
      assertNotSame(range10, range7);
      assertNotSame(range10, range2);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range4);
      assertNotSame(range10, range1);
      assertNotSame(range10, range6);
      assertNotSame(range10, range9);
      assertNotSame(range10, range11);
      assertNotSame(range10, range5);
      assertEquals(842.9626641685502, range11.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range11.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range11.getLength(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(0.0, range11.getLowerBound(), 0.01);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(842.9626641685502, range8.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range8.getLength(), 0.01);
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(1685.9253283371004, range10.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(1685.9253283371004, range10.getCentralValue(), 0.01);
      assertNotNull(range11);
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range3));
      assertTrue(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range10));
      assertFalse(range8.equals((Object)range1));
      assertTrue(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertTrue(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range9));
      assertTrue(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range5));
      
      Range range12 = Range.expand(range4, 399.42371838169, (-1.0));
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range12);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range11);
      assertNotSame(range12, range10);
      assertNotSame(range12, range0);
      assertNotSame(range12, range2);
      assertNotSame(range12, range3);
      assertNotSame(range12, range5);
      assertNotSame(range12, range11);
      assertNotSame(range12, range8);
      assertNotSame(range12, range9);
      assertNotSame(range12, range6);
      assertNotSame(range12, range7);
      assertNotSame(range12, range4);
      assertNotSame(range12, range1);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range9);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range10);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range7);
      assertNotSame(range2, range6);
      assertNotSame(range2, range1);
      assertNotSame(range2, range12);
      assertNotSame(range4, range9);
      assertNotSame(range4, range12);
      assertNotSame(range4, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range5);
      assertNotSame(range4, range10);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range7);
      assertNotSame(range4, range11);
      assertNotSame(range4, range8);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1213780.7515194996), range12.getLowerBound(), 0.01);
      assertEquals((-607565.1387210264), range12.getCentralValue(), 0.01);
      assertEquals((-1349.5259225531763), range12.getUpperBound(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(1212431.2255969464, range12.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals((-1349.5259225531763), range4.getLowerBound(), 0.01);
      assertEquals(168.19970289196203, range4.getCentralValue(), 0.01);
      assertEquals(3035.4512508902767, range4.getLength(), 0.01);
      assertEquals(1685.9253283371004, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertNotNull(range12);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range7));
      
      Range range13 = Range.expandToInclude(range8, 2.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range11);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range9);
      assertNotSame(range13, range3);
      assertNotSame(range13, range6);
      assertNotSame(range13, range12);
      assertNotSame(range13, range7);
      assertNotSame(range13, range0);
      assertNotSame(range13, range5);
      assertNotSame(range13, range2);
      assertNotSame(range13, range11);
      assertSame(range13, range8);
      assertNotSame(range13, range1);
      assertNotSame(range13, range9);
      assertNotSame(range13, range4);
      assertNotSame(range13, range10);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range8, range2);
      assertNotSame(range8, range11);
      assertNotSame(range8, range5);
      assertNotSame(range8, range12);
      assertSame(range8, range13);
      assertNotSame(range8, range6);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range9);
      assertNotSame(range8, range4);
      assertNotSame(range8, range10);
      assertNotSame(range8, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range13.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range13.getUpperBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(1685.9253283371004, range13.getLength(), 0.01);
      assertEquals(0.0, range13.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(842.9626641685502, range8.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range8.getLength(), 0.01);
      assertNotNull(range13);
      
      Range range14 = Range.combineIgnoringNaN(range2, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range11);
      assertNotSame(range0, range14);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range14);
      assertNotSame(range1, range9);
      assertNotSame(range2, range13);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range3);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range14, range3);
      assertNotSame(range14, range7);
      assertNotSame(range14, range6);
      assertNotSame(range14, range12);
      assertNotSame(range14, range0);
      assertNotSame(range14, range11);
      assertNotSame(range14, range2);
      assertNotSame(range14, range8);
      assertNotSame(range14, range5);
      assertNotSame(range14, range9);
      assertNotSame(range14, range4);
      assertNotSame(range14, range1);
      assertNotSame(range14, range10);
      assertNotSame(range14, range13);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range14);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range8, range2);
      assertNotSame(range8, range11);
      assertNotSame(range8, range5);
      assertNotSame(range8, range12);
      assertSame(range8, range13);
      assertNotSame(range8, range6);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range14);
      assertNotSame(range8, range9);
      assertNotSame(range8, range4);
      assertNotSame(range8, range10);
      assertNotSame(range8, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range14.getLength(), 0.01);
      assertEquals(842.9626641685502, range14.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(842.9626641685502, range8.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range8.getLength(), 0.01);
      assertNotNull(range14);
      
      String string3 = range14.toString();
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range11);
      assertNotSame(range0, range14);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range14);
      assertNotSame(range1, range9);
      assertNotSame(range2, range13);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range3);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range14, range3);
      assertNotSame(range14, range7);
      assertNotSame(range14, range6);
      assertNotSame(range14, range12);
      assertNotSame(range14, range0);
      assertNotSame(range14, range11);
      assertNotSame(range14, range2);
      assertNotSame(range14, range8);
      assertNotSame(range14, range5);
      assertNotSame(range14, range9);
      assertNotSame(range14, range4);
      assertNotSame(range14, range1);
      assertNotSame(range14, range10);
      assertNotSame(range14, range13);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range14);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range8, range2);
      assertNotSame(range8, range11);
      assertNotSame(range8, range5);
      assertNotSame(range8, range12);
      assertSame(range8, range13);
      assertNotSame(range8, range6);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range14);
      assertNotSame(range8, range9);
      assertNotSame(range8, range4);
      assertNotSame(range8, range10);
      assertNotSame(range8, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range14.getLength(), 0.01);
      assertEquals(842.9626641685502, range14.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(842.9626641685502, range8.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range8.getLength(), 0.01);
      assertEquals("Range[0.0,1685.9253283371004]", string3);
      assertNotNull(string3);
      
      Range range15 = Range.combineIgnoringNaN(range1, range14);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range11);
      assertNotSame(range0, range14);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range15);
      assertNotSame(range1, range7);
      assertNotSame(range1, range14);
      assertNotSame(range1, range9);
      assertNotSame(range2, range13);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range3);
      assertNotSame(range2, range10);
      assertNotSame(range2, range15);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range14, range3);
      assertNotSame(range14, range7);
      assertNotSame(range14, range6);
      assertNotSame(range14, range12);
      assertNotSame(range14, range0);
      assertNotSame(range14, range11);
      assertNotSame(range14, range2);
      assertNotSame(range14, range8);
      assertNotSame(range14, range5);
      assertNotSame(range14, range9);
      assertNotSame(range14, range4);
      assertNotSame(range14, range1);
      assertNotSame(range14, range10);
      assertNotSame(range14, range13);
      assertNotSame(range14, range15);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range14);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range15);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range15, range5);
      assertNotSame(range15, range2);
      assertNotSame(range15, range4);
      assertNotSame(range15, range13);
      assertNotSame(range15, range12);
      assertNotSame(range15, range1);
      assertNotSame(range15, range8);
      assertNotSame(range15, range9);
      assertNotSame(range15, range0);
      assertNotSame(range15, range11);
      assertNotSame(range15, range3);
      assertNotSame(range15, range14);
      assertNotSame(range15, range7);
      assertNotSame(range15, range10);
      assertNotSame(range15, range6);
      assertNotSame(range8, range2);
      assertNotSame(range8, range11);
      assertNotSame(range8, range5);
      assertNotSame(range8, range12);
      assertSame(range8, range13);
      assertNotSame(range8, range6);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range14);
      assertNotSame(range8, range15);
      assertNotSame(range8, range9);
      assertNotSame(range8, range4);
      assertNotSame(range8, range10);
      assertNotSame(range8, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range14.getLength(), 0.01);
      assertEquals(842.9626641685502, range14.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(0.0, range15.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range15.getLength(), 0.01);
      assertEquals(842.9626641685502, range15.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range15.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(842.9626641685502, range8.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range8.getLength(), 0.01);
      assertNotNull(range15);
      
      Range range16 = Range.shift(range13, 0.0, false);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range11);
      assertNotSame(range0, range14);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range15);
      assertNotSame(range1, range7);
      assertNotSame(range1, range14);
      assertNotSame(range1, range9);
      assertNotSame(range1, range16);
      assertNotSame(range13, range14);
      assertNotSame(range13, range3);
      assertNotSame(range13, range16);
      assertNotSame(range13, range6);
      assertNotSame(range13, range12);
      assertNotSame(range13, range7);
      assertNotSame(range13, range0);
      assertNotSame(range13, range5);
      assertNotSame(range13, range2);
      assertNotSame(range13, range11);
      assertSame(range13, range8);
      assertNotSame(range13, range15);
      assertNotSame(range13, range1);
      assertNotSame(range13, range9);
      assertNotSame(range13, range4);
      assertNotSame(range13, range10);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range16);
      assertNotSame(range3, range14);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range15);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range16, range11);
      assertNotSame(range16, range6);
      assertNotSame(range16, range14);
      assertNotSame(range16, range0);
      assertNotSame(range16, range12);
      assertNotSame(range16, range7);
      assertNotSame(range16, range8);
      assertNotSame(range16, range2);
      assertNotSame(range16, range3);
      assertNotSame(range16, range1);
      assertNotSame(range16, range4);
      assertNotSame(range16, range10);
      assertNotSame(range16, range5);
      assertNotSame(range16, range9);
      assertNotSame(range16, range15);
      assertNotSame(range16, range13);
      assertNotSame(range8, range2);
      assertNotSame(range8, range11);
      assertNotSame(range8, range5);
      assertNotSame(range8, range12);
      assertSame(range8, range13);
      assertNotSame(range8, range6);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range14);
      assertNotSame(range8, range16);
      assertNotSame(range8, range15);
      assertNotSame(range8, range9);
      assertNotSame(range8, range4);
      assertNotSame(range8, range10);
      assertNotSame(range8, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range13.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range13.getUpperBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(1685.9253283371004, range13.getLength(), 0.01);
      assertEquals(0.0, range13.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range16.getLength(), 0.01);
      assertEquals(842.9626641685502, range16.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range16.getUpperBound(), 0.01);
      assertFalse(range16.isNaNRange());
      assertEquals(0.0, range16.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(842.9626641685502, range8.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range8.getLength(), 0.01);
      assertNotNull(range16);
      
      Range range17 = Range.combine(range1, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range17);
      assertNotSame(range0, range11);
      assertNotSame(range0, range14);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range17);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range15);
      assertNotSame(range1, range7);
      assertNotSame(range1, range14);
      assertNotSame(range1, range9);
      assertNotSame(range1, range16);
      assertNotSame(range17, range10);
      assertNotSame(range17, range14);
      assertNotSame(range17, range15);
      assertNotSame(range17, range7);
      assertNotSame(range17, range6);
      assertNotSame(range17, range0);
      assertNotSame(range17, range1);
      assertNotSame(range17, range5);
      assertNotSame(range17, range12);
      assertNotSame(range17, range8);
      assertNotSame(range17, range9);
      assertNotSame(range17, range4);
      assertNotSame(range17, range13);
      assertNotSame(range17, range2);
      assertNotSame(range17, range11);
      assertNotSame(range17, range16);
      assertNotSame(range17, range3);
      assertNotSame(range6, range11);
      assertNotSame(range6, range2);
      assertNotSame(range6, range13);
      assertNotSame(range6, range15);
      assertNotSame(range6, range8);
      assertNotSame(range6, range0);
      assertNotSame(range6, range5);
      assertNotSame(range6, range12);
      assertNotSame(range6, range16);
      assertNotSame(range6, range9);
      assertNotSame(range6, range7);
      assertNotSame(range6, range17);
      assertNotSame(range6, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range14);
      assertNotSame(range6, range3);
      assertNotSame(range7, range10);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range16);
      assertNotSame(range7, range8);
      assertNotSame(range7, range17);
      assertNotSame(range7, range11);
      assertNotSame(range7, range14);
      assertNotSame(range7, range0);
      assertNotSame(range7, range1);
      assertNotSame(range7, range4);
      assertNotSame(range7, range2);
      assertNotSame(range7, range9);
      assertNotSame(range7, range12);
      assertNotSame(range7, range13);
      assertNotSame(range7, range15);
      assertNotSame(range7, range5);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertEquals(2085.3490467187903, range17.getUpperBound(), 0.01);
      assertFalse(range17.isNaNRange());
      assertEquals(3035.4512508902767, range17.getLength(), 0.01);
      assertEquals((-950.1022041714864), range17.getLowerBound(), 0.01);
      assertEquals(567.623421273652, range17.getCentralValue(), 0.01);
      assertEquals((-1349.5259225531763), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(168.19970289196203, range6.getCentralValue(), 0.01);
      assertEquals(3035.4512508902767, range6.getLength(), 0.01);
      assertEquals(1685.9253283371004, range6.getUpperBound(), 0.01);
      assertEquals(2085.3490467187903, range7.getUpperBound(), 0.01);
      assertEquals(567.623421273652, range7.getCentralValue(), 0.01);
      assertEquals(3035.4512508902767, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-950.1022041714864), range7.getLowerBound(), 0.01);
      assertNotNull(range17);
      
      range14.hashCode();
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range17);
      assertNotSame(range0, range11);
      assertNotSame(range0, range14);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range17);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range15);
      assertNotSame(range1, range7);
      assertNotSame(range1, range14);
      assertNotSame(range1, range9);
      assertNotSame(range1, range16);
      assertNotSame(range2, range13);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range3);
      assertNotSame(range2, range17);
      assertNotSame(range2, range16);
      assertNotSame(range2, range10);
      assertNotSame(range2, range15);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range14, range3);
      assertNotSame(range14, range7);
      assertNotSame(range14, range6);
      assertNotSame(range14, range16);
      assertNotSame(range14, range17);
      assertNotSame(range14, range12);
      assertNotSame(range14, range0);
      assertNotSame(range14, range11);
      assertNotSame(range14, range2);
      assertNotSame(range14, range8);
      assertNotSame(range14, range5);
      assertNotSame(range14, range9);
      assertNotSame(range14, range4);
      assertNotSame(range14, range1);
      assertNotSame(range14, range10);
      assertNotSame(range14, range13);
      assertNotSame(range14, range15);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range16);
      assertNotSame(range3, range17);
      assertNotSame(range3, range14);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range15);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range8, range2);
      assertNotSame(range8, range11);
      assertNotSame(range8, range5);
      assertNotSame(range8, range12);
      assertSame(range8, range13);
      assertNotSame(range8, range6);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range17);
      assertNotSame(range8, range14);
      assertNotSame(range8, range16);
      assertNotSame(range8, range15);
      assertNotSame(range8, range9);
      assertNotSame(range8, range4);
      assertNotSame(range8, range10);
      assertNotSame(range8, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range14.getLength(), 0.01);
      assertEquals(842.9626641685502, range14.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(842.9626641685502, range8.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range8.getLength(), 0.01);
      
      Range range18 = Range.scale(range2, 5894.3984397);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range9);
      assertNotSame(range0, range18);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range17);
      assertNotSame(range0, range11);
      assertNotSame(range0, range14);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range17);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range15);
      assertNotSame(range1, range7);
      assertNotSame(range1, range14);
      assertNotSame(range1, range9);
      assertNotSame(range1, range18);
      assertNotSame(range1, range16);
      assertNotSame(range2, range13);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range3);
      assertNotSame(range2, range17);
      assertNotSame(range2, range16);
      assertNotSame(range2, range10);
      assertNotSame(range2, range15);
      assertNotSame(range2, range9);
      assertNotSame(range2, range18);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range18, range14);
      assertNotSame(range18, range15);
      assertNotSame(range18, range6);
      assertNotSame(range18, range3);
      assertNotSame(range18, range13);
      assertNotSame(range18, range9);
      assertNotSame(range18, range4);
      assertNotSame(range18, range10);
      assertNotSame(range18, range1);
      assertNotSame(range18, range12);
      assertNotSame(range18, range17);
      assertNotSame(range18, range5);
      assertNotSame(range18, range16);
      assertNotSame(range18, range11);
      assertNotSame(range18, range8);
      assertNotSame(range18, range2);
      assertNotSame(range18, range7);
      assertNotSame(range18, range0);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals(9937515.624800915, range18.getUpperBound(), 0.01);
      assertEquals(0.0, range18.getLength(), 0.01);
      assertEquals(9937515.624800915, range18.getCentralValue(), 0.01);
      assertEquals(9937515.624800915, range18.getLowerBound(), 0.01);
      assertFalse(range18.isNaNRange());
      assertNotNull(range18);
      
      boolean boolean2 = range4.equals(range18);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range9);
      assertNotSame(range0, range18);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range17);
      assertNotSame(range0, range11);
      assertNotSame(range0, range14);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range17);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range15);
      assertNotSame(range1, range7);
      assertNotSame(range1, range14);
      assertNotSame(range1, range9);
      assertNotSame(range1, range18);
      assertNotSame(range1, range16);
      assertNotSame(range2, range13);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range3);
      assertNotSame(range2, range17);
      assertNotSame(range2, range16);
      assertNotSame(range2, range10);
      assertNotSame(range2, range15);
      assertNotSame(range2, range9);
      assertNotSame(range2, range18);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range4, range17);
      assertNotSame(range4, range9);
      assertNotSame(range4, range18);
      assertNotSame(range4, range16);
      assertNotSame(range4, range12);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range7);
      assertNotSame(range4, range11);
      assertNotSame(range4, range14);
      assertNotSame(range4, range8);
      assertNotSame(range4, range6);
      assertNotSame(range4, range5);
      assertNotSame(range4, range10);
      assertNotSame(range4, range1);
      assertNotSame(range4, range13);
      assertNotSame(range4, range15);
      assertNotSame(range18, range14);
      assertNotSame(range18, range15);
      assertNotSame(range18, range6);
      assertNotSame(range18, range3);
      assertNotSame(range18, range13);
      assertNotSame(range18, range9);
      assertNotSame(range18, range4);
      assertNotSame(range18, range10);
      assertNotSame(range18, range1);
      assertNotSame(range18, range12);
      assertNotSame(range18, range17);
      assertNotSame(range18, range5);
      assertNotSame(range18, range16);
      assertNotSame(range18, range11);
      assertNotSame(range18, range8);
      assertNotSame(range18, range2);
      assertNotSame(range18, range7);
      assertNotSame(range18, range0);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals((-1349.5259225531763), range4.getLowerBound(), 0.01);
      assertEquals(168.19970289196203, range4.getCentralValue(), 0.01);
      assertEquals(3035.4512508902767, range4.getLength(), 0.01);
      assertEquals(1685.9253283371004, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(9937515.624800915, range18.getUpperBound(), 0.01);
      assertEquals(0.0, range18.getLength(), 0.01);
      assertEquals(9937515.624800915, range18.getCentralValue(), 0.01);
      assertEquals(9937515.624800915, range18.getLowerBound(), 0.01);
      assertFalse(range18.isNaNRange());
      assertFalse(boolean2);
      
      boolean boolean3 = range12.intersects(range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range9);
      assertNotSame(range0, range18);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range17);
      assertNotSame(range0, range11);
      assertNotSame(range0, range14);
      assertNotSame(range12, range0);
      assertNotSame(range12, range2);
      assertNotSame(range12, range16);
      assertNotSame(range12, range17);
      assertNotSame(range12, range5);
      assertNotSame(range12, range13);
      assertNotSame(range12, range9);
      assertNotSame(range12, range18);
      assertNotSame(range12, range4);
      assertNotSame(range12, range1);
      assertNotSame(range12, range10);
      assertNotSame(range12, range15);
      assertNotSame(range12, range3);
      assertNotSame(range12, range14);
      assertNotSame(range12, range11);
      assertNotSame(range12, range8);
      assertNotSame(range12, range6);
      assertNotSame(range12, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range17);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range15);
      assertNotSame(range1, range7);
      assertNotSame(range1, range14);
      assertNotSame(range1, range9);
      assertNotSame(range1, range18);
      assertNotSame(range1, range16);
      assertNotSame(range2, range13);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range2, range11);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range3);
      assertNotSame(range2, range17);
      assertNotSame(range2, range16);
      assertNotSame(range2, range10);
      assertNotSame(range2, range15);
      assertNotSame(range2, range9);
      assertNotSame(range2, range18);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range16);
      assertNotSame(range3, range17);
      assertNotSame(range3, range14);
      assertNotSame(range3, range9);
      assertNotSame(range3, range18);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range12);
      assertNotSame(range3, range15);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range4, range17);
      assertNotSame(range4, range9);
      assertNotSame(range4, range18);
      assertNotSame(range4, range16);
      assertNotSame(range4, range12);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range7);
      assertNotSame(range4, range11);
      assertNotSame(range4, range14);
      assertNotSame(range4, range8);
      assertNotSame(range4, range6);
      assertNotSame(range4, range5);
      assertNotSame(range4, range10);
      assertNotSame(range4, range1);
      assertNotSame(range4, range13);
      assertNotSame(range4, range15);
      assertNotSame(range8, range2);
      assertNotSame(range8, range11);
      assertNotSame(range8, range5);
      assertNotSame(range8, range12);
      assertSame(range8, range13);
      assertNotSame(range8, range6);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range17);
      assertNotSame(range8, range14);
      assertNotSame(range8, range16);
      assertNotSame(range8, range15);
      assertNotSame(range8, range9);
      assertNotSame(range8, range18);
      assertNotSame(range8, range4);
      assertNotSame(range8, range10);
      assertNotSame(range8, range1);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1213780.7515194996), range12.getLowerBound(), 0.01);
      assertEquals((-607565.1387210264), range12.getCentralValue(), 0.01);
      assertEquals((-1349.5259225531763), range12.getUpperBound(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(1212431.2255969464, range12.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1685.9253283371004, range2.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range2.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1685.9253283371004, range3.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range3.getUpperBound(), 0.01);
      assertEquals(1685.9253283371004, range3.getLowerBound(), 0.01);
      assertEquals((-1349.5259225531763), range4.getLowerBound(), 0.01);
      assertEquals(168.19970289196203, range4.getCentralValue(), 0.01);
      assertEquals(3035.4512508902767, range4.getLength(), 0.01);
      assertEquals(1685.9253283371004, range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertFalse(range8.isNaNRange());
      assertEquals(842.9626641685502, range8.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range8.getLength(), 0.01);
      assertFalse(boolean3);
      
      double double0 = range7.getLength();
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range9);
      assertNotSame(range0, range18);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range16);
      assertNotSame(range0, range17);
      assertNotSame(range0, range11);
      assertNotSame(range0, range14);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range17);
      assertNotSame(range1, range11);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range3);
      assertNotSame(range1, range15);
      assertNotSame(range1, range7);
      assertNotSame(range1, range14);
      assertNotSame(range1, range9);
      assertNotSame(range1, range18);
      assertNotSame(range1, range16);
      assertNotSame(range6, range11);
      assertNotSame(range6, range2);
      assertNotSame(range6, range13);
      assertNotSame(range6, range15);
      assertNotSame(range6, range8);
      assertNotSame(range6, range0);
      assertNotSame(range6, range5);
      assertNotSame(range6, range12);
      assertNotSame(range6, range16);
      assertNotSame(range6, range9);
      assertNotSame(range6, range18);
      assertNotSame(range6, range7);
      assertNotSame(range6, range17);
      assertNotSame(range6, range10);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range14);
      assertNotSame(range6, range3);
      assertNotSame(range7, range10);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range16);
      assertNotSame(range7, range8);
      assertNotSame(range7, range17);
      assertNotSame(range7, range11);
      assertNotSame(range7, range14);
      assertNotSame(range7, range0);
      assertNotSame(range7, range1);
      assertNotSame(range7, range4);
      assertNotSame(range7, range2);
      assertNotSame(range7, range9);
      assertNotSame(range7, range18);
      assertNotSame(range7, range12);
      assertNotSame(range7, range13);
      assertNotSame(range7, range15);
      assertNotSame(range7, range5);
      assertEquals(842.9626641685502, range0.getCentralValue(), 0.01);
      assertEquals(842.9626641685502, range0.getUpperBound(), 0.01);
      assertEquals(842.9626641685502, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1685.9253283371004, range1.getLowerBound(), 0.01);
      assertEquals(1685.9253283371004, range1.getCentralValue(), 0.01);
      assertEquals(1685.9253283371004, range1.getUpperBound(), 0.01);
      assertEquals((-1349.5259225531763), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(168.19970289196203, range6.getCentralValue(), 0.01);
      assertEquals(3035.4512508902767, range6.getLength(), 0.01);
      assertEquals(1685.9253283371004, range6.getUpperBound(), 0.01);
      assertEquals(2085.3490467187903, range7.getUpperBound(), 0.01);
      assertEquals(567.623421273652, range7.getCentralValue(), 0.01);
      assertEquals(3035.4512508902767, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-950.1022041714864), range7.getLowerBound(), 0.01);
      assertEquals(3035.4512508902767, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = null;
      double double0 = 366.594496;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 366.594496, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = null;
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        Range.scale((Range) null, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = null;
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = 1028.54216578784;
      double double1 = 0.0;
      Range range0 = null;
      try {
        range0 = new Range(1028.54216578784, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1028.54216578784) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = null;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 1.0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.scale(range0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = Range.shift(range1, 0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      
      Range range4 = Range.combine(range3, range0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(1.0, range4.getCentralValue(), 0.01);
      assertEquals(1.0, range4.getUpperBound(), 0.01);
      assertEquals(1.0, range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      
      Range range5 = Range.combine(range3, range3);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range4));
      
      Range range6 = Range.shift(range5, 0.0, true);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1.0, range6.getCentralValue(), 0.01);
      assertEquals(1.0, range6.getUpperBound(), 0.01);
      assertEquals(1.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range3));
      
      double double0 = range0.getLength();
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = null;
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = 1.0;
      double double1 = 0.0;
      Range range0 = null;
      try {
        range0 = new Range(1.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.0) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = new Range((-544.6339359), 1.0);
      assertEquals((-271.81696795), range0.getCentralValue(), 0.01);
      assertEquals(545.6339359, range0.getLength(), 0.01);
      assertEquals((-544.6339359), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals((-271.81696795), range0.getCentralValue(), 0.01);
      assertEquals(545.6339359, range0.getLength(), 0.01);
      assertEquals((-544.6339359), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-271.81696795), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-544.6339359), range1.getLowerBound(), 0.01);
      assertEquals(545.6339359, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = Range.shift(range1, 0.0, true);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals((-271.81696795), range0.getCentralValue(), 0.01);
      assertEquals(545.6339359, range0.getLength(), 0.01);
      assertEquals((-544.6339359), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-271.81696795), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-544.6339359), range1.getLowerBound(), 0.01);
      assertEquals(545.6339359, range1.getLength(), 0.01);
      assertEquals((-271.81696795), range2.getCentralValue(), 0.01);
      assertEquals((-544.6339359), range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(545.6339359, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.shift(range2, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals((-271.81696795), range0.getCentralValue(), 0.01);
      assertEquals(545.6339359, range0.getLength(), 0.01);
      assertEquals((-544.6339359), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-271.81696795), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-544.6339359), range1.getLowerBound(), 0.01);
      assertEquals(545.6339359, range1.getLength(), 0.01);
      assertEquals((-271.81696795), range2.getCentralValue(), 0.01);
      assertEquals((-544.6339359), range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(545.6339359, range2.getLength(), 0.01);
      assertEquals(545.6339359, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-271.81696795), range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals((-544.6339359), range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      
      range3.hashCode();
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals((-271.81696795), range0.getCentralValue(), 0.01);
      assertEquals(545.6339359, range0.getLength(), 0.01);
      assertEquals((-544.6339359), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-271.81696795), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-544.6339359), range1.getLowerBound(), 0.01);
      assertEquals(545.6339359, range1.getLength(), 0.01);
      assertEquals((-271.81696795), range2.getCentralValue(), 0.01);
      assertEquals((-544.6339359), range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(545.6339359, range2.getLength(), 0.01);
      assertEquals(545.6339359, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-271.81696795), range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals((-544.6339359), range3.getLowerBound(), 0.01);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = 1132.0;
      double double1 = (-1797.750913);
      Range range0 = null;
      try {
        range0 = new Range(1132.0, (-1797.750913));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1132.0) <= upper (-1797.750913).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.scale(range0, 1.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range1, 0.0, true);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      range2.hashCode();
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.combine((Range) null, (Range) null);
      assertNull(range3);
      
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(1226.8669535710412, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1226.8669535710412) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1200.0);
      Range range0 = null;
      try {
        range0 = new Range(0.0, (-1200.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1200.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 1.0, 1.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.combineIgnoringNaN(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.shift(range1, 1.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      
      Range range4 = Range.combineIgnoringNaN(range1, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getUpperBound(), 0.01);
      assertEquals(1.0, range4.getLowerBound(), 0.01);
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals(1.5, range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      
      Range range5 = Range.shift(range3, 1.0, true);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(3.0, range5.getCentralValue(), 0.01);
      assertEquals(3.0, range5.getUpperBound(), 0.01);
      assertEquals(3.0, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      
      double double0 = (-1229.0570484269233);
      Range range6 = Range.combine(range1, range0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range4);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(1.0, range6.getCentralValue(), 0.01);
      assertEquals(1.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range5));
      
      Range range7 = Range.shift(range4, 1.0);
      assertNotSame(range0, range7);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range7);
      assertNotSame(range7, range1);
      assertNotSame(range7, range3);
      assertNotSame(range7, range4);
      assertNotSame(range7, range6);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getUpperBound(), 0.01);
      assertEquals(1.0, range4.getLowerBound(), 0.01);
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals(1.5, range4.getCentralValue(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(2.0, range7.getLowerBound(), 0.01);
      assertEquals(2.5, range7.getCentralValue(), 0.01);
      assertEquals(3.0, range7.getUpperBound(), 0.01);
      assertEquals(1.0, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range2));
      
      Range range8 = Range.expandToInclude(range1, (-1229.0570484269233));
      assertNotSame(range0, range7);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range6);
      assertNotSame(range8, range1);
      assertNotSame(range8, range5);
      assertNotSame(range8, range3);
      assertNotSame(range8, range2);
      assertNotSame(range8, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals((-614.0285242134617), range8.getCentralValue(), 0.01);
      assertEquals((-1229.0570484269233), range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(1.0, range8.getUpperBound(), 0.01);
      assertEquals(1230.0570484269233, range8.getLength(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range4));
      
      Range range9 = Range.combine(range3, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range9);
      assertNotSame(range8, range6);
      assertNotSame(range8, range1);
      assertNotSame(range8, range5);
      assertNotSame(range8, range3);
      assertNotSame(range8, range2);
      assertNotSame(range8, range4);
      assertNotSame(range9, range0);
      assertNotSame(range9, range6);
      assertNotSame(range9, range2);
      assertNotSame(range9, range7);
      assertNotSame(range9, range8);
      assertNotSame(range9, range1);
      assertNotSame(range9, range3);
      assertNotSame(range9, range5);
      assertNotSame(range9, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-614.0285242134617), range8.getCentralValue(), 0.01);
      assertEquals((-1229.0570484269233), range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(1.0, range8.getUpperBound(), 0.01);
      assertEquals(1230.0570484269233, range8.getLength(), 0.01);
      assertEquals((-1229.0570484269233), range9.getLowerBound(), 0.01);
      assertEquals(2.0, range9.getUpperBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals((-613.5285242134617), range9.getCentralValue(), 0.01);
      assertEquals(1231.0570484269233, range9.getLength(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range4));
      
      Range range10 = Range.combine(range4, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range10);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range10);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range10);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range7);
      assertNotSame(range4, range8);
      assertNotSame(range4, range9);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range9);
      assertNotSame(range8, range6);
      assertNotSame(range8, range1);
      assertNotSame(range8, range5);
      assertNotSame(range8, range3);
      assertNotSame(range8, range2);
      assertNotSame(range8, range10);
      assertNotSame(range8, range4);
      assertNotSame(range9, range0);
      assertNotSame(range9, range6);
      assertNotSame(range9, range2);
      assertNotSame(range9, range7);
      assertNotSame(range9, range8);
      assertNotSame(range9, range1);
      assertNotSame(range9, range3);
      assertNotSame(range9, range5);
      assertNotSame(range9, range10);
      assertNotSame(range9, range4);
      assertNotSame(range10, range7);
      assertNotSame(range10, range9);
      assertNotSame(range10, range1);
      assertNotSame(range10, range0);
      assertNotSame(range10, range8);
      assertNotSame(range10, range6);
      assertNotSame(range10, range5);
      assertNotSame(range10, range3);
      assertNotSame(range10, range2);
      assertNotSame(range10, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getUpperBound(), 0.01);
      assertEquals(1.0, range4.getLowerBound(), 0.01);
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals(1.5, range4.getCentralValue(), 0.01);
      assertEquals((-614.0285242134617), range8.getCentralValue(), 0.01);
      assertEquals((-1229.0570484269233), range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(1.0, range8.getUpperBound(), 0.01);
      assertEquals(1230.0570484269233, range8.getLength(), 0.01);
      assertEquals((-1229.0570484269233), range9.getLowerBound(), 0.01);
      assertEquals(2.0, range9.getUpperBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals((-613.5285242134617), range9.getCentralValue(), 0.01);
      assertEquals(1231.0570484269233, range9.getLength(), 0.01);
      assertEquals((-1229.0570484269233), range10.getLowerBound(), 0.01);
      assertEquals((-613.5285242134617), range10.getCentralValue(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(2.0, range10.getUpperBound(), 0.01);
      assertEquals(1231.0570484269233, range10.getLength(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range2));
      assertTrue(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range4));
      
      double double1 = 3368.138608;
      Range range11 = Range.scale(range3, 3368.138608);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range10);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range10);
      assertNotSame(range3, range5);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range1);
      assertNotSame(range3, range11);
      assertNotSame(range3, range0);
      assertNotSame(range11, range10);
      assertNotSame(range11, range2);
      assertNotSame(range11, range5);
      assertNotSame(range11, range4);
      assertNotSame(range11, range1);
      assertNotSame(range11, range6);
      assertNotSame(range11, range7);
      assertNotSame(range11, range9);
      assertNotSame(range11, range0);
      assertNotSame(range11, range8);
      assertNotSame(range11, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(6736.277216, range11.getCentralValue(), 0.01);
      assertEquals(6736.277216, range11.getUpperBound(), 0.01);
      assertEquals(6736.277216, range11.getLowerBound(), 0.01);
      assertEquals(0.0, range11.getLength(), 0.01);
      assertFalse(range11.isNaNRange());
      assertNotNull(range11);
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range3));
      
      Range range12 = Range.expandToInclude(range6, 3368.138608);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range12);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range10);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range12);
      assertNotSame(range1, range0);
      assertNotSame(range1, range11);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range6, range10);
      assertNotSame(range6, range1);
      assertNotSame(range6, range4);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range11);
      assertNotSame(range6, range7);
      assertNotSame(range6, range8);
      assertNotSame(range6, range9);
      assertNotSame(range6, range5);
      assertNotSame(range6, range12);
      assertNotSame(range6, range2);
      assertNotSame(range12, range5);
      assertNotSame(range12, range4);
      assertNotSame(range12, range1);
      assertNotSame(range12, range7);
      assertNotSame(range12, range6);
      assertNotSame(range12, range9);
      assertNotSame(range12, range0);
      assertNotSame(range12, range8);
      assertNotSame(range12, range3);
      assertNotSame(range12, range10);
      assertNotSame(range12, range11);
      assertNotSame(range12, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(1.0, range6.getCentralValue(), 0.01);
      assertEquals(1.0, range6.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1684.569304, range12.getCentralValue(), 0.01);
      assertEquals(3368.138608, range12.getUpperBound(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(3367.138608, range12.getLength(), 0.01);
      assertEquals(1.0, range12.getLowerBound(), 0.01);
      assertNotNull(range12);
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range6.equals((Object)range10));
      assertTrue(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range2));
      
      Range range13 = Range.expand(range1, (-2890.0), (-2890.0));
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range12);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range13);
      assertNotSame(range1, range11);
      assertNotSame(range1, range10);
      assertNotSame(range1, range5);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range13, range6);
      assertNotSame(range13, range8);
      assertNotSame(range13, range9);
      assertNotSame(range13, range1);
      assertNotSame(range13, range12);
      assertNotSame(range13, range10);
      assertNotSame(range13, range2);
      assertNotSame(range13, range0);
      assertNotSame(range13, range7);
      assertNotSame(range13, range4);
      assertNotSame(range13, range3);
      assertNotSame(range13, range5);
      assertNotSame(range13, range11);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(1.0, range13.getCentralValue(), 0.01);
      assertEquals(1.0, range13.getUpperBound(), 0.01);
      assertEquals(1.0, range13.getLowerBound(), 0.01);
      assertNotNull(range13);
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range9));
      assertTrue(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range12));
      assertTrue(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range7));
      assertTrue(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range11));
      
      Range range14 = Range.combine(range10, range13);
      assertNotSame(range14, range0);
      assertNotSame(range14, range12);
      assertNotSame(range14, range7);
      assertNotSame(range14, range1);
      assertNotSame(range14, range2);
      assertNotSame(range14, range10);
      assertNotSame(range14, range13);
      assertNotSame(range14, range11);
      assertNotSame(range14, range8);
      assertNotSame(range14, range6);
      assertNotSame(range14, range9);
      assertNotSame(range14, range4);
      assertNotSame(range14, range3);
      assertNotSame(range14, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range6);
      assertNotSame(range0, range14);
      assertNotSame(range0, range10);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range12);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range13);
      assertNotSame(range1, range11);
      assertNotSame(range1, range10);
      assertNotSame(range1, range14);
      assertNotSame(range1, range5);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range3, range5);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range12);
      assertNotSame(range3, range14);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range10);
      assertNotSame(range3, range2);
      assertNotSame(range3, range7);
      assertNotSame(range3, range1);
      assertNotSame(range3, range11);
      assertNotSame(range4, range12);
      assertNotSame(range4, range5);
      assertNotSame(range4, range13);
      assertNotSame(range4, range14);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range7);
      assertNotSame(range4, range8);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range11);
      assertNotSame(range4, range10);
      assertNotSame(range4, range9);
      assertNotSame(range8, range11);
      assertNotSame(range8, range14);
      assertNotSame(range8, range9);
      assertNotSame(range8, range6);
      assertNotSame(range8, range1);
      assertNotSame(range8, range5);
      assertNotSame(range8, range3);
      assertNotSame(range8, range4);
      assertNotSame(range8, range12);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range13);
      assertNotSame(range8, range2);
      assertNotSame(range8, range10);
      assertNotSame(range9, range0);
      assertNotSame(range9, range12);
      assertNotSame(range9, range2);
      assertNotSame(range9, range7);
      assertNotSame(range9, range3);
      assertNotSame(range9, range5);
      assertNotSame(range9, range4);
      assertNotSame(range9, range11);
      assertNotSame(range9, range6);
      assertNotSame(range9, range8);
      assertNotSame(range9, range14);
      assertNotSame(range9, range1);
      assertNotSame(range9, range13);
      assertNotSame(range9, range10);
      assertNotSame(range10, range12);
      assertNotSame(range10, range7);
      assertNotSame(range10, range0);
      assertNotSame(range10, range13);
      assertNotSame(range10, range2);
      assertNotSame(range10, range14);
      assertNotSame(range10, range9);
      assertNotSame(range10, range1);
      assertNotSame(range10, range8);
      assertNotSame(range10, range6);
      assertNotSame(range10, range5);
      assertNotSame(range10, range3);
      assertNotSame(range10, range4);
      assertNotSame(range10, range11);
      assertNotSame(range13, range14);
      assertNotSame(range13, range6);
      assertNotSame(range13, range8);
      assertNotSame(range13, range9);
      assertNotSame(range13, range1);
      assertNotSame(range13, range12);
      assertNotSame(range13, range10);
      assertNotSame(range13, range2);
      assertNotSame(range13, range0);
      assertNotSame(range13, range7);
      assertNotSame(range13, range4);
      assertNotSame(range13, range3);
      assertNotSame(range13, range5);
      assertNotSame(range13, range11);
      assertEquals((-1229.0570484269233), range14.getLowerBound(), 0.01);
      assertEquals(1231.0570484269233, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(2.0, range14.getUpperBound(), 0.01);
      assertEquals((-613.5285242134617), range14.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getUpperBound(), 0.01);
      assertEquals(1.0, range4.getLowerBound(), 0.01);
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals(1.5, range4.getCentralValue(), 0.01);
      assertEquals((-614.0285242134617), range8.getCentralValue(), 0.01);
      assertEquals((-1229.0570484269233), range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(1.0, range8.getUpperBound(), 0.01);
      assertEquals(1230.0570484269233, range8.getLength(), 0.01);
      assertEquals((-1229.0570484269233), range9.getLowerBound(), 0.01);
      assertEquals(2.0, range9.getUpperBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals((-613.5285242134617), range9.getCentralValue(), 0.01);
      assertEquals(1231.0570484269233, range9.getLength(), 0.01);
      assertEquals((-1229.0570484269233), range10.getLowerBound(), 0.01);
      assertEquals((-613.5285242134617), range10.getCentralValue(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(2.0, range10.getUpperBound(), 0.01);
      assertEquals(1231.0570484269233, range10.getLength(), 0.01);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(1.0, range13.getCentralValue(), 0.01);
      assertEquals(1.0, range13.getUpperBound(), 0.01);
      assertEquals(1.0, range13.getLowerBound(), 0.01);
      assertNotNull(range14);
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range11));
      assertTrue(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range3));
      assertTrue(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range5));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range13));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range13));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range13));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range8.equals((Object)range11));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range12));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range13));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range10));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range12));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range11));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range1));
      assertTrue(range9.equals((Object)range10));
      assertFalse(range9.equals((Object)range13));
      assertFalse(range10.equals((Object)range12));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range13));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range11));
      assertTrue(range10.equals((Object)range9));
      assertTrue(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range9));
      assertTrue(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range12));
      assertTrue(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range7));
      assertTrue(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range11));
      
      // Undeclared exception!
      try { 
        Range.scale(range5, (-1229.0570484269233));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.scale(range0, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.expand(range1, 0.0, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      
      boolean boolean0 = range0.equals((Object) null);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(boolean0);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      
      Range range4 = Range.expandToInclude(range0, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      
      Range range5 = Range.shift(range4, 0.0, false);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range5, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range1));
      
      boolean boolean1 = range1.isNaNRange();
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(boolean1);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(boolean1 == boolean0);
      
      range4.hashCode();
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range3));
      
      boolean boolean2 = range0.intersects(range2);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(boolean2);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range5));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      double double0 = range4.getLowerBound();
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range3));
      
      Range range6 = Range.expand(range5, 1541.690304296581, 1.0);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range4, range6);
      assertSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range3);
      assertNotSame(range6, range5);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getLength(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range0));
      
      double double1 = range4.constrain(0.0);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range4, range6);
      assertSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range3));
      assertEquals(double1, double0, 0.01);
      
      double double2 = range3.constrain(0.0);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range5);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range6));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      boolean boolean3 = range3.intersects(range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range5);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range4, range6);
      assertSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(boolean3);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range3));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      Range range7 = Range.shift(range1, 0.0, false);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range4);
      assertNotSame(range7, range1);
      assertNotSame(range7, range3);
      assertNotSame(range7, range5);
      assertNotSame(range7, range6);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range7.equals((Object)range3));
      assertTrue(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      assertTrue(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range4));
      assertTrue(range7.equals((Object)range0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = range4.equals(object0);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range4, range6);
      assertSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range7);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertFalse(boolean4);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range3));
      
      Range range8 = Range.shift(range1, 0.0, false);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range8);
      assertNotSame(range1, range0);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertNotSame(range8, range4);
      assertNotSame(range8, range1);
      assertNotSame(range8, range2);
      assertNotSame(range8, range3);
      assertNotSame(range8, range6);
      assertNotSame(range8, range7);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertEquals(0.0, range8.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range7));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range8.equals((Object)range5));
      assertTrue(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range1));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range7));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.combineIgnoringNaN((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = new Range((-485.8362002814096), (-485.8362002814096));
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-485.8362002814096), range0.getLowerBound(), 0.01);
      assertEquals((-485.8362002814096), range0.getCentralValue(), 0.01);
      assertEquals((-485.8362002814096), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, 2.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-485.8362002814096), range0.getLowerBound(), 0.01);
      assertEquals((-485.8362002814096), range0.getCentralValue(), 0.01);
      assertEquals((-485.8362002814096), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-483.8362002814096), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-483.8362002814096), range1.getCentralValue(), 0.01);
      assertEquals((-483.8362002814096), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        Range.scale(range1, (-603.3943109219));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      double double0 = range0.getCentralValue();
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.0), double0, 0.01);
      
      boolean boolean0 = range0.contains(0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = new Range(804.3, 804.3);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-176.912402775));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-176.912402775), range1.getLowerBound(), 0.01);
      assertEquals(981.212402775, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(313.69379861249996, range1.getCentralValue(), 0.01);
      assertEquals(804.3, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range1, 804.3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertSame(range2, range1);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-176.912402775), range1.getLowerBound(), 0.01);
      assertEquals(981.212402775, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(313.69379861249996, range1.getCentralValue(), 0.01);
      assertEquals(804.3, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(981.212402775, range2.getLength(), 0.01);
      assertEquals((-176.912402775), range2.getLowerBound(), 0.01);
      assertEquals(804.3, range2.getUpperBound(), 0.01);
      assertEquals(313.69379861249996, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = Range.shift(range2, 1.0, true);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-176.912402775), range1.getLowerBound(), 0.01);
      assertEquals(981.212402775, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(313.69379861249996, range1.getCentralValue(), 0.01);
      assertEquals(804.3, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(981.212402775, range2.getLength(), 0.01);
      assertEquals((-176.912402775), range2.getLowerBound(), 0.01);
      assertEquals(804.3, range2.getUpperBound(), 0.01);
      assertEquals(313.69379861249996, range2.getCentralValue(), 0.01);
      assertEquals(314.69379861249996, range3.getCentralValue(), 0.01);
      assertEquals(981.212402775, range3.getLength(), 0.01);
      assertEquals((-175.912402775), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(805.3, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      
      Range range4 = Range.expand(range1, 737.5673707105734, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-176.912402775), range1.getLowerBound(), 0.01);
      assertEquals(981.212402775, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(313.69379861249996, range1.getCentralValue(), 0.01);
      assertEquals(804.3, range1.getUpperBound(), 0.01);
      assertEquals(804.3, range4.getUpperBound(), 0.01);
      assertEquals((-361541.43221306795), range4.getCentralValue(), 0.01);
      assertEquals(724691.464426136, range4.getLength(), 0.01);
      assertEquals((-723887.164426136), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      
      Range range5 = Range.combineIgnoringNaN(range0, range0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(804.3, range5.getCentralValue(), 0.01);
      assertEquals(804.3, range5.getUpperBound(), 0.01);
      assertEquals(804.3, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      
      Range range6 = Range.combineIgnoringNaN(range0, range0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range6, range4);
      assertNotSame(range6, range0);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(804.3, range6.getCentralValue(), 0.01);
      assertEquals(804.3, range6.getUpperBound(), 0.01);
      assertEquals(804.3, range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range1));
      
      Range range7 = Range.combineIgnoringNaN(range2, range0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertSame(range1, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range7, range4);
      assertNotSame(range7, range6);
      assertNotSame(range7, range5);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range1);
      assertNotSame(range7, range3);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-176.912402775), range1.getLowerBound(), 0.01);
      assertEquals(981.212402775, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(313.69379861249996, range1.getCentralValue(), 0.01);
      assertEquals(804.3, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(981.212402775, range2.getLength(), 0.01);
      assertEquals((-176.912402775), range2.getLowerBound(), 0.01);
      assertEquals(804.3, range2.getUpperBound(), 0.01);
      assertEquals(313.69379861249996, range2.getCentralValue(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(981.212402775, range7.getLength(), 0.01);
      assertEquals((-176.912402775), range7.getLowerBound(), 0.01);
      assertEquals(804.3, range7.getUpperBound(), 0.01);
      assertEquals(313.69379861249996, range7.getCentralValue(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range0));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range3));
      
      String string0 = range0.toString();
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Range[804.3,804.3]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      
      Range range8 = Range.combineIgnoringNaN(range5, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range5, range2);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range8);
      assertNotSame(range6, range8);
      assertNotSame(range6, range4);
      assertNotSame(range6, range0);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range2);
      assertNotSame(range6, range7);
      assertNotSame(range6, range1);
      assertNotSame(range8, range3);
      assertNotSame(range8, range6);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range4);
      assertNotSame(range8, range2);
      assertNotSame(range8, range1);
      assertNotSame(range8, range5);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(804.3, range5.getCentralValue(), 0.01);
      assertEquals(804.3, range5.getUpperBound(), 0.01);
      assertEquals(804.3, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(804.3, range6.getCentralValue(), 0.01);
      assertEquals(804.3, range6.getUpperBound(), 0.01);
      assertEquals(804.3, range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(804.3, range8.getCentralValue(), 0.01);
      assertEquals(804.3, range8.getUpperBound(), 0.01);
      assertEquals(804.3, range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(0.0, range8.getLength(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range1));
      assertTrue(range8.equals((Object)range6));
      
      Range range9 = Range.shift(range5, 804.3, true);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range5, range2);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range9);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range8);
      assertNotSame(range9, range5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range8);
      assertNotSame(range9, range6);
      assertNotSame(range9, range3);
      assertNotSame(range9, range2);
      assertNotSame(range9, range4);
      assertNotSame(range9, range7);
      assertNotSame(range9, range0);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(804.3, range5.getCentralValue(), 0.01);
      assertEquals(804.3, range5.getUpperBound(), 0.01);
      assertEquals(804.3, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1608.6, range9.getCentralValue(), 0.01);
      assertEquals(1608.6, range9.getUpperBound(), 0.01);
      assertEquals(1608.6, range9.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range8));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range0));
      
      double double0 = range0.getLowerBound();
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(804.3, double0, 0.01);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      
      double double1 = range9.getLength();
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range5, range2);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range9);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range5, range8);
      assertNotSame(range9, range5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range8);
      assertNotSame(range9, range6);
      assertNotSame(range9, range3);
      assertNotSame(range9, range2);
      assertNotSame(range9, range4);
      assertNotSame(range9, range7);
      assertNotSame(range9, range0);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(804.3, range5.getCentralValue(), 0.01);
      assertEquals(804.3, range5.getUpperBound(), 0.01);
      assertEquals(804.3, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1608.6, range9.getCentralValue(), 0.01);
      assertEquals(1608.6, range9.getUpperBound(), 0.01);
      assertEquals(1608.6, range9.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range8));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range0));
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = range4.getLength();
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertSame(range1, range2);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range4, range7);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range9);
      assertNotSame(range4, range8);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-176.912402775), range1.getLowerBound(), 0.01);
      assertEquals(981.212402775, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(313.69379861249996, range1.getCentralValue(), 0.01);
      assertEquals(804.3, range1.getUpperBound(), 0.01);
      assertEquals(804.3, range4.getUpperBound(), 0.01);
      assertEquals((-361541.43221306795), range4.getCentralValue(), 0.01);
      assertEquals(724691.464426136, range4.getLength(), 0.01);
      assertEquals((-723887.164426136), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(724691.464426136, double2, 0.01);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      Range range10 = Range.combineIgnoringNaN(range9, range2);
      assertNotSame(range0, range2);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertSame(range1, range2);
      assertNotSame(range1, range9);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range8);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range1, range7);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range5, range2);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range9);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range10);
      assertNotSame(range5, range6);
      assertNotSame(range5, range8);
      assertNotSame(range9, range5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range8);
      assertNotSame(range9, range10);
      assertNotSame(range9, range6);
      assertNotSame(range9, range3);
      assertNotSame(range9, range2);
      assertNotSame(range9, range4);
      assertNotSame(range9, range7);
      assertNotSame(range9, range0);
      assertNotSame(range10, range2);
      assertNotSame(range10, range9);
      assertNotSame(range10, range0);
      assertNotSame(range10, range4);
      assertNotSame(range10, range6);
      assertNotSame(range10, range8);
      assertNotSame(range10, range1);
      assertNotSame(range10, range5);
      assertNotSame(range10, range7);
      assertNotSame(range10, range3);
      assertEquals(804.3, range0.getLowerBound(), 0.01);
      assertEquals(804.3, range0.getCentralValue(), 0.01);
      assertEquals(804.3, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-176.912402775), range1.getLowerBound(), 0.01);
      assertEquals(981.212402775, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(313.69379861249996, range1.getCentralValue(), 0.01);
      assertEquals(804.3, range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(981.212402775, range2.getLength(), 0.01);
      assertEquals((-176.912402775), range2.getLowerBound(), 0.01);
      assertEquals(804.3, range2.getUpperBound(), 0.01);
      assertEquals(313.69379861249996, range2.getCentralValue(), 0.01);
      assertEquals(804.3, range5.getCentralValue(), 0.01);
      assertEquals(804.3, range5.getUpperBound(), 0.01);
      assertEquals(804.3, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1608.6, range9.getCentralValue(), 0.01);
      assertEquals(1608.6, range9.getUpperBound(), 0.01);
      assertEquals(1608.6, range9.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals(1608.6, range10.getUpperBound(), 0.01);
      assertEquals(1785.5124027749998, range10.getLength(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(715.8437986125, range10.getCentralValue(), 0.01);
      assertEquals((-176.912402775), range10.getLowerBound(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range8));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range3));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (-1758.47331));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1759.47331), range1.getLowerBound(), 0.01);
      assertEquals((-1759.47331), range1.getCentralValue(), 0.01);
      assertEquals((-1759.47331), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      double double0 = 0.0;
      String string0 = range2.toString();
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("Range[-1.0,-1.0]", string0);
      assertNotNull(string0);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.expand(range2, 2084.2394778396906, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      
      Range range4 = Range.scale(range2, 3952.40783475);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-3952.40783475), range4.getCentralValue(), 0.01);
      assertEquals((-3952.40783475), range4.getUpperBound(), 0.01);
      assertEquals((-3952.40783475), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      
      Range range5 = Range.expand(range3, 0.0, 0.0);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-1.0), range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1.0), range5.getCentralValue(), 0.01);
      assertEquals((-1.0), range5.getUpperBound(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      
      Range range6 = Range.combine(range2, range5);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range6);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertNotSame(range6, range4);
      assertNotSame(range6, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-1.0), range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1.0), range5.getCentralValue(), 0.01);
      assertEquals((-1.0), range5.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals((-1.0), range6.getCentralValue(), 0.01);
      assertEquals((-1.0), range6.getUpperBound(), 0.01);
      assertEquals((-1.0), range6.getLowerBound(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range3));
      
      Range range7 = Range.scale(range1, 411.9035856);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range4);
      assertNotSame(range7, range6);
      assertNotSame(range7, range1);
      assertNotSame(range7, range3);
      assertNotSame(range7, range5);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1759.47331), range1.getLowerBound(), 0.01);
      assertEquals((-1759.47331), range1.getCentralValue(), 0.01);
      assertEquals((-1759.47331), range1.getUpperBound(), 0.01);
      assertEquals((-724733.3651565004), range7.getCentralValue(), 0.01);
      assertEquals((-724733.3651565004), range7.getLowerBound(), 0.01);
      assertEquals((-724733.3651565004), range7.getUpperBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      
      Range range8 = Range.combineIgnoringNaN(range3, range0);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range8);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range8, range5);
      assertNotSame(range8, range0);
      assertNotSame(range8, range2);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertNotSame(range8, range4);
      assertNotSame(range8, range1);
      assertNotSame(range8, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals((-1.0), range8.getCentralValue(), 0.01);
      assertEquals((-1.0), range8.getUpperBound(), 0.01);
      assertEquals((-1.0), range8.getLowerBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range1));
      
      Range range9 = Range.shift(range8, (-1505.9928), false);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range8, range5);
      assertNotSame(range8, range0);
      assertNotSame(range8, range2);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertNotSame(range8, range9);
      assertNotSame(range8, range4);
      assertNotSame(range8, range1);
      assertNotSame(range8, range6);
      assertNotSame(range9, range0);
      assertNotSame(range9, range8);
      assertNotSame(range9, range5);
      assertNotSame(range9, range7);
      assertNotSame(range9, range3);
      assertNotSame(range9, range2);
      assertNotSame(range9, range4);
      assertNotSame(range9, range1);
      assertNotSame(range9, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals((-1.0), range8.getCentralValue(), 0.01);
      assertEquals((-1.0), range8.getUpperBound(), 0.01);
      assertEquals((-1.0), range8.getLowerBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals((-1506.9928), range9.getCentralValue(), 0.01);
      assertEquals((-1506.9928), range9.getUpperBound(), 0.01);
      assertEquals((-1506.9928), range9.getLowerBound(), 0.01);
      assertNotNull(range9);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range8.equals((Object)range2));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range6));
      
      Range range10 = Range.combineIgnoringNaN(range5, range3);
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range10);
      assertNotSame(range2, range8);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range5, range9);
      assertNotSame(range5, range7);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range6);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range5, range8);
      assertNotSame(range5, range10);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range5);
      assertNotSame(range10, range2);
      assertNotSame(range10, range1);
      assertNotSame(range10, range4);
      assertNotSame(range10, range3);
      assertNotSame(range10, range6);
      assertNotSame(range10, range9);
      assertNotSame(range10, range7);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-1.0), range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1.0), range5.getCentralValue(), 0.01);
      assertEquals((-1.0), range5.getUpperBound(), 0.01);
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals((-1.0), range10.getCentralValue(), 0.01);
      assertEquals((-1.0), range10.getUpperBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals((-1.0), range10.getLowerBound(), 0.01);
      assertNotNull(range10);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range8));
      assertTrue(range5.equals((Object)range6));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range10.equals((Object)range6));
      assertTrue(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range9));
      assertTrue(range10.equals((Object)range8));
      assertTrue(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range7));
      assertTrue(range10.equals((Object)range3));
      assertTrue(range10.equals((Object)range2));
      
      Range range11 = Range.shift(range3, (-1.0));
      assertNotSame(range0, range10);
      assertNotSame(range0, range5);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range2, range1);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range10);
      assertNotSame(range2, range8);
      assertNotSame(range2, range0);
      assertNotSame(range2, range11);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range11);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range11, range2);
      assertNotSame(range11, range8);
      assertNotSame(range11, range6);
      assertNotSame(range11, range5);
      assertNotSame(range11, range4);
      assertNotSame(range11, range1);
      assertNotSame(range11, range7);
      assertNotSame(range11, range9);
      assertNotSame(range11, range3);
      assertNotSame(range11, range0);
      assertNotSame(range11, range10);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range11.getLength(), 0.01);
      assertEquals((-2.0), range11.getCentralValue(), 0.01);
      assertEquals((-2.0), range11.getUpperBound(), 0.01);
      assertEquals((-2.0), range11.getLowerBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertNotNull(range11);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range10));
      
      Range range12 = Range.scale(range4, 83.0);
      assertNotSame(range0, range10);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range9);
      assertNotSame(range2, range10);
      assertNotSame(range2, range8);
      assertNotSame(range2, range0);
      assertNotSame(range2, range11);
      assertNotSame(range2, range5);
      assertNotSame(range2, range4);
      assertNotSame(range4, range10);
      assertNotSame(range4, range8);
      assertNotSame(range4, range7);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range11);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range12);
      assertNotSame(range4, range9);
      assertNotSame(range12, range5);
      assertNotSame(range12, range10);
      assertNotSame(range12, range7);
      assertNotSame(range12, range2);
      assertNotSame(range12, range3);
      assertNotSame(range12, range0);
      assertNotSame(range12, range8);
      assertNotSame(range12, range1);
      assertNotSame(range12, range9);
      assertNotSame(range12, range11);
      assertNotSame(range12, range4);
      assertNotSame(range12, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-3952.40783475), range4.getCentralValue(), 0.01);
      assertEquals((-3952.40783475), range4.getUpperBound(), 0.01);
      assertEquals((-3952.40783475), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(0.0, range12.getLength(), 0.01);
      assertEquals((-328049.85028425), range12.getCentralValue(), 0.01);
      assertEquals((-328049.85028425), range12.getUpperBound(), 0.01);
      assertEquals((-328049.85028425), range12.getLowerBound(), 0.01);
      assertNotNull(range12);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range11));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range6));
      
      Range range13 = Range.expandToInclude(range11, 0.0);
      assertNotSame(range0, range10);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range13);
      assertNotSame(range2, range11);
      assertNotSame(range2, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range11);
      assertNotSame(range3, range12);
      assertNotSame(range3, range8);
      assertNotSame(range3, range13);
      assertNotSame(range3, range7);
      assertNotSame(range11, range8);
      assertNotSame(range11, range13);
      assertNotSame(range11, range6);
      assertNotSame(range11, range4);
      assertNotSame(range11, range5);
      assertNotSame(range11, range1);
      assertNotSame(range11, range12);
      assertNotSame(range11, range10);
      assertNotSame(range11, range2);
      assertNotSame(range11, range7);
      assertNotSame(range11, range9);
      assertNotSame(range11, range3);
      assertNotSame(range11, range0);
      assertNotSame(range13, range3);
      assertNotSame(range13, range11);
      assertNotSame(range13, range5);
      assertNotSame(range13, range2);
      assertNotSame(range13, range12);
      assertNotSame(range13, range10);
      assertNotSame(range13, range9);
      assertNotSame(range13, range1);
      assertNotSame(range13, range7);
      assertNotSame(range13, range6);
      assertNotSame(range13, range4);
      assertNotSame(range13, range8);
      assertNotSame(range13, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range11.getLength(), 0.01);
      assertEquals((-2.0), range11.getCentralValue(), 0.01);
      assertEquals((-2.0), range11.getUpperBound(), 0.01);
      assertEquals((-2.0), range11.getLowerBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(2.0, range13.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals((-1.0), range13.getCentralValue(), 0.01);
      assertEquals(0.0, range13.getUpperBound(), 0.01);
      assertEquals((-2.0), range13.getLowerBound(), 0.01);
      assertNotNull(range13);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range12));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range11));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range12));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range0));
      
      double double1 = range3.getLowerBound();
      assertNotSame(range0, range10);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range13);
      assertNotSame(range2, range11);
      assertNotSame(range2, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range11);
      assertNotSame(range3, range12);
      assertNotSame(range3, range8);
      assertNotSame(range3, range13);
      assertNotSame(range3, range7);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-1.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range13));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      
      Range range14 = Range.combine(range2, range3);
      assertNotSame(range0, range10);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range14);
      assertNotSame(range0, range9);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range14, range6);
      assertNotSame(range14, range0);
      assertNotSame(range14, range3);
      assertNotSame(range14, range9);
      assertNotSame(range14, range5);
      assertNotSame(range14, range10);
      assertNotSame(range14, range12);
      assertNotSame(range14, range2);
      assertNotSame(range14, range7);
      assertNotSame(range14, range1);
      assertNotSame(range14, range11);
      assertNotSame(range14, range4);
      assertNotSame(range14, range8);
      assertNotSame(range14, range13);
      assertNotSame(range2, range3);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range13);
      assertNotSame(range2, range11);
      assertNotSame(range2, range14);
      assertNotSame(range2, range4);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range10);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range11);
      assertNotSame(range3, range12);
      assertNotSame(range3, range8);
      assertNotSame(range3, range13);
      assertNotSame(range3, range7);
      assertNotSame(range3, range14);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals((-1.0), range14.getCentralValue(), 0.01);
      assertEquals((-1.0), range14.getUpperBound(), 0.01);
      assertEquals((-1.0), range14.getLowerBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range14);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range9));
      assertTrue(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range12));
      assertTrue(range14.equals((Object)range3));
      assertTrue(range14.equals((Object)range5));
      assertTrue(range14.equals((Object)range2));
      assertTrue(range14.equals((Object)range8));
      assertTrue(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range13));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range9));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range13));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      
      Range range15 = Range.combine(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range13);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range14);
      assertNotSame(range0, range9);
      assertNotSame(range0, range15);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range15, range11);
      assertNotSame(range15, range0);
      assertNotSame(range15, range2);
      assertNotSame(range15, range3);
      assertNotSame(range15, range4);
      assertNotSame(range15, range6);
      assertNotSame(range15, range7);
      assertNotSame(range15, range14);
      assertNotSame(range15, range8);
      assertNotSame(range15, range13);
      assertNotSame(range15, range10);
      assertNotSame(range15, range12);
      assertNotSame(range15, range1);
      assertNotSame(range15, range9);
      assertNotSame(range15, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range13);
      assertNotSame(range2, range11);
      assertNotSame(range2, range15);
      assertNotSame(range2, range14);
      assertNotSame(range2, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range15.getUpperBound(), 0.01);
      assertEquals((-1.0), range15.getLowerBound(), 0.01);
      assertEquals((-1.0), range15.getCentralValue(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(0.0, range15.getLength(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range15);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range15.equals((Object)range11));
      assertTrue(range15.equals((Object)range6));
      assertFalse(range15.equals((Object)range4));
      assertTrue(range15.equals((Object)range14));
      assertTrue(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range7));
      assertTrue(range15.equals((Object)range0));
      assertTrue(range15.equals((Object)range5));
      assertFalse(range15.equals((Object)range13));
      assertTrue(range15.equals((Object)range8));
      assertFalse(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range1));
      assertFalse(range15.equals((Object)range9));
      assertTrue(range15.equals((Object)range2));
      assertTrue(range15.equals((Object)range10));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range4));
      
      // Undeclared exception!
      try { 
        Range.scale(range11, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = null;
      Range range1 = new Range((-670.35072), (-670.35072));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-670.35072), range1.getCentralValue(), 0.01);
      assertEquals((-670.35072), range1.getUpperBound(), 0.01);
      assertEquals((-670.35072), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = Range.combineIgnoringNaN((Range) null, range1);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-670.35072), range1.getCentralValue(), 0.01);
      assertEquals((-670.35072), range1.getUpperBound(), 0.01);
      assertEquals((-670.35072), range1.getLowerBound(), 0.01);
      assertEquals((-670.35072), range2.getCentralValue(), 0.01);
      assertEquals((-670.35072), range2.getUpperBound(), 0.01);
      assertEquals((-670.35072), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      
      double double0 = (-1399.4232685667678);
      // Undeclared exception!
      try { 
        Range.scale(range2, (-1399.4232685667678));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = null;
      double double0 = 1766.2943047725307;
      // Undeclared exception!
      try { 
        Range.scale((Range) null, 1766.2943047725307);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = null;
      double double0 = (-3980.34820056);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-3980.34820056), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range1, 1.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.shift(range2, 1.0, true);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      
      Range range4 = Range.shift(range3, 0.0, true);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2.0, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(2.0, range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      
      double double0 = range2.constrain(1.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      
      double double1 = range2.getCentralValue();
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(1.0, double1, 0.01);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertEquals(double1, double0, 0.01);
      
      Range range5 = Range.combine(range4, range0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertNotSame(range2, range5);
      assertSame(range2, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2.0, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(2.0, range4.getLowerBound(), 0.01);
      assertEquals(1.0, range5.getLength(), 0.01);
      assertEquals(1.5, range5.getCentralValue(), 0.01);
      assertEquals(2.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      
      Range range6 = Range.shift(range0, 1.0, false);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range6, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(2.0, range6.getCentralValue(), 0.01);
      assertEquals(2.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(2.0, range6.getLowerBound(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range3));
      
      Range range7 = Range.combineIgnoringNaN(range4, range3);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertNotSame(range2, range5);
      assertSame(range2, range1);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range4, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range7);
      assertNotSame(range7, range4);
      assertNotSame(range7, range6);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range3);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2.0, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(2.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(2.0, range7.getCentralValue(), 0.01);
      assertEquals(2.0, range7.getUpperBound(), 0.01);
      assertEquals(2.0, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertTrue(range7.equals((Object)range4));
      assertTrue(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      
      Range range8 = Range.combine(range6, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertNotSame(range2, range5);
      assertSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range2, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range8);
      assertNotSame(range4, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range8);
      assertNotSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range7);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range8);
      assertNotSame(range6, range2);
      assertNotSame(range6, range4);
      assertNotSame(range6, range7);
      assertNotSame(range7, range4);
      assertNotSame(range7, range6);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range3);
      assertNotSame(range7, range8);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range8, range2);
      assertNotSame(range8, range6);
      assertNotSame(range8, range4);
      assertNotSame(range8, range1);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2.0, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(2.0, range4.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(2.0, range6.getCentralValue(), 0.01);
      assertEquals(2.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(2.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(2.0, range7.getCentralValue(), 0.01);
      assertEquals(2.0, range7.getUpperBound(), 0.01);
      assertEquals(2.0, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range8.getLength(), 0.01);
      assertEquals(2.0, range8.getUpperBound(), 0.01);
      assertEquals(2.0, range8.getCentralValue(), 0.01);
      assertEquals(2.0, range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range3));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertTrue(range7.equals((Object)range4));
      assertTrue(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range1));
      assertTrue(range8.equals((Object)range6));
      assertTrue(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range7));
      assertTrue(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range5));
      
      Range range9 = Range.expandToInclude(range3, 0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertNotSame(range2, range5);
      assertSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range8);
      assertNotSame(range9, range2);
      assertNotSame(range9, range7);
      assertNotSame(range9, range1);
      assertNotSame(range9, range4);
      assertNotSame(range9, range8);
      assertNotSame(range9, range5);
      assertNotSame(range9, range0);
      assertNotSame(range9, range6);
      assertNotSame(range9, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2.0, range9.getLength(), 0.01);
      assertEquals(2.0, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(1.0, range9.getCentralValue(), 0.01);
      assertNotNull(range9);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range3));
      
      Range range10 = Range.combineIgnoringNaN(range4, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range10);
      assertSame(range1, range2);
      assertNotSame(range2, range5);
      assertSame(range2, range1);
      assertNotSame(range2, range10);
      assertNotSame(range2, range8);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range10);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range8);
      assertNotSame(range4, range6);
      assertNotSame(range4, range9);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range8);
      assertNotSame(range4, range10);
      assertNotSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range7);
      assertNotSame(range10, range1);
      assertNotSame(range10, range7);
      assertNotSame(range10, range6);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range9);
      assertNotSame(range10, range4);
      assertNotSame(range10, range3);
      assertNotSame(range10, range2);
      assertNotSame(range10, range5);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2.0, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(2.0, range4.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(2.0, range10.getUpperBound(), 0.01);
      assertEquals(1.0, range10.getLowerBound(), 0.01);
      assertEquals(1.0, range10.getLength(), 0.01);
      assertEquals(1.5, range10.getCentralValue(), 0.01);
      assertNotNull(range10);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range8));
      assertTrue(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range2));
      
      Range range11 = Range.shift(range2, 0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range9);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range10);
      assertSame(range1, range2);
      assertNotSame(range2, range5);
      assertSame(range2, range1);
      assertNotSame(range2, range10);
      assertNotSame(range2, range8);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range4);
      assertNotSame(range2, range11);
      assertNotSame(range2, range7);
      assertNotSame(range11, range2);
      assertNotSame(range11, range6);
      assertNotSame(range11, range1);
      assertNotSame(range11, range7);
      assertNotSame(range11, range0);
      assertNotSame(range11, range10);
      assertNotSame(range11, range3);
      assertNotSame(range11, range9);
      assertNotSame(range11, range4);
      assertNotSame(range11, range8);
      assertNotSame(range11, range5);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range11.getCentralValue(), 0.01);
      assertEquals(1.0, range11.getUpperBound(), 0.01);
      assertEquals(1.0, range11.getLowerBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(0.0, range11.getLength(), 0.01);
      assertNotNull(range11);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range11.equals((Object)range6));
      assertTrue(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range7));
      assertTrue(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range10));
      assertTrue(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range5));
      
      range1.hashCode();
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range9);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range10);
      assertSame(range1, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range0));
      
      Range range12 = new Range(1.0, 1.0);
      assertEquals(1.0, range12.getCentralValue(), 0.01);
      assertEquals(1.0, range12.getLowerBound(), 0.01);
      assertEquals(0.0, range12.getLength(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(1.0, range12.getUpperBound(), 0.01);
      assertNotNull(range12);
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range8));
      assertTrue(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range10));
      assertTrue(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range9));
      assertTrue(range12.equals((Object)range0));
      assertTrue(range12.equals((Object)range11));
      
      Range range13 = Range.shift(range12, 1.0, false);
      assertNotSame(range13, range9);
      assertNotSame(range13, range7);
      assertNotSame(range13, range10);
      assertNotSame(range13, range11);
      assertNotSame(range13, range8);
      assertNotSame(range13, range1);
      assertNotSame(range13, range6);
      assertNotSame(range13, range4);
      assertNotSame(range13, range12);
      assertNotSame(range13, range3);
      assertNotSame(range13, range0);
      assertNotSame(range13, range2);
      assertNotSame(range13, range5);
      assertNotSame(range12, range3);
      assertNotSame(range12, range5);
      assertNotSame(range12, range7);
      assertNotSame(range12, range13);
      assertNotSame(range12, range6);
      assertNotSame(range12, range4);
      assertNotSame(range12, range8);
      assertNotSame(range12, range10);
      assertNotSame(range12, range2);
      assertNotSame(range12, range0);
      assertNotSame(range12, range9);
      assertNotSame(range12, range11);
      assertNotSame(range12, range1);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertEquals(2.0, range13.getLowerBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(2.0, range13.getCentralValue(), 0.01);
      assertEquals(2.0, range13.getUpperBound(), 0.01);
      assertEquals(1.0, range12.getCentralValue(), 0.01);
      assertEquals(1.0, range12.getLowerBound(), 0.01);
      assertEquals(0.0, range12.getLength(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(1.0, range12.getUpperBound(), 0.01);
      assertNotNull(range13);
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range11));
      assertTrue(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range1));
      assertTrue(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range12));
      assertTrue(range13.equals((Object)range6));
      assertTrue(range13.equals((Object)range3));
      assertTrue(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range8));
      assertTrue(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range10));
      assertTrue(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range9));
      assertTrue(range12.equals((Object)range0));
      assertTrue(range12.equals((Object)range11));
      
      Range range14 = Range.expandToInclude(range3, 1.0);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range14, range9);
      assertNotSame(range14, range7);
      assertNotSame(range14, range10);
      assertNotSame(range14, range11);
      assertNotSame(range14, range8);
      assertNotSame(range14, range1);
      assertNotSame(range14, range6);
      assertNotSame(range14, range4);
      assertNotSame(range14, range12);
      assertNotSame(range14, range3);
      assertNotSame(range14, range0);
      assertNotSame(range14, range2);
      assertNotSame(range14, range5);
      assertNotSame(range14, range13);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range9);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertNotSame(range2, range5);
      assertNotSame(range2, range13);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertSame(range2, range1);
      assertNotSame(range2, range10);
      assertNotSame(range2, range8);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range10);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertNotSame(range3, range6);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range5);
      assertNotSame(range3, range13);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range14.getLength(), 0.01);
      assertEquals(1.5, range14.getCentralValue(), 0.01);
      assertEquals(1.0, range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(2.0, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range14);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range14.equals((Object)range9));
      assertTrue(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range4));
      assertTrue(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range13));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      
      Range range15 = Range.combineIgnoringNaN(range13, range14);
      assertNotSame(range13, range9);
      assertNotSame(range13, range7);
      assertNotSame(range13, range10);
      assertNotSame(range13, range11);
      assertNotSame(range13, range8);
      assertNotSame(range13, range15);
      assertNotSame(range13, range14);
      assertNotSame(range13, range1);
      assertNotSame(range13, range6);
      assertNotSame(range13, range4);
      assertNotSame(range13, range12);
      assertNotSame(range13, range3);
      assertNotSame(range13, range0);
      assertNotSame(range13, range2);
      assertNotSame(range13, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range10);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range14, range9);
      assertNotSame(range14, range7);
      assertNotSame(range14, range10);
      assertNotSame(range14, range11);
      assertNotSame(range14, range8);
      assertNotSame(range14, range15);
      assertNotSame(range14, range1);
      assertNotSame(range14, range6);
      assertNotSame(range14, range4);
      assertNotSame(range14, range12);
      assertNotSame(range14, range3);
      assertNotSame(range14, range0);
      assertNotSame(range14, range2);
      assertNotSame(range14, range5);
      assertNotSame(range14, range13);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range9);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range15);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertNotSame(range15, range4);
      assertNotSame(range15, range3);
      assertNotSame(range15, range5);
      assertNotSame(range15, range13);
      assertNotSame(range15, range2);
      assertNotSame(range15, range1);
      assertNotSame(range15, range12);
      assertNotSame(range15, range7);
      assertNotSame(range15, range11);
      assertNotSame(range15, range10);
      assertNotSame(range15, range8);
      assertNotSame(range15, range14);
      assertNotSame(range15, range9);
      assertNotSame(range15, range0);
      assertNotSame(range15, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range13);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertSame(range2, range1);
      assertNotSame(range2, range10);
      assertNotSame(range2, range8);
      assertNotSame(range2, range15);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range10);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertNotSame(range3, range6);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range15);
      assertNotSame(range3, range12);
      assertNotSame(range3, range5);
      assertNotSame(range3, range13);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range12, range3);
      assertNotSame(range12, range5);
      assertNotSame(range12, range7);
      assertNotSame(range12, range13);
      assertNotSame(range12, range6);
      assertNotSame(range12, range4);
      assertNotSame(range12, range8);
      assertNotSame(range12, range15);
      assertNotSame(range12, range10);
      assertNotSame(range12, range2);
      assertNotSame(range12, range14);
      assertNotSame(range12, range0);
      assertNotSame(range12, range9);
      assertNotSame(range12, range11);
      assertNotSame(range12, range1);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertEquals(2.0, range13.getLowerBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(2.0, range13.getCentralValue(), 0.01);
      assertEquals(2.0, range13.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range14.getLength(), 0.01);
      assertEquals(1.5, range14.getCentralValue(), 0.01);
      assertEquals(1.0, range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(2.0, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(1.5, range15.getCentralValue(), 0.01);
      assertEquals(1.0, range15.getLength(), 0.01);
      assertEquals(2.0, range15.getUpperBound(), 0.01);
      assertEquals(1.0, range15.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.0, range12.getCentralValue(), 0.01);
      assertEquals(1.0, range12.getLowerBound(), 0.01);
      assertEquals(0.0, range12.getLength(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(1.0, range12.getUpperBound(), 0.01);
      assertNotNull(range15);
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range11));
      assertTrue(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range14));
      assertFalse(range13.equals((Object)range1));
      assertTrue(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range12));
      assertTrue(range13.equals((Object)range6));
      assertTrue(range13.equals((Object)range3));
      assertTrue(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range14.equals((Object)range9));
      assertTrue(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range4));
      assertTrue(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range15.equals((Object)range4));
      assertFalse(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range13));
      assertFalse(range15.equals((Object)range2));
      assertFalse(range15.equals((Object)range1));
      assertFalse(range15.equals((Object)range12));
      assertTrue(range15.equals((Object)range5));
      assertFalse(range15.equals((Object)range7));
      assertFalse(range15.equals((Object)range11));
      assertTrue(range15.equals((Object)range14));
      assertFalse(range15.equals((Object)range8));
      assertFalse(range15.equals((Object)range9));
      assertFalse(range15.equals((Object)range0));
      assertFalse(range15.equals((Object)range6));
      assertTrue(range15.equals((Object)range10));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range14));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range13));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range13));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range8));
      assertTrue(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range14));
      assertTrue(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range9));
      assertTrue(range12.equals((Object)range0));
      assertTrue(range12.equals((Object)range11));
      
      boolean boolean0 = range5.equals(range12);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range10);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range9);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range15);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertNotSame(range2, range5);
      assertNotSame(range2, range13);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertSame(range2, range1);
      assertNotSame(range2, range10);
      assertNotSame(range2, range8);
      assertNotSame(range2, range15);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range7);
      assertNotSame(range3, range9);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range10);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertNotSame(range3, range6);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range15);
      assertNotSame(range3, range12);
      assertNotSame(range3, range5);
      assertNotSame(range3, range13);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range4, range2);
      assertNotSame(range4, range14);
      assertNotSame(range4, range1);
      assertNotSame(range4, range8);
      assertNotSame(range4, range15);
      assertNotSame(range4, range10);
      assertNotSame(range4, range6);
      assertNotSame(range4, range13);
      assertNotSame(range4, range9);
      assertNotSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range7);
      assertNotSame(range4, range11);
      assertNotSame(range4, range12);
      assertNotSame(range5, range7);
      assertNotSame(range5, range13);
      assertNotSame(range5, range9);
      assertNotSame(range5, range0);
      assertNotSame(range5, range6);
      assertNotSame(range5, range3);
      assertNotSame(range5, range11);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range5, range15);
      assertNotSame(range5, range12);
      assertNotSame(range5, range14);
      assertNotSame(range5, range10);
      assertNotSame(range12, range3);
      assertNotSame(range12, range5);
      assertNotSame(range12, range7);
      assertNotSame(range12, range13);
      assertNotSame(range12, range6);
      assertNotSame(range12, range4);
      assertNotSame(range12, range8);
      assertNotSame(range12, range15);
      assertNotSame(range12, range10);
      assertNotSame(range12, range2);
      assertNotSame(range12, range14);
      assertNotSame(range12, range0);
      assertNotSame(range12, range9);
      assertNotSame(range12, range11);
      assertNotSame(range12, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2.0, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(2.0, range4.getLowerBound(), 0.01);
      assertEquals(1.0, range5.getLength(), 0.01);
      assertEquals(1.5, range5.getCentralValue(), 0.01);
      assertEquals(2.0, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1.0, range12.getCentralValue(), 0.01);
      assertEquals(1.0, range12.getLowerBound(), 0.01);
      assertEquals(0.0, range12.getLength(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(1.0, range12.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range15));
      assertTrue(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range15));
      assertTrue(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range12));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range15));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range11));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range14));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range15));
      assertTrue(range3.equals((Object)range13));
      assertTrue(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range12));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range14));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range15));
      assertFalse(range4.equals((Object)range10));
      assertTrue(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range7));
      assertTrue(range4.equals((Object)range13));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range12));
      assertTrue(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range13));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range12));
      assertTrue(range5.equals((Object)range14));
      assertTrue(range5.equals((Object)range15));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range13));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range15));
      assertTrue(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range14));
      assertTrue(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range9));
      assertTrue(range12.equals((Object)range0));
      assertTrue(range12.equals((Object)range11));
      
      boolean boolean1 = range6.isNaNRange();
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range10);
      assertNotSame(range0, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range6, range14);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range8);
      assertNotSame(range6, range15);
      assertNotSame(range6, range2);
      assertNotSame(range6, range12);
      assertNotSame(range6, range7);
      assertNotSame(range6, range11);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range13);
      assertNotSame(range6, range9);
      assertNotSame(range6, range4);
      assertNotSame(range6, range10);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(2.0, range6.getCentralValue(), 0.01);
      assertEquals(2.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(2.0, range6.getLowerBound(), 0.01);
      assertFalse(boolean1);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range15));
      assertTrue(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range6));
      assertTrue(boolean1 == boolean0);
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range14));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range15));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range12));
      assertTrue(range6.equals((Object)range13));
      assertFalse(range6.equals((Object)range11));
      assertTrue(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range10));
      
      Range range16 = Range.expand(range6, 0.0, 0.0);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range10);
      assertNotSame(range0, range11);
      assertNotSame(range0, range16);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range16, range7);
      assertNotSame(range16, range13);
      assertNotSame(range16, range10);
      assertNotSame(range16, range9);
      assertNotSame(range16, range6);
      assertNotSame(range16, range14);
      assertNotSame(range16, range1);
      assertNotSame(range16, range8);
      assertNotSame(range16, range15);
      assertNotSame(range16, range12);
      assertNotSame(range16, range4);
      assertNotSame(range16, range11);
      assertNotSame(range16, range5);
      assertNotSame(range16, range2);
      assertNotSame(range16, range0);
      assertNotSame(range16, range3);
      assertNotSame(range6, range14);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range8);
      assertNotSame(range6, range15);
      assertNotSame(range6, range2);
      assertNotSame(range6, range12);
      assertNotSame(range6, range7);
      assertNotSame(range6, range11);
      assertNotSame(range6, range16);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range13);
      assertNotSame(range6, range9);
      assertNotSame(range6, range4);
      assertNotSame(range6, range10);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range16.isNaNRange());
      assertEquals(0.0, range16.getLength(), 0.01);
      assertEquals(2.0, range16.getUpperBound(), 0.01);
      assertEquals(2.0, range16.getLowerBound(), 0.01);
      assertEquals(2.0, range16.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(2.0, range6.getCentralValue(), 0.01);
      assertEquals(2.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(2.0, range6.getLowerBound(), 0.01);
      assertNotNull(range16);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range15));
      assertTrue(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range14));
      
      Range range17 = new Range(0.0, 0.0);
      assertFalse(range17.isNaNRange());
      assertEquals(0.0, range17.getLength(), 0.01);
      assertEquals(0.0, range17.getUpperBound(), 0.01);
      assertEquals(0.0, range17.getCentralValue(), 0.01);
      assertEquals(0.0, range17.getLowerBound(), 0.01);
      assertNotNull(range17);
      
      Range range18 = Range.scale(range7, 1.0);
      assertNotSame(range0, range18);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range10);
      assertNotSame(range0, range11);
      assertNotSame(range0, range16);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range17);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range9);
      assertNotSame(range1, range17);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range18);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range16);
      assertNotSame(range1, range15);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertNotSame(range2, range5);
      assertNotSame(range2, range13);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range17);
      assertNotSame(range2, range4);
      assertSame(range2, range1);
      assertNotSame(range2, range18);
      assertNotSame(range2, range10);
      assertNotSame(range2, range8);
      assertNotSame(range2, range15);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range7);
      assertNotSame(range2, range16);
      assertNotSame(range3, range9);
      assertNotSame(range3, range17);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range10);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertNotSame(range3, range6);
      assertNotSame(range3, range16);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range15);
      assertNotSame(range3, range12);
      assertNotSame(range3, range18);
      assertNotSame(range3, range5);
      assertNotSame(range3, range13);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range4, range16);
      assertNotSame(range4, range2);
      assertNotSame(range4, range14);
      assertNotSame(range4, range1);
      assertNotSame(range4, range8);
      assertNotSame(range4, range15);
      assertNotSame(range4, range10);
      assertNotSame(range4, range18);
      assertNotSame(range4, range6);
      assertNotSame(range4, range13);
      assertNotSame(range4, range9);
      assertNotSame(range4, range17);
      assertNotSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range7);
      assertNotSame(range4, range11);
      assertNotSame(range4, range12);
      assertNotSame(range18, range13);
      assertNotSame(range18, range7);
      assertNotSame(range18, range12);
      assertNotSame(range18, range11);
      assertNotSame(range18, range4);
      assertNotSame(range18, range17);
      assertNotSame(range18, range2);
      assertNotSame(range18, range5);
      assertNotSame(range18, range0);
      assertNotSame(range18, range3);
      assertNotSame(range18, range8);
      assertNotSame(range18, range15);
      assertNotSame(range18, range16);
      assertNotSame(range18, range14);
      assertNotSame(range18, range1);
      assertNotSame(range18, range10);
      assertNotSame(range18, range9);
      assertNotSame(range18, range6);
      assertNotSame(range7, range4);
      assertNotSame(range7, range12);
      assertNotSame(range7, range2);
      assertNotSame(range7, range14);
      assertNotSame(range7, range18);
      assertNotSame(range7, range3);
      assertNotSame(range7, range5);
      assertNotSame(range7, range13);
      assertNotSame(range7, range9);
      assertNotSame(range7, range11);
      assertNotSame(range7, range6);
      assertNotSame(range7, range10);
      assertNotSame(range7, range17);
      assertNotSame(range7, range0);
      assertNotSame(range7, range8);
      assertNotSame(range7, range15);
      assertNotSame(range7, range1);
      assertNotSame(range7, range16);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(2.0, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(2.0, range4.getLowerBound(), 0.01);
      assertEquals(2.0, range18.getLowerBound(), 0.01);
      assertFalse(range18.isNaNRange());
      assertEquals(2.0, range18.getCentralValue(), 0.01);
      assertEquals(2.0, range18.getUpperBound(), 0.01);
      assertEquals(0.0, range18.getLength(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(2.0, range7.getCentralValue(), 0.01);
      assertEquals(2.0, range7.getUpperBound(), 0.01);
      assertEquals(2.0, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertNotNull(range18);
      
      Range range19 = Range.combineIgnoringNaN(range17, range1);
      assertNotSame(range0, range18);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range10);
      assertNotSame(range0, range11);
      assertNotSame(range0, range16);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range17);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range19);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range9);
      assertNotSame(range1, range17);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range19);
      assertNotSame(range1, range18);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range16);
      assertNotSame(range1, range15);
      assertNotSame(range1, range3);
      assertSame(range1, range2);
      assertNotSame(range17, range5);
      assertNotSame(range17, range4);
      assertNotSame(range17, range1);
      assertNotSame(range17, range13);
      assertNotSame(range17, range2);
      assertNotSame(range17, range3);
      assertNotSame(range17, range16);
      assertNotSame(range17, range12);
      assertNotSame(range17, range7);
      assertNotSame(range17, range11);
      assertNotSame(range17, range0);
      assertNotSame(range17, range9);
      assertNotSame(range17, range8);
      assertNotSame(range17, range15);
      assertNotSame(range17, range14);
      assertNotSame(range17, range6);
      assertNotSame(range17, range19);
      assertNotSame(range17, range18);
      assertNotSame(range17, range10);
      assertNotSame(range19, range2);
      assertNotSame(range19, range14);
      assertNotSame(range19, range12);
      assertNotSame(range19, range18);
      assertNotSame(range19, range10);
      assertNotSame(range19, range0);
      assertNotSame(range19, range5);
      assertNotSame(range19, range4);
      assertNotSame(range19, range17);
      assertNotSame(range19, range6);
      assertNotSame(range19, range9);
      assertNotSame(range19, range13);
      assertNotSame(range19, range7);
      assertNotSame(range19, range11);
      assertNotSame(range19, range3);
      assertNotSame(range19, range8);
      assertNotSame(range19, range15);
      assertNotSame(range19, range16);
      assertNotSame(range19, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range17.isNaNRange());
      assertEquals(0.0, range17.getLength(), 0.01);
      assertEquals(0.0, range17.getUpperBound(), 0.01);
      assertEquals(0.0, range17.getCentralValue(), 0.01);
      assertEquals(0.0, range17.getLowerBound(), 0.01);
      assertEquals(0.0, range19.getLowerBound(), 0.01);
      assertEquals(1.0, range19.getUpperBound(), 0.01);
      assertEquals(0.5, range19.getCentralValue(), 0.01);
      assertFalse(range19.isNaNRange());
      assertEquals(1.0, range19.getLength(), 0.01);
      assertNotNull(range19);
      
      Range range20 = Range.combineIgnoringNaN(range3, range2);
      assertNotSame(range0, range18);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range10);
      assertNotSame(range0, range11);
      assertNotSame(range0, range16);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range17);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range3);
      assertNotSame(range0, range20);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range19);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range9);
      assertNotSame(range1, range17);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range19);
      assertNotSame(range1, range18);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range16);
      assertNotSame(range1, range15);
      assertNotSame(range1, range3);
      assertNotSame(range1, range20);
      assertSame(range1, range2);
      assertNotSame(range2, range5);
      assertNotSame(range2, range20);
      assertNotSame(range2, range13);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range17);
      assertNotSame(range2, range19);
      assertNotSame(range2, range4);
      assertSame(range2, range1);
      assertNotSame(range2, range18);
      assertNotSame(range2, range10);
      assertNotSame(range2, range8);
      assertNotSame(range2, range15);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range7);
      assertNotSame(range2, range16);
      assertNotSame(range3, range9);
      assertNotSame(range3, range17);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range10);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertNotSame(range3, range6);
      assertNotSame(range3, range16);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range15);
      assertNotSame(range3, range19);
      assertNotSame(range3, range12);
      assertNotSame(range3, range20);
      assertNotSame(range3, range18);
      assertNotSame(range3, range5);
      assertNotSame(range3, range13);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range20, range12);
      assertNotSame(range20, range5);
      assertNotSame(range20, range2);
      assertNotSame(range20, range3);
      assertNotSame(range20, range13);
      assertNotSame(range20, range19);
      assertNotSame(range20, range18);
      assertNotSame(range20, range4);
      assertNotSame(range20, range0);
      assertNotSame(range20, range10);
      assertNotSame(range20, range11);
      assertNotSame(range20, range9);
      assertNotSame(range20, range17);
      assertNotSame(range20, range6);
      assertNotSame(range20, range14);
      assertNotSame(range20, range1);
      assertNotSame(range20, range8);
      assertNotSame(range20, range15);
      assertNotSame(range20, range7);
      assertNotSame(range20, range16);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.5, range20.getCentralValue(), 0.01);
      assertFalse(range20.isNaNRange());
      assertEquals(1.0, range20.getLength(), 0.01);
      assertEquals(1.0, range20.getLowerBound(), 0.01);
      assertEquals(2.0, range20.getUpperBound(), 0.01);
      assertNotNull(range20);
      
      Range range21 = Range.expandToInclude(range20, 0.0);
      assertNotSame(range0, range18);
      assertNotSame(range0, range8);
      assertNotSame(range0, range15);
      assertNotSame(range0, range10);
      assertNotSame(range0, range11);
      assertNotSame(range0, range16);
      assertNotSame(range0, range4);
      assertNotSame(range0, range12);
      assertNotSame(range0, range17);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range13);
      assertNotSame(range0, range3);
      assertNotSame(range0, range20);
      assertNotSame(range0, range21);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range19);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range9);
      assertNotSame(range1, range17);
      assertNotSame(range1, range14);
      assertNotSame(range1, range6);
      assertNotSame(range1, range19);
      assertNotSame(range1, range18);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range21);
      assertNotSame(range1, range7);
      assertNotSame(range1, range13);
      assertNotSame(range1, range8);
      assertNotSame(range1, range16);
      assertNotSame(range1, range15);
      assertNotSame(range1, range3);
      assertNotSame(range1, range20);
      assertSame(range1, range2);
      assertNotSame(range2, range5);
      assertNotSame(range2, range20);
      assertNotSame(range2, range21);
      assertNotSame(range2, range13);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range17);
      assertNotSame(range2, range19);
      assertNotSame(range2, range4);
      assertSame(range2, range1);
      assertNotSame(range2, range18);
      assertNotSame(range2, range10);
      assertNotSame(range2, range8);
      assertNotSame(range2, range15);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range12);
      assertNotSame(range2, range11);
      assertNotSame(range2, range7);
      assertNotSame(range2, range16);
      assertNotSame(range3, range9);
      assertNotSame(range3, range17);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range10);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertNotSame(range3, range6);
      assertNotSame(range3, range16);
      assertNotSame(range3, range1);
      assertNotSame(range3, range21);
      assertNotSame(range3, range8);
      assertNotSame(range3, range15);
      assertNotSame(range3, range19);
      assertNotSame(range3, range12);
      assertNotSame(range3, range20);
      assertNotSame(range3, range18);
      assertNotSame(range3, range5);
      assertNotSame(range3, range13);
      assertNotSame(range3, range2);
      assertNotSame(range3, range4);
      assertNotSame(range20, range12);
      assertNotSame(range20, range21);
      assertNotSame(range20, range5);
      assertNotSame(range20, range2);
      assertNotSame(range20, range3);
      assertNotSame(range20, range13);
      assertNotSame(range20, range19);
      assertNotSame(range20, range18);
      assertNotSame(range20, range4);
      assertNotSame(range20, range0);
      assertNotSame(range20, range10);
      assertNotSame(range20, range11);
      assertNotSame(range20, range9);
      assertNotSame(range20, range17);
      assertNotSame(range20, range6);
      assertNotSame(range20, range14);
      assertNotSame(range20, range1);
      assertNotSame(range20, range8);
      assertNotSame(range20, range15);
      assertNotSame(range20, range7);
      assertNotSame(range20, range16);
      assertNotSame(range21, range9);
      assertNotSame(range21, range17);
      assertNotSame(range21, range6);
      assertNotSame(range21, range7);
      assertNotSame(range21, range10);
      assertNotSame(range21, range11);
      assertNotSame(range21, range5);
      assertNotSame(range21, range3);
      assertNotSame(range21, range0);
      assertNotSame(range21, range13);
      assertNotSame(range21, range4);
      assertNotSame(range21, range2);
      assertNotSame(range21, range12);
      assertNotSame(range21, range19);
      assertNotSame(range21, range18);
      assertNotSame(range21, range20);
      assertNotSame(range21, range16);
      assertNotSame(range21, range14);
      assertNotSame(range21, range1);
      assertNotSame(range21, range8);
      assertNotSame(range21, range15);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(2.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.5, range20.getCentralValue(), 0.01);
      assertFalse(range20.isNaNRange());
      assertEquals(1.0, range20.getLength(), 0.01);
      assertEquals(1.0, range20.getLowerBound(), 0.01);
      assertEquals(2.0, range20.getUpperBound(), 0.01);
      assertEquals(2.0, range21.getLength(), 0.01);
      assertFalse(range21.isNaNRange());
      assertEquals(0.0, range21.getLowerBound(), 0.01);
      assertEquals(2.0, range21.getUpperBound(), 0.01);
      assertEquals(1.0, range21.getCentralValue(), 0.01);
      assertNotNull(range21);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 3208.33511520295);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3208.33511520295, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(3208.33511520295, range0.getCentralValue(), 0.01);
      assertEquals(3208.33511520295, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, 92.1501);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3208.33511520295, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(3208.33511520295, range0.getCentralValue(), 0.01);
      assertEquals(3208.33511520295, range0.getLowerBound(), 0.01);
      assertEquals(3300.48521520295, range1.getCentralValue(), 0.01);
      assertEquals(3300.48521520295, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3300.48521520295, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range1, (-960.0), true);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3208.33511520295, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(3208.33511520295, range0.getCentralValue(), 0.01);
      assertEquals(3208.33511520295, range0.getLowerBound(), 0.01);
      assertEquals(3300.48521520295, range1.getCentralValue(), 0.01);
      assertEquals(3300.48521520295, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3300.48521520295, range1.getUpperBound(), 0.01);
      assertEquals(2340.48521520295, range2.getCentralValue(), 0.01);
      assertEquals(2340.48521520295, range2.getUpperBound(), 0.01);
      assertEquals(2340.48521520295, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = new Range((-2852.996405862948), (-2852.996405862948));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2852.996405862948), range0.getLowerBound(), 0.01);
      assertEquals((-2852.996405862948), range0.getUpperBound(), 0.01);
      assertEquals((-2852.996405862948), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        Range.scale(range0, (-2852.996405862948));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = 1599.7219;
      Range range0 = Range.expandToInclude((Range) null, 1599.7219);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1599.7219, range0.getLowerBound(), 0.01);
      assertEquals(1599.7219, range0.getCentralValue(), 0.01);
      assertEquals(1599.7219, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      Range range1 = Range.combineIgnoringNaN((Range) null, (Range) null);
      assertNull(range1);
      
      Range range2 = Range.expand(range0, 1599.7219, 1599.7219);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1599.7219, range0.getLowerBound(), 0.01);
      assertEquals(1599.7219, range0.getCentralValue(), 0.01);
      assertEquals(1599.7219, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1599.7219, range2.getUpperBound(), 0.01);
      assertEquals(1599.7219, range2.getCentralValue(), 0.01);
      assertEquals(1599.7219, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      
      String string0 = range2.toString();
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1599.7219, range0.getLowerBound(), 0.01);
      assertEquals(1599.7219, range0.getCentralValue(), 0.01);
      assertEquals(1599.7219, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1599.7219, range2.getUpperBound(), 0.01);
      assertEquals(1599.7219, range2.getCentralValue(), 0.01);
      assertEquals(1599.7219, range2.getLowerBound(), 0.01);
      assertEquals("Range[1599.7219,1599.7219]", string0);
      assertNotNull(string0);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range2.equals((Object)range0));
      
      double double1 = 4295.2194;
      Range range3 = Range.combineIgnoringNaN(range0, (Range) null);
      assertNotSame(range0, range2);
      assertSame(range0, range3);
      assertSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1599.7219, range0.getLowerBound(), 0.01);
      assertEquals(1599.7219, range0.getCentralValue(), 0.01);
      assertEquals(1599.7219, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1599.7219, range3.getCentralValue(), 0.01);
      assertEquals(1599.7219, range3.getUpperBound(), 0.01);
      assertEquals(1599.7219, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range3.equals((Object)range2));
      
      // Undeclared exception!
      try { 
        Range.scale((Range) null, 4295.2194);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = 548.75843;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 548.75843, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.scale(range0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range0, 0.0);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.shift(range2, 0.0);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range2, range3);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      
      Range range4 = Range.combineIgnoringNaN(range0, range0);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      
      Range range5 = Range.expandToInclude(range1, 1460.44242581);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1460.44242581, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(730.221212905, range5.getCentralValue(), 0.01);
      assertEquals(1460.44242581, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      
      Range range6 = Range.combineIgnoringNaN(range0, range1);
      assertNotSame(range0, range6);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range4);
      assertNotSame(range6, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range4));
      
      Range range7 = Range.shift(range0, 1460.44242581, false);
      assertNotSame(range0, range6);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range7, range2);
      assertNotSame(range7, range3);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1460.44242581, range7.getCentralValue(), 0.01);
      assertEquals(1460.44242581, range7.getUpperBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(1460.44242581, range7.getLowerBound(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range4));
      
      Range range8 = Range.combineIgnoringNaN(range6, range7);
      assertNotSame(range0, range6);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range6, range8);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range7);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range4);
      assertNotSame(range6, range2);
      assertNotSame(range7, range8);
      assertNotSame(range7, range2);
      assertNotSame(range7, range3);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range4);
      assertNotSame(range8, range6);
      assertNotSame(range8, range4);
      assertNotSame(range8, range7);
      assertNotSame(range8, range1);
      assertNotSame(range8, range3);
      assertNotSame(range8, range5);
      assertNotSame(range8, range0);
      assertNotSame(range8, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(1460.44242581, range7.getCentralValue(), 0.01);
      assertEquals(1460.44242581, range7.getUpperBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(1460.44242581, range7.getLowerBound(), 0.01);
      assertEquals(1460.44242581, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(730.221212905, range8.getCentralValue(), 0.01);
      assertEquals(1460.44242581, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range5));
      assertTrue(range6.equals((Object)range4));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range3));
      assertTrue(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range2));
      
      Range range9 = Range.combine(range5, range0);
      assertNotSame(range0, range6);
      assertNotSame(range0, range9);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range9);
      assertNotSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range6);
      assertNotSame(range5, range9);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range9, range8);
      assertNotSame(range9, range2);
      assertNotSame(range9, range7);
      assertNotSame(range9, range0);
      assertNotSame(range9, range5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range3);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1460.44242581, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(730.221212905, range5.getCentralValue(), 0.01);
      assertEquals(1460.44242581, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(1460.44242581, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertEquals(730.221212905, range9.getCentralValue(), 0.01);
      assertEquals(1460.44242581, range9.getLength(), 0.01);
      assertFalse(range9.isNaNRange());
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range0));
      assertTrue(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range6));
      
      boolean boolean0 = range9.isNaNRange();
      assertNotSame(range0, range6);
      assertNotSame(range0, range9);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range9);
      assertNotSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range6);
      assertNotSame(range5, range9);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range9, range8);
      assertNotSame(range9, range2);
      assertNotSame(range9, range7);
      assertNotSame(range9, range0);
      assertNotSame(range9, range5);
      assertNotSame(range9, range1);
      assertNotSame(range9, range3);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1460.44242581, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(730.221212905, range5.getCentralValue(), 0.01);
      assertEquals(1460.44242581, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(1460.44242581, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertEquals(730.221212905, range9.getCentralValue(), 0.01);
      assertEquals(1460.44242581, range9.getLength(), 0.01);
      assertFalse(range9.isNaNRange());
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range7));
      assertTrue(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range0));
      assertTrue(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range6));
      
      String string0 = range4.toString();
      assertNotSame(range0, range6);
      assertNotSame(range0, range9);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range4, range9);
      assertNotSame(range4, range1);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range7);
      assertNotSame(range4, range2);
      assertNotSame(range4, range8);
      assertNotSame(range4, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals("Range[0.0,0.0]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      
      boolean boolean1 = range1.isNaNRange();
      assertNotSame(range0, range6);
      assertNotSame(range0, range9);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range5);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range9);
      assertNotSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range6);
      assertNotSame(range1, range4);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(boolean1);
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range2));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = 1910.2;
      double double1 = (-3898.21414673491);
      Range range0 = null;
      try {
        range0 = new Range(1910.2, (-3898.21414673491));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1910.2) <= upper (-3898.21414673491).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = null;
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-1.0), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = 0.0;
      Range range0 = new Range(0.0, 0.0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      double double1 = (-951.0);
      // Undeclared exception!
      try { 
        Range.scale(range0, (-951.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      Range range1 = new Range(0.0, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.combineIgnoringNaN((Range) null, (Range) null);
      assertNull(range2);
      
      Range range3 = Range.expandToInclude(range1, 1.0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.5, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      
      Range range4 = Range.shift(range0, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      
      Range range5 = Range.shift(range3, 1780.49057201432, false);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.5, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1780.99057201432, range5.getCentralValue(), 0.01);
      assertEquals(1781.49057201432, range5.getUpperBound(), 0.01);
      assertEquals(1780.49057201432, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range1));
      
      String string0 = range1.toString();
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals("Range[0.0,0.0]", string0);
      assertNotNull(string0);
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      
      Range range6 = Range.combineIgnoringNaN((Range) null, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertSame(range5, range6);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertSame(range6, range5);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.5, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1780.99057201432, range5.getCentralValue(), 0.01);
      assertEquals(1781.49057201432, range5.getUpperBound(), 0.01);
      assertEquals(1780.49057201432, range5.getLowerBound(), 0.01);
      assertEquals(1.0, range6.getLength(), 0.01);
      assertEquals(1780.49057201432, range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1780.99057201432, range6.getCentralValue(), 0.01);
      assertEquals(1781.49057201432, range6.getUpperBound(), 0.01);
      assertNotNull(range6);
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = new Range(2664.18818208273, 2664.18818208273);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2664.18818208273, range0.getCentralValue(), 0.01);
      assertEquals(2664.18818208273, range0.getUpperBound(), 0.01);
      assertEquals(2664.18818208273, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (-1407.5429031));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2664.18818208273, range0.getCentralValue(), 0.01);
      assertEquals(2664.18818208273, range0.getUpperBound(), 0.01);
      assertEquals(2664.18818208273, range0.getLowerBound(), 0.01);
      assertEquals(1256.6452789827297, range1.getCentralValue(), 0.01);
      assertEquals(1256.6452789827297, range1.getUpperBound(), 0.01);
      assertEquals(1256.6452789827297, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = range1.contains((-1407.5429031));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2664.18818208273, range0.getCentralValue(), 0.01);
      assertEquals(2664.18818208273, range0.getUpperBound(), 0.01);
      assertEquals(2664.18818208273, range0.getLowerBound(), 0.01);
      assertEquals(1256.6452789827297, range1.getCentralValue(), 0.01);
      assertEquals(1256.6452789827297, range1.getUpperBound(), 0.01);
      assertEquals(1256.6452789827297, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-981.07044), (-981.07044));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = new Range(162.3365015421985, 162.3365015421985);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, 0.0, false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range1.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range1.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.expand(range0, 162.3365015421985, 2.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.shift(range2, 2.0, false);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      
      Range range4 = Range.scale(range3, 162.3365015421985);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(26677.812736044616, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(26677.812736044616, range4.getCentralValue(), 0.01);
      assertEquals(26677.812736044616, range4.getUpperBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      
      Range range5 = Range.combineIgnoringNaN(range4, range0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(26677.812736044616, range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(26677.812736044616, range4.getCentralValue(), 0.01);
      assertEquals(26677.812736044616, range4.getUpperBound(), 0.01);
      assertEquals(26677.812736044616, range5.getUpperBound(), 0.01);
      assertEquals(162.3365015421985, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(13420.074618793407, range5.getCentralValue(), 0.01);
      assertEquals(26515.476234502417, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      
      Range range6 = Range.scale(range0, 162.3365015421985);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range6, range1);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertNotSame(range6, range4);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(26353.13973296022, range6.getLowerBound(), 0.01);
      assertEquals(26353.13973296022, range6.getCentralValue(), 0.01);
      assertEquals(26353.13973296022, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range3));
      
      Range range7 = Range.shift(range3, 2.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range0, range2);
      assertNotSame(range2, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range7, range5);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range4);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(166.3365015421985, range7.getLowerBound(), 0.01);
      assertEquals(166.3365015421985, range7.getCentralValue(), 0.01);
      assertEquals(166.3365015421985, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range3));
      
      Range range8 = Range.expandToInclude(range3, 162.3365015421985);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range2, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range8, range4);
      assertNotSame(range8, range1);
      assertNotSame(range8, range5);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range6);
      assertNotSame(range8, range2);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertEquals(2.0, range8.getLength(), 0.01);
      assertEquals(164.3365015421985, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(163.3365015421985, range8.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range8.getLowerBound(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range2));
      
      Range range9 = Range.shift(range2, 2.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range2, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range9);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range9, range6);
      assertNotSame(range9, range2);
      assertNotSame(range9, range5);
      assertNotSame(range9, range8);
      assertNotSame(range9, range1);
      assertNotSame(range9, range4);
      assertNotSame(range9, range0);
      assertNotSame(range9, range7);
      assertNotSame(range9, range3);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range9.getLowerBound(), 0.01);
      assertEquals(164.3365015421985, range9.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range9.getUpperBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getLength(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range1));
      assertTrue(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range7));
      
      Range range10 = Range.combine(range7, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range2, range10);
      assertNotSame(range2, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range9);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range7, range8);
      assertNotSame(range7, range5);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range10);
      assertNotSame(range7, range4);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range9);
      assertNotSame(range8, range4);
      assertNotSame(range8, range1);
      assertNotSame(range8, range5);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range10);
      assertNotSame(range8, range9);
      assertNotSame(range8, range6);
      assertNotSame(range8, range2);
      assertNotSame(range10, range4);
      assertNotSame(range10, range6);
      assertNotSame(range10, range2);
      assertNotSame(range10, range8);
      assertNotSame(range10, range5);
      assertNotSame(range10, range0);
      assertNotSame(range10, range7);
      assertNotSame(range10, range3);
      assertNotSame(range10, range9);
      assertNotSame(range10, range1);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(166.3365015421985, range7.getLowerBound(), 0.01);
      assertEquals(166.3365015421985, range7.getCentralValue(), 0.01);
      assertEquals(166.3365015421985, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(2.0, range8.getLength(), 0.01);
      assertEquals(164.3365015421985, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(163.3365015421985, range8.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range8.getLowerBound(), 0.01);
      assertEquals(4.0, range10.getLength(), 0.01);
      assertEquals(166.3365015421985, range10.getUpperBound(), 0.01);
      assertEquals(162.3365015421985, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(164.3365015421985, range10.getCentralValue(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range1));
      
      Range range11 = Range.combine(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range2, range10);
      assertNotSame(range2, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range9);
      assertNotSame(range2, range11);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range11, range4);
      assertNotSame(range11, range8);
      assertNotSame(range11, range3);
      assertNotSame(range11, range0);
      assertNotSame(range11, range7);
      assertNotSame(range11, range2);
      assertNotSame(range11, range10);
      assertNotSame(range11, range5);
      assertNotSame(range11, range6);
      assertNotSame(range11, range9);
      assertNotSame(range11, range1);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range11.getLowerBound(), 0.01);
      assertEquals(164.3365015421985, range11.getUpperBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals(163.3365015421985, range11.getCentralValue(), 0.01);
      assertEquals(2.0, range11.getLength(), 0.01);
      assertNotNull(range11);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range1));
      
      Range range12 = Range.combineIgnoringNaN(range10, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range7);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range0, range10);
      assertNotSame(range2, range10);
      assertNotSame(range2, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range9);
      assertNotSame(range2, range11);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range12);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range7);
      assertNotSame(range3, range4);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range12);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range7, range8);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range2);
      assertNotSame(range7, range12);
      assertNotSame(range7, range10);
      assertNotSame(range7, range4);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range9);
      assertNotSame(range7, range11);
      assertNotSame(range8, range4);
      assertNotSame(range8, range11);
      assertNotSame(range8, range1);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range5);
      assertNotSame(range8, range3);
      assertNotSame(range8, range10);
      assertNotSame(range8, range9);
      assertNotSame(range8, range6);
      assertNotSame(range8, range2);
      assertNotSame(range8, range12);
      assertNotSame(range10, range4);
      assertNotSame(range10, range11);
      assertNotSame(range10, range6);
      assertNotSame(range10, range2);
      assertNotSame(range10, range12);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range7);
      assertNotSame(range10, range5);
      assertNotSame(range10, range3);
      assertNotSame(range10, range9);
      assertNotSame(range10, range1);
      assertNotSame(range12, range0);
      assertNotSame(range12, range7);
      assertNotSame(range12, range5);
      assertNotSame(range12, range8);
      assertNotSame(range12, range2);
      assertNotSame(range12, range10);
      assertNotSame(range12, range4);
      assertNotSame(range12, range6);
      assertNotSame(range12, range1);
      assertNotSame(range12, range9);
      assertNotSame(range12, range11);
      assertNotSame(range12, range3);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(166.3365015421985, range7.getLowerBound(), 0.01);
      assertEquals(166.3365015421985, range7.getCentralValue(), 0.01);
      assertEquals(166.3365015421985, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(2.0, range8.getLength(), 0.01);
      assertEquals(164.3365015421985, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(163.3365015421985, range8.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range8.getLowerBound(), 0.01);
      assertEquals(4.0, range10.getLength(), 0.01);
      assertEquals(166.3365015421985, range10.getUpperBound(), 0.01);
      assertEquals(162.3365015421985, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(164.3365015421985, range10.getCentralValue(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(164.3365015421985, range12.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range12.getLowerBound(), 0.01);
      assertEquals(166.3365015421985, range12.getUpperBound(), 0.01);
      assertEquals(4.0, range12.getLength(), 0.01);
      assertNotNull(range12);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range11));
      assertFalse(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range11));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range10));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range2));
      assertTrue(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range3));
      
      Range range13 = Range.expandToInclude(range3, 2.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range12);
      assertNotSame(range2, range5);
      assertNotSame(range2, range13);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range11);
      assertNotSame(range2, range8);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range12);
      assertNotSame(range3, range13);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range8);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range13, range6);
      assertNotSame(range13, range8);
      assertNotSame(range13, range3);
      assertNotSame(range13, range7);
      assertNotSame(range13, range1);
      assertNotSame(range13, range12);
      assertNotSame(range13, range5);
      assertNotSame(range13, range10);
      assertNotSame(range13, range2);
      assertNotSame(range13, range9);
      assertNotSame(range13, range11);
      assertNotSame(range13, range0);
      assertNotSame(range13, range4);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertEquals(164.3365015421985, range13.getUpperBound(), 0.01);
      assertEquals(2.0, range13.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range13.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(83.16825077109925, range13.getCentralValue(), 0.01);
      assertNotNull(range13);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range4));
      
      Range range14 = Range.combine(range10, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range2, range6);
      assertNotSame(range2, range14);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range12);
      assertNotSame(range2, range5);
      assertNotSame(range2, range13);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range11);
      assertNotSame(range2, range8);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range12);
      assertNotSame(range3, range13);
      assertNotSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range8);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertNotSame(range6, range1);
      assertNotSame(range6, range12);
      assertNotSame(range6, range5);
      assertNotSame(range6, range10);
      assertNotSame(range6, range14);
      assertNotSame(range6, range4);
      assertNotSame(range6, range9);
      assertNotSame(range6, range11);
      assertNotSame(range6, range8);
      assertNotSame(range6, range13);
      assertNotSame(range6, range2);
      assertNotSame(range6, range0);
      assertNotSame(range6, range7);
      assertNotSame(range6, range3);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range2);
      assertNotSame(range7, range12);
      assertNotSame(range7, range10);
      assertNotSame(range7, range1);
      assertNotSame(range7, range3);
      assertNotSame(range7, range8);
      assertNotSame(range7, range14);
      assertNotSame(range7, range13);
      assertNotSame(range7, range4);
      assertNotSame(range7, range6);
      assertNotSame(range7, range9);
      assertNotSame(range7, range11);
      assertNotSame(range8, range1);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range14);
      assertNotSame(range8, range10);
      assertNotSame(range8, range2);
      assertNotSame(range8, range4);
      assertNotSame(range8, range11);
      assertNotSame(range8, range5);
      assertNotSame(range8, range9);
      assertNotSame(range8, range13);
      assertNotSame(range8, range6);
      assertNotSame(range8, range12);
      assertNotSame(range10, range4);
      assertNotSame(range10, range11);
      assertNotSame(range10, range13);
      assertNotSame(range10, range2);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range7);
      assertNotSame(range10, range5);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertNotSame(range10, range6);
      assertNotSame(range10, range12);
      assertNotSame(range10, range14);
      assertNotSame(range10, range9);
      assertNotSame(range14, range4);
      assertNotSame(range14, range2);
      assertNotSame(range14, range10);
      assertNotSame(range14, range13);
      assertNotSame(range14, range12);
      assertNotSame(range14, range9);
      assertNotSame(range14, range11);
      assertNotSame(range14, range6);
      assertNotSame(range14, range8);
      assertNotSame(range14, range0);
      assertNotSame(range14, range7);
      assertNotSame(range14, range5);
      assertNotSame(range14, range1);
      assertNotSame(range14, range3);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(26353.13973296022, range6.getLowerBound(), 0.01);
      assertEquals(26353.13973296022, range6.getCentralValue(), 0.01);
      assertEquals(26353.13973296022, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(166.3365015421985, range7.getLowerBound(), 0.01);
      assertEquals(166.3365015421985, range7.getCentralValue(), 0.01);
      assertEquals(166.3365015421985, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(2.0, range8.getLength(), 0.01);
      assertEquals(164.3365015421985, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(163.3365015421985, range8.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range8.getLowerBound(), 0.01);
      assertEquals(4.0, range10.getLength(), 0.01);
      assertEquals(166.3365015421985, range10.getUpperBound(), 0.01);
      assertEquals(162.3365015421985, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(164.3365015421985, range10.getCentralValue(), 0.01);
      assertEquals(26353.13973296022, range14.getUpperBound(), 0.01);
      assertEquals(162.3365015421985, range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(26190.80323141802, range14.getLength(), 0.01);
      assertEquals(13257.738117251209, range14.getCentralValue(), 0.01);
      assertNotNull(range14);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range11));
      assertTrue(range3.equals((Object)range9));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range13));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range12));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range13));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range11));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range10));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range11));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range13));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range12));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range13));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      assertTrue(range10.equals((Object)range12));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range1));
      assertFalse(range14.equals((Object)range3));
      
      Range range15 = Range.scale(range12, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range2, range6);
      assertNotSame(range2, range14);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range15);
      assertNotSame(range2, range12);
      assertNotSame(range2, range5);
      assertNotSame(range2, range13);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range11);
      assertNotSame(range2, range8);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range12);
      assertNotSame(range3, range13);
      assertNotSame(range3, range5);
      assertNotSame(range3, range15);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range8);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range2);
      assertNotSame(range7, range12);
      assertNotSame(range7, range10);
      assertNotSame(range7, range1);
      assertNotSame(range7, range15);
      assertNotSame(range7, range3);
      assertNotSame(range7, range8);
      assertNotSame(range7, range14);
      assertNotSame(range7, range13);
      assertNotSame(range7, range4);
      assertNotSame(range7, range6);
      assertNotSame(range7, range9);
      assertNotSame(range7, range11);
      assertNotSame(range8, range1);
      assertNotSame(range8, range15);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range14);
      assertNotSame(range8, range10);
      assertNotSame(range8, range2);
      assertNotSame(range8, range4);
      assertNotSame(range8, range11);
      assertNotSame(range8, range5);
      assertNotSame(range8, range9);
      assertNotSame(range8, range13);
      assertNotSame(range8, range6);
      assertNotSame(range8, range12);
      assertNotSame(range10, range4);
      assertNotSame(range10, range11);
      assertNotSame(range10, range13);
      assertNotSame(range10, range2);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range7);
      assertNotSame(range10, range5);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertNotSame(range10, range15);
      assertNotSame(range10, range6);
      assertNotSame(range10, range12);
      assertNotSame(range10, range14);
      assertNotSame(range10, range9);
      assertNotSame(range12, range7);
      assertNotSame(range12, range8);
      assertNotSame(range12, range14);
      assertNotSame(range12, range13);
      assertNotSame(range12, range4);
      assertNotSame(range12, range6);
      assertNotSame(range12, range9);
      assertNotSame(range12, range11);
      assertNotSame(range12, range0);
      assertNotSame(range12, range5);
      assertNotSame(range12, range2);
      assertNotSame(range12, range10);
      assertNotSame(range12, range1);
      assertNotSame(range12, range15);
      assertNotSame(range12, range3);
      assertNotSame(range15, range2);
      assertNotSame(range15, range10);
      assertNotSame(range15, range0);
      assertNotSame(range15, range5);
      assertNotSame(range15, range9);
      assertNotSame(range15, range1);
      assertNotSame(range15, range11);
      assertNotSame(range15, range4);
      assertNotSame(range15, range12);
      assertNotSame(range15, range13);
      assertNotSame(range15, range14);
      assertNotSame(range15, range7);
      assertNotSame(range15, range6);
      assertNotSame(range15, range3);
      assertNotSame(range15, range8);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(166.3365015421985, range7.getLowerBound(), 0.01);
      assertEquals(166.3365015421985, range7.getCentralValue(), 0.01);
      assertEquals(166.3365015421985, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(2.0, range8.getLength(), 0.01);
      assertEquals(164.3365015421985, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(163.3365015421985, range8.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range8.getLowerBound(), 0.01);
      assertEquals(4.0, range10.getLength(), 0.01);
      assertEquals(166.3365015421985, range10.getUpperBound(), 0.01);
      assertEquals(162.3365015421985, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(164.3365015421985, range10.getCentralValue(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(164.3365015421985, range12.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range12.getLowerBound(), 0.01);
      assertEquals(166.3365015421985, range12.getUpperBound(), 0.01);
      assertEquals(4.0, range12.getLength(), 0.01);
      assertEquals(0.0, range15.getCentralValue(), 0.01);
      assertEquals(0.0, range15.getUpperBound(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(0.0, range15.getLength(), 0.01);
      assertEquals(0.0, range15.getLowerBound(), 0.01);
      assertNotNull(range15);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range14));
      assertTrue(range3.equals((Object)range9));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range12));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range14));
      assertFalse(range7.equals((Object)range13));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range11));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range14));
      assertFalse(range8.equals((Object)range10));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range11));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range13));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range12));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range13));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      assertTrue(range10.equals((Object)range12));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range14));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range14));
      assertFalse(range12.equals((Object)range13));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range2));
      assertTrue(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range15.equals((Object)range2));
      assertFalse(range15.equals((Object)range10));
      assertFalse(range15.equals((Object)range0));
      assertFalse(range15.equals((Object)range5));
      assertFalse(range15.equals((Object)range9));
      assertFalse(range15.equals((Object)range1));
      assertFalse(range15.equals((Object)range11));
      assertFalse(range15.equals((Object)range4));
      assertFalse(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range13));
      assertFalse(range15.equals((Object)range14));
      assertFalse(range15.equals((Object)range7));
      assertFalse(range15.equals((Object)range6));
      assertFalse(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range8));
      
      range10.hashCode();
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range2, range6);
      assertNotSame(range2, range14);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range15);
      assertNotSame(range2, range12);
      assertNotSame(range2, range5);
      assertNotSame(range2, range13);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range11);
      assertNotSame(range2, range8);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range12);
      assertNotSame(range3, range13);
      assertNotSame(range3, range5);
      assertNotSame(range3, range15);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range8);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range2);
      assertNotSame(range7, range12);
      assertNotSame(range7, range10);
      assertNotSame(range7, range1);
      assertNotSame(range7, range15);
      assertNotSame(range7, range3);
      assertNotSame(range7, range8);
      assertNotSame(range7, range14);
      assertNotSame(range7, range13);
      assertNotSame(range7, range4);
      assertNotSame(range7, range6);
      assertNotSame(range7, range9);
      assertNotSame(range7, range11);
      assertNotSame(range8, range1);
      assertNotSame(range8, range15);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range14);
      assertNotSame(range8, range10);
      assertNotSame(range8, range2);
      assertNotSame(range8, range4);
      assertNotSame(range8, range11);
      assertNotSame(range8, range5);
      assertNotSame(range8, range9);
      assertNotSame(range8, range13);
      assertNotSame(range8, range6);
      assertNotSame(range8, range12);
      assertNotSame(range10, range4);
      assertNotSame(range10, range11);
      assertNotSame(range10, range13);
      assertNotSame(range10, range2);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range7);
      assertNotSame(range10, range5);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertNotSame(range10, range15);
      assertNotSame(range10, range6);
      assertNotSame(range10, range12);
      assertNotSame(range10, range14);
      assertNotSame(range10, range9);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(166.3365015421985, range7.getLowerBound(), 0.01);
      assertEquals(166.3365015421985, range7.getCentralValue(), 0.01);
      assertEquals(166.3365015421985, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(2.0, range8.getLength(), 0.01);
      assertEquals(164.3365015421985, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(163.3365015421985, range8.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range8.getLowerBound(), 0.01);
      assertEquals(4.0, range10.getLength(), 0.01);
      assertEquals(166.3365015421985, range10.getUpperBound(), 0.01);
      assertEquals(162.3365015421985, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(164.3365015421985, range10.getCentralValue(), 0.01);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range15));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range15));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range14));
      assertTrue(range3.equals((Object)range9));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range12));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range15));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range14));
      assertFalse(range7.equals((Object)range13));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range11));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range15));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range14));
      assertFalse(range8.equals((Object)range10));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range11));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range13));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range12));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range13));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range15));
      assertTrue(range10.equals((Object)range12));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range14));
      assertFalse(range10.equals((Object)range9));
      
      Range range16 = Range.shift(range15, 2.0, false);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range16);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range16, range7);
      assertNotSame(range16, range8);
      assertNotSame(range16, range14);
      assertNotSame(range16, range6);
      assertNotSame(range16, range13);
      assertNotSame(range16, range4);
      assertNotSame(range16, range11);
      assertNotSame(range16, range9);
      assertNotSame(range16, range0);
      assertNotSame(range16, range5);
      assertNotSame(range16, range2);
      assertNotSame(range16, range12);
      assertNotSame(range16, range10);
      assertNotSame(range16, range1);
      assertNotSame(range16, range15);
      assertNotSame(range16, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range14);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range15);
      assertNotSame(range2, range12);
      assertNotSame(range2, range5);
      assertNotSame(range2, range13);
      assertNotSame(range2, range16);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range11);
      assertNotSame(range2, range8);
      assertNotSame(range3, range16);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range12);
      assertNotSame(range3, range13);
      assertNotSame(range3, range5);
      assertNotSame(range3, range15);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range8);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range2);
      assertNotSame(range7, range12);
      assertNotSame(range7, range10);
      assertNotSame(range7, range1);
      assertNotSame(range7, range15);
      assertNotSame(range7, range3);
      assertNotSame(range7, range8);
      assertNotSame(range7, range14);
      assertNotSame(range7, range13);
      assertNotSame(range7, range4);
      assertNotSame(range7, range16);
      assertNotSame(range7, range6);
      assertNotSame(range7, range9);
      assertNotSame(range7, range11);
      assertNotSame(range8, range1);
      assertNotSame(range8, range15);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range14);
      assertNotSame(range8, range10);
      assertNotSame(range8, range2);
      assertNotSame(range8, range4);
      assertNotSame(range8, range11);
      assertNotSame(range8, range16);
      assertNotSame(range8, range5);
      assertNotSame(range8, range9);
      assertNotSame(range8, range13);
      assertNotSame(range8, range6);
      assertNotSame(range8, range12);
      assertNotSame(range10, range4);
      assertNotSame(range10, range11);
      assertNotSame(range10, range13);
      assertNotSame(range10, range2);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range7);
      assertNotSame(range10, range5);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertNotSame(range10, range15);
      assertNotSame(range10, range6);
      assertNotSame(range10, range12);
      assertNotSame(range10, range14);
      assertNotSame(range10, range9);
      assertNotSame(range10, range16);
      assertNotSame(range12, range7);
      assertNotSame(range12, range8);
      assertNotSame(range12, range14);
      assertNotSame(range12, range13);
      assertNotSame(range12, range4);
      assertNotSame(range12, range16);
      assertNotSame(range12, range6);
      assertNotSame(range12, range9);
      assertNotSame(range12, range11);
      assertNotSame(range12, range0);
      assertNotSame(range12, range5);
      assertNotSame(range12, range2);
      assertNotSame(range12, range10);
      assertNotSame(range12, range1);
      assertNotSame(range12, range15);
      assertNotSame(range12, range3);
      assertNotSame(range15, range2);
      assertNotSame(range15, range10);
      assertNotSame(range15, range0);
      assertNotSame(range15, range5);
      assertNotSame(range15, range9);
      assertNotSame(range15, range16);
      assertNotSame(range15, range1);
      assertNotSame(range15, range11);
      assertNotSame(range15, range4);
      assertNotSame(range15, range12);
      assertNotSame(range15, range13);
      assertNotSame(range15, range14);
      assertNotSame(range15, range7);
      assertNotSame(range15, range6);
      assertNotSame(range15, range3);
      assertNotSame(range15, range8);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range16.getLowerBound(), 0.01);
      assertFalse(range16.isNaNRange());
      assertEquals(2.0, range16.getCentralValue(), 0.01);
      assertEquals(2.0, range16.getUpperBound(), 0.01);
      assertEquals(0.0, range16.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(166.3365015421985, range7.getLowerBound(), 0.01);
      assertEquals(166.3365015421985, range7.getCentralValue(), 0.01);
      assertEquals(166.3365015421985, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(2.0, range8.getLength(), 0.01);
      assertEquals(164.3365015421985, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(163.3365015421985, range8.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range8.getLowerBound(), 0.01);
      assertEquals(4.0, range10.getLength(), 0.01);
      assertEquals(166.3365015421985, range10.getUpperBound(), 0.01);
      assertEquals(162.3365015421985, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(164.3365015421985, range10.getCentralValue(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(164.3365015421985, range12.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range12.getLowerBound(), 0.01);
      assertEquals(166.3365015421985, range12.getUpperBound(), 0.01);
      assertEquals(4.0, range12.getLength(), 0.01);
      assertEquals(0.0, range15.getCentralValue(), 0.01);
      assertEquals(0.0, range15.getUpperBound(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(0.0, range15.getLength(), 0.01);
      assertEquals(0.0, range15.getLowerBound(), 0.01);
      assertNotNull(range16);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range16.equals((Object)range7));
      assertFalse(range16.equals((Object)range8));
      assertFalse(range16.equals((Object)range14));
      assertFalse(range16.equals((Object)range6));
      assertFalse(range16.equals((Object)range13));
      assertFalse(range16.equals((Object)range4));
      assertFalse(range16.equals((Object)range11));
      assertFalse(range16.equals((Object)range9));
      assertFalse(range16.equals((Object)range0));
      assertFalse(range16.equals((Object)range5));
      assertFalse(range16.equals((Object)range2));
      assertFalse(range16.equals((Object)range12));
      assertFalse(range16.equals((Object)range10));
      assertFalse(range16.equals((Object)range1));
      assertFalse(range16.equals((Object)range15));
      assertFalse(range16.equals((Object)range3));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range15));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range15));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range14));
      assertTrue(range3.equals((Object)range9));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range12));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range15));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range14));
      assertFalse(range7.equals((Object)range13));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range11));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range15));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range14));
      assertFalse(range8.equals((Object)range10));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range4));
      assertTrue(range8.equals((Object)range11));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range13));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range12));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range13));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range15));
      assertTrue(range10.equals((Object)range12));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range14));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range14));
      assertFalse(range12.equals((Object)range13));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range2));
      assertTrue(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range15));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range15.equals((Object)range2));
      assertFalse(range15.equals((Object)range10));
      assertFalse(range15.equals((Object)range0));
      assertFalse(range15.equals((Object)range5));
      assertFalse(range15.equals((Object)range9));
      assertFalse(range15.equals((Object)range1));
      assertFalse(range15.equals((Object)range11));
      assertFalse(range15.equals((Object)range4));
      assertFalse(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range13));
      assertFalse(range15.equals((Object)range14));
      assertFalse(range15.equals((Object)range7));
      assertFalse(range15.equals((Object)range6));
      assertFalse(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range8));
      
      boolean boolean0 = range6.equals(range16);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range16);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range2);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range16, range7);
      assertNotSame(range16, range8);
      assertNotSame(range16, range14);
      assertNotSame(range16, range6);
      assertNotSame(range16, range13);
      assertNotSame(range16, range4);
      assertNotSame(range16, range11);
      assertNotSame(range16, range9);
      assertNotSame(range16, range0);
      assertNotSame(range16, range5);
      assertNotSame(range16, range2);
      assertNotSame(range16, range12);
      assertNotSame(range16, range10);
      assertNotSame(range16, range1);
      assertNotSame(range16, range15);
      assertNotSame(range16, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range14);
      assertNotSame(range2, range7);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range15);
      assertNotSame(range2, range12);
      assertNotSame(range2, range5);
      assertNotSame(range2, range13);
      assertNotSame(range2, range16);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range9);
      assertNotSame(range2, range11);
      assertNotSame(range2, range8);
      assertNotSame(range3, range16);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range12);
      assertNotSame(range3, range13);
      assertNotSame(range3, range5);
      assertNotSame(range3, range15);
      assertNotSame(range3, range1);
      assertNotSame(range3, range6);
      assertNotSame(range3, range7);
      assertNotSame(range3, range8);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertNotSame(range6, range1);
      assertNotSame(range6, range15);
      assertNotSame(range6, range12);
      assertNotSame(range6, range5);
      assertNotSame(range6, range16);
      assertNotSame(range6, range10);
      assertNotSame(range6, range14);
      assertNotSame(range6, range4);
      assertNotSame(range6, range9);
      assertNotSame(range6, range11);
      assertNotSame(range6, range8);
      assertNotSame(range6, range13);
      assertNotSame(range6, range2);
      assertNotSame(range6, range0);
      assertNotSame(range6, range7);
      assertNotSame(range6, range3);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertNotSame(range7, range2);
      assertNotSame(range7, range12);
      assertNotSame(range7, range10);
      assertNotSame(range7, range1);
      assertNotSame(range7, range15);
      assertNotSame(range7, range3);
      assertNotSame(range7, range8);
      assertNotSame(range7, range14);
      assertNotSame(range7, range13);
      assertNotSame(range7, range4);
      assertNotSame(range7, range16);
      assertNotSame(range7, range6);
      assertNotSame(range7, range9);
      assertNotSame(range7, range11);
      assertNotSame(range8, range1);
      assertNotSame(range8, range15);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range3);
      assertNotSame(range8, range14);
      assertNotSame(range8, range10);
      assertNotSame(range8, range2);
      assertNotSame(range8, range4);
      assertNotSame(range8, range11);
      assertNotSame(range8, range16);
      assertNotSame(range8, range5);
      assertNotSame(range8, range9);
      assertNotSame(range8, range13);
      assertNotSame(range8, range6);
      assertNotSame(range8, range12);
      assertNotSame(range10, range4);
      assertNotSame(range10, range11);
      assertNotSame(range10, range13);
      assertNotSame(range10, range2);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range7);
      assertNotSame(range10, range5);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertNotSame(range10, range15);
      assertNotSame(range10, range6);
      assertNotSame(range10, range12);
      assertNotSame(range10, range14);
      assertNotSame(range10, range9);
      assertNotSame(range10, range16);
      assertNotSame(range12, range7);
      assertNotSame(range12, range8);
      assertNotSame(range12, range14);
      assertNotSame(range12, range13);
      assertNotSame(range12, range4);
      assertNotSame(range12, range16);
      assertNotSame(range12, range6);
      assertNotSame(range12, range9);
      assertNotSame(range12, range11);
      assertNotSame(range12, range0);
      assertNotSame(range12, range5);
      assertNotSame(range12, range2);
      assertNotSame(range12, range10);
      assertNotSame(range12, range1);
      assertNotSame(range12, range15);
      assertNotSame(range12, range3);
      assertNotSame(range15, range2);
      assertNotSame(range15, range10);
      assertNotSame(range15, range0);
      assertNotSame(range15, range5);
      assertNotSame(range15, range9);
      assertNotSame(range15, range16);
      assertNotSame(range15, range1);
      assertNotSame(range15, range11);
      assertNotSame(range15, range4);
      assertNotSame(range15, range12);
      assertNotSame(range15, range13);
      assertNotSame(range15, range14);
      assertNotSame(range15, range7);
      assertNotSame(range15, range6);
      assertNotSame(range15, range3);
      assertNotSame(range15, range8);
      assertEquals(162.3365015421985, range0.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(162.3365015421985, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range16.getLowerBound(), 0.01);
      assertFalse(range16.isNaNRange());
      assertEquals(2.0, range16.getCentralValue(), 0.01);
      assertEquals(2.0, range16.getUpperBound(), 0.01);
      assertEquals(0.0, range16.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(162.3365015421985, range2.getLowerBound(), 0.01);
      assertEquals(162.3365015421985, range2.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(164.3365015421985, range3.getCentralValue(), 0.01);
      assertEquals(164.3365015421985, range3.getUpperBound(), 0.01);
      assertEquals(164.3365015421985, range3.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(26353.13973296022, range6.getLowerBound(), 0.01);
      assertEquals(26353.13973296022, range6.getCentralValue(), 0.01);
      assertEquals(26353.13973296022, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(166.3365015421985, range7.getLowerBound(), 0.01);
      assertEquals(166.3365015421985, range7.getCentralValue(), 0.01);
      assertEquals(166.3365015421985, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(2.0, range8.getLength(), 0.01);
      assertEquals(164.3365015421985, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(163.3365015421985, range8.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range8.getLowerBound(), 0.01);
      assertEquals(4.0, range10.getLength(), 0.01);
      assertEquals(166.3365015421985, range10.getUpperBound(), 0.01);
      assertEquals(162.3365015421985, range10.getLowerBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(164.3365015421985, range10.getCentralValue(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(164.3365015421985, range12.getCentralValue(), 0.01);
      assertEquals(162.3365015421985, range12.getLowerBound(), 0.01);
      assertEquals(166.3365015421985, range12.getUpperBound(), 0.01);
      assertEquals(4.0, range12.getLength(), 0.01);
      assertEquals(0.0, range15.getCentralValue(), 0.01);
      assertEquals(0.0, range15.getUpperBound(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(0.0, range15.getLength(), 0.01);
      assertEquals(0.0, range15.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range16));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range16.equals((Object)range7));
      assertFalse(range16.equals((Object)range8));
      assertFalse(range16.equals((Object)range14));
      assertFalse(range16.equals((Object)range6));
      assertFalse(range16.equals((Object)range13));
      assertFalse(range16.equals((Object)range4));
      assertFalse(range16.equals((Object)range11));
      assertFalse(range16.equals((Object)range9));
      assertFalse(range16.equals((Object)range0));
      assertFalse(range16.equals((Object)range5));
      assertFalse(range16.equals((Object)range2));
      assertFalse(range16.equals((Object)range12));
      assertFalse(range16.equals((Object)range10));
      assertFalse(range16.equals((Object)range1));
      assertFalse(range16.equals((Object)range15));
      assertFalse(range16.equals((Object)range3));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range15));
      assertFalse(range2.equals((Object)range12));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range16));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range3.equals((Object)range16));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range15));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range14));
      assertTrue(range3.equals((Object)range9));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range15));
      assertFalse(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range16));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range14));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range13));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range12));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range15));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range14));
      assertFalse(range7.equals((Object)range13));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range16));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range11));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range15));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range14));
      assertFalse(range8.equals((Object)range10));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range16));
      assertTrue(range8.equals((Object)range11));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range13));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range12));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range13));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range15));
      assertTrue(range10.equals((Object)range12));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range14));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range16));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range14));
      assertFalse(range12.equals((Object)range13));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range16));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range2));
      assertTrue(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range15));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range15.equals((Object)range2));
      assertFalse(range15.equals((Object)range10));
      assertFalse(range15.equals((Object)range0));
      assertFalse(range15.equals((Object)range5));
      assertFalse(range15.equals((Object)range9));
      assertFalse(range15.equals((Object)range16));
      assertFalse(range15.equals((Object)range1));
      assertFalse(range15.equals((Object)range11));
      assertFalse(range15.equals((Object)range4));
      assertFalse(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range13));
      assertFalse(range15.equals((Object)range14));
      assertFalse(range15.equals((Object)range7));
      assertFalse(range15.equals((Object)range6));
      assertFalse(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range8));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = 2119.890747;
      Range range0 = null;
      try {
        range0 = new Range(2119.890747, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2119.890747) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = null;
      double double0 = (-185.0);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-185.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = (-3142.662237871);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 2340.48521520295);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = new Range(0.0, 1556.8);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (-1511.5716574860164), false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range1, (-1827.4668));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = Range.combineIgnoringNaN(range2, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = Range.shift(range3, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(45.228342513983534, range4.getUpperBound(), 0.01);
      assertEquals((-1827.4668), range4.getLowerBound(), 0.01);
      assertEquals(1872.6951425139835, range4.getLength(), 0.01);
      assertEquals((-891.1192287430082), range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      
      Range range5 = Range.expand(range1, 0.0, (-1827.4668));
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals((-1423233.3287774858), range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1423233.3287774858), range5.getCentralValue(), 0.01);
      assertEquals((-1423233.3287774858), range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      
      Range range6 = Range.shift(range0, 687.59279);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertEquals(687.59279, range6.getLowerBound(), 0.01);
      assertEquals(1556.7999999999997, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1465.99279, range6.getCentralValue(), 0.01);
      assertEquals(2244.39279, range6.getUpperBound(), 0.01);
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range1));
      
      Range range7 = Range.expandToInclude(range1, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range6);
      assertSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range3);
      assertNotSame(range7, range2);
      assertNotSame(range7, range6);
      assertSame(range7, range1);
      assertNotSame(range7, range4);
      assertNotSame(range7, range5);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals((-733.1716574860164), range7.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range7.getUpperBound(), 0.01);
      assertEquals(1556.8, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-1511.5716574860164), range7.getLowerBound(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range5));
      
      Range range8 = Range.combine(range0, range4);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range6);
      assertSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range5);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range4, range5);
      assertNotSame(range4, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range7);
      assertNotSame(range4, range8);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range8, range5);
      assertNotSame(range8, range1);
      assertNotSame(range8, range4);
      assertNotSame(range8, range7);
      assertNotSame(range8, range0);
      assertNotSame(range8, range3);
      assertNotSame(range8, range6);
      assertNotSame(range8, range2);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(45.228342513983534, range4.getUpperBound(), 0.01);
      assertEquals((-1827.4668), range4.getLowerBound(), 0.01);
      assertEquals(1872.6951425139835, range4.getLength(), 0.01);
      assertEquals((-891.1192287430082), range4.getCentralValue(), 0.01);
      assertEquals((-135.33339999999998), range8.getCentralValue(), 0.01);
      assertEquals(3384.2668, range8.getLength(), 0.01);
      assertEquals(1556.8, range8.getUpperBound(), 0.01);
      assertEquals((-1827.4668), range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range2));
      
      Range range9 = Range.combineIgnoringNaN(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range3);
      assertNotSame(range7, range2);
      assertNotSame(range7, range9);
      assertNotSame(range7, range6);
      assertSame(range7, range1);
      assertNotSame(range7, range4);
      assertNotSame(range7, range5);
      assertNotSame(range7, range8);
      assertNotSame(range9, range7);
      assertNotSame(range9, range2);
      assertNotSame(range9, range1);
      assertNotSame(range9, range0);
      assertNotSame(range9, range3);
      assertNotSame(range9, range5);
      assertNotSame(range9, range6);
      assertNotSame(range9, range4);
      assertNotSame(range9, range8);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals((-733.1716574860164), range7.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range7.getUpperBound(), 0.01);
      assertEquals(1556.8, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-1511.5716574860164), range7.getLowerBound(), 0.01);
      assertEquals((-1511.5716574860164), range9.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(1556.8, range9.getUpperBound(), 0.01);
      assertEquals(3068.3716574860164, range9.getLength(), 0.01);
      assertEquals(22.614171256991767, range9.getCentralValue(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range8));
      
      Range range10 = Range.shift(range3, (-2711.1230742));
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range10, range8);
      assertNotSame(range10, range2);
      assertNotSame(range10, range7);
      assertNotSame(range10, range1);
      assertNotSame(range10, range4);
      assertNotSame(range10, range0);
      assertNotSame(range10, range6);
      assertNotSame(range10, range5);
      assertNotSame(range10, range9);
      assertNotSame(range10, range3);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertEquals((-2269.2949371), range10.getCentralValue(), 0.01);
      assertEquals((-4538.5898742), range10.getLowerBound(), 0.01);
      assertEquals(4538.5898742, range10.getLength(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getUpperBound(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range3));
      
      String string0 = range2.toString();
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals("Range[-1827.4668,45.228342513983534]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range1));
      
      Range range11 = Range.combineIgnoringNaN(range3, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range8);
      assertNotSame(range6, range11);
      assertNotSame(range6, range7);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range9);
      assertNotSame(range6, range10);
      assertNotSame(range11, range1);
      assertNotSame(range11, range3);
      assertNotSame(range11, range0);
      assertNotSame(range11, range2);
      assertNotSame(range11, range8);
      assertNotSame(range11, range7);
      assertNotSame(range11, range5);
      assertNotSame(range11, range4);
      assertNotSame(range11, range6);
      assertNotSame(range11, range9);
      assertNotSame(range11, range10);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertEquals(687.59279, range6.getLowerBound(), 0.01);
      assertEquals(1556.7999999999997, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1465.99279, range6.getCentralValue(), 0.01);
      assertEquals(2244.39279, range6.getUpperBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals((-1827.4668), range11.getLowerBound(), 0.01);
      assertEquals(208.46299499999998, range11.getCentralValue(), 0.01);
      assertEquals(2244.39279, range11.getUpperBound(), 0.01);
      assertEquals(4071.85959, range11.getLength(), 0.01);
      assertNotNull(range11);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range10));
      
      Range range12 = Range.expand(range11, 687.59279, 0.3067);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range12);
      assertNotSame(range3, range4);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range6, range12);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range8);
      assertNotSame(range6, range11);
      assertNotSame(range6, range7);
      assertNotSame(range6, range0);
      assertNotSame(range6, range2);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range9);
      assertNotSame(range6, range10);
      assertNotSame(range11, range1);
      assertNotSame(range11, range3);
      assertNotSame(range11, range0);
      assertNotSame(range11, range2);
      assertNotSame(range11, range8);
      assertNotSame(range11, range7);
      assertNotSame(range11, range5);
      assertNotSame(range11, range4);
      assertNotSame(range11, range12);
      assertNotSame(range11, range6);
      assertNotSame(range11, range9);
      assertNotSame(range11, range10);
      assertNotSame(range12, range4);
      assertNotSame(range12, range0);
      assertNotSame(range12, range10);
      assertNotSame(range12, range9);
      assertNotSame(range12, range1);
      assertNotSame(range12, range2);
      assertNotSame(range12, range6);
      assertNotSame(range12, range7);
      assertNotSame(range12, range5);
      assertNotSame(range12, range8);
      assertNotSame(range12, range3);
      assertNotSame(range12, range11);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertEquals(687.59279, range6.getLowerBound(), 0.01);
      assertEquals(1556.7999999999997, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1465.99279, range6.getCentralValue(), 0.01);
      assertEquals(2244.39279, range6.getUpperBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals((-1827.4668), range11.getLowerBound(), 0.01);
      assertEquals(208.46299499999998, range11.getCentralValue(), 0.01);
      assertEquals(2244.39279, range11.getUpperBound(), 0.01);
      assertEquals(4071.85959, range11.getLength(), 0.01);
      assertEquals(2805101.9949026094, range12.getLength(), 0.01);
      assertEquals((-2801608.762776356), range12.getLowerBound(), 0.01);
      assertEquals((-1399057.7653250515), range12.getCentralValue(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(3493.2321262529995, range12.getUpperBound(), 0.01);
      assertNotNull(range12);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range0));
      
      range4.hashCode();
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range12);
      assertNotSame(range3, range4);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range4, range5);
      assertNotSame(range4, range9);
      assertNotSame(range4, range12);
      assertNotSame(range4, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range11);
      assertNotSame(range4, range0);
      assertNotSame(range4, range8);
      assertNotSame(range4, range10);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(45.228342513983534, range4.getUpperBound(), 0.01);
      assertEquals((-1827.4668), range4.getLowerBound(), 0.01);
      assertEquals(1872.6951425139835, range4.getLength(), 0.01);
      assertEquals((-891.1192287430082), range4.getCentralValue(), 0.01);
      
      double double0 = range3.getUpperBound();
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range12);
      assertNotSame(range3, range4);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertEquals(45.228342513983534, double0, 0.01);
      
      String string1 = range0.toString();
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertEquals("Range[0.0,1556.8]", string1);
      assertNotNull(string1);
      
      double double1 = range2.getCentralValue();
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range12);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-891.1192287430082), double1, 0.01);
      
      Range range13 = Range.combineIgnoringNaN(range5, range12);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range13, range5);
      assertNotSame(range13, range4);
      assertNotSame(range13, range8);
      assertNotSame(range13, range11);
      assertNotSame(range13, range0);
      assertNotSame(range13, range3);
      assertNotSame(range13, range1);
      assertNotSame(range13, range12);
      assertNotSame(range13, range6);
      assertNotSame(range13, range7);
      assertNotSame(range13, range2);
      assertNotSame(range13, range9);
      assertNotSame(range13, range10);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range13);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range13);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range5, range12);
      assertNotSame(range5, range13);
      assertNotSame(range5, range6);
      assertNotSame(range5, range10);
      assertNotSame(range5, range7);
      assertNotSame(range5, range2);
      assertNotSame(range5, range9);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range5, range11);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range6, range12);
      assertNotSame(range6, range13);
      assertNotSame(range6, range11);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range8);
      assertNotSame(range6, range7);
      assertNotSame(range6, range2);
      assertNotSame(range6, range9);
      assertNotSame(range6, range10);
      assertNotSame(range11, range0);
      assertNotSame(range11, range7);
      assertNotSame(range11, range5);
      assertNotSame(range11, range4);
      assertNotSame(range11, range13);
      assertNotSame(range11, range6);
      assertNotSame(range11, range1);
      assertNotSame(range11, range3);
      assertNotSame(range11, range2);
      assertNotSame(range11, range8);
      assertNotSame(range11, range12);
      assertNotSame(range11, range9);
      assertNotSame(range11, range10);
      assertNotSame(range12, range4);
      assertNotSame(range12, range6);
      assertNotSame(range12, range7);
      assertNotSame(range12, range5);
      assertNotSame(range12, range8);
      assertNotSame(range12, range3);
      assertNotSame(range12, range11);
      assertNotSame(range12, range13);
      assertNotSame(range12, range0);
      assertNotSame(range12, range10);
      assertNotSame(range12, range9);
      assertNotSame(range12, range1);
      assertNotSame(range12, range2);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(3493.2321262529995, range13.getUpperBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(2805101.9949026094, range13.getLength(), 0.01);
      assertEquals((-2801608.762776356), range13.getLowerBound(), 0.01);
      assertEquals((-1399057.7653250515), range13.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals((-1423233.3287774858), range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1423233.3287774858), range5.getCentralValue(), 0.01);
      assertEquals((-1423233.3287774858), range5.getLowerBound(), 0.01);
      assertEquals(687.59279, range6.getLowerBound(), 0.01);
      assertEquals(1556.7999999999997, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1465.99279, range6.getCentralValue(), 0.01);
      assertEquals(2244.39279, range6.getUpperBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals((-1827.4668), range11.getLowerBound(), 0.01);
      assertEquals(208.46299499999998, range11.getCentralValue(), 0.01);
      assertEquals(2244.39279, range11.getUpperBound(), 0.01);
      assertEquals(4071.85959, range11.getLength(), 0.01);
      assertEquals(2805101.9949026094, range12.getLength(), 0.01);
      assertEquals((-2801608.762776356), range12.getLowerBound(), 0.01);
      assertEquals((-1399057.7653250515), range12.getCentralValue(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(3493.2321262529995, range12.getUpperBound(), 0.01);
      assertNotNull(range13);
      
      double double2 = range6.getCentralValue();
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range6, range12);
      assertNotSame(range6, range13);
      assertNotSame(range6, range11);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range8);
      assertNotSame(range6, range7);
      assertNotSame(range6, range2);
      assertNotSame(range6, range9);
      assertNotSame(range6, range10);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertEquals(687.59279, range6.getLowerBound(), 0.01);
      assertEquals(1556.7999999999997, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1465.99279, range6.getCentralValue(), 0.01);
      assertEquals(2244.39279, range6.getUpperBound(), 0.01);
      assertEquals(1465.99279, double2, 0.01);
      
      String string2 = range11.toString();
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range12);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range13);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range13);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range6, range12);
      assertNotSame(range6, range13);
      assertNotSame(range6, range11);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range8);
      assertNotSame(range6, range7);
      assertNotSame(range6, range2);
      assertNotSame(range6, range9);
      assertNotSame(range6, range10);
      assertNotSame(range11, range0);
      assertNotSame(range11, range7);
      assertNotSame(range11, range5);
      assertNotSame(range11, range4);
      assertNotSame(range11, range13);
      assertNotSame(range11, range6);
      assertNotSame(range11, range1);
      assertNotSame(range11, range3);
      assertNotSame(range11, range2);
      assertNotSame(range11, range8);
      assertNotSame(range11, range12);
      assertNotSame(range11, range9);
      assertNotSame(range11, range10);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertEquals(687.59279, range6.getLowerBound(), 0.01);
      assertEquals(1556.7999999999997, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1465.99279, range6.getCentralValue(), 0.01);
      assertEquals(2244.39279, range6.getUpperBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals((-1827.4668), range11.getLowerBound(), 0.01);
      assertEquals(208.46299499999998, range11.getCentralValue(), 0.01);
      assertEquals(2244.39279, range11.getUpperBound(), 0.01);
      assertEquals(4071.85959, range11.getLength(), 0.01);
      assertEquals("Range[-1827.4668,2244.39279]", string2);
      assertNotNull(string2);
      
      Range range14 = Range.expand(range0, (-1827.4668), (-1827.4668));
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range14, range4);
      assertNotSame(range14, range2);
      assertNotSame(range14, range3);
      assertNotSame(range14, range7);
      assertNotSame(range14, range11);
      assertNotSame(range14, range5);
      assertNotSame(range14, range8);
      assertNotSame(range14, range13);
      assertNotSame(range14, range12);
      assertNotSame(range14, range6);
      assertNotSame(range14, range9);
      assertNotSame(range14, range10);
      assertNotSame(range14, range0);
      assertNotSame(range14, range1);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(778.3999999999069, range14.getCentralValue(), 0.01);
      assertEquals(778.3999999999069, range14.getUpperBound(), 0.01);
      assertEquals(778.3999999999069, range14.getLowerBound(), 0.01);
      assertNotNull(range14);
      
      Range range15 = Range.expandToInclude(range14, (-1827.4668));
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range14, range4);
      assertNotSame(range14, range2);
      assertNotSame(range14, range3);
      assertNotSame(range14, range7);
      assertNotSame(range14, range11);
      assertNotSame(range14, range15);
      assertNotSame(range14, range5);
      assertNotSame(range14, range8);
      assertNotSame(range14, range13);
      assertNotSame(range14, range12);
      assertNotSame(range14, range6);
      assertNotSame(range14, range9);
      assertNotSame(range14, range10);
      assertNotSame(range14, range0);
      assertNotSame(range14, range1);
      assertNotSame(range15, range8);
      assertNotSame(range15, range11);
      assertNotSame(range15, range2);
      assertNotSame(range15, range3);
      assertNotSame(range15, range1);
      assertNotSame(range15, range9);
      assertNotSame(range15, range14);
      assertNotSame(range15, range12);
      assertNotSame(range15, range4);
      assertNotSame(range15, range13);
      assertNotSame(range15, range7);
      assertNotSame(range15, range0);
      assertNotSame(range15, range10);
      assertNotSame(range15, range6);
      assertNotSame(range15, range5);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(778.3999999999069, range14.getCentralValue(), 0.01);
      assertEquals(778.3999999999069, range14.getUpperBound(), 0.01);
      assertEquals(778.3999999999069, range14.getLowerBound(), 0.01);
      assertEquals((-1827.4668), range15.getLowerBound(), 0.01);
      assertEquals((-524.5334000000465), range15.getCentralValue(), 0.01);
      assertEquals(2605.866799999907, range15.getLength(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(778.3999999999069, range15.getUpperBound(), 0.01);
      assertNotNull(range15);
      
      Range range16 = Range.shift(range11, 0.0, false);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range16);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range1, range9);
      assertNotSame(range1, range6);
      assertNotSame(range1, range16);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range14);
      assertSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range15);
      assertNotSame(range1, range12);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range14);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range13);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range16);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range15);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range13);
      assertNotSame(range3, range15);
      assertNotSame(range3, range5);
      assertNotSame(range3, range14);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range16);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range6, range12);
      assertNotSame(range6, range13);
      assertNotSame(range6, range15);
      assertNotSame(range6, range11);
      assertNotSame(range6, range16);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range14);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range8);
      assertNotSame(range6, range7);
      assertNotSame(range6, range2);
      assertNotSame(range6, range9);
      assertNotSame(range6, range10);
      assertNotSame(range16, range10);
      assertNotSame(range16, range0);
      assertNotSame(range16, range13);
      assertNotSame(range16, range7);
      assertNotSame(range16, range5);
      assertNotSame(range16, range15);
      assertNotSame(range16, range4);
      assertNotSame(range16, range14);
      assertNotSame(range16, range6);
      assertNotSame(range16, range1);
      assertNotSame(range16, range2);
      assertNotSame(range16, range3);
      assertNotSame(range16, range8);
      assertNotSame(range16, range11);
      assertNotSame(range16, range12);
      assertNotSame(range16, range9);
      assertNotSame(range11, range0);
      assertNotSame(range11, range15);
      assertNotSame(range11, range7);
      assertNotSame(range11, range5);
      assertNotSame(range11, range4);
      assertNotSame(range11, range13);
      assertNotSame(range11, range14);
      assertNotSame(range11, range6);
      assertNotSame(range11, range1);
      assertNotSame(range11, range3);
      assertNotSame(range11, range2);
      assertNotSame(range11, range8);
      assertNotSame(range11, range16);
      assertNotSame(range11, range12);
      assertNotSame(range11, range9);
      assertNotSame(range11, range10);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertEquals(687.59279, range6.getLowerBound(), 0.01);
      assertEquals(1556.7999999999997, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1465.99279, range6.getCentralValue(), 0.01);
      assertEquals(2244.39279, range6.getUpperBound(), 0.01);
      assertFalse(range16.isNaNRange());
      assertEquals(2244.39279, range16.getUpperBound(), 0.01);
      assertEquals(4071.85959, range16.getLength(), 0.01);
      assertEquals((-1827.4668), range16.getLowerBound(), 0.01);
      assertEquals(208.46299499999998, range16.getCentralValue(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals((-1827.4668), range11.getLowerBound(), 0.01);
      assertEquals(208.46299499999998, range11.getCentralValue(), 0.01);
      assertEquals(2244.39279, range11.getUpperBound(), 0.01);
      assertEquals(4071.85959, range11.getLength(), 0.01);
      assertNotNull(range16);
      
      Range range17 = Range.combine(range14, range11);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range17);
      assertNotSame(range0, range16);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range12);
      assertNotSame(range1, range9);
      assertNotSame(range1, range17);
      assertNotSame(range1, range6);
      assertNotSame(range1, range16);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range14);
      assertSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range15);
      assertNotSame(range1, range12);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range14);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range13);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range16);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range15);
      assertNotSame(range2, range17);
      assertNotSame(range3, range7);
      assertNotSame(range3, range0);
      assertNotSame(range3, range13);
      assertNotSame(range3, range15);
      assertNotSame(range3, range5);
      assertNotSame(range3, range14);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range16);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range17);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range14, range4);
      assertNotSame(range14, range2);
      assertNotSame(range14, range17);
      assertNotSame(range14, range3);
      assertNotSame(range14, range7);
      assertNotSame(range14, range11);
      assertNotSame(range14, range16);
      assertNotSame(range14, range15);
      assertNotSame(range14, range5);
      assertNotSame(range14, range8);
      assertNotSame(range14, range13);
      assertNotSame(range14, range12);
      assertNotSame(range14, range6);
      assertNotSame(range14, range9);
      assertNotSame(range14, range10);
      assertNotSame(range14, range0);
      assertNotSame(range14, range1);
      assertNotSame(range6, range12);
      assertNotSame(range6, range17);
      assertNotSame(range6, range13);
      assertNotSame(range6, range15);
      assertNotSame(range6, range11);
      assertNotSame(range6, range16);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range14);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range8);
      assertNotSame(range6, range7);
      assertNotSame(range6, range2);
      assertNotSame(range6, range9);
      assertNotSame(range6, range10);
      assertNotSame(range17, range8);
      assertNotSame(range17, range11);
      assertNotSame(range17, range16);
      assertNotSame(range17, range3);
      assertNotSame(range17, range2);
      assertNotSame(range17, range9);
      assertNotSame(range17, range5);
      assertNotSame(range17, range7);
      assertNotSame(range17, range15);
      assertNotSame(range17, range10);
      assertNotSame(range17, range12);
      assertNotSame(range17, range6);
      assertNotSame(range17, range14);
      assertNotSame(range17, range1);
      assertNotSame(range17, range0);
      assertNotSame(range17, range4);
      assertNotSame(range17, range13);
      assertNotSame(range11, range0);
      assertNotSame(range11, range15);
      assertNotSame(range11, range7);
      assertNotSame(range11, range5);
      assertNotSame(range11, range4);
      assertNotSame(range11, range13);
      assertNotSame(range11, range14);
      assertNotSame(range11, range6);
      assertNotSame(range11, range1);
      assertNotSame(range11, range17);
      assertNotSame(range11, range3);
      assertNotSame(range11, range2);
      assertNotSame(range11, range8);
      assertNotSame(range11, range16);
      assertNotSame(range11, range12);
      assertNotSame(range11, range9);
      assertNotSame(range11, range10);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(778.3999999999069, range14.getCentralValue(), 0.01);
      assertEquals(778.3999999999069, range14.getUpperBound(), 0.01);
      assertEquals(778.3999999999069, range14.getLowerBound(), 0.01);
      assertEquals(687.59279, range6.getLowerBound(), 0.01);
      assertEquals(1556.7999999999997, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1465.99279, range6.getCentralValue(), 0.01);
      assertEquals(2244.39279, range6.getUpperBound(), 0.01);
      assertEquals(2244.39279, range17.getUpperBound(), 0.01);
      assertEquals(208.46299499999998, range17.getCentralValue(), 0.01);
      assertEquals((-1827.4668), range17.getLowerBound(), 0.01);
      assertFalse(range17.isNaNRange());
      assertEquals(4071.85959, range17.getLength(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals((-1827.4668), range11.getLowerBound(), 0.01);
      assertEquals(208.46299499999998, range11.getCentralValue(), 0.01);
      assertEquals(2244.39279, range11.getUpperBound(), 0.01);
      assertEquals(4071.85959, range11.getLength(), 0.01);
      assertNotNull(range17);
      
      Range range18 = Range.expand(range7, 45.228342513983534, 45.228342513983534);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range17);
      assertNotSame(range0, range16);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range18);
      assertNotSame(range0, range12);
      assertNotSame(range1, range9);
      assertNotSame(range1, range17);
      assertNotSame(range1, range6);
      assertNotSame(range1, range16);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range14);
      assertSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range15);
      assertNotSame(range1, range18);
      assertNotSame(range1, range12);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range7, range18);
      assertNotSame(range7, range0);
      assertNotSame(range7, range10);
      assertNotSame(range7, range12);
      assertNotSame(range7, range6);
      assertNotSame(range7, range17);
      assertNotSame(range7, range16);
      assertNotSame(range7, range5);
      assertNotSame(range7, range15);
      assertNotSame(range7, range8);
      assertNotSame(range7, range11);
      assertNotSame(range7, range3);
      assertNotSame(range7, range2);
      assertNotSame(range7, range9);
      assertNotSame(range7, range14);
      assertSame(range7, range1);
      assertNotSame(range7, range4);
      assertNotSame(range7, range13);
      assertNotSame(range18, range12);
      assertNotSame(range18, range9);
      assertNotSame(range18, range6);
      assertNotSame(range18, range2);
      assertNotSame(range18, range0);
      assertNotSame(range18, range1);
      assertNotSame(range18, range13);
      assertNotSame(range18, range4);
      assertNotSame(range18, range14);
      assertNotSame(range18, range10);
      assertNotSame(range18, range17);
      assertNotSame(range18, range16);
      assertNotSame(range18, range3);
      assertNotSame(range18, range7);
      assertNotSame(range18, range5);
      assertNotSame(range18, range11);
      assertNotSame(range18, range15);
      assertNotSame(range18, range8);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals((-733.1716574860164), range7.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range7.getUpperBound(), 0.01);
      assertEquals(1556.8, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-1511.5716574860164), range7.getLowerBound(), 0.01);
      assertEquals(70456.71196828356, range18.getUpperBound(), 0.01);
      assertEquals(142379.76725153916, range18.getLength(), 0.01);
      assertEquals((-733.1716574860111), range18.getCentralValue(), 0.01);
      assertFalse(range18.isNaNRange());
      assertEquals((-71923.05528325558), range18.getLowerBound(), 0.01);
      assertNotNull(range18);
      
      Range range19 = Range.expandToInclude(range6, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range17);
      assertNotSame(range0, range16);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range19);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range18);
      assertNotSame(range0, range12);
      assertNotSame(range6, range12);
      assertNotSame(range6, range17);
      assertNotSame(range6, range13);
      assertNotSame(range6, range15);
      assertNotSame(range6, range11);
      assertNotSame(range6, range16);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range14);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range8);
      assertNotSame(range6, range7);
      assertNotSame(range6, range19);
      assertNotSame(range6, range2);
      assertNotSame(range6, range18);
      assertNotSame(range6, range9);
      assertNotSame(range6, range10);
      assertNotSame(range19, range14);
      assertNotSame(range19, range5);
      assertNotSame(range19, range4);
      assertNotSame(range19, range2);
      assertNotSame(range19, range10);
      assertNotSame(range19, range9);
      assertNotSame(range19, range18);
      assertNotSame(range19, range12);
      assertNotSame(range19, range15);
      assertNotSame(range19, range13);
      assertNotSame(range19, range17);
      assertNotSame(range19, range0);
      assertNotSame(range19, range1);
      assertNotSame(range19, range3);
      assertNotSame(range19, range7);
      assertNotSame(range19, range16);
      assertNotSame(range19, range8);
      assertNotSame(range19, range11);
      assertNotSame(range19, range6);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertEquals(687.59279, range6.getLowerBound(), 0.01);
      assertEquals(1556.7999999999997, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1465.99279, range6.getCentralValue(), 0.01);
      assertEquals(2244.39279, range6.getUpperBound(), 0.01);
      assertEquals(2244.39279, range19.getLength(), 0.01);
      assertEquals(2244.39279, range19.getUpperBound(), 0.01);
      assertEquals(1122.196395, range19.getCentralValue(), 0.01);
      assertEquals(0.0, range19.getLowerBound(), 0.01);
      assertFalse(range19.isNaNRange());
      assertNotNull(range19);
      
      double double3 = range10.getLowerBound();
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range17);
      assertNotSame(range0, range16);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range19);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range18);
      assertNotSame(range0, range12);
      assertNotSame(range1, range9);
      assertNotSame(range1, range17);
      assertNotSame(range1, range6);
      assertNotSame(range1, range16);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range14);
      assertSame(range1, range7);
      assertNotSame(range1, range19);
      assertNotSame(range1, range5);
      assertNotSame(range1, range15);
      assertNotSame(range1, range18);
      assertNotSame(range1, range12);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range14);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range13);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range18);
      assertNotSame(range2, range16);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range19);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range15);
      assertNotSame(range2, range17);
      assertNotSame(range3, range7);
      assertNotSame(range3, range19);
      assertNotSame(range3, range0);
      assertNotSame(range3, range13);
      assertNotSame(range3, range15);
      assertNotSame(range3, range5);
      assertNotSame(range3, range14);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range16);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range17);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range18);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range10, range18);
      assertNotSame(range10, range13);
      assertNotSame(range10, range15);
      assertNotSame(range10, range7);
      assertNotSame(range10, range19);
      assertNotSame(range10, range0);
      assertNotSame(range10, range14);
      assertNotSame(range10, range6);
      assertNotSame(range10, range5);
      assertNotSame(range10, range16);
      assertNotSame(range10, range3);
      assertNotSame(range10, range8);
      assertNotSame(range10, range11);
      assertNotSame(range10, range2);
      assertNotSame(range10, range1);
      assertNotSame(range10, range4);
      assertNotSame(range10, range17);
      assertNotSame(range10, range9);
      assertNotSame(range10, range12);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertEquals((-2269.2949371), range10.getCentralValue(), 0.01);
      assertEquals((-4538.5898742), range10.getLowerBound(), 0.01);
      assertEquals(4538.5898742, range10.getLength(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getUpperBound(), 0.01);
      assertEquals((-4538.5898742), double3, 0.01);
      
      boolean boolean0 = range14.contains((-4538.5898742));
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range17);
      assertNotSame(range0, range16);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range19);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range18);
      assertNotSame(range0, range12);
      assertNotSame(range14, range4);
      assertNotSame(range14, range2);
      assertNotSame(range14, range17);
      assertNotSame(range14, range3);
      assertNotSame(range14, range7);
      assertNotSame(range14, range19);
      assertNotSame(range14, range11);
      assertNotSame(range14, range16);
      assertNotSame(range14, range15);
      assertNotSame(range14, range5);
      assertNotSame(range14, range8);
      assertNotSame(range14, range13);
      assertNotSame(range14, range12);
      assertNotSame(range14, range18);
      assertNotSame(range14, range6);
      assertNotSame(range14, range9);
      assertNotSame(range14, range10);
      assertNotSame(range14, range0);
      assertNotSame(range14, range1);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertEquals(778.3999999999069, range14.getCentralValue(), 0.01);
      assertEquals(778.3999999999069, range14.getUpperBound(), 0.01);
      assertEquals(778.3999999999069, range14.getLowerBound(), 0.01);
      assertFalse(boolean0);
      
      Range range20 = Range.expandToInclude(range10, (-1511.5716574860164));
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range17);
      assertNotSame(range0, range16);
      assertNotSame(range0, range6);
      assertNotSame(range0, range11);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range19);
      assertNotSame(range0, range20);
      assertNotSame(range0, range9);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range18);
      assertNotSame(range0, range12);
      assertNotSame(range1, range9);
      assertNotSame(range1, range20);
      assertNotSame(range1, range17);
      assertNotSame(range1, range6);
      assertNotSame(range1, range16);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range14);
      assertSame(range1, range7);
      assertNotSame(range1, range19);
      assertNotSame(range1, range5);
      assertNotSame(range1, range15);
      assertNotSame(range1, range18);
      assertNotSame(range1, range12);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range2, range14);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range13);
      assertNotSame(range2, range20);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range12);
      assertNotSame(range2, range18);
      assertNotSame(range2, range16);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range19);
      assertNotSame(range2, range8);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range15);
      assertNotSame(range2, range17);
      assertNotSame(range3, range7);
      assertNotSame(range3, range19);
      assertNotSame(range3, range0);
      assertNotSame(range3, range13);
      assertNotSame(range3, range15);
      assertNotSame(range3, range5);
      assertNotSame(range3, range14);
      assertNotSame(range3, range6);
      assertNotSame(range3, range4);
      assertNotSame(range3, range20);
      assertNotSame(range3, range16);
      assertNotSame(range3, range2);
      assertNotSame(range3, range11);
      assertNotSame(range3, range1);
      assertNotSame(range3, range17);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range18);
      assertNotSame(range3, range10);
      assertNotSame(range3, range9);
      assertNotSame(range10, range18);
      assertNotSame(range10, range13);
      assertNotSame(range10, range15);
      assertNotSame(range10, range7);
      assertNotSame(range10, range19);
      assertNotSame(range10, range0);
      assertNotSame(range10, range14);
      assertNotSame(range10, range6);
      assertNotSame(range10, range5);
      assertNotSame(range10, range16);
      assertNotSame(range10, range3);
      assertNotSame(range10, range8);
      assertNotSame(range10, range11);
      assertNotSame(range10, range2);
      assertNotSame(range10, range1);
      assertNotSame(range10, range4);
      assertNotSame(range10, range17);
      assertNotSame(range10, range9);
      assertSame(range10, range20);
      assertNotSame(range10, range12);
      assertSame(range20, range10);
      assertNotSame(range20, range5);
      assertNotSame(range20, range14);
      assertNotSame(range20, range0);
      assertNotSame(range20, range4);
      assertNotSame(range20, range2);
      assertNotSame(range20, range18);
      assertNotSame(range20, range12);
      assertNotSame(range20, range6);
      assertNotSame(range20, range9);
      assertNotSame(range20, range13);
      assertNotSame(range20, range17);
      assertNotSame(range20, range1);
      assertNotSame(range20, range7);
      assertNotSame(range20, range19);
      assertNotSame(range20, range11);
      assertNotSame(range20, range16);
      assertNotSame(range20, range15);
      assertNotSame(range20, range8);
      assertNotSame(range20, range3);
      assertEquals(1556.8, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(778.4, range0.getCentralValue(), 0.01);
      assertEquals(1556.8, range0.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1511.5716574860164), range1.getLowerBound(), 0.01);
      assertEquals((-733.1716574860164), range1.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range1.getUpperBound(), 0.01);
      assertEquals(1556.8, range1.getLength(), 0.01);
      assertEquals(45.228342513983534, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1827.4668), range2.getLowerBound(), 0.01);
      assertEquals((-891.1192287430082), range2.getCentralValue(), 0.01);
      assertEquals(1872.6951425139835, range2.getLength(), 0.01);
      assertEquals((-1827.4668), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1872.6951425139835, range3.getLength(), 0.01);
      assertEquals((-891.1192287430082), range3.getCentralValue(), 0.01);
      assertEquals(45.228342513983534, range3.getUpperBound(), 0.01);
      assertEquals((-2269.2949371), range10.getCentralValue(), 0.01);
      assertEquals((-4538.5898742), range10.getLowerBound(), 0.01);
      assertEquals(4538.5898742, range10.getLength(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getUpperBound(), 0.01);
      assertEquals(4538.5898742, range20.getLength(), 0.01);
      assertEquals((-2269.2949371), range20.getCentralValue(), 0.01);
      assertEquals((-4538.5898742), range20.getLowerBound(), 0.01);
      assertEquals(0.0, range20.getUpperBound(), 0.01);
      assertFalse(range20.isNaNRange());
      assertNotNull(range20);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = 0.0;
      Range range0 = new Range(0.0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (-1.0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      String string0 = range1.toString();
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals("Range[-1.0,-1.0]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = range0.isNaNRange();
      assertNotSame(range0, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
      
      Range range2 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      double double1 = 0.0;
      Range range3 = Range.shift(range0, 0.0, true);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = Range.combineIgnoringNaN(range2, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals((-0.5), range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      
      Range range5 = Range.scale(range4, 0.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range4);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals((-0.5), range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(-0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range0));
      
      double double2 = (-2838.0);
      // Undeclared exception!
      try { 
        Range.scale(range1, (-2838.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = null;
      double double0 = 1170.19128396;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 1170.19128396);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range1, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertSame(range2, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.shift(range0, 0.0, false);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      
      Range range4 = Range.shift(range0, (-1583.599096069316));
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1583.599096069316), range4.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range4.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      
      Range range5 = Range.expand(range4, 0.0, (-1.0));
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1583.599096069316), range4.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range4.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range4.getLowerBound(), 0.01);
      assertEquals((-1583.599096069316), range5.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range5.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      
      Range range6 = Range.expandToInclude(range4, (-1.0));
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range4, range6);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      assertNotSame(range6, range2);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range5);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1583.599096069316), range4.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range4.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range4.getLowerBound(), 0.01);
      assertEquals((-1583.599096069316), range6.getLowerBound(), 0.01);
      assertEquals(1582.599096069316, range6.getLength(), 0.01);
      assertEquals((-1.0), range6.getUpperBound(), 0.01);
      assertEquals((-792.299548034658), range6.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range5));
      
      Range range7 = Range.combine(range2, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range1);
      assertNotSame(range7, range5);
      assertNotSame(range7, range3);
      assertNotSame(range7, range4);
      assertNotSame(range7, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      
      String string0 = range0.toString();
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Range[0.0,0.0]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      
      boolean boolean0 = range3.intersects(0.0, 0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range3, range4);
      assertNotSame(range3, range7);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      
      Range range8 = Range.combineIgnoringNaN(range7, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range8);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range1);
      assertNotSame(range7, range5);
      assertNotSame(range7, range3);
      assertNotSame(range7, range8);
      assertNotSame(range7, range4);
      assertNotSame(range7, range6);
      assertNotSame(range8, range3);
      assertNotSame(range8, range5);
      assertNotSame(range8, range4);
      assertNotSame(range8, range7);
      assertNotSame(range8, range6);
      assertNotSame(range8, range2);
      assertNotSame(range8, range1);
      assertNotSame(range8, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1583.599096069316), range4.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range4.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range4.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(1583.599096069316, range8.getLength(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals((-791.799548034658), range8.getCentralValue(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range0));
      
      range2.hashCode();
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertSame(range2, range1);
      assertNotSame(range2, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      
      Range range9 = Range.combine(range1, range0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range9, range3);
      assertNotSame(range9, range8);
      assertNotSame(range9, range5);
      assertNotSame(range9, range2);
      assertNotSame(range9, range1);
      assertNotSame(range9, range0);
      assertNotSame(range9, range6);
      assertNotSame(range9, range7);
      assertNotSame(range9, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getCentralValue(), 0.01);
      assertEquals(0.0, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range5));
      assertTrue(range9.equals((Object)range7));
      assertTrue(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range6));
      assertTrue(range9.equals((Object)range2));
      assertTrue(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range4));
      assertTrue(range9.equals((Object)range0));
      
      Range range10 = Range.combine(range7, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range1);
      assertNotSame(range7, range9);
      assertNotSame(range7, range5);
      assertNotSame(range7, range3);
      assertNotSame(range7, range8);
      assertNotSame(range7, range4);
      assertNotSame(range7, range10);
      assertNotSame(range7, range6);
      assertNotSame(range10, range5);
      assertNotSame(range10, range2);
      assertNotSame(range10, range1);
      assertNotSame(range10, range0);
      assertNotSame(range10, range6);
      assertNotSame(range10, range9);
      assertNotSame(range10, range4);
      assertNotSame(range10, range7);
      assertNotSame(range10, range3);
      assertNotSame(range10, range8);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(0.0, range10.getLowerBound(), 0.01);
      assertEquals(0.0, range10.getUpperBound(), 0.01);
      assertEquals(0.0, range10.getCentralValue(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getLength(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range8));
      assertTrue(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      assertTrue(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range5));
      assertTrue(range10.equals((Object)range1));
      assertTrue(range10.equals((Object)range7));
      assertTrue(range10.equals((Object)range2));
      assertTrue(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range6));
      assertTrue(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range8));
      
      String string1 = range5.toString();
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range4, range6);
      assertNotSame(range4, range9);
      assertNotSame(range4, range10);
      assertNotSame(range4, range7);
      assertNotSame(range4, range8);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range10);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range5, range8);
      assertNotSame(range5, range4);
      assertNotSame(range5, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1583.599096069316), range4.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range4.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range4.getLowerBound(), 0.01);
      assertEquals((-1583.599096069316), range5.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range5.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals("Range[-1583.599096069316,-1583.599096069316]", string1);
      assertNotNull(string1);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range9));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range6));
      assertFalse(string1.equals((Object)string0));
      
      double double0 = range9.getUpperBound();
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range9, range3);
      assertNotSame(range9, range8);
      assertNotSame(range9, range5);
      assertNotSame(range9, range2);
      assertNotSame(range9, range1);
      assertNotSame(range9, range0);
      assertNotSame(range9, range6);
      assertNotSame(range9, range7);
      assertNotSame(range9, range4);
      assertNotSame(range9, range10);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getCentralValue(), 0.01);
      assertEquals(0.0, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range5));
      assertTrue(range9.equals((Object)range10));
      assertTrue(range9.equals((Object)range7));
      assertTrue(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range6));
      assertTrue(range9.equals((Object)range2));
      assertTrue(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range4));
      assertTrue(range9.equals((Object)range0));
      
      boolean boolean1 = range2.contains(0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertSame(range2, range1);
      assertNotSame(range2, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      
      String string2 = range5.toString();
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range4, range6);
      assertNotSame(range4, range9);
      assertNotSame(range4, range10);
      assertNotSame(range4, range7);
      assertNotSame(range4, range8);
      assertNotSame(range4, range3);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range10);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range5, range8);
      assertNotSame(range5, range4);
      assertNotSame(range5, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1583.599096069316), range4.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range4.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range4.getLowerBound(), 0.01);
      assertEquals((-1583.599096069316), range5.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range5.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals("Range[-1583.599096069316,-1583.599096069316]", string2);
      assertNotNull(string2);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range9));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range6));
      
      boolean boolean2 = range9.isNaNRange();
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range9, range3);
      assertNotSame(range9, range8);
      assertNotSame(range9, range5);
      assertNotSame(range9, range2);
      assertNotSame(range9, range1);
      assertNotSame(range9, range0);
      assertNotSame(range9, range6);
      assertNotSame(range9, range7);
      assertNotSame(range9, range4);
      assertNotSame(range9, range10);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(0.0, range9.getCentralValue(), 0.01);
      assertEquals(0.0, range9.getUpperBound(), 0.01);
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertEquals(0.0, range9.getLength(), 0.01);
      assertFalse(boolean2);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range5));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range5));
      assertTrue(range9.equals((Object)range10));
      assertTrue(range9.equals((Object)range7));
      assertTrue(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range6));
      assertTrue(range9.equals((Object)range2));
      assertTrue(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range4));
      assertTrue(range9.equals((Object)range0));
      
      Range range11 = Range.shift(range2, (-3403.292335699));
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertSame(range2, range1);
      assertNotSame(range2, range11);
      assertNotSame(range2, range4);
      assertNotSame(range11, range4);
      assertNotSame(range11, range2);
      assertNotSame(range11, range10);
      assertNotSame(range11, range3);
      assertNotSame(range11, range8);
      assertNotSame(range11, range7);
      assertNotSame(range11, range6);
      assertNotSame(range11, range9);
      assertNotSame(range11, range5);
      assertNotSame(range11, range1);
      assertNotSame(range11, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-3403.292335699), range11.getLowerBound(), 0.01);
      assertEquals((-3403.292335699), range11.getCentralValue(), 0.01);
      assertEquals((-3403.292335699), range11.getUpperBound(), 0.01);
      assertEquals(0.0, range11.getLength(), 0.01);
      assertFalse(range11.isNaNRange());
      assertNotNull(range11);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range0));
      
      Range range12 = Range.combine(range5, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range12, range11);
      assertNotSame(range12, range5);
      assertNotSame(range12, range0);
      assertNotSame(range12, range6);
      assertNotSame(range12, range10);
      assertNotSame(range12, range1);
      assertNotSame(range12, range9);
      assertNotSame(range12, range2);
      assertNotSame(range12, range4);
      assertNotSame(range12, range7);
      assertNotSame(range12, range8);
      assertNotSame(range12, range3);
      assertNotSame(range4, range6);
      assertNotSame(range4, range9);
      assertNotSame(range4, range11);
      assertNotSame(range4, range10);
      assertNotSame(range4, range12);
      assertNotSame(range4, range7);
      assertNotSame(range4, range8);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range5, range0);
      assertNotSame(range5, range7);
      assertNotSame(range5, range11);
      assertNotSame(range5, range10);
      assertNotSame(range5, range12);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range9);
      assertNotSame(range5, range3);
      assertNotSame(range5, range8);
      assertNotSame(range5, range4);
      assertNotSame(range5, range6);
      assertNotSame(range6, range11);
      assertNotSame(range6, range12);
      assertNotSame(range6, range0);
      assertNotSame(range6, range7);
      assertNotSame(range6, range4);
      assertNotSame(range6, range2);
      assertNotSame(range6, range10);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range8);
      assertNotSame(range6, range5);
      assertNotSame(range6, range9);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1583.599096069316), range12.getLowerBound(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals(1582.599096069316, range12.getLength(), 0.01);
      assertEquals((-1.0), range12.getUpperBound(), 0.01);
      assertEquals((-792.299548034658), range12.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1583.599096069316), range4.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range4.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range4.getLowerBound(), 0.01);
      assertEquals((-1583.599096069316), range5.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range5.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals((-1583.599096069316), range6.getLowerBound(), 0.01);
      assertEquals(1582.599096069316, range6.getLength(), 0.01);
      assertEquals((-1.0), range6.getUpperBound(), 0.01);
      assertEquals((-792.299548034658), range6.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range12);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range8));
      assertTrue(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range9));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range9));
      
      double double1 = range8.constrain(0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range12);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertSame(range2, range1);
      assertNotSame(range2, range11);
      assertNotSame(range2, range4);
      assertNotSame(range4, range6);
      assertNotSame(range4, range9);
      assertNotSame(range4, range11);
      assertNotSame(range4, range10);
      assertNotSame(range4, range12);
      assertNotSame(range4, range7);
      assertNotSame(range4, range8);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range7, range12);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range1);
      assertNotSame(range7, range9);
      assertNotSame(range7, range5);
      assertNotSame(range7, range3);
      assertNotSame(range7, range8);
      assertNotSame(range7, range4);
      assertNotSame(range7, range10);
      assertNotSame(range7, range6);
      assertNotSame(range7, range11);
      assertNotSame(range8, range3);
      assertNotSame(range8, range5);
      assertNotSame(range8, range4);
      assertNotSame(range8, range11);
      assertNotSame(range8, range10);
      assertNotSame(range8, range12);
      assertNotSame(range8, range7);
      assertNotSame(range8, range6);
      assertNotSame(range8, range9);
      assertNotSame(range8, range2);
      assertNotSame(range8, range1);
      assertNotSame(range8, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1583.599096069316), range4.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range4.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range4.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(1583.599096069316, range8.getLength(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range8.getLowerBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals((-791.799548034658), range8.getCentralValue(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range12));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range9));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertEquals(double1, double0, 0.01);
      assertFalse(range7.equals((Object)range12));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range10));
      assertTrue(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range8));
      assertTrue(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range11));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range11));
      assertFalse(range8.equals((Object)range10));
      assertFalse(range8.equals((Object)range12));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range9));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range0));
      
      String string3 = range7.toString();
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range7);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertSame(range1, range2);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range12);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range11);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range1, range9);
      assertNotSame(range1, range0);
      assertNotSame(range1, range5);
      assertNotSame(range2, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range2, range12);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertSame(range2, range1);
      assertNotSame(range2, range11);
      assertNotSame(range2, range4);
      assertNotSame(range7, range12);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range1);
      assertNotSame(range7, range9);
      assertNotSame(range7, range5);
      assertNotSame(range7, range3);
      assertNotSame(range7, range8);
      assertNotSame(range7, range4);
      assertNotSame(range7, range10);
      assertNotSame(range7, range6);
      assertNotSame(range7, range11);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals("Range[0.0,0.0]", string3);
      assertNotNull(string3);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range10));
      assertTrue(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range12));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(range7.equals((Object)range12));
      assertTrue(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range10));
      assertTrue(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range8));
      assertTrue(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range11));
      assertTrue(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range1));
      
      Range range13 = Range.shift(range3, 2537.616137721575);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range7);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range3, range5);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range4);
      assertNotSame(range3, range11);
      assertNotSame(range3, range10);
      assertNotSame(range3, range12);
      assertNotSame(range3, range7);
      assertNotSame(range13, range10);
      assertNotSame(range13, range1);
      assertNotSame(range13, range2);
      assertNotSame(range13, range9);
      assertNotSame(range13, range0);
      assertNotSame(range13, range5);
      assertNotSame(range13, range6);
      assertNotSame(range13, range4);
      assertNotSame(range13, range12);
      assertNotSame(range13, range11);
      assertNotSame(range13, range3);
      assertNotSame(range13, range8);
      assertNotSame(range13, range7);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getLength(), 0.01);
      assertEquals(2537.616137721575, range13.getCentralValue(), 0.01);
      assertEquals(2537.616137721575, range13.getUpperBound(), 0.01);
      assertEquals(2537.616137721575, range13.getLowerBound(), 0.01);
      assertNotNull(range13);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range7));
      
      double double2 = range6.constrain(0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range12);
      assertNotSame(range0, range7);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range10);
      assertNotSame(range4, range12);
      assertNotSame(range4, range8);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range9);
      assertNotSame(range4, range11);
      assertNotSame(range4, range10);
      assertNotSame(range4, range7);
      assertNotSame(range4, range5);
      assertNotSame(range4, range13);
      assertNotSame(range4, range0);
      assertNotSame(range6, range12);
      assertNotSame(range6, range5);
      assertNotSame(range6, range11);
      assertNotSame(range6, range0);
      assertNotSame(range6, range7);
      assertNotSame(range6, range13);
      assertNotSame(range6, range4);
      assertNotSame(range6, range2);
      assertNotSame(range6, range10);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range8);
      assertNotSame(range6, range9);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1583.599096069316), range4.getUpperBound(), 0.01);
      assertEquals((-1583.599096069316), range4.getCentralValue(), 0.01);
      assertEquals((-1583.599096069316), range4.getLowerBound(), 0.01);
      assertEquals((-1583.599096069316), range6.getLowerBound(), 0.01);
      assertEquals(1582.599096069316, range6.getLength(), 0.01);
      assertEquals((-1.0), range6.getUpperBound(), 0.01);
      assertEquals((-792.299548034658), range6.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals((-1.0), double2, 0.01);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range13));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range13));
      assertFalse(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range9));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = null;
      double double0 = (-2727.31541);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-2727.31541));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = new Range((-3217.44536445465), (-1355.7225814041412));
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range0, (-1355.7225814041412), true);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = Range.combine(range0, range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-2286.5839729293957), range3.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range3.getUpperBound(), 0.01);
      assertEquals((-3217.44536445465), range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      
      String string0 = range0.toString();
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[-3217.44536445465,-1355.7225814041412]", string0);
      assertNotNull(string0);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      
      Range range4 = Range.combine(range1, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3217.44536445465, range4.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range4.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range4.getUpperBound(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      
      Range range5 = Range.expand(range4, 0.0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3217.44536445465, range4.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range4.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range4.getUpperBound(), 0.01);
      assertEquals(3217.44536445465, range5.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1355.7225814041412), range5.getUpperBound(), 0.01);
      assertEquals((-4573.167945858791), range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      
      Range range6 = Range.expand(range5, (-1.0), 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range4, range6);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range5);
      assertNotSame(range6, range4);
      assertNotSame(range6, range2);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3217.44536445465, range4.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range4.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range4.getUpperBound(), 0.01);
      assertEquals(3217.44536445465, range5.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1355.7225814041412), range5.getUpperBound(), 0.01);
      assertEquals((-4573.167945858791), range5.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range6.getUpperBound(), 0.01);
      assertEquals((-1355.7225814041412), range6.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range2));
      
      Range range7 = Range.shift(range1, 2483.731079551243);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range7, range5);
      assertNotSame(range7, range0);
      assertNotSame(range7, range3);
      assertNotSame(range7, range1);
      assertNotSame(range7, range4);
      assertNotSame(range7, range2);
      assertNotSame(range7, range6);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertEquals(733.7142849034071, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-733.7142849034071), range7.getLowerBound(), 0.01);
      assertEquals((-366.85714245170357), range7.getCentralValue(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range6));
      
      Range range8 = Range.combineIgnoringNaN(range7, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range8);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range8);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range8);
      assertNotSame(range5, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range7, range5);
      assertNotSame(range7, range0);
      assertNotSame(range7, range3);
      assertNotSame(range7, range1);
      assertNotSame(range7, range4);
      assertNotSame(range7, range8);
      assertNotSame(range7, range2);
      assertNotSame(range7, range6);
      assertNotSame(range8, range7);
      assertNotSame(range8, range0);
      assertNotSame(range8, range2);
      assertNotSame(range8, range3);
      assertNotSame(range8, range4);
      assertNotSame(range8, range6);
      assertNotSame(range8, range5);
      assertNotSame(range8, range1);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3217.44536445465, range4.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range4.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range4.getUpperBound(), 0.01);
      assertEquals(3217.44536445465, range5.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1355.7225814041412), range5.getUpperBound(), 0.01);
      assertEquals((-4573.167945858791), range5.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertEquals(733.7142849034071, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-733.7142849034071), range7.getLowerBound(), 0.01);
      assertEquals((-366.85714245170357), range7.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(4573.167945858791, range8.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range8.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range8.getLowerBound(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range1));
      
      Range range9 = Range.combineIgnoringNaN(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range8);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range2, range9);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range8);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range9);
      assertNotSame(range5, range0);
      assertNotSame(range5, range8);
      assertNotSame(range5, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range9);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range7, range5);
      assertNotSame(range7, range9);
      assertNotSame(range7, range0);
      assertNotSame(range7, range3);
      assertNotSame(range7, range1);
      assertNotSame(range7, range4);
      assertNotSame(range7, range8);
      assertNotSame(range7, range2);
      assertNotSame(range7, range6);
      assertNotSame(range8, range7);
      assertNotSame(range8, range0);
      assertNotSame(range8, range2);
      assertNotSame(range8, range3);
      assertNotSame(range8, range4);
      assertNotSame(range8, range9);
      assertNotSame(range8, range6);
      assertNotSame(range8, range5);
      assertNotSame(range8, range1);
      assertNotSame(range9, range1);
      assertNotSame(range9, range4);
      assertNotSame(range9, range2);
      assertNotSame(range9, range3);
      assertNotSame(range9, range5);
      assertNotSame(range9, range6);
      assertNotSame(range9, range7);
      assertNotSame(range9, range0);
      assertNotSame(range9, range8);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3217.44536445465, range4.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range4.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range4.getUpperBound(), 0.01);
      assertEquals(3217.44536445465, range5.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1355.7225814041412), range5.getUpperBound(), 0.01);
      assertEquals((-4573.167945858791), range5.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertEquals(733.7142849034071, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-733.7142849034071), range7.getLowerBound(), 0.01);
      assertEquals((-366.85714245170357), range7.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(4573.167945858791, range8.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range8.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range8.getLowerBound(), 0.01);
      assertEquals(0.0, range9.getUpperBound(), 0.01);
      assertEquals((-2286.5839729293957), range9.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range9.getLowerBound(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(4573.167945858791, range9.getLength(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range0));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range5));
      assertTrue(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range0));
      
      Range range10 = Range.expand(range4, (-3217.44536445465), 3301.7684294921223);
      assertNotSame(range0, range10);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range8);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range10);
      assertNotSame(range2, range6);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range8);
      assertNotSame(range4, range10);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range9);
      assertNotSame(range10, range7);
      assertNotSame(range10, range3);
      assertNotSame(range10, range2);
      assertNotSame(range10, range6);
      assertNotSame(range10, range4);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range1);
      assertNotSame(range10, range5);
      assertNotSame(range10, range9);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3217.44536445465, range4.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range4.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range4.getUpperBound(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(274522.300085878, range10.getLength(), 0.01);
      assertEquals(1.0621903805390736E7, range10.getUpperBound(), 0.01);
      assertEquals(1.0484642655347798E7, range10.getCentralValue(), 0.01);
      assertEquals(1.0347381505304858E7, range10.getLowerBound(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range9));
      
      Range range11 = Range.expandToInclude(range4, 0.0);
      assertNotSame(range0, range10);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range5);
      assertNotSame(range2, range7);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range6);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range8);
      assertNotSame(range4, range10);
      assertNotSame(range4, range0);
      assertNotSame(range4, range11);
      assertNotSame(range4, range5);
      assertNotSame(range4, range1);
      assertNotSame(range4, range9);
      assertNotSame(range11, range0);
      assertNotSame(range11, range5);
      assertNotSame(range11, range1);
      assertNotSame(range11, range9);
      assertNotSame(range11, range7);
      assertNotSame(range11, range3);
      assertNotSame(range11, range6);
      assertNotSame(range11, range4);
      assertNotSame(range11, range8);
      assertNotSame(range11, range2);
      assertNotSame(range11, range10);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3217.44536445465, range4.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range4.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range4.getUpperBound(), 0.01);
      assertEquals(4573.167945858791, range11.getLength(), 0.01);
      assertEquals(0.0, range11.getUpperBound(), 0.01);
      assertEquals((-4573.167945858791), range11.getLowerBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals((-2286.5839729293957), range11.getCentralValue(), 0.01);
      assertNotNull(range11);
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range1));
      assertTrue(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range6));
      assertTrue(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range10));
      
      Range range12 = Range.combineIgnoringNaN(range11, range1);
      assertNotSame(range0, range10);
      assertNotSame(range0, range1);
      assertNotSame(range0, range12);
      assertNotSame(range0, range7);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range7);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range12);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range2, range9);
      assertNotSame(range2, range7);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range8);
      assertNotSame(range2, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range11);
      assertNotSame(range2, range6);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range8);
      assertNotSame(range4, range10);
      assertNotSame(range4, range0);
      assertNotSame(range4, range11);
      assertNotSame(range4, range1);
      assertNotSame(range4, range12);
      assertNotSame(range4, range5);
      assertNotSame(range4, range9);
      assertNotSame(range11, range0);
      assertNotSame(range11, range5);
      assertNotSame(range11, range1);
      assertNotSame(range11, range12);
      assertNotSame(range11, range9);
      assertNotSame(range11, range7);
      assertNotSame(range11, range3);
      assertNotSame(range11, range6);
      assertNotSame(range11, range8);
      assertNotSame(range11, range4);
      assertNotSame(range11, range2);
      assertNotSame(range11, range10);
      assertNotSame(range12, range6);
      assertNotSame(range12, range7);
      assertNotSame(range12, range5);
      assertNotSame(range12, range3);
      assertNotSame(range12, range9);
      assertNotSame(range12, range8);
      assertNotSame(range12, range11);
      assertNotSame(range12, range1);
      assertNotSame(range12, range0);
      assertNotSame(range12, range2);
      assertNotSame(range12, range4);
      assertNotSame(range12, range10);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3217.44536445465, range4.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range4.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range4.getUpperBound(), 0.01);
      assertEquals(4573.167945858791, range11.getLength(), 0.01);
      assertEquals(0.0, range11.getUpperBound(), 0.01);
      assertEquals((-4573.167945858791), range11.getLowerBound(), 0.01);
      assertFalse(range11.isNaNRange());
      assertEquals((-2286.5839729293957), range11.getCentralValue(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals((-4573.167945858791), range12.getLowerBound(), 0.01);
      assertEquals(4573.167945858791, range12.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range12.getCentralValue(), 0.01);
      assertEquals(0.0, range12.getUpperBound(), 0.01);
      assertNotNull(range12);
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range8));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range1));
      assertTrue(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range6));
      assertTrue(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range10));
      assertTrue(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range3));
      assertTrue(range12.equals((Object)range8));
      assertTrue(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range10));
      
      Range range13 = Range.expand(range7, 0.0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range12);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range12);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range7, range5);
      assertNotSame(range7, range9);
      assertNotSame(range7, range0);
      assertNotSame(range7, range3);
      assertNotSame(range7, range1);
      assertNotSame(range7, range8);
      assertNotSame(range7, range11);
      assertNotSame(range7, range2);
      assertNotSame(range7, range12);
      assertNotSame(range7, range10);
      assertNotSame(range7, range4);
      assertNotSame(range7, range13);
      assertNotSame(range7, range6);
      assertNotSame(range13, range11);
      assertNotSame(range13, range12);
      assertNotSame(range13, range1);
      assertNotSame(range13, range2);
      assertNotSame(range13, range3);
      assertNotSame(range13, range9);
      assertNotSame(range13, range0);
      assertNotSame(range13, range8);
      assertNotSame(range13, range5);
      assertNotSame(range13, range4);
      assertNotSame(range13, range10);
      assertNotSame(range13, range6);
      assertNotSame(range13, range7);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertEquals(733.7142849034071, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-733.7142849034071), range7.getLowerBound(), 0.01);
      assertEquals((-366.85714245170357), range7.getCentralValue(), 0.01);
      assertEquals((-366.85714245170357), range13.getCentralValue(), 0.01);
      assertEquals(0.0, range13.getUpperBound(), 0.01);
      assertEquals(733.7142849034071, range13.getLength(), 0.01);
      assertEquals((-733.7142849034071), range13.getLowerBound(), 0.01);
      assertFalse(range13.isNaNRange());
      assertNotNull(range13);
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range12));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range11));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range0));
      assertTrue(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range6));
      
      Range range14 = Range.shift(range3, 0.0);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range12);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range14);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range12);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range3, range13);
      assertNotSame(range3, range10);
      assertNotSame(range3, range4);
      assertNotSame(range3, range12);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range8);
      assertNotSame(range3, range14);
      assertNotSame(range3, range7);
      assertNotSame(range3, range2);
      assertNotSame(range3, range9);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range3, range11);
      assertNotSame(range14, range11);
      assertNotSame(range14, range12);
      assertNotSame(range14, range1);
      assertNotSame(range14, range13);
      assertNotSame(range14, range3);
      assertNotSame(range14, range6);
      assertNotSame(range14, range10);
      assertNotSame(range14, range4);
      assertNotSame(range14, range0);
      assertNotSame(range14, range5);
      assertNotSame(range14, range9);
      assertNotSame(range14, range7);
      assertNotSame(range14, range2);
      assertNotSame(range14, range8);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-2286.5839729293957), range3.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range3.getUpperBound(), 0.01);
      assertEquals((-3217.44536445465), range3.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range14.getUpperBound(), 0.01);
      assertEquals((-3217.44536445465), range14.getLowerBound(), 0.01);
      assertEquals((-2286.5839729293957), range14.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertNotNull(range14);
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range10));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range13));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range14.equals((Object)range11));
      assertTrue(range14.equals((Object)range3));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range4));
      assertFalse(range14.equals((Object)range5));
      assertTrue(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range8));
      assertTrue(range14.equals((Object)range1));
      
      Range range15 = Range.expandToInclude(range5, (-1816.779891522));
      assertNotSame(range15, range1);
      assertNotSame(range15, range12);
      assertNotSame(range15, range2);
      assertNotSame(range15, range11);
      assertNotSame(range15, range13);
      assertNotSame(range15, range14);
      assertNotSame(range15, range6);
      assertSame(range15, range5);
      assertNotSame(range15, range3);
      assertNotSame(range15, range9);
      assertNotSame(range15, range4);
      assertNotSame(range15, range7);
      assertNotSame(range15, range8);
      assertNotSame(range15, range10);
      assertNotSame(range15, range0);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range12);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range15);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range14);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range12);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range2, range7);
      assertNotSame(range2, range15);
      assertNotSame(range2, range8);
      assertNotSame(range2, range1);
      assertNotSame(range2, range11);
      assertNotSame(range2, range9);
      assertNotSame(range2, range5);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range13);
      assertNotSame(range2, range6);
      assertNotSame(range4, range6);
      assertNotSame(range4, range13);
      assertNotSame(range4, range14);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range12);
      assertNotSame(range4, range7);
      assertNotSame(range4, range8);
      assertNotSame(range4, range15);
      assertNotSame(range4, range10);
      assertNotSame(range4, range11);
      assertNotSame(range4, range1);
      assertNotSame(range4, range5);
      assertNotSame(range4, range9);
      assertNotSame(range5, range13);
      assertNotSame(range5, range14);
      assertNotSame(range5, range10);
      assertNotSame(range5, range4);
      assertNotSame(range5, range12);
      assertNotSame(range5, range6);
      assertNotSame(range5, range0);
      assertNotSame(range5, range8);
      assertSame(range5, range15);
      assertNotSame(range5, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range9);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range11);
      assertEquals(3217.44536445465, range15.getLength(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals((-2964.4452636314663), range15.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range15.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range15.getUpperBound(), 0.01);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3217.44536445465, range4.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range4.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range4.getUpperBound(), 0.01);
      assertEquals(3217.44536445465, range5.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1355.7225814041412), range5.getUpperBound(), 0.01);
      assertEquals((-4573.167945858791), range5.getLowerBound(), 0.01);
      assertNotNull(range15);
      assertFalse(range15.equals((Object)range1));
      assertFalse(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range2));
      assertFalse(range15.equals((Object)range11));
      assertFalse(range15.equals((Object)range13));
      assertFalse(range15.equals((Object)range14));
      assertFalse(range15.equals((Object)range6));
      assertFalse(range15.equals((Object)range3));
      assertTrue(range15.equals((Object)range4));
      assertFalse(range15.equals((Object)range9));
      assertFalse(range15.equals((Object)range7));
      assertFalse(range15.equals((Object)range8));
      assertFalse(range15.equals((Object)range10));
      assertFalse(range15.equals((Object)range0));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range14));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range12));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range13));
      assertFalse(range4.equals((Object)range14));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range5.equals((Object)range13));
      assertFalse(range5.equals((Object)range14));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range11));
      
      Range range16 = Range.combineIgnoringNaN(range7, range6);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range12);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range16);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range16, range9);
      assertNotSame(range16, range5);
      assertNotSame(range16, range14);
      assertNotSame(range16, range0);
      assertNotSame(range16, range3);
      assertNotSame(range16, range4);
      assertNotSame(range16, range12);
      assertNotSame(range16, range10);
      assertNotSame(range16, range13);
      assertNotSame(range16, range6);
      assertNotSame(range16, range7);
      assertNotSame(range16, range15);
      assertNotSame(range16, range8);
      assertNotSame(range16, range1);
      assertNotSame(range16, range11);
      assertNotSame(range16, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range16);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range15);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range14);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range12);
      assertNotSame(range1, range13);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range2, range7);
      assertNotSame(range2, range15);
      assertNotSame(range2, range16);
      assertNotSame(range2, range8);
      assertNotSame(range2, range1);
      assertNotSame(range2, range11);
      assertNotSame(range2, range9);
      assertNotSame(range2, range5);
      assertNotSame(range2, range14);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range13);
      assertNotSame(range2, range6);
      assertNotSame(range4, range6);
      assertNotSame(range4, range13);
      assertNotSame(range4, range14);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range12);
      assertNotSame(range4, range7);
      assertNotSame(range4, range8);
      assertNotSame(range4, range15);
      assertNotSame(range4, range10);
      assertNotSame(range4, range11);
      assertNotSame(range4, range16);
      assertNotSame(range4, range1);
      assertNotSame(range4, range5);
      assertNotSame(range4, range9);
      assertNotSame(range5, range16);
      assertNotSame(range5, range13);
      assertNotSame(range5, range14);
      assertNotSame(range5, range10);
      assertNotSame(range5, range4);
      assertNotSame(range5, range12);
      assertNotSame(range5, range6);
      assertNotSame(range5, range0);
      assertNotSame(range5, range8);
      assertSame(range5, range15);
      assertNotSame(range5, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range9);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range11);
      assertNotSame(range6, range1);
      assertNotSame(range6, range14);
      assertNotSame(range6, range12);
      assertNotSame(range6, range9);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range11);
      assertNotSame(range6, range5);
      assertNotSame(range6, range8);
      assertNotSame(range6, range2);
      assertNotSame(range6, range15);
      assertNotSame(range6, range7);
      assertNotSame(range6, range16);
      assertNotSame(range6, range4);
      assertNotSame(range6, range10);
      assertNotSame(range6, range13);
      assertNotSame(range7, range5);
      assertNotSame(range7, range9);
      assertNotSame(range7, range0);
      assertNotSame(range7, range3);
      assertNotSame(range7, range14);
      assertNotSame(range7, range1);
      assertNotSame(range7, range8);
      assertNotSame(range7, range11);
      assertNotSame(range7, range2);
      assertNotSame(range7, range15);
      assertNotSame(range7, range16);
      assertNotSame(range7, range12);
      assertNotSame(range7, range10);
      assertNotSame(range7, range4);
      assertNotSame(range7, range13);
      assertNotSame(range7, range6);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-677.8612907020706), range16.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range16.getLowerBound(), 0.01);
      assertFalse(range16.isNaNRange());
      assertEquals(0.0, range16.getUpperBound(), 0.01);
      assertEquals(1355.7225814041412, range16.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3217.44536445465, range4.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range4.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range4.getUpperBound(), 0.01);
      assertEquals(3217.44536445465, range5.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1355.7225814041412), range5.getUpperBound(), 0.01);
      assertEquals((-4573.167945858791), range5.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range6.getUpperBound(), 0.01);
      assertEquals((-1355.7225814041412), range6.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertEquals(733.7142849034071, range7.getLength(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-733.7142849034071), range7.getLowerBound(), 0.01);
      assertEquals((-366.85714245170357), range7.getCentralValue(), 0.01);
      assertNotNull(range16);
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range16.equals((Object)range9));
      assertFalse(range16.equals((Object)range5));
      assertFalse(range16.equals((Object)range14));
      assertFalse(range16.equals((Object)range0));
      assertFalse(range16.equals((Object)range3));
      assertFalse(range16.equals((Object)range4));
      assertFalse(range16.equals((Object)range12));
      assertFalse(range16.equals((Object)range10));
      assertFalse(range16.equals((Object)range13));
      assertFalse(range16.equals((Object)range6));
      assertFalse(range16.equals((Object)range7));
      assertFalse(range16.equals((Object)range15));
      assertFalse(range16.equals((Object)range8));
      assertFalse(range16.equals((Object)range1));
      assertFalse(range16.equals((Object)range11));
      assertFalse(range16.equals((Object)range2));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range14));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range15));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range15));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range12));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range13));
      assertFalse(range4.equals((Object)range14));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range15));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range5.equals((Object)range13));
      assertFalse(range5.equals((Object)range14));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range14));
      assertFalse(range6.equals((Object)range12));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range15));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range13));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range14));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range11));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range15));
      assertTrue(range7.equals((Object)range13));
      assertFalse(range7.equals((Object)range12));
      assertFalse(range7.equals((Object)range10));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range6));
      
      Range range17 = new Range(0.0, 2483.731079551243);
      assertEquals(0.0, range17.getLowerBound(), 0.01);
      assertFalse(range17.isNaNRange());
      assertEquals(2483.731079551243, range17.getLength(), 0.01);
      assertEquals(2483.731079551243, range17.getUpperBound(), 0.01);
      assertEquals(1241.8655397756215, range17.getCentralValue(), 0.01);
      assertNotNull(range17);
      assertFalse(range17.equals((Object)range15));
      assertFalse(range17.equals((Object)range16));
      assertFalse(range17.equals((Object)range7));
      assertFalse(range17.equals((Object)range1));
      assertFalse(range17.equals((Object)range8));
      assertFalse(range17.equals((Object)range11));
      assertFalse(range17.equals((Object)range2));
      assertFalse(range17.equals((Object)range5));
      assertFalse(range17.equals((Object)range9));
      assertFalse(range17.equals((Object)range0));
      assertFalse(range17.equals((Object)range3));
      assertFalse(range17.equals((Object)range14));
      assertFalse(range17.equals((Object)range12));
      assertFalse(range17.equals((Object)range10));
      assertFalse(range17.equals((Object)range4));
      assertFalse(range17.equals((Object)range13));
      assertFalse(range17.equals((Object)range6));
      
      Range range18 = Range.shift(range17, 0.0);
      assertNotSame(range17, range15);
      assertNotSame(range17, range16);
      assertNotSame(range17, range7);
      assertNotSame(range17, range1);
      assertNotSame(range17, range8);
      assertNotSame(range17, range11);
      assertNotSame(range17, range2);
      assertNotSame(range17, range5);
      assertNotSame(range17, range9);
      assertNotSame(range17, range18);
      assertNotSame(range17, range0);
      assertNotSame(range17, range3);
      assertNotSame(range17, range14);
      assertNotSame(range17, range12);
      assertNotSame(range17, range10);
      assertNotSame(range17, range4);
      assertNotSame(range17, range13);
      assertNotSame(range17, range6);
      assertNotSame(range18, range7);
      assertNotSame(range18, range8);
      assertNotSame(range18, range10);
      assertNotSame(range18, range15);
      assertNotSame(range18, range4);
      assertNotSame(range18, range16);
      assertNotSame(range18, range11);
      assertNotSame(range18, range1);
      assertNotSame(range18, range5);
      assertNotSame(range18, range9);
      assertNotSame(range18, range13);
      assertNotSame(range18, range14);
      assertNotSame(range18, range3);
      assertNotSame(range18, range2);
      assertNotSame(range18, range6);
      assertNotSame(range18, range17);
      assertNotSame(range18, range0);
      assertNotSame(range18, range12);
      assertEquals(0.0, range17.getLowerBound(), 0.01);
      assertFalse(range17.isNaNRange());
      assertEquals(2483.731079551243, range17.getLength(), 0.01);
      assertEquals(2483.731079551243, range17.getUpperBound(), 0.01);
      assertEquals(1241.8655397756215, range17.getCentralValue(), 0.01);
      assertEquals(1241.8655397756215, range18.getCentralValue(), 0.01);
      assertEquals(2483.731079551243, range18.getUpperBound(), 0.01);
      assertEquals(0.0, range18.getLowerBound(), 0.01);
      assertFalse(range18.isNaNRange());
      assertEquals(2483.731079551243, range18.getLength(), 0.01);
      assertNotNull(range18);
      assertFalse(range17.equals((Object)range15));
      assertFalse(range17.equals((Object)range16));
      assertFalse(range17.equals((Object)range7));
      assertFalse(range17.equals((Object)range1));
      assertFalse(range17.equals((Object)range8));
      assertFalse(range17.equals((Object)range11));
      assertFalse(range17.equals((Object)range2));
      assertFalse(range17.equals((Object)range5));
      assertFalse(range17.equals((Object)range9));
      assertFalse(range17.equals((Object)range0));
      assertFalse(range17.equals((Object)range3));
      assertFalse(range17.equals((Object)range14));
      assertFalse(range17.equals((Object)range12));
      assertFalse(range17.equals((Object)range10));
      assertFalse(range17.equals((Object)range4));
      assertFalse(range17.equals((Object)range13));
      assertFalse(range17.equals((Object)range6));
      assertFalse(range18.equals((Object)range7));
      assertFalse(range18.equals((Object)range8));
      assertFalse(range18.equals((Object)range10));
      assertFalse(range18.equals((Object)range15));
      assertFalse(range18.equals((Object)range4));
      assertFalse(range18.equals((Object)range16));
      assertFalse(range18.equals((Object)range11));
      assertFalse(range18.equals((Object)range1));
      assertFalse(range18.equals((Object)range5));
      assertFalse(range18.equals((Object)range9));
      assertFalse(range18.equals((Object)range13));
      assertFalse(range18.equals((Object)range14));
      assertFalse(range18.equals((Object)range3));
      assertFalse(range18.equals((Object)range2));
      assertFalse(range18.equals((Object)range6));
      assertFalse(range18.equals((Object)range0));
      assertFalse(range18.equals((Object)range12));
      assertTrue(range18.equals((Object)range17));
      
      Range range19 = Range.shift(range2, 2483.731079551243, true);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range12);
      assertNotSame(range0, range17);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range18);
      assertNotSame(range0, range4);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range0, range19);
      assertNotSame(range0, range10);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range16);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range2, range7);
      assertNotSame(range2, range15);
      assertNotSame(range2, range16);
      assertNotSame(range2, range8);
      assertNotSame(range2, range1);
      assertNotSame(range2, range11);
      assertNotSame(range2, range17);
      assertNotSame(range2, range9);
      assertNotSame(range2, range5);
      assertNotSame(range2, range14);
      assertNotSame(range2, range18);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range13);
      assertNotSame(range2, range19);
      assertNotSame(range2, range6);
      assertNotSame(range19, range7);
      assertNotSame(range19, range0);
      assertNotSame(range19, range11);
      assertNotSame(range19, range8);
      assertNotSame(range19, range15);
      assertNotSame(range19, range3);
      assertNotSame(range19, range13);
      assertNotSame(range19, range14);
      assertNotSame(range19, range17);
      assertNotSame(range19, range2);
      assertNotSame(range19, range6);
      assertNotSame(range19, range12);
      assertNotSame(range19, range1);
      assertNotSame(range19, range5);
      assertNotSame(range19, range9);
      assertNotSame(range19, range18);
      assertNotSame(range19, range16);
      assertNotSame(range19, range10);
      assertNotSame(range19, range4);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertEquals((-227.71408325703942), range19.getUpperBound(), 0.01);
      assertEquals((-2089.4368663075484), range19.getLowerBound(), 0.01);
      assertEquals(1861.722783050509, range19.getLength(), 0.01);
      assertFalse(range19.isNaNRange());
      assertEquals((-1158.575474782294), range19.getCentralValue(), 0.01);
      assertNotNull(range19);
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range17));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range18));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range16));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range15));
      assertFalse(range2.equals((Object)range16));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range17));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range18));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range12));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range19.equals((Object)range7));
      assertFalse(range19.equals((Object)range0));
      assertFalse(range19.equals((Object)range11));
      assertFalse(range19.equals((Object)range8));
      assertFalse(range19.equals((Object)range15));
      assertFalse(range19.equals((Object)range3));
      assertFalse(range19.equals((Object)range13));
      assertFalse(range19.equals((Object)range14));
      assertFalse(range19.equals((Object)range17));
      assertFalse(range19.equals((Object)range2));
      assertFalse(range19.equals((Object)range6));
      assertFalse(range19.equals((Object)range12));
      assertFalse(range19.equals((Object)range1));
      assertFalse(range19.equals((Object)range5));
      assertFalse(range19.equals((Object)range9));
      assertFalse(range19.equals((Object)range18));
      assertFalse(range19.equals((Object)range16));
      assertFalse(range19.equals((Object)range10));
      assertFalse(range19.equals((Object)range4));
      
      boolean boolean0 = range15.isNaNRange();
      assertNotSame(range15, range1);
      assertNotSame(range15, range12);
      assertNotSame(range15, range2);
      assertNotSame(range15, range11);
      assertNotSame(range15, range13);
      assertNotSame(range15, range14);
      assertNotSame(range15, range6);
      assertSame(range15, range5);
      assertNotSame(range15, range3);
      assertNotSame(range15, range16);
      assertNotSame(range15, range9);
      assertNotSame(range15, range4);
      assertNotSame(range15, range7);
      assertNotSame(range15, range8);
      assertNotSame(range15, range10);
      assertNotSame(range15, range19);
      assertNotSame(range15, range17);
      assertNotSame(range15, range0);
      assertNotSame(range15, range18);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range12);
      assertNotSame(range0, range17);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range18);
      assertNotSame(range0, range4);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range0, range19);
      assertNotSame(range0, range10);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range16);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range16);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range15);
      assertNotSame(range1, range17);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range14);
      assertNotSame(range1, range18);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range12);
      assertNotSame(range1, range13);
      assertNotSame(range1, range19);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range2, range7);
      assertNotSame(range2, range15);
      assertNotSame(range2, range16);
      assertNotSame(range2, range8);
      assertNotSame(range2, range1);
      assertNotSame(range2, range11);
      assertNotSame(range2, range17);
      assertNotSame(range2, range9);
      assertNotSame(range2, range5);
      assertNotSame(range2, range14);
      assertNotSame(range2, range18);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range12);
      assertNotSame(range2, range10);
      assertNotSame(range2, range13);
      assertNotSame(range2, range19);
      assertNotSame(range2, range6);
      assertNotSame(range4, range6);
      assertNotSame(range4, range13);
      assertNotSame(range4, range14);
      assertNotSame(range4, range3);
      assertNotSame(range4, range17);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range12);
      assertNotSame(range4, range18);
      assertNotSame(range4, range7);
      assertNotSame(range4, range19);
      assertNotSame(range4, range8);
      assertNotSame(range4, range15);
      assertNotSame(range4, range10);
      assertNotSame(range4, range11);
      assertNotSame(range4, range16);
      assertNotSame(range4, range1);
      assertNotSame(range4, range5);
      assertNotSame(range4, range9);
      assertNotSame(range5, range16);
      assertNotSame(range5, range13);
      assertNotSame(range5, range14);
      assertNotSame(range5, range10);
      assertNotSame(range5, range4);
      assertNotSame(range5, range12);
      assertNotSame(range5, range19);
      assertNotSame(range5, range6);
      assertNotSame(range5, range0);
      assertNotSame(range5, range8);
      assertNotSame(range5, range18);
      assertSame(range5, range15);
      assertNotSame(range5, range17);
      assertNotSame(range5, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range9);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotSame(range5, range11);
      assertEquals(3217.44536445465, range15.getLength(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals((-2964.4452636314663), range15.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range15.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range15.getUpperBound(), 0.01);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-2711.4451628082825), range2.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range2.getLength(), 0.01);
      assertEquals((-4573.167945858791), range2.getLowerBound(), 0.01);
      assertEquals((-3642.306554333537), range2.getCentralValue(), 0.01);
      assertEquals((-4573.167945858791), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(3217.44536445465, range4.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range4.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range4.getUpperBound(), 0.01);
      assertEquals(3217.44536445465, range5.getLength(), 0.01);
      assertEquals((-2964.4452636314663), range5.getCentralValue(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals((-1355.7225814041412), range5.getUpperBound(), 0.01);
      assertEquals((-4573.167945858791), range5.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range15.equals((Object)range1));
      assertFalse(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range2));
      assertFalse(range15.equals((Object)range11));
      assertFalse(range15.equals((Object)range13));
      assertFalse(range15.equals((Object)range14));
      assertFalse(range15.equals((Object)range6));
      assertFalse(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range16));
      assertTrue(range15.equals((Object)range4));
      assertFalse(range15.equals((Object)range9));
      assertFalse(range15.equals((Object)range7));
      assertFalse(range15.equals((Object)range8));
      assertFalse(range15.equals((Object)range10));
      assertFalse(range15.equals((Object)range19));
      assertFalse(range15.equals((Object)range17));
      assertFalse(range15.equals((Object)range0));
      assertFalse(range15.equals((Object)range18));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range17));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range18));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range19));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range16));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range16));
      assertTrue(range1.equals((Object)range14));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range15));
      assertFalse(range1.equals((Object)range17));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range18));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range19));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range15));
      assertFalse(range2.equals((Object)range16));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range17));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range14));
      assertFalse(range2.equals((Object)range18));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range12));
      assertFalse(range2.equals((Object)range10));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range19));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range13));
      assertFalse(range4.equals((Object)range14));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range17));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range15));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range12));
      assertFalse(range4.equals((Object)range18));
      assertFalse(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range19));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range10));
      assertFalse(range4.equals((Object)range11));
      assertFalse(range4.equals((Object)range16));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range9));
      assertFalse(range5.equals((Object)range16));
      assertFalse(range5.equals((Object)range13));
      assertFalse(range5.equals((Object)range14));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range19));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range18));
      assertFalse(range5.equals((Object)range17));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range11));
      
      Range range20 = Range.combine(range14, range1);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range12);
      assertNotSame(range0, range17);
      assertNotSame(range0, range9);
      assertNotSame(range0, range3);
      assertNotSame(range0, range18);
      assertNotSame(range0, range4);
      assertNotSame(range0, range13);
      assertNotSame(range0, range6);
      assertNotSame(range0, range19);
      assertNotSame(range0, range20);
      assertNotSame(range0, range10);
      assertNotSame(range0, range15);
      assertNotSame(range0, range7);
      assertNotSame(range0, range16);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range16);
      assertNotSame(range1, range20);
      assertNotSame(range1, range8);
      assertNotSame(range1, range11);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range15);
      assertNotSame(range1, range17);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range14);
      assertNotSame(range1, range18);
      assertNotSame(range1, range3);
      assertNotSame(range1, range9);
      assertNotSame(range1, range12);
      assertNotSame(range1, range13);
      assertNotSame(range1, range19);
      assertNotSame(range1, range4);
      assertNotSame(range1, range10);
      assertNotSame(range3, range16);
      assertNotSame(range3, range19);
      assertNotSame(range3, range13);
      assertNotSame(range3, range10);
      assertNotSame(range3, range4);
      assertNotSame(range3, range12);
      assertNotSame(range3, range6);
      assertNotSame(range3, range0);
      assertNotSame(range3, range18);
      assertNotSame(range3, range8);
      assertNotSame(range3, range14);
      assertNotSame(range3, range17);
      assertNotSame(range3, range20);
      assertNotSame(range3, range7);
      assertNotSame(range3, range2);
      assertNotSame(range3, range15);
      assertNotSame(range3, range9);
      assertNotSame(range3, range1);
      assertNotSame(range3, range5);
      assertNotSame(range3, range11);
      assertNotSame(range20, range10);
      assertNotSame(range20, range19);
      assertNotSame(range20, range16);
      assertNotSame(range20, range4);
      assertNotSame(range20, range14);
      assertNotSame(range20, range13);
      assertNotSame(range20, range6);
      assertNotSame(range20, range2);
      assertNotSame(range20, range3);
      assertNotSame(range20, range9);
      assertNotSame(range20, range5);
      assertNotSame(range20, range1);
      assertNotSame(range20, range12);
      assertNotSame(range20, range0);
      assertNotSame(range20, range11);
      assertNotSame(range20, range18);
      assertNotSame(range20, range8);
      assertNotSame(range20, range17);
      assertNotSame(range20, range15);
      assertNotSame(range20, range7);
      assertNotSame(range14, range16);
      assertNotSame(range14, range11);
      assertNotSame(range14, range12);
      assertNotSame(range14, range1);
      assertNotSame(range14, range20);
      assertNotSame(range14, range13);
      assertNotSame(range14, range3);
      assertNotSame(range14, range6);
      assertNotSame(range14, range19);
      assertNotSame(range14, range10);
      assertNotSame(range14, range4);
      assertNotSame(range14, range0);
      assertNotSame(range14, range5);
      assertNotSame(range14, range9);
      assertNotSame(range14, range18);
      assertNotSame(range14, range7);
      assertNotSame(range14, range2);
      assertNotSame(range14, range17);
      assertNotSame(range14, range8);
      assertNotSame(range14, range15);
      assertEquals((-1355.7225814041412), range0.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range0.getLength(), 0.01);
      assertEquals((-2286.5839729293957), range0.getCentralValue(), 0.01);
      assertEquals((-3217.44536445465), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range1.isNaNRange());
      assertEquals((-2286.5839729293957), range1.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range1.getLength(), 0.01);
      assertEquals((-3217.44536445465), range1.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range1.getUpperBound(), 0.01);
      assertEquals(1861.722783050509, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-2286.5839729293957), range3.getCentralValue(), 0.01);
      assertEquals((-1355.7225814041412), range3.getUpperBound(), 0.01);
      assertEquals((-3217.44536445465), range3.getLowerBound(), 0.01);
      assertEquals((-1355.7225814041412), range20.getUpperBound(), 0.01);
      assertEquals((-3217.44536445465), range20.getLowerBound(), 0.01);
      assertEquals((-2286.5839729293957), range20.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range20.getLength(), 0.01);
      assertFalse(range20.isNaNRange());
      assertEquals((-1355.7225814041412), range14.getUpperBound(), 0.01);
      assertEquals((-3217.44536445465), range14.getLowerBound(), 0.01);
      assertEquals((-2286.5839729293957), range14.getCentralValue(), 0.01);
      assertEquals(1861.722783050509, range14.getLength(), 0.01);
      assertFalse(range14.isNaNRange());
      assertNotNull(range20);
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range17));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range18));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range19));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range7));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = null;
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 1.0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = (-440.286425472248);
      Range range0 = new Range((-440.286425472248), (-440.286425472248));
      assertFalse(range0.isNaNRange());
      assertEquals((-440.286425472248), range0.getLowerBound(), 0.01);
      assertEquals((-440.286425472248), range0.getCentralValue(), 0.01);
      assertEquals((-440.286425472248), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      double double1 = (-1.0);
      // Undeclared exception!
      try { 
        Range.scale(range0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = new Range((-2373.261754989), (-1353.0421));
      assertEquals(1020.2196549890002, range0.getLength(), 0.01);
      assertEquals((-1863.1519274945), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1353.0421), range0.getUpperBound(), 0.01);
      assertEquals((-2373.261754989), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 0.0, (-2373.261754989));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1020.2196549890002, range0.getLength(), 0.01);
      assertEquals((-1863.1519274945), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1353.0421), range0.getUpperBound(), 0.01);
      assertEquals((-2373.261754989), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1212487.296364228), range1.getCentralValue(), 0.01);
      assertEquals((-1212487.296364228), range1.getUpperBound(), 0.01);
      assertEquals((-1212487.296364228), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      double double0 = range1.getUpperBound();
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1020.2196549890002, range0.getLength(), 0.01);
      assertEquals((-1863.1519274945), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1353.0421), range0.getUpperBound(), 0.01);
      assertEquals((-2373.261754989), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1212487.296364228), range1.getCentralValue(), 0.01);
      assertEquals((-1212487.296364228), range1.getUpperBound(), 0.01);
      assertEquals((-1212487.296364228), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1212487.296364228), double0, 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = 2414.939962143054;
      Range range0 = new Range((-491.3508), 2414.939962143054);
      assertEquals(961.794581071527, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2414.939962143054, range0.getUpperBound(), 0.01);
      assertEquals(2906.290762143054, range0.getLength(), 0.01);
      assertEquals((-491.3508), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(961.794581071527, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2414.939962143054, range0.getUpperBound(), 0.01);
      assertEquals(2906.290762143054, range0.getLength(), 0.01);
      assertEquals((-491.3508), range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(2414.939962143054, range1.getUpperBound(), 0.01);
      assertEquals(2906.290762143054, range1.getLength(), 0.01);
      assertEquals(961.794581071527, range1.getCentralValue(), 0.01);
      assertEquals((-491.3508), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range0, (-7.4592468092));
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertEquals(961.794581071527, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2414.939962143054, range0.getUpperBound(), 0.01);
      assertEquals(2906.290762143054, range0.getLength(), 0.01);
      assertEquals((-491.3508), range0.getLowerBound(), 0.01);
      assertEquals(2414.939962143054, range2.getUpperBound(), 0.01);
      assertEquals(961.794581071527, range2.getCentralValue(), 0.01);
      assertEquals(2906.290762143054, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-491.3508), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range1));
      
      double double1 = 0.0;
      boolean boolean0 = range2.intersects(791.3907574966552, 0.0);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertEquals(961.794581071527, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2414.939962143054, range0.getUpperBound(), 0.01);
      assertEquals(2906.290762143054, range0.getLength(), 0.01);
      assertEquals((-491.3508), range0.getLowerBound(), 0.01);
      assertEquals(2414.939962143054, range2.getUpperBound(), 0.01);
      assertEquals(961.794581071527, range2.getCentralValue(), 0.01);
      assertEquals(2906.290762143054, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-491.3508), range2.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range1));
      
      double double2 = range2.constrain((-2435.7344208));
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertEquals(961.794581071527, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2414.939962143054, range0.getUpperBound(), 0.01);
      assertEquals(2906.290762143054, range0.getLength(), 0.01);
      assertEquals((-491.3508), range0.getLowerBound(), 0.01);
      assertEquals(2414.939962143054, range2.getUpperBound(), 0.01);
      assertEquals(961.794581071527, range2.getCentralValue(), 0.01);
      assertEquals(2906.290762143054, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-491.3508), range2.getLowerBound(), 0.01);
      assertEquals((-491.3508), double2, 0.01);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      Range range3 = Range.expand(range0, (-2435.7344208), 0.0);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(961.794581071527, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2414.939962143054, range0.getUpperBound(), 0.01);
      assertEquals(2906.290762143054, range0.getLength(), 0.01);
      assertEquals((-491.3508), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(3540438.017683523, range3.getCentralValue(), 0.01);
      assertEquals(3540438.017683523, range3.getUpperBound(), 0.01);
      assertEquals(3540438.017683523, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      
      // Undeclared exception!
      try { 
        Range.scale(range0, (-2435.7344208));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = new Range((-840.7457414251), 1.0);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, 0.0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertEquals((-840.7457414251), range1.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range0, 0.0, true);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.combineIgnoringNaN(range0, range2);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range3.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range3.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = Range.scale(range2, 1.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(1.0, range4.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range4.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      
      Range range5 = new Range(1.0, 2486.738);
      assertEquals(2485.738, range5.getLength(), 0.01);
      assertEquals(1243.869, range5.getCentralValue(), 0.01);
      assertEquals(2486.738, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertNotNull(range5);
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      
      Range range6 = Range.expand(range4, 1680.18, 0.0);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(1.0, range4.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range4.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range4.getCentralValue(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1.0, range6.getUpperBound(), 0.01);
      assertEquals((-707562.0527845249), range6.getCentralValue(), 0.01);
      assertEquals(1415126.1055690497, range6.getLength(), 0.01);
      assertEquals((-1415125.1055690497), range6.getLowerBound(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range2));
      
      Range range7 = Range.combineIgnoringNaN(range5, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range2, range7);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range5);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range0);
      assertNotSame(range5, range6);
      assertNotSame(range5, range7);
      assertNotSame(range5, range2);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range6, range7);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertNotSame(range7, range6);
      assertNotSame(range7, range4);
      assertNotSame(range7, range1);
      assertNotSame(range7, range3);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range5);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(1.0, range4.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range4.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range4.getCentralValue(), 0.01);
      assertEquals(2485.738, range5.getLength(), 0.01);
      assertEquals(1243.869, range5.getCentralValue(), 0.01);
      assertEquals(2486.738, range5.getUpperBound(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertFalse(range6.isNaNRange());
      assertEquals(1.0, range6.getUpperBound(), 0.01);
      assertEquals((-707562.0527845249), range6.getCentralValue(), 0.01);
      assertEquals(1415126.1055690497, range6.getLength(), 0.01);
      assertEquals((-1415125.1055690497), range6.getLowerBound(), 0.01);
      assertEquals(2486.738, range7.getUpperBound(), 0.01);
      assertEquals((-1415125.1055690497), range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-706319.1837845249), range7.getCentralValue(), 0.01);
      assertEquals(1417611.8435690496, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range6));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range5));
      
      Range range8 = Range.scale(range3, 799.49949847732);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range2, range7);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range5);
      assertNotSame(range8, range3);
      assertNotSame(range8, range6);
      assertNotSame(range8, range7);
      assertNotSame(range8, range4);
      assertNotSame(range8, range5);
      assertNotSame(range8, range2);
      assertNotSame(range8, range1);
      assertNotSame(range8, range0);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range3.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range3.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(799.49949847732, range8.getUpperBound(), 0.01);
      assertEquals(672975.2981147873, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals((-672175.79861631), range8.getLowerBound(), 0.01);
      assertEquals((-335688.14955891634), range8.getCentralValue(), 0.01);
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range0));
      
      Range range9 = Range.scale(range2, 5102.89541173);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range2, range7);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range9, range0);
      assertNotSame(range9, range1);
      assertNotSame(range9, range6);
      assertNotSame(range9, range3);
      assertNotSame(range9, range4);
      assertNotSame(range9, range5);
      assertNotSame(range9, range7);
      assertNotSame(range9, range2);
      assertNotSame(range9, range8);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertEquals((-4290237.58634968), range9.getLowerBound(), 0.01);
      assertEquals(4295340.48176141, range9.getLength(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals((-2142567.345468975), range9.getCentralValue(), 0.01);
      assertEquals(5102.89541173, range9.getUpperBound(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range8));
      
      Range range10 = Range.expandToInclude(range3, 1638.199303161986);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range2, range7);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range10, range6);
      assertNotSame(range10, range7);
      assertNotSame(range10, range2);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertNotSame(range10, range5);
      assertNotSame(range10, range4);
      assertNotSame(range10, range9);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range3.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range3.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(2478.945044587086, range10.getLength(), 0.01);
      assertEquals((-840.7457414251), range10.getLowerBound(), 0.01);
      assertEquals(1638.199303161986, range10.getUpperBound(), 0.01);
      assertEquals(398.72678086844303, range10.getCentralValue(), 0.01);
      assertFalse(range10.isNaNRange());
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range4));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range9));
      
      Range range11 = Range.combine(range10, range0);
      assertNotSame(range0, range8);
      assertNotSame(range0, range5);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range2, range7);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range11);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range10, range6);
      assertNotSame(range10, range7);
      assertNotSame(range10, range2);
      assertNotSame(range10, range11);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertNotSame(range10, range5);
      assertNotSame(range10, range4);
      assertNotSame(range10, range9);
      assertNotSame(range11, range6);
      assertNotSame(range11, range4);
      assertNotSame(range11, range7);
      assertNotSame(range11, range3);
      assertNotSame(range11, range9);
      assertNotSame(range11, range5);
      assertNotSame(range11, range0);
      assertNotSame(range11, range1);
      assertNotSame(range11, range2);
      assertNotSame(range11, range8);
      assertNotSame(range11, range10);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range3.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range3.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(2478.945044587086, range10.getLength(), 0.01);
      assertEquals((-840.7457414251), range10.getLowerBound(), 0.01);
      assertEquals(1638.199303161986, range10.getUpperBound(), 0.01);
      assertEquals(398.72678086844303, range10.getCentralValue(), 0.01);
      assertFalse(range10.isNaNRange());
      assertFalse(range11.isNaNRange());
      assertEquals(398.72678086844303, range11.getCentralValue(), 0.01);
      assertEquals(1638.199303161986, range11.getUpperBound(), 0.01);
      assertEquals(2478.945044587086, range11.getLength(), 0.01);
      assertEquals((-840.7457414251), range11.getLowerBound(), 0.01);
      assertNotNull(range11);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range0));
      assertTrue(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range8));
      
      Range range12 = Range.shift(range11, (-840.7457414251));
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range2, range7);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range11);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range12);
      assertNotSame(range3, range12);
      assertNotSame(range3, range7);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range10, range6);
      assertNotSame(range10, range7);
      assertNotSame(range10, range12);
      assertNotSame(range10, range2);
      assertNotSame(range10, range11);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertNotSame(range10, range5);
      assertNotSame(range10, range4);
      assertNotSame(range10, range9);
      assertNotSame(range11, range6);
      assertNotSame(range11, range4);
      assertNotSame(range11, range7);
      assertNotSame(range11, range3);
      assertNotSame(range11, range9);
      assertNotSame(range11, range5);
      assertNotSame(range11, range0);
      assertNotSame(range11, range1);
      assertNotSame(range11, range12);
      assertNotSame(range11, range2);
      assertNotSame(range11, range8);
      assertNotSame(range11, range10);
      assertNotSame(range12, range11);
      assertNotSame(range12, range5);
      assertNotSame(range12, range1);
      assertNotSame(range12, range2);
      assertNotSame(range12, range8);
      assertNotSame(range12, range9);
      assertNotSame(range12, range0);
      assertNotSame(range12, range6);
      assertNotSame(range12, range7);
      assertNotSame(range12, range10);
      assertNotSame(range12, range3);
      assertNotSame(range12, range4);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range3.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range3.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(2478.945044587086, range10.getLength(), 0.01);
      assertEquals((-840.7457414251), range10.getLowerBound(), 0.01);
      assertEquals(1638.199303161986, range10.getUpperBound(), 0.01);
      assertEquals(398.72678086844303, range10.getCentralValue(), 0.01);
      assertFalse(range10.isNaNRange());
      assertFalse(range11.isNaNRange());
      assertEquals(398.72678086844303, range11.getCentralValue(), 0.01);
      assertEquals(1638.199303161986, range11.getUpperBound(), 0.01);
      assertEquals(2478.945044587086, range11.getLength(), 0.01);
      assertEquals((-840.7457414251), range11.getLowerBound(), 0.01);
      assertEquals(797.4535617368861, range12.getUpperBound(), 0.01);
      assertEquals((-1681.4914828502), range12.getLowerBound(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals((-442.018960556657), range12.getCentralValue(), 0.01);
      assertEquals(2478.945044587086, range12.getLength(), 0.01);
      assertNotNull(range12);
      assertFalse(range0.equals((Object)range8));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range0));
      assertTrue(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range12.equals((Object)range11));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range4));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range3.equals(object0);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range2, range7);
      assertNotSame(range2, range10);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range11);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range12);
      assertNotSame(range3, range12);
      assertNotSame(range3, range7);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range10);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range3.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range3.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range12));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range5));
      
      double double0 = range1.getUpperBound();
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range10);
      assertNotSame(range1, range11);
      assertNotSame(range1, range8);
      assertNotSame(range1, range12);
      assertNotSame(range1, range3);
      assertNotSame(range1, range7);
      assertNotSame(range1, range6);
      assertNotSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range9);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertEquals((-840.7457414251), range1.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, double0, 0.01);
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range11));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range7));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range9));
      
      Range range13 = Range.scale(range10, 0.0);
      assertNotSame(range13, range0);
      assertNotSame(range13, range12);
      assertNotSame(range13, range6);
      assertNotSame(range13, range4);
      assertNotSame(range13, range3);
      assertNotSame(range13, range1);
      assertNotSame(range13, range2);
      assertNotSame(range13, range7);
      assertNotSame(range13, range10);
      assertNotSame(range13, range11);
      assertNotSame(range13, range8);
      assertNotSame(range13, range5);
      assertNotSame(range13, range9);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range10);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range7);
      assertNotSame(range2, range10);
      assertNotSame(range2, range13);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range12);
      assertNotSame(range3, range12);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range0);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range3, range13);
      assertNotSame(range3, range10);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range10, range6);
      assertNotSame(range10, range7);
      assertNotSame(range10, range2);
      assertNotSame(range10, range11);
      assertNotSame(range10, range13);
      assertNotSame(range10, range0);
      assertNotSame(range10, range5);
      assertNotSame(range10, range9);
      assertNotSame(range10, range12);
      assertNotSame(range10, range8);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertNotSame(range10, range4);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getUpperBound(), 0.01);
      assertEquals(-0.0, range13.getLowerBound(), 0.01);
      assertEquals(0.0, range13.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range3.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range3.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(2478.945044587086, range10.getLength(), 0.01);
      assertEquals((-840.7457414251), range10.getLowerBound(), 0.01);
      assertEquals(1638.199303161986, range10.getUpperBound(), 0.01);
      assertEquals(398.72678086844303, range10.getCentralValue(), 0.01);
      assertFalse(range10.isNaNRange());
      assertNotNull(range13);
      assertFalse(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range9));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range10));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range11));
      assertFalse(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range9));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range12));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range5));
      assertTrue(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range12));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range9));
      
      boolean boolean1 = range2.equals(range13);
      assertNotSame(range13, range0);
      assertNotSame(range13, range12);
      assertNotSame(range13, range6);
      assertNotSame(range13, range4);
      assertNotSame(range13, range3);
      assertNotSame(range13, range1);
      assertNotSame(range13, range2);
      assertNotSame(range13, range7);
      assertNotSame(range13, range10);
      assertNotSame(range13, range11);
      assertNotSame(range13, range8);
      assertNotSame(range13, range5);
      assertNotSame(range13, range9);
      assertNotSame(range0, range9);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range11);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range13);
      assertNotSame(range0, range10);
      assertNotSame(range2, range3);
      assertNotSame(range2, range5);
      assertNotSame(range2, range9);
      assertNotSame(range2, range8);
      assertNotSame(range2, range7);
      assertNotSame(range2, range10);
      assertNotSame(range2, range13);
      assertNotSame(range2, range4);
      assertNotSame(range2, range6);
      assertNotSame(range2, range0);
      assertNotSame(range2, range11);
      assertNotSame(range2, range1);
      assertNotSame(range2, range12);
      assertNotSame(range3, range12);
      assertNotSame(range3, range11);
      assertNotSame(range3, range2);
      assertNotSame(range3, range8);
      assertNotSame(range3, range0);
      assertNotSame(range3, range9);
      assertNotSame(range3, range5);
      assertNotSame(range3, range7);
      assertNotSame(range3, range13);
      assertNotSame(range3, range10);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range6);
      assertNotSame(range10, range6);
      assertNotSame(range10, range7);
      assertNotSame(range10, range2);
      assertNotSame(range10, range11);
      assertNotSame(range10, range13);
      assertNotSame(range10, range0);
      assertNotSame(range10, range5);
      assertNotSame(range10, range9);
      assertNotSame(range10, range12);
      assertNotSame(range10, range8);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertNotSame(range10, range4);
      assertEquals(0.0, range13.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getUpperBound(), 0.01);
      assertEquals(-0.0, range13.getLowerBound(), 0.01);
      assertEquals(0.0, range13.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-419.87287071255), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-840.7457414251), range0.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range0.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(841.7457414251, range2.getLength(), 0.01);
      assertEquals((-419.87287071255), range2.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range2.getLowerBound(), 0.01);
      assertEquals((-419.87287071255), range3.getCentralValue(), 0.01);
      assertEquals((-840.7457414251), range3.getLowerBound(), 0.01);
      assertEquals(841.7457414251, range3.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(2478.945044587086, range10.getLength(), 0.01);
      assertEquals((-840.7457414251), range10.getLowerBound(), 0.01);
      assertEquals(1638.199303161986, range10.getUpperBound(), 0.01);
      assertEquals(398.72678086844303, range10.getCentralValue(), 0.01);
      assertFalse(range10.isNaNRange());
      assertFalse(boolean1);
      assertFalse(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range3));
      assertFalse(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range9));
      assertTrue(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range10));
      assertTrue(boolean1 == boolean0);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range10));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range13));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range11));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range12));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range7));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range13));
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range10));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range10.equals((Object)range11));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range13));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range12));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range4));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range0, 0.0);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.shift(range2, 0.0);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = Range.shift(range2, 0.0);
      assertNotSame(range0, range4);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range2));
      
      Range range5 = Range.shift(range4, 0.0, false);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range4));
      
      Range range6 = Range.shift(range5, 0.0, true);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range3);
      assertNotSame(range5, range6);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range5));
      assertTrue(range4.equals((Object)range2));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range1));
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range2));
      assertTrue(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range5));
      
      Range range7 = Range.shift(range2, (-1.0), true);
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range6);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range2);
      assertNotSame(range7, range4);
      assertNotSame(range7, range5);
      assertNotSame(range7, range3);
      assertNotSame(range7, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals((-1.0), range7.getCentralValue(), 0.01);
      assertEquals((-1.0), range7.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertTrue(range2.equals((Object)range6));
      assertTrue(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range0));
      
      double double0 = range0.getLength();
      assertNotSame(range0, range4);
      assertNotSame(range0, range5);
      assertSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range7);
      assertNotSame(range0, range6);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range7));
      assertTrue(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range4));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.expand(range1, (-1.0), 3497.496477849282);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.shift(range2, (-2202.39988669));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals((-2202.39988669), range3.getCentralValue(), 0.01);
      assertEquals((-2202.39988669), range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals((-2202.39988669), range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = new Range(0.0, 1978.057);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, 1978.057);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = Range.scale(range1, 1.0);
      assertNotSame(range0, range2);
      assertSame(range0, range1);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(989.0285, range2.getCentralValue(), 0.01);
      assertEquals(1978.057, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1978.057, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.shift(range1, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertSame(range1, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(989.0285, range3.getCentralValue(), 0.01);
      assertEquals(1978.057, range3.getUpperBound(), 0.01);
      assertEquals(1978.057, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = Range.expand(range2, 473.2200858488604, 1.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(989.0285, range2.getCentralValue(), 0.01);
      assertEquals(1978.057, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1978.057, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(940012.4173539391, range4.getLength(), 0.01);
      assertEquals(3956.114, range4.getUpperBound(), 0.01);
      assertEquals((-936056.3033539392), range4.getLowerBound(), 0.01);
      assertEquals((-466050.09467696963), range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertNotNull(range4);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      
      boolean boolean0 = range1.intersects(range2);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(989.0285, range2.getCentralValue(), 0.01);
      assertEquals(1978.057, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1978.057, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertTrue(boolean0);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      
      double double0 = range2.getLength();
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range2, range4);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(989.0285, range2.getCentralValue(), 0.01);
      assertEquals(1978.057, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1978.057, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1978.057, double0, 0.01);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      
      Range range5 = Range.expandToInclude(range1, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertSame(range0, range5);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertSame(range1, range0);
      assertSame(range1, range5);
      assertNotSame(range1, range4);
      assertSame(range5, range1);
      assertSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(989.0285, range5.getCentralValue(), 0.01);
      assertEquals(1978.057, range5.getUpperBound(), 0.01);
      assertEquals(1978.057, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      
      Range range6 = Range.combine(range5, range4);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertSame(range1, range0);
      assertSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range6);
      assertNotSame(range4, range1);
      assertNotSame(range4, range5);
      assertSame(range5, range1);
      assertSame(range5, range0);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertNotSame(range6, range3);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(989.0285, range2.getCentralValue(), 0.01);
      assertEquals(1978.057, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1978.057, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(940012.4173539391, range4.getLength(), 0.01);
      assertEquals(3956.114, range4.getUpperBound(), 0.01);
      assertEquals((-936056.3033539392), range4.getLowerBound(), 0.01);
      assertEquals((-466050.09467696963), range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(989.0285, range5.getCentralValue(), 0.01);
      assertEquals(1978.057, range5.getUpperBound(), 0.01);
      assertEquals(1978.057, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(940012.4173539391, range6.getLength(), 0.01);
      assertEquals((-936056.3033539392), range6.getLowerBound(), 0.01);
      assertEquals(3956.114, range6.getUpperBound(), 0.01);
      assertEquals((-466050.09467696963), range6.getCentralValue(), 0.01);
      assertNotNull(range6);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertFalse(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      
      Range range7 = Range.expandToInclude(range6, (-1260.0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range7);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertSame(range1, range0);
      assertSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range2, range4);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range1);
      assertNotSame(range4, range5);
      assertSame(range5, range1);
      assertSame(range5, range0);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range6, range3);
      assertSame(range6, range7);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range7, range3);
      assertNotSame(range7, range4);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertSame(range7, range6);
      assertNotSame(range7, range2);
      assertNotSame(range7, range1);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(989.0285, range2.getCentralValue(), 0.01);
      assertEquals(1978.057, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1978.057, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(940012.4173539391, range4.getLength(), 0.01);
      assertEquals(3956.114, range4.getUpperBound(), 0.01);
      assertEquals((-936056.3033539392), range4.getLowerBound(), 0.01);
      assertEquals((-466050.09467696963), range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(989.0285, range5.getCentralValue(), 0.01);
      assertEquals(1978.057, range5.getUpperBound(), 0.01);
      assertEquals(1978.057, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(940012.4173539391, range6.getLength(), 0.01);
      assertEquals((-936056.3033539392), range6.getLowerBound(), 0.01);
      assertEquals(3956.114, range6.getUpperBound(), 0.01);
      assertEquals((-466050.09467696963), range6.getCentralValue(), 0.01);
      assertEquals((-466050.09467696963), range7.getCentralValue(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(940012.4173539391, range7.getLength(), 0.01);
      assertEquals((-936056.3033539392), range7.getLowerBound(), 0.01);
      assertEquals(3956.114, range7.getUpperBound(), 0.01);
      assertNotNull(range7);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range2));
      assertFalse(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range1));
      
      Range range8 = Range.shift(range2, (-1215.80377));
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range7);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertSame(range1, range0);
      assertSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range2, range4);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertNotSame(range8, range6);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertNotSame(range8, range4);
      assertNotSame(range8, range5);
      assertNotSame(range8, range1);
      assertNotSame(range8, range2);
      assertNotSame(range8, range0);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(989.0285, range2.getCentralValue(), 0.01);
      assertEquals(1978.057, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1978.057, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertFalse(range8.isNaNRange());
      assertEquals((-226.77526999999998), range8.getCentralValue(), 0.01);
      assertEquals((-1215.80377), range8.getLowerBound(), 0.01);
      assertEquals(762.25323, range8.getUpperBound(), 0.01);
      assertEquals(1978.057, range8.getLength(), 0.01);
      assertNotNull(range8);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range4));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range0));
      
      boolean boolean1 = range2.equals(range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range7);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertSame(range1, range0);
      assertSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range2, range4);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertNotSame(range8, range6);
      assertNotSame(range8, range3);
      assertNotSame(range8, range7);
      assertNotSame(range8, range4);
      assertNotSame(range8, range5);
      assertNotSame(range8, range1);
      assertNotSame(range8, range2);
      assertNotSame(range8, range0);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(989.0285, range2.getCentralValue(), 0.01);
      assertEquals(1978.057, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1978.057, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertFalse(range8.isNaNRange());
      assertEquals((-226.77526999999998), range8.getCentralValue(), 0.01);
      assertEquals((-1215.80377), range8.getLowerBound(), 0.01);
      assertEquals(762.25323, range8.getUpperBound(), 0.01);
      assertEquals(1978.057, range8.getLength(), 0.01);
      assertFalse(boolean1);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range0));
      assertFalse(boolean1 == boolean0);
      
      double double1 = range3.getLength();
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range7);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertSame(range1, range0);
      assertSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range3, range7);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range8);
      assertNotSame(range3, range2);
      assertNotSame(range3, range5);
      assertNotSame(range3, range0);
      assertNotSame(range3, range6);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(989.0285, range3.getCentralValue(), 0.01);
      assertEquals(1978.057, range3.getUpperBound(), 0.01);
      assertEquals(1978.057, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1978.057, double1, 0.01);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range8));
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertTrue(range3.equals((Object)range5));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean2 = range7.equals(range0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range0, range8);
      assertNotSame(range0, range7);
      assertSame(range0, range5);
      assertNotSame(range0, range6);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range1, range7);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertSame(range1, range0);
      assertSame(range1, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range8);
      assertNotSame(range2, range4);
      assertNotSame(range2, range8);
      assertNotSame(range2, range5);
      assertNotSame(range2, range3);
      assertNotSame(range2, range7);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range6);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range6);
      assertNotSame(range4, range7);
      assertNotSame(range4, range1);
      assertNotSame(range4, range8);
      assertNotSame(range4, range5);
      assertSame(range5, range1);
      assertSame(range5, range0);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range8);
      assertNotSame(range6, range3);
      assertSame(range6, range7);
      assertNotSame(range6, range0);
      assertNotSame(range6, range4);
      assertNotSame(range6, range8);
      assertNotSame(range6, range5);
      assertNotSame(range6, range1);
      assertNotSame(range6, range2);
      assertNotSame(range7, range3);
      assertNotSame(range7, range4);
      assertNotSame(range7, range8);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertSame(range7, range6);
      assertNotSame(range7, range2);
      assertNotSame(range7, range1);
      assertEquals(989.0285, range0.getCentralValue(), 0.01);
      assertEquals(1978.057, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1978.057, range0.getLength(), 0.01);
      assertEquals(1978.057, range1.getLength(), 0.01);
      assertEquals(989.0285, range1.getCentralValue(), 0.01);
      assertEquals(1978.057, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(989.0285, range2.getCentralValue(), 0.01);
      assertEquals(1978.057, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1978.057, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(940012.4173539391, range4.getLength(), 0.01);
      assertEquals(3956.114, range4.getUpperBound(), 0.01);
      assertEquals((-936056.3033539392), range4.getLowerBound(), 0.01);
      assertEquals((-466050.09467696963), range4.getCentralValue(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(989.0285, range5.getCentralValue(), 0.01);
      assertEquals(1978.057, range5.getUpperBound(), 0.01);
      assertEquals(1978.057, range5.getLength(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(940012.4173539391, range6.getLength(), 0.01);
      assertEquals((-936056.3033539392), range6.getLowerBound(), 0.01);
      assertEquals(3956.114, range6.getUpperBound(), 0.01);
      assertEquals((-466050.09467696963), range6.getCentralValue(), 0.01);
      assertEquals((-466050.09467696963), range7.getCentralValue(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(940012.4173539391, range7.getLength(), 0.01);
      assertEquals((-936056.3033539392), range7.getLowerBound(), 0.01);
      assertEquals(3956.114, range7.getUpperBound(), 0.01);
      assertFalse(boolean2);
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range8));
      assertTrue(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range8));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range6));
      assertTrue(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range5));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range8));
      assertTrue(range5.equals((Object)range2));
      assertFalse(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      assertTrue(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = new Range((-1.0), 1.0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      String string0 = range0.toString();
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals("Range[-1.0,1.0]", string0);
      assertNotNull(string0);
      
      Range range1 = Range.expand(range0, (-1.0), 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range1, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = Range.expandToInclude(range1, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.5, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      
      Range range4 = Range.shift(range0, (-1.0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals((-1.0), range4.getCentralValue(), 0.01);
      assertEquals((-2.0), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      
      String string1 = range4.toString();
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals((-1.0), range4.getCentralValue(), 0.01);
      assertEquals((-2.0), range4.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(2.0, range4.getLength(), 0.01);
      assertEquals("Range[-2.0,0.0]", string1);
      assertNotNull(string1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(string1.equals((Object)string0));
      
      Range range5 = Range.expand(range0, 0.0, 1822.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1822.0, range5.getCentralValue(), 0.01);
      assertEquals(3645.0, range5.getUpperBound(), 0.01);
      assertEquals(3646.0, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      
      boolean boolean0 = range3.equals(range1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.5, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range4));
      
      boolean boolean1 = range1.intersects(range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertFalse(boolean1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = range3.intersects(0.0, 1.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.5, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertTrue(boolean2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range4));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Range range6 = Range.shift(range5, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range5, range4);
      assertNotSame(range5, range6);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertNotSame(range6, range4);
      assertNotSame(range6, range5);
      assertNotSame(range6, range2);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1822.0, range5.getCentralValue(), 0.01);
      assertEquals(3645.0, range5.getUpperBound(), 0.01);
      assertEquals(3646.0, range5.getLength(), 0.01);
      assertEquals(3645.0, range6.getUpperBound(), 0.01);
      assertEquals((-1.0), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1822.0, range6.getCentralValue(), 0.01);
      assertEquals(3646.0, range6.getLength(), 0.01);
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range1));
      
      Range range7 = Range.shift(range1, (-1.0), false);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range3);
      assertNotSame(range7, range4);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range5);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range5));
      
      Range range8 = Range.shift(range1, (-1.0));
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range8);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range8, range3);
      assertNotSame(range8, range1);
      assertNotSame(range8, range0);
      assertNotSame(range8, range7);
      assertNotSame(range8, range4);
      assertNotSame(range8, range5);
      assertNotSame(range8, range2);
      assertNotSame(range8, range6);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(0.0, range8.getCentralValue(), 0.01);
      assertEquals(0.0, range8.getUpperBound(), 0.01);
      assertEquals(0.0, range8.getLowerBound(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range7));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range6));
      
      Range range9 = Range.shift(range2, 1822.0);
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range2, range9);
      assertNotSame(range2, range6);
      assertNotSame(range2, range5);
      assertNotSame(range2, range0);
      assertNotSame(range2, range7);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range3);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range4);
      assertNotSame(range9, range6);
      assertNotSame(range9, range2);
      assertNotSame(range9, range1);
      assertNotSame(range9, range8);
      assertNotSame(range9, range3);
      assertNotSame(range9, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(2.0, range2.getLength(), 0.01);
      assertEquals(0.0, range9.getLowerBound(), 0.01);
      assertEquals(1823.0, range9.getLength(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(911.5, range9.getCentralValue(), 0.01);
      assertEquals(1823.0, range9.getUpperBound(), 0.01);
      assertNotNull(range9);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range7));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range3));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range0));
      
      Range range10 = Range.expandToInclude(range7, (-5077.214352));
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range7, range0);
      assertNotSame(range7, range2);
      assertNotSame(range7, range3);
      assertNotSame(range7, range4);
      assertNotSame(range7, range1);
      assertNotSame(range7, range8);
      assertNotSame(range7, range9);
      assertNotSame(range7, range6);
      assertNotSame(range7, range10);
      assertNotSame(range7, range5);
      assertNotSame(range10, range8);
      assertNotSame(range10, range3);
      assertNotSame(range10, range1);
      assertNotSame(range10, range4);
      assertNotSame(range10, range7);
      assertNotSame(range10, range9);
      assertNotSame(range10, range6);
      assertNotSame(range10, range2);
      assertNotSame(range10, range5);
      assertNotSame(range10, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range7.getLength(), 0.01);
      assertEquals(0.0, range7.getLowerBound(), 0.01);
      assertEquals(0.0, range7.getCentralValue(), 0.01);
      assertEquals(0.0, range7.getUpperBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(5077.214352, range10.getLength(), 0.01);
      assertEquals((-5077.214352), range10.getLowerBound(), 0.01);
      assertEquals((-2538.607176), range10.getCentralValue(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(0.0, range10.getUpperBound(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range2));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range9));
      assertFalse(range7.equals((Object)range6));
      assertTrue(range7.equals((Object)range8));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range0));
      
      Range range11 = Range.shift(range5, (-165.6933615));
      assertNotSame(range11, range9);
      assertNotSame(range11, range6);
      assertNotSame(range11, range10);
      assertNotSame(range11, range5);
      assertNotSame(range11, range0);
      assertNotSame(range11, range2);
      assertNotSame(range11, range7);
      assertNotSame(range11, range4);
      assertNotSame(range11, range1);
      assertNotSame(range11, range8);
      assertNotSame(range11, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range11);
      assertNotSame(range0, range9);
      assertNotSame(range5, range9);
      assertNotSame(range5, range8);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range6);
      assertNotSame(range5, range10);
      assertNotSame(range5, range2);
      assertNotSame(range5, range11);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertFalse(range11.isNaNRange());
      assertEquals(3479.3066385, range11.getUpperBound(), 0.01);
      assertEquals((-166.6933615), range11.getLowerBound(), 0.01);
      assertEquals(3646.0, range11.getLength(), 0.01);
      assertEquals(1656.3066385000002, range11.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1822.0, range5.getCentralValue(), 0.01);
      assertEquals(3645.0, range5.getUpperBound(), 0.01);
      assertEquals(3646.0, range5.getLength(), 0.01);
      assertNotNull(range11);
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range6));
      
      Range range12 = Range.expandToInclude(range11, 842.927257576);
      assertNotSame(range11, range9);
      assertNotSame(range11, range6);
      assertNotSame(range11, range10);
      assertNotSame(range11, range5);
      assertNotSame(range11, range0);
      assertSame(range11, range12);
      assertNotSame(range11, range2);
      assertNotSame(range11, range7);
      assertNotSame(range11, range4);
      assertNotSame(range11, range1);
      assertNotSame(range11, range8);
      assertNotSame(range11, range3);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range4);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range11);
      assertNotSame(range0, range5);
      assertNotSame(range0, range9);
      assertNotSame(range12, range6);
      assertSame(range12, range11);
      assertNotSame(range12, range10);
      assertNotSame(range12, range4);
      assertNotSame(range12, range9);
      assertNotSame(range12, range7);
      assertNotSame(range12, range3);
      assertNotSame(range12, range8);
      assertNotSame(range12, range1);
      assertNotSame(range12, range0);
      assertNotSame(range12, range2);
      assertNotSame(range12, range5);
      assertNotSame(range5, range9);
      assertNotSame(range5, range8);
      assertNotSame(range5, range12);
      assertNotSame(range5, range7);
      assertNotSame(range5, range4);
      assertNotSame(range5, range6);
      assertNotSame(range5, range10);
      assertNotSame(range5, range2);
      assertNotSame(range5, range11);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range3);
      assertFalse(range11.isNaNRange());
      assertEquals(3479.3066385, range11.getUpperBound(), 0.01);
      assertEquals((-166.6933615), range11.getLowerBound(), 0.01);
      assertEquals(3646.0, range11.getLength(), 0.01);
      assertEquals(1656.3066385000002, range11.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(3479.3066385, range12.getUpperBound(), 0.01);
      assertEquals(1656.3066385000002, range12.getCentralValue(), 0.01);
      assertEquals((-166.6933615), range12.getLowerBound(), 0.01);
      assertEquals(3646.0, range12.getLength(), 0.01);
      assertFalse(range12.isNaNRange());
      assertEquals((-1.0), range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1822.0, range5.getCentralValue(), 0.01);
      assertEquals(3645.0, range5.getUpperBound(), 0.01);
      assertEquals(3646.0, range5.getLength(), 0.01);
      assertNotNull(range12);
      assertFalse(range11.equals((Object)range9));
      assertFalse(range11.equals((Object)range6));
      assertFalse(range11.equals((Object)range10));
      assertFalse(range11.equals((Object)range5));
      assertFalse(range11.equals((Object)range0));
      assertFalse(range11.equals((Object)range2));
      assertFalse(range11.equals((Object)range7));
      assertFalse(range11.equals((Object)range4));
      assertFalse(range11.equals((Object)range1));
      assertFalse(range11.equals((Object)range8));
      assertFalse(range11.equals((Object)range3));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range11));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range12.equals((Object)range6));
      assertFalse(range12.equals((Object)range10));
      assertFalse(range12.equals((Object)range4));
      assertFalse(range12.equals((Object)range7));
      assertFalse(range12.equals((Object)range9));
      assertFalse(range12.equals((Object)range3));
      assertFalse(range12.equals((Object)range8));
      assertFalse(range12.equals((Object)range1));
      assertFalse(range12.equals((Object)range0));
      assertFalse(range12.equals((Object)range2));
      assertFalse(range12.equals((Object)range5));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range6));
      
      Range range13 = Range.shift(range0, (-1620.5056));
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range9);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range13, range1);
      assertNotSame(range13, range6);
      assertNotSame(range13, range10);
      assertNotSame(range13, range4);
      assertNotSame(range13, range0);
      assertNotSame(range13, range9);
      assertNotSame(range13, range12);
      assertNotSame(range13, range8);
      assertNotSame(range13, range2);
      assertNotSame(range13, range11);
      assertNotSame(range13, range7);
      assertNotSame(range13, range5);
      assertNotSame(range13, range3);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertFalse(range13.isNaNRange());
      assertEquals(0.0, range13.getUpperBound(), 0.01);
      assertEquals(1621.5056, range13.getLength(), 0.01);
      assertEquals((-810.7528), range13.getCentralValue(), 0.01);
      assertEquals((-1621.5056), range13.getLowerBound(), 0.01);
      assertNotNull(range13);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range9));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range13.equals((Object)range1));
      assertFalse(range13.equals((Object)range6));
      assertFalse(range13.equals((Object)range10));
      assertFalse(range13.equals((Object)range4));
      assertFalse(range13.equals((Object)range0));
      assertFalse(range13.equals((Object)range9));
      assertFalse(range13.equals((Object)range12));
      assertFalse(range13.equals((Object)range8));
      assertFalse(range13.equals((Object)range2));
      assertFalse(range13.equals((Object)range11));
      assertFalse(range13.equals((Object)range7));
      assertFalse(range13.equals((Object)range5));
      assertFalse(range13.equals((Object)range3));
      
      Range range14 = Range.scale(range3, 0.0);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range7);
      assertNotSame(range1, range13);
      assertNotSame(range1, range14);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range11);
      assertNotSame(range1, range6);
      assertNotSame(range14, range1);
      assertNotSame(range14, range9);
      assertNotSame(range14, range10);
      assertNotSame(range14, range4);
      assertNotSame(range14, range11);
      assertNotSame(range14, range2);
      assertNotSame(range14, range12);
      assertNotSame(range14, range5);
      assertNotSame(range14, range0);
      assertNotSame(range14, range6);
      assertNotSame(range14, range13);
      assertNotSame(range14, range7);
      assertNotSame(range14, range8);
      assertNotSame(range14, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range6);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertEquals(0.0, range14.getCentralValue(), 0.01);
      assertEquals(0.0, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertFalse(range3.isNaNRange());
      assertEquals(0.5, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertNotNull(range14);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range14.equals((Object)range1));
      assertTrue(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range4));
      assertTrue(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range11));
      
      Range range15 = Range.combineIgnoringNaN(range6, range0);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range11);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range15, range7);
      assertNotSame(range15, range5);
      assertNotSame(range15, range6);
      assertNotSame(range15, range2);
      assertNotSame(range15, range10);
      assertNotSame(range15, range1);
      assertNotSame(range15, range9);
      assertNotSame(range15, range8);
      assertNotSame(range15, range13);
      assertNotSame(range15, range3);
      assertNotSame(range15, range12);
      assertNotSame(range15, range4);
      assertNotSame(range15, range11);
      assertNotSame(range15, range0);
      assertNotSame(range15, range14);
      assertNotSame(range5, range9);
      assertNotSame(range5, range8);
      assertNotSame(range5, range12);
      assertNotSame(range5, range13);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range7);
      assertNotSame(range5, range6);
      assertNotSame(range5, range15);
      assertNotSame(range5, range10);
      assertNotSame(range5, range2);
      assertNotSame(range5, range11);
      assertNotSame(range5, range0);
      assertNotSame(range5, range14);
      assertNotSame(range6, range13);
      assertNotSame(range6, range4);
      assertNotSame(range6, range9);
      assertNotSame(range6, range15);
      assertNotSame(range6, range14);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range6, range10);
      assertNotSame(range6, range2);
      assertNotSame(range6, range11);
      assertNotSame(range6, range0);
      assertNotSame(range6, range12);
      assertNotSame(range6, range3);
      assertNotSame(range6, range1);
      assertNotSame(range6, range8);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range15.getLowerBound(), 0.01);
      assertEquals(1822.0, range15.getCentralValue(), 0.01);
      assertFalse(range15.isNaNRange());
      assertEquals(3645.0, range15.getUpperBound(), 0.01);
      assertEquals(3646.0, range15.getLength(), 0.01);
      assertEquals((-1.0), range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1822.0, range5.getCentralValue(), 0.01);
      assertEquals(3645.0, range5.getUpperBound(), 0.01);
      assertEquals(3646.0, range5.getLength(), 0.01);
      assertEquals(3645.0, range6.getUpperBound(), 0.01);
      assertEquals((-1.0), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(1822.0, range6.getCentralValue(), 0.01);
      assertEquals(3646.0, range6.getLength(), 0.01);
      assertNotNull(range15);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range15.equals((Object)range7));
      assertFalse(range15.equals((Object)range2));
      assertFalse(range15.equals((Object)range10));
      assertFalse(range15.equals((Object)range1));
      assertTrue(range15.equals((Object)range5));
      assertFalse(range15.equals((Object)range9));
      assertFalse(range15.equals((Object)range8));
      assertFalse(range15.equals((Object)range13));
      assertFalse(range15.equals((Object)range3));
      assertFalse(range15.equals((Object)range12));
      assertFalse(range15.equals((Object)range4));
      assertFalse(range15.equals((Object)range11));
      assertFalse(range15.equals((Object)range0));
      assertTrue(range15.equals((Object)range6));
      assertFalse(range15.equals((Object)range14));
      assertFalse(range5.equals((Object)range9));
      assertFalse(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range12));
      assertFalse(range5.equals((Object)range13));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range10));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range11));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range6));
      assertFalse(range5.equals((Object)range14));
      assertFalse(range6.equals((Object)range13));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range14));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range10));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range11));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range12));
      assertTrue(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range8));
      
      Range range16 = Range.combine(range0, range14);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range16);
      assertNotSame(range0, range11);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range16);
      assertNotSame(range1, range7);
      assertNotSame(range1, range13);
      assertNotSame(range1, range14);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range11);
      assertNotSame(range1, range6);
      assertNotSame(range1, range15);
      assertNotSame(range14, range1);
      assertNotSame(range14, range9);
      assertNotSame(range14, range10);
      assertNotSame(range14, range4);
      assertNotSame(range14, range11);
      assertNotSame(range14, range16);
      assertNotSame(range14, range2);
      assertNotSame(range14, range12);
      assertNotSame(range14, range5);
      assertNotSame(range14, range0);
      assertNotSame(range14, range6);
      assertNotSame(range14, range15);
      assertNotSame(range14, range13);
      assertNotSame(range14, range7);
      assertNotSame(range14, range8);
      assertNotSame(range14, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range16);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range6);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range15);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertNotSame(range16, range11);
      assertNotSame(range16, range12);
      assertNotSame(range16, range2);
      assertNotSame(range16, range0);
      assertNotSame(range16, range14);
      assertNotSame(range16, range5);
      assertNotSame(range16, range15);
      assertNotSame(range16, range6);
      assertNotSame(range16, range3);
      assertNotSame(range16, range13);
      assertNotSame(range16, range7);
      assertNotSame(range16, range8);
      assertNotSame(range16, range1);
      assertNotSame(range16, range4);
      assertNotSame(range16, range9);
      assertNotSame(range16, range10);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertEquals(0.0, range14.getCentralValue(), 0.01);
      assertEquals(0.0, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertFalse(range3.isNaNRange());
      assertEquals(0.5, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertFalse(range16.isNaNRange());
      assertEquals(2.0, range16.getLength(), 0.01);
      assertEquals(0.0, range16.getCentralValue(), 0.01);
      assertEquals(1.0, range16.getUpperBound(), 0.01);
      assertEquals((-1.0), range16.getLowerBound(), 0.01);
      assertNotNull(range16);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range15));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range15));
      assertFalse(range14.equals((Object)range1));
      assertTrue(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range4));
      assertTrue(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range15));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range15));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range14));
      assertFalse(range16.equals((Object)range11));
      assertFalse(range16.equals((Object)range12));
      assertFalse(range16.equals((Object)range14));
      assertFalse(range16.equals((Object)range5));
      assertFalse(range16.equals((Object)range15));
      assertTrue(range16.equals((Object)range2));
      assertFalse(range16.equals((Object)range6));
      assertFalse(range16.equals((Object)range3));
      assertFalse(range16.equals((Object)range13));
      assertFalse(range16.equals((Object)range7));
      assertFalse(range16.equals((Object)range8));
      assertFalse(range16.equals((Object)range1));
      assertFalse(range16.equals((Object)range4));
      assertFalse(range16.equals((Object)range9));
      assertTrue(range16.equals((Object)range0));
      assertFalse(range16.equals((Object)range10));
      
      boolean boolean3 = range3.intersects((-1.0), (-1.0));
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range16);
      assertNotSame(range0, range11);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range16);
      assertNotSame(range1, range7);
      assertNotSame(range1, range13);
      assertNotSame(range1, range14);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range11);
      assertNotSame(range1, range6);
      assertNotSame(range1, range15);
      assertNotSame(range3, range0);
      assertNotSame(range3, range16);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range6);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range15);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.5, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertFalse(boolean3);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range15));
      assertTrue(range0.equals((Object)range16));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range16));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range15));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range16));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range15));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range14));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = range14.contains(0.0);
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range16);
      assertNotSame(range0, range11);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range10);
      assertNotSame(range1, range12);
      assertNotSame(range1, range8);
      assertNotSame(range1, range9);
      assertNotSame(range1, range16);
      assertNotSame(range1, range7);
      assertNotSame(range1, range13);
      assertNotSame(range1, range14);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range11);
      assertNotSame(range1, range6);
      assertNotSame(range1, range15);
      assertNotSame(range14, range1);
      assertNotSame(range14, range9);
      assertNotSame(range14, range10);
      assertNotSame(range14, range4);
      assertNotSame(range14, range11);
      assertNotSame(range14, range16);
      assertNotSame(range14, range2);
      assertNotSame(range14, range12);
      assertNotSame(range14, range5);
      assertNotSame(range14, range0);
      assertNotSame(range14, range6);
      assertNotSame(range14, range15);
      assertNotSame(range14, range13);
      assertNotSame(range14, range7);
      assertNotSame(range14, range8);
      assertNotSame(range14, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range16);
      assertNotSame(range3, range5);
      assertNotSame(range3, range2);
      assertNotSame(range3, range6);
      assertNotSame(range3, range10);
      assertNotSame(range3, range7);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range13);
      assertNotSame(range3, range8);
      assertNotSame(range3, range12);
      assertNotSame(range3, range15);
      assertNotSame(range3, range9);
      assertNotSame(range3, range11);
      assertNotSame(range3, range14);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLength(), 0.01);
      assertEquals(0.0, range14.getCentralValue(), 0.01);
      assertEquals(0.0, range14.getUpperBound(), 0.01);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      assertFalse(range14.isNaNRange());
      assertFalse(range3.isNaNRange());
      assertEquals(0.5, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertTrue(boolean4);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range15));
      assertTrue(range0.equals((Object)range16));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range10));
      assertFalse(range1.equals((Object)range12));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range16));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range13));
      assertFalse(range1.equals((Object)range14));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range11));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range15));
      assertFalse(range14.equals((Object)range1));
      assertTrue(range14.equals((Object)range7));
      assertFalse(range14.equals((Object)range9));
      assertFalse(range14.equals((Object)range10));
      assertFalse(range14.equals((Object)range4));
      assertTrue(range14.equals((Object)range8));
      assertFalse(range14.equals((Object)range11));
      assertFalse(range14.equals((Object)range16));
      assertFalse(range14.equals((Object)range2));
      assertFalse(range14.equals((Object)range12));
      assertFalse(range14.equals((Object)range5));
      assertFalse(range14.equals((Object)range0));
      assertFalse(range14.equals((Object)range6));
      assertFalse(range14.equals((Object)range15));
      assertFalse(range14.equals((Object)range13));
      assertFalse(range14.equals((Object)range3));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range16));
      assertFalse(range3.equals((Object)range5));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range6));
      assertFalse(range3.equals((Object)range10));
      assertFalse(range3.equals((Object)range7));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range13));
      assertFalse(range3.equals((Object)range8));
      assertFalse(range3.equals((Object)range12));
      assertFalse(range3.equals((Object)range15));
      assertFalse(range3.equals((Object)range9));
      assertFalse(range3.equals((Object)range11));
      assertFalse(range3.equals((Object)range14));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      double double0 = range0.getCentralValue();
      assertNotSame(range0, range8);
      assertNotSame(range0, range12);
      assertNotSame(range0, range13);
      assertNotSame(range0, range4);
      assertNotSame(range0, range16);
      assertNotSame(range0, range11);
      assertNotSame(range0, range9);
      assertNotSame(range0, range14);
      assertNotSame(range0, range1);
      assertNotSame(range0, range15);
      assertNotSame(range0, range6);
      assertNotSame(range0, range10);
      assertNotSame(range0, range7);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range5);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range12));
      assertFalse(range0.equals((Object)range13));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range11));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range14));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range15));
      assertTrue(range0.equals((Object)range16));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range10));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 4073.0;
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 4073.0, 4073.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      range0.hashCode();
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      
      Range range1 = Range.expandToInclude(range0, 679.6448771);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(678.6448771, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(679.6448771, range1.getUpperBound(), 0.01);
      assertEquals(340.32243855, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range0, 2523.3005194452);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2524.3005194452, range2.getCentralValue(), 0.01);
      assertEquals(2524.3005194452, range2.getUpperBound(), 0.01);
      assertEquals(2524.3005194452, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      boolean boolean0 = range0.contains((-1588.4738019163049));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      
      Range range3 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.0, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      
      Range range4 = Range.shift(range3, 679.6448771);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range3, range4);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.0, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1.0, range3.getLowerBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(680.6448771, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(680.6448771, range4.getCentralValue(), 0.01);
      assertEquals(680.6448771, range4.getUpperBound(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      
      Range range5 = Range.shift(range0, 0.0);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertNotSame(range5, range2);
      assertNotSame(range5, range1);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(1.0, range5.getCentralValue(), 0.01);
      assertEquals(1.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(1.0, range5.getUpperBound(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range0));
      
      Range range6 = Range.combineIgnoringNaN(range2, range2);
      assertNotSame(range0, range5);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertNotSame(range2, range6);
      assertNotSame(range2, range3);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2524.3005194452, range2.getCentralValue(), 0.01);
      assertEquals(2524.3005194452, range2.getUpperBound(), 0.01);
      assertEquals(2524.3005194452, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(2524.3005194452, range6.getLowerBound(), 0.01);
      assertEquals(2524.3005194452, range6.getCentralValue(), 0.01);
      assertEquals(2524.3005194452, range6.getUpperBound(), 0.01);
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range5));
      assertFalse(range2.equals((Object)range3));
      assertTrue(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range3));
      
      Range range7 = Range.expand(range1, 85.06149603117, 679.6448771);
      assertNotSame(range0, range5);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range6);
      assertNotSame(range0, range4);
      assertNotSame(range0, range2);
      assertNotSame(range1, range7);
      assertNotSame(range1, range4);
      assertNotSame(range1, range5);
      assertNotSame(range1, range2);
      assertNotSame(range1, range6);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range7, range1);
      assertNotSame(range7, range0);
      assertNotSame(range7, range6);
      assertNotSame(range7, range3);
      assertNotSame(range7, range4);
      assertNotSame(range7, range5);
      assertNotSame(range7, range2);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(678.6448771, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(679.6448771, range1.getUpperBound(), 0.01);
      assertEquals(340.32243855, range1.getCentralValue(), 0.01);
      assertEquals(519642.7074882896, range7.getLength(), 0.01);
      assertEquals(202095.80522412932, range7.getCentralValue(), 0.01);
      assertEquals(461917.15896827413, range7.getUpperBound(), 0.01);
      assertEquals((-57725.5485200155), range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range6));
      assertTrue(range0.equals((Object)range5));
      assertFalse(range0.equals((Object)range4));
      assertTrue(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range6));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range5));
      assertFalse(range7.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = new Range(0.0, 1.0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 0.0, 1.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      String string0 = range1.toString();
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertEquals("Range[0.0,2.0]", string0);
      assertNotNull(string0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      
      double double0 = range1.getUpperBound();
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertEquals(2.0, double0, 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range0, 0.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.combineIgnoringNaN(range1, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertEquals(1.0, range3.getCentralValue(), 0.01);
      assertEquals(2.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(2.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      
      double double1 = range1.constrain(1.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertEquals(1.0, double1, 0.01);
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = range1.equals("Range[0.0,2.0]");
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      
      Range range4 = Range.expand(range0, 2.0, 2101.38399514297);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1050.191997571485, range4.getCentralValue(), 0.01);
      assertEquals(2102.38399514297, range4.getUpperBound(), 0.01);
      assertEquals(2104.38399514297, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-2.0), range4.getLowerBound(), 0.01);
      assertNotNull(range4);
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      
      Range range5 = Range.expand(range4, 1.0, 1.0);
      assertNotSame(range0, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1050.191997571485, range4.getCentralValue(), 0.01);
      assertEquals(2102.38399514297, range4.getUpperBound(), 0.01);
      assertEquals(2104.38399514297, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-2.0), range4.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(4206.76799028594, range5.getUpperBound(), 0.01);
      assertEquals(1050.191997571485, range5.getCentralValue(), 0.01);
      assertEquals((-2106.38399514297), range5.getLowerBound(), 0.01);
      assertEquals(6313.15198542891, range5.getLength(), 0.01);
      assertNotNull(range5);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      
      Range range6 = Range.expand(range1, 2101.38399514297, 0.0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range6, range1);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range2);
      assertNotSame(range6, range5);
      assertNotSame(range6, range4);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertEquals((-2100.38399514297), range6.getCentralValue(), 0.01);
      assertEquals((-4202.76799028594), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(4204.76799028594, range6.getLength(), 0.01);
      assertEquals(2.0, range6.getUpperBound(), 0.01);
      assertNotNull(range6);
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range4));
      
      Range range7 = Range.combineIgnoringNaN(range4, range1);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range4, range6);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range7);
      assertNotSame(range7, range3);
      assertNotSame(range7, range1);
      assertNotSame(range7, range6);
      assertNotSame(range7, range4);
      assertNotSame(range7, range2);
      assertNotSame(range7, range0);
      assertNotSame(range7, range5);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertEquals(1050.191997571485, range4.getCentralValue(), 0.01);
      assertEquals(2102.38399514297, range4.getUpperBound(), 0.01);
      assertEquals(2104.38399514297, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-2.0), range4.getLowerBound(), 0.01);
      assertEquals(1050.191997571485, range7.getCentralValue(), 0.01);
      assertEquals(2102.38399514297, range7.getUpperBound(), 0.01);
      assertEquals((-2.0), range7.getLowerBound(), 0.01);
      assertFalse(range7.isNaNRange());
      assertEquals(2104.38399514297, range7.getLength(), 0.01);
      assertNotNull(range7);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range7.equals((Object)range3));
      assertFalse(range7.equals((Object)range1));
      assertFalse(range7.equals((Object)range6));
      assertFalse(range7.equals((Object)range2));
      assertTrue(range7.equals((Object)range4));
      assertFalse(range7.equals((Object)range0));
      assertFalse(range7.equals((Object)range5));
      
      String string1 = range6.toString();
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range1, range7);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range6, range1);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range2);
      assertNotSame(range6, range7);
      assertNotSame(range6, range5);
      assertNotSame(range6, range4);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertEquals((-2100.38399514297), range6.getCentralValue(), 0.01);
      assertEquals((-4202.76799028594), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(4204.76799028594, range6.getLength(), 0.01);
      assertEquals(2.0, range6.getUpperBound(), 0.01);
      assertEquals("Range[-4202.76799028594,2.0]", string1);
      assertNotNull(string1);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range4));
      assertFalse(string1.equals((Object)string0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = range5.equals(object0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range7);
      assertNotSame(range5, range7);
      assertNotSame(range5, range1);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range6);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1050.191997571485, range4.getCentralValue(), 0.01);
      assertEquals(2102.38399514297, range4.getUpperBound(), 0.01);
      assertEquals(2104.38399514297, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-2.0), range4.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(4206.76799028594, range5.getUpperBound(), 0.01);
      assertEquals(1050.191997571485, range5.getCentralValue(), 0.01);
      assertEquals((-2106.38399514297), range5.getLowerBound(), 0.01);
      assertEquals(6313.15198542891, range5.getLength(), 0.01);
      assertFalse(boolean1);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range6));
      assertTrue(boolean1 == boolean0);
      
      Range range8 = Range.combine(range5, range4);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range8);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range7);
      assertNotSame(range5, range7);
      assertNotSame(range5, range1);
      assertNotSame(range5, range8);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range6);
      assertNotSame(range8, range0);
      assertNotSame(range8, range5);
      assertNotSame(range8, range6);
      assertNotSame(range8, range3);
      assertNotSame(range8, range4);
      assertNotSame(range8, range2);
      assertNotSame(range8, range1);
      assertNotSame(range8, range7);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1050.191997571485, range4.getCentralValue(), 0.01);
      assertEquals(2102.38399514297, range4.getUpperBound(), 0.01);
      assertEquals(2104.38399514297, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-2.0), range4.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(4206.76799028594, range5.getUpperBound(), 0.01);
      assertEquals(1050.191997571485, range5.getCentralValue(), 0.01);
      assertEquals((-2106.38399514297), range5.getLowerBound(), 0.01);
      assertEquals(6313.15198542891, range5.getLength(), 0.01);
      assertEquals(6313.15198542891, range8.getLength(), 0.01);
      assertFalse(range8.isNaNRange());
      assertEquals(1050.191997571485, range8.getCentralValue(), 0.01);
      assertEquals(4206.76799028594, range8.getUpperBound(), 0.01);
      assertEquals((-2106.38399514297), range8.getLowerBound(), 0.01);
      assertNotNull(range8);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range6));
      assertFalse(range8.equals((Object)range0));
      assertTrue(range8.equals((Object)range5));
      assertFalse(range8.equals((Object)range6));
      assertFalse(range8.equals((Object)range3));
      assertFalse(range8.equals((Object)range4));
      assertFalse(range8.equals((Object)range2));
      assertFalse(range8.equals((Object)range1));
      assertFalse(range8.equals((Object)range7));
      
      Range range9 = Range.shift(range5, (-1.0), true);
      assertNotSame(range9, range0);
      assertNotSame(range9, range2);
      assertNotSame(range9, range3);
      assertNotSame(range9, range4);
      assertNotSame(range9, range1);
      assertNotSame(range9, range8);
      assertNotSame(range9, range7);
      assertNotSame(range9, range5);
      assertNotSame(range9, range6);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range4, range6);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range8);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range9);
      assertNotSame(range4, range7);
      assertNotSame(range5, range7);
      assertNotSame(range5, range1);
      assertNotSame(range5, range8);
      assertNotSame(range5, range3);
      assertNotSame(range5, range0);
      assertNotSame(range5, range9);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range6);
      assertEquals((-2107.38399514297), range9.getLowerBound(), 0.01);
      assertEquals(4205.76799028594, range9.getUpperBound(), 0.01);
      assertEquals(1049.191997571485, range9.getCentralValue(), 0.01);
      assertFalse(range9.isNaNRange());
      assertEquals(6313.15198542891, range9.getLength(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1050.191997571485, range4.getCentralValue(), 0.01);
      assertEquals(2102.38399514297, range4.getUpperBound(), 0.01);
      assertEquals(2104.38399514297, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-2.0), range4.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(4206.76799028594, range5.getUpperBound(), 0.01);
      assertEquals(1050.191997571485, range5.getCentralValue(), 0.01);
      assertEquals((-2106.38399514297), range5.getLowerBound(), 0.01);
      assertEquals(6313.15198542891, range5.getLength(), 0.01);
      assertNotNull(range9);
      assertFalse(range9.equals((Object)range0));
      assertFalse(range9.equals((Object)range2));
      assertFalse(range9.equals((Object)range3));
      assertFalse(range9.equals((Object)range4));
      assertFalse(range9.equals((Object)range1));
      assertFalse(range9.equals((Object)range8));
      assertFalse(range9.equals((Object)range7));
      assertFalse(range9.equals((Object)range5));
      assertFalse(range9.equals((Object)range6));
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range5.equals((Object)range7));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range8));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range6));
      
      double double2 = range2.getLowerBound();
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range2, range3);
      assertNotSame(range2, range4);
      assertNotSame(range2, range1);
      assertNotSame(range2, range8);
      assertNotSame(range2, range6);
      assertNotSame(range2, range7);
      assertNotSame(range2, range9);
      assertNotSame(range2, range0);
      assertNotSame(range2, range5);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range8));
      assertFalse(range2.equals((Object)range6));
      assertFalse(range2.equals((Object)range7));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range9));
      assertFalse(range2.equals((Object)range5));
      
      boolean boolean2 = range6.equals(object0);
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range1, range7);
      assertNotSame(range1, range8);
      assertNotSame(range1, range3);
      assertNotSame(range1, range5);
      assertNotSame(range1, range0);
      assertNotSame(range1, range9);
      assertNotSame(range1, range4);
      assertNotSame(range1, range6);
      assertNotSame(range1, range2);
      assertNotSame(range6, range1);
      assertNotSame(range6, range0);
      assertNotSame(range6, range3);
      assertNotSame(range6, range2);
      assertNotSame(range6, range9);
      assertNotSame(range6, range7);
      assertNotSame(range6, range8);
      assertNotSame(range6, range5);
      assertNotSame(range6, range4);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertEquals((-2100.38399514297), range6.getCentralValue(), 0.01);
      assertEquals((-4202.76799028594), range6.getLowerBound(), 0.01);
      assertFalse(range6.isNaNRange());
      assertEquals(4204.76799028594, range6.getLength(), 0.01);
      assertEquals(2.0, range6.getUpperBound(), 0.01);
      assertFalse(boolean2);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range7));
      assertFalse(range1.equals((Object)range8));
      assertFalse(range1.equals((Object)range5));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range9));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range6));
      assertTrue(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(range6.equals((Object)range1));
      assertFalse(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range3));
      assertFalse(range6.equals((Object)range2));
      assertFalse(range6.equals((Object)range9));
      assertFalse(range6.equals((Object)range7));
      assertFalse(range6.equals((Object)range8));
      assertFalse(range6.equals((Object)range5));
      assertFalse(range6.equals((Object)range4));
      
      Range range10 = Range.expandToInclude(range4, (-53.1757));
      assertNotSame(range0, range3);
      assertNotSame(range0, range4);
      assertNotSame(range0, range6);
      assertNotSame(range0, range5);
      assertNotSame(range0, range8);
      assertNotSame(range0, range10);
      assertNotSame(range0, range2);
      assertNotSame(range0, range9);
      assertNotSame(range0, range7);
      assertNotSame(range0, range1);
      assertNotSame(range10, range6);
      assertNotSame(range10, range1);
      assertNotSame(range10, range3);
      assertNotSame(range10, range4);
      assertNotSame(range10, range8);
      assertNotSame(range10, range0);
      assertNotSame(range10, range5);
      assertNotSame(range10, range7);
      assertNotSame(range10, range2);
      assertNotSame(range10, range9);
      assertNotSame(range4, range6);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range10);
      assertNotSame(range4, range8);
      assertNotSame(range4, range5);
      assertNotSame(range4, range2);
      assertNotSame(range4, range9);
      assertNotSame(range4, range7);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2102.38399514297, range10.getUpperBound(), 0.01);
      assertEquals(1024.604147571485, range10.getCentralValue(), 0.01);
      assertEquals((-53.1757), range10.getLowerBound(), 0.01);
      assertEquals(2155.5596951429698, range10.getLength(), 0.01);
      assertFalse(range10.isNaNRange());
      assertEquals(1050.191997571485, range4.getCentralValue(), 0.01);
      assertEquals(2102.38399514297, range4.getUpperBound(), 0.01);
      assertEquals(2104.38399514297, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals((-2.0), range4.getLowerBound(), 0.01);
      assertNotNull(range10);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range4));
      assertFalse(range0.equals((Object)range6));
      assertFalse(range0.equals((Object)range5));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range8));
      assertFalse(range0.equals((Object)range9));
      assertFalse(range0.equals((Object)range7));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range10.equals((Object)range6));
      assertFalse(range10.equals((Object)range1));
      assertFalse(range10.equals((Object)range3));
      assertFalse(range10.equals((Object)range4));
      assertFalse(range10.equals((Object)range8));
      assertFalse(range10.equals((Object)range0));
      assertFalse(range10.equals((Object)range5));
      assertFalse(range10.equals((Object)range7));
      assertFalse(range10.equals((Object)range2));
      assertFalse(range10.equals((Object)range9));
      assertFalse(range4.equals((Object)range6));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range7));
      assertFalse(range4.equals((Object)range8));
      assertFalse(range4.equals((Object)range5));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range9));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = new Range(1347.146, 1347.146);
      Range range1 = Range.expandToInclude(range0, 1347.146);
      Range range2 = Range.combineIgnoringNaN(range1, range1);
      Range range3 = Range.combine(range1, range0);
      Range range4 = Range.combine(range3, range2);
      Range range5 = Range.shift(range2, (-1.0), true);
      range0.toString();
      Range range6 = Range.expand(range5, 1347.146, 1.0);
      Range range7 = Range.combine(range4, range5);
      assertEquals(1346.646, range7.getCentralValue(), 0.01);
      
      Range range8 = Range.shift(range6, 1347.146);
      range5.toString();
      boolean boolean0 = range2.isNaNRange();
      assertFalse(boolean0);
      
      double double0 = range2.constrain((-1.0));
      assertEquals(1347.146, double0, 0.01);
      
      range8.contains(1347.146);
      range3.getLength();
      String string0 = range8.toString();
      assertEquals("Range[2693.292,2693.292]", string0);
      
      Range range9 = Range.shift(range3, 0.0);
      assertNotSame(range1, range2);
      assertSame(range1, range0);
      assertFalse(range9.equals((Object)range7));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.expand(range0, 0.0, 660.0652);
      // Undeclared exception!
      try { 
        Range.scale(range1, (-1749.48491037));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-3998.45298540667);
      Range range0 = null;
      try {
        range0 = new Range(0.0, (-3998.45298540667));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3998.45298540667).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.scale(range0, 0.0);
      Range range2 = Range.shift(range1, 0.0);
      Range range3 = Range.expandToInclude(range1, 0.0);
      Range range4 = Range.combine(range1, range0);
      Range range5 = Range.shift(range4, 0.0);
      Range.combine(range3, range5);
      String string0 = range0.toString();
      assertEquals("Range[0.0,0.0]", string0);
      
      range0.constrain(0.0);
      range0.getUpperBound();
      range0.isNaNRange();
      Range range6 = Range.combineIgnoringNaN(range1, range1);
      range1.isNaNRange();
      Range range7 = Range.shift(range0, 0.0);
      Range range8 = Range.shift(range2, 0.0, false);
      range7.getUpperBound();
      Range range9 = Range.scale(range0, 0.0);
      Range range10 = Range.expand(range3, (-1.0), 0.0);
      Range range11 = Range.shift(range10, (-2609.62736445));
      Range range12 = Range.expandToInclude(range11, 1354.0);
      Range range13 = Range.scale(range2, 0.0);
      range12.isNaNRange();
      assertEquals(3963.62736445, range12.getLength(), 0.01);
      
      range9.hashCode();
      Range.combine(range8, range0);
      range7.getUpperBound();
      Range range14 = Range.combineIgnoringNaN(range7, range9);
      assertEquals(0.0, range14.getLowerBound(), 0.01);
      
      range7.getLowerBound();
      boolean boolean0 = range9.contains(167.7244853826);
      boolean boolean1 = range13.contains((-536.8676126087));
      assertNotSame(range1, range6);
      assertSame(range1, range3);
      assertEquals(0.0, range13.getUpperBound(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = new Range(2536.616137721575, 2536.616137721575);
      Range range1 = Range.scale(range0, 0.0);
      Range.shift(range0, 1.0);
      Range range2 = Range.expandToInclude(range0, 0.0);
      Range range3 = Range.expand(range2, 0.0, 0.0);
      Range range4 = Range.combine(range1, range1);
      Range range5 = Range.combineIgnoringNaN(range4, range4);
      range5.getCentralValue();
      range4.intersects(0.0, 0.0);
      Range range6 = Range.shift(range2, 2578.243132753);
      Range.scale(range1, 0.0);
      Range range7 = Range.combineIgnoringNaN(range0, range0);
      boolean boolean0 = range1.intersects(0.0, 2.0);
      range1.intersects(4616.0, (-2702.6689827));
      range5.hashCode();
      Range.expandToInclude(range1, 0.0);
      range2.getUpperBound();
      Range range8 = Range.scale(range2, 0.0);
      Range range9 = Range.combineIgnoringNaN(range5, range3);
      boolean boolean1 = range5.intersects(range8);
      assertFalse(boolean1 == boolean0);
      
      double double0 = range6.constrain(0.0);
      assertEquals(2578.243132753, double0, 0.01);
      
      double double1 = range9.constrain(4616.0);
      assertEquals(2536.616137721575, double1, 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(1268.3080688607874, range9.getCentralValue(), 0.01);
      
      Range.shift(range8, 1.0);
      range4.constrain(0.0);
      Range range10 = Range.expand(range7, 2.0, 0.0);
      assertEquals(2536.616137721575, range10.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      Range range0 = new Range(0.0, 0.0);
      double double2 = (-1163.00415);
      // Undeclared exception!
      try { 
        Range.scale(range0, (-1163.00415));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = new Range(0.0, 2.0);
      String string0 = range0.toString();
      assertEquals("Range[0.0,2.0]", string0);
      
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.expand(range0, (-1126.327262), (-1126.327262));
      Range range3 = Range.shift(range2, 143.87);
      assertEquals(144.87, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      
      Range.combineIgnoringNaN(range0, range1);
      range0.getCentralValue();
      Range range4 = Range.scale(range0, 0.0);
      Range range5 = Range.combineIgnoringNaN(range0, range4);
      boolean boolean0 = range5.intersects(2.0, (-1296.979));
      assertFalse(boolean0);
      
      Range range6 = Range.combine(range5, range5);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertTrue(range6.equals((Object)range1));
      assertNotSame(range6, range5);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = new Range((-604.3943109219), (-604.3943109219));
      Range range1 = Range.combine(range0, range0);
      Range range2 = Range.shift(range1, (-604.3943109219), true);
      Range range3 = Range.scale(range1, 0.0);
      Range range4 = Range.shift(range0, (-604.3943109219));
      Range.shift(range4, (-604.3943109219));
      Range range5 = Range.expandToInclude(range2, (-2414.5763));
      Range range6 = Range.expandToInclude(range2, 0.0);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      
      Range range7 = Range.shift(range2, (-604.3943109219), false);
      assertEquals((-1813.1829327657001), range7.getLowerBound(), 0.01);
      
      range2.getLowerBound();
      Range.shift(range0, 1.0, true);
      Range range8 = Range.scale(range5, 0.0);
      String string0 = range8.toString();
      assertEquals("Range[-0.0,-0.0]", string0);
      assertEquals(1205.7876781562002, range5.getLength(), 0.01);
      
      Range range9 = Range.shift(range2, 3967.502093728);
      assertTrue(range9.equals((Object)range3));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = 1.0;
      Range range0 = null;
      try {
        range0 = new Range(1.0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.0) <= upper (-1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = 120.0473031177;
      double double1 = 0.0;
      Range range0 = null;
      try {
        range0 = new Range(120.0473031177, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (120.0473031177) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = new Range((-3160.799), 137.4657877);
      Range range1 = Range.scale(range0, 137.4657877);
      Range.expand(range1, (-1.0), (-1.0));
      Range range2 = Range.shift(range0, (-3160.799));
      Range range3 = Range.shift(range0, 137.4657877, false);
      Range range4 = Range.scale(range3, 137.4657877);
      Range.expand(range4, 0.0, (-3160.799));
      range0.toString();
      Range range5 = Range.scale(range2, 848.7);
      Range.combine(range2, range5);
      Range.expandToInclude(range0, 848.7);
      Range.scale(range0, 137.4657877);
      range5.getLength();
      Range range6 = Range.expand(range5, (-3160.799), 137.4657877);
      range5.intersects(range2);
      range5.intersects(range3);
      range2.toString();
      range0.isNaNRange();
      range5.isNaNRange();
      Range range7 = Range.combine(range5, range2);
      Range.expandToInclude(range7, 5365140.2226);
      Range.expandToInclude(range6, 0.0);
      Range range8 = Range.expand(range7, (-3160.799), 137.4657877);
      Range.scale(range8, 5365140.2226);
      // Undeclared exception!
      try { 
        Range.scale((Range) null, 848.7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 1920.1924912798);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = (-1.0);
      Range range0 = new Range((-1.0), (-1.0));
      // Undeclared exception!
      try { 
        Range.scale(range0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = new Range(3086.973679897764, 3086.973679897764);
      Range range1 = Range.expand(range0, 1479.475, 1479.475);
      Range range2 = Range.combineIgnoringNaN(range0, range0);
      Range range3 = Range.combine(range1, range0);
      Range range4 = Range.scale(range3, 3086.973679897764);
      range4.equals(range0);
      Range range5 = Range.combineIgnoringNaN(range3, range3);
      Range range6 = Range.combineIgnoringNaN(range5, range1);
      Range.shift(range6, (-1.0));
      range3.contains(3086.973679897764);
      Range.shift(range5, 1479.475);
      range0.constrain(3491.0);
      range2.toString();
      Range.combineIgnoringNaN(range2, (Range) null);
      range4.toString();
      Range range7 = Range.shift(range6, (-1.0), true);
      Range.expand(range4, 3086.973679897764, 2.0);
      range0.intersects(range4);
      range4.getCentralValue();
      Range range8 = Range.combine(range6, range7);
      // Undeclared exception!
      try { 
        Range.scale(range8, (-1990.92834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = new Range((-1241.8888), 2.0);
      Range range1 = Range.expandToInclude(range0, 2.0);
      Range range2 = Range.combine(range1, range1);
      Range range3 = Range.combineIgnoringNaN(range0, range1);
      Range range4 = Range.shift(range3, 1002.8713);
      Range range5 = Range.combineIgnoringNaN(range2, range4);
      assertEquals(2246.7601, range5.getLength(), 0.01);
      
      Range range6 = Range.shift(range0, (-2308.95584));
      Range range7 = Range.combine(range6, range6);
      assertSame(range0, range1);
      assertNotSame(range7, range6);
      assertEquals((-1775.4223200000001), range7.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = null;
      double double0 = 4782.0;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 4782.0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.shift(range1, (-1.0));
      range2.toString();
      Range range3 = Range.combineIgnoringNaN(range2, range1);
      Range range4 = Range.shift(range3, 0.0);
      Range range5 = Range.shift(range3, (-310.8084797112386));
      Range range6 = Range.expandToInclude(range3, (-310.8084797112386));
      Range range7 = Range.combineIgnoringNaN(range1, range3);
      Range.shift(range7, 0.0);
      Range.combineIgnoringNaN(range4, range6);
      assertEquals((-0.5), range4.getCentralValue(), 0.01);
      
      Range range8 = Range.shift(range5, 2163.15963315515, true);
      Range range9 = Range.scale(range2, 1012.4737106661921);
      assertEquals(0.0, range9.getLength(), 0.01);
      
      Range range10 = Range.scale(range3, 0.0);
      assertEquals(0.0, range10.getUpperBound(), 0.01);
      
      String string0 = range2.toString();
      assertEquals("Range[-1.0,-1.0]", string0);
      
      Range range11 = Range.combine(range7, (Range) null);
      assertNotNull(range11);
      
      double double0 = range8.constrain((-310.8084797112386));
      assertEquals(1851.3511534439115, double0, 0.01);
      assertTrue(range3.equals((Object)range7));
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expandToInclude(range0, 1.0);
      Range range2 = Range.expand(range1, 0.0, 0.0);
      Range range3 = Range.scale(range0, 0.0);
      range0.getLowerBound();
      range0.toString();
      String string0 = range0.toString();
      assertEquals("Range[1.0,1.0]", string0);
      
      boolean boolean0 = range0.intersects(1.0, 1.0);
      assertFalse(boolean0);
      
      Range range4 = Range.shift(range1, 1607.4011, true);
      Range range5 = Range.shift(range0, 1067.79);
      Range range6 = Range.combine(range0, range5);
      Range range7 = Range.expandToInclude(range2, 1.0);
      Range range8 = Range.shift(range1, 0.0);
      Range.scale(range4, 0.0);
      Range range9 = Range.expandToInclude(range0, (-214.685454976354));
      Range range10 = Range.expand(range0, 1067.79, 840.7754006175334);
      Range range11 = Range.shift(range6, 311.0366);
      Range range12 = Range.combine(range11, range6);
      assertEquals(690.4132999999999, range12.getCentralValue(), 0.01);
      
      Range range13 = Range.shift(range4, 1.0, false);
      boolean boolean1 = range7.equals(range0);
      Range range14 = Range.expand(range13, (-2430.2198), 1607.4011);
      assertTrue(range14.equals((Object)range13));
      
      boolean boolean2 = range3.intersects(range0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      
      boolean boolean3 = range10.intersects(0.0, 0.0);
      assertFalse(boolean3);
      
      double double0 = range9.constrain((-368.745773543739));
      assertFalse(range0.equals((Object)range12));
      assertSame(range0, range1);
      assertTrue(range0.equals((Object)range2));
      assertEquals((-214.685454976354), double0, 0.01);
      assertFalse(range9.equals((Object)range8));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = null;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = (-1941.6495435);
      Range range0 = new Range((-1941.6495435), (-1.0));
      double double1 = 0.0;
      Range range1 = Range.expand(range0, (-1.0), 0.0);
      double double2 = 2609.396;
      Range.expandToInclude(range0, 2609.396);
      Range range2 = Range.expandToInclude(range1, 2609.396);
      Range.scale(range2, 0.0);
      Range range3 = Range.expandToInclude(range2, 0.0);
      Range range4 = Range.shift(range1, 2609.396, true);
      Range.shift(range2, 0.0);
      Range range5 = Range.combineIgnoringNaN(range0, range4);
      Range range6 = Range.combine(range5, range3);
      // Undeclared exception!
      try { 
        Range.scale(range6, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = new Range((-2628.826964510935), (-2628.826964510935));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.combine(range1, range0);
      Range.combine(range0, range2);
      Range.combineIgnoringNaN(range1, range1);
      Range range3 = Range.expand(range1, 1.0, 1.0);
      Range range4 = Range.shift(range3, (-740.488978514565));
      Range range5 = Range.expandToInclude(range0, (-740.488978514565));
      Range range6 = Range.expandToInclude(range5, (-2628.826964510935));
      String string0 = range5.toString();
      assertEquals("Range[-2628.826964510935,-740.488978514565]", string0);
      
      double double0 = range1.constrain(1.0);
      assertEquals((-2628.826964510935), double0, 0.01);
      
      boolean boolean0 = range5.intersects((-2628.826964510935), (-2628.826964510935));
      assertFalse(boolean0);
      
      range1.getLowerBound();
      range4.hashCode();
      assertEquals((-3369.3159430255), range4.getCentralValue(), 0.01);
      
      range3.getLength();
      double double1 = range6.constrain((-740.488978514565));
      assertEquals((-740.488978514565), double1, 0.01);
      assertEquals(1888.3379859963698, range6.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = 2.0;
      Range range0 = null;
      try {
        range0 = new Range(2.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2.0) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = 0.0;
      Range range0 = new Range(0.0, 0.0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(1136.192, (-2427.763));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1136.192) <= upper (-2427.763).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }
}
