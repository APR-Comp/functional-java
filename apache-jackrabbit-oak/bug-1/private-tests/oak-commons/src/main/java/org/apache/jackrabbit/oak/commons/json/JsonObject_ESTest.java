/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 04:07:22 GMT 2023
 */

package org.apache.jackrabbit.oak.commons.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.apache.jackrabbit.oak.commons.json.JsonObject;
import org.apache.jackrabbit.oak.commons.json.JsopBuilder;
import org.apache.jackrabbit.oak.commons.json.JsopStream;
import org.apache.jackrabbit.oak.commons.json.JsopTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonObject_ESTest extends JsonObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer(";jmqi S2k~s.P'P");
      jsopTokenizer0.setPos((-1755));
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("");
      jsopTokenizer0.getToken();
      jsopTokenizer0.setPos((-2389));
      jsopTokenizer0.matches(2723);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream0);
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      JsopBuilder jsopBuilder3 = jsopBuilder2.newline();
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(true);
      jsonObject0.toJson(jsopBuilder4);
      JsopBuilder jsopBuilder5 = new JsopBuilder();
      JsopBuilder jsopBuilder6 = jsopBuilder5.endObject();
      JsopBuilder jsopBuilder7 = jsopBuilder6.endArray();
      JsopBuilder jsopBuilder8 = jsopBuilder7.array();
      JsopBuilder jsopBuilder9 = jsopBuilder8.value("+!Bz]r");
      jsopBuilder6.value("+!Bz]r");
      jsopBuilder6.length();
      JsopBuilder jsopBuilder10 = jsopBuilder8.value(false);
      jsonObject0.toJson(jsopBuilder9);
      jsonObject0.toString();
      jsonObject0.toString();
      jsonObject0.toJson(jsopBuilder9);
      JsonObject jsonObject1 = JsonObject.fromJson("{}", false);
      jsonObject1.toString();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("}", 0);
      JsonObject jsonObject2 = JsonObject.create(jsopTokenizer0);
      jsonObject2.toJson(jsopBuilder10);
      JsonObject jsonObject3 = JsonObject.fromJson("{}", false);
      assertFalse(jsonObject3.equals((Object)jsonObject1));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.toString();
      JsopBuilder jsopBuilder0 = null;
      // Undeclared exception!
      try { 
        jsonObject0.toJson((JsopBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsonObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("}", 0);
      JsonObject jsonObject0 = JsonObject.create(jsopTokenizer0, true);
      String string0 = jsonObject0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.toString();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("P<p]L!<61w?P%W:E>*?", 55);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // P<p]L!<61w?P%W:E>*?[*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        JsonObject.create((JsopTokenizer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsonObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject(false);
      // Undeclared exception!
      try { 
        JsonObject.create((JsopTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsonObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("[:`*hpt`");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [[*]:`*hpt` expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "{}";
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("{}");
      jsopTokenizer0.matches(0);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {[*]} expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonObject.fromJson((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject(true);
      // Undeclared exception!
      try { 
        JsonObject.fromJson("", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endObject();
      JsopBuilder jsopBuilder2 = jsopBuilder1.object();
      jsonObject0.toJson(jsopBuilder2);
      jsopBuilder0.encodedValue((String) null);
      jsonObject0.getChildren();
      String string0 = null;
      JsopTokenizer jsopTokenizer0 = null;
      try {
        jsopTokenizer0 = new JsopTokenizer((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        JsonObject.fromJson("7_BoSr$iW58@_b=`t}3", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7[*]_BoSr$iW58@_b=`t}3 expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = ",~\\IWr]pOk~Y>e$";
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer(",~IWr]pOk~Y>e$");
      // Undeclared exception!
      try { 
        JsopTokenizer.decodeQuoted(",~IWr]pOk~Y>e$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*],~IWr]pOk~Y>e$
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = null;
      // Undeclared exception!
      try { 
        JsonObject.create((JsopTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsonObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "";
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("", 0);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "{\n";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        JsonObject.fromJson("{\n", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {
         // [*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      assertEquals("", jsopBuilder0.toString());
      
      JsopBuilder jsopBuilder1 = jsopBuilder0.encodedValue("org.apache.jackrabbit.oak.commons.json.JsonObject");
      assertEquals("org.apache.jackrabbit.oak.commons.json.JsonObject", jsopBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject(false);
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("", 0);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = true;
      JsonObject jsonObject0 = new JsonObject(true);
      JsopTokenizer jsopTokenizer0 = null;
      try {
        jsopTokenizer0 = new JsopTokenizer((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      String string0 = "B{#CgIPT.*mGej";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        JsonObject.fromJson("B{#CgIPT.*mGej", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // B[*]{#CgIPT.*mGej expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonObject.fromJson("zpTAe=UFg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zp[*]TAe=UFg expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("7#j", 0);
      jsopTokenizer0.matches(0);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7[*]#j expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      JsopTokenizer.decode("");
      jsonObject0.toString();
      jsonObject0.getProperties();
      JsopTokenizer.decode("org.apache.jackrabbit.oak.commons.json.JsonObject");
      // Undeclared exception!
      try { 
        JsonObject.fromJson("", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endArray();
      JsopBuilder jsopBuilder2 = jsopBuilder1.object();
      JsopBuilder jsopBuilder3 = jsopBuilder2.key("'");
      jsopBuilder3.tag('*');
      JsonObject jsonObject0 = new JsonObject(false);
      Map<String, String> map0 = jsonObject0.getProperties();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = null;
      try {
        jsopTokenizer0 = new JsopTokenizer("", (-347));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.toString();
      // Undeclared exception!
      try { 
        JsonObject.fromJson("", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject(false);
      jsonObject0.toString();
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endObject();
      JsopBuilder jsopBuilder2 = jsopBuilder1.append(jsopBuilder0);
      JsopBuilder.prettyPrint("w*rl\"^(C");
      jsopBuilder2.newline();
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[9];
      charArray0[0] = '\u0088';
      charArray0[1] = '(';
      charArray0[2] = 'S';
      charArray0[3] = 'l';
      charArray0[4] = '\u001C';
      charArray0[5] = 'g';
      charArray0[6] = 'b';
      charArray0[7] = '\"';
      charArray0[8] = 'L';
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, charArray0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) "{}");
      // Undeclared exception!
      try { 
        stringBuilder2.insert(0, (CharSequence) null, 0, 58);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 0, end 58, s.length() 4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.newline();
      long long0 = 0L;
      String string0 = "R2+a72#\\\\7&ICPMp";
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("R2+a72#\\7&ICPMp", 0);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // R[*]2+a72#\\7&ICPMp expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(false);
      jsopBuilder1.object();
      // Undeclared exception!
      try { 
        JsonObject.fromJson("BR%#^(vtrH`?|wUgtO", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // B[*]R%#^(vtrH`?|wUgtO expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "org.apache.jackrabbit.oak.commons.json.JsonObject";
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("org.apache.jackrabbit.oak.commons.json.JsonObject");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org[*].apache.jackrabbit.oak.commons.json.JsonObject expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = false;
      JsonObject jsonObject0 = new JsonObject(false);
      jsonObject0.toString();
      JsonObject jsonObject1 = JsonObject.fromJson("{}", false);
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(458L);
      JsopBuilder jsopBuilder2 = jsopBuilder1.key("");
      JsopBuilder jsopBuilder3 = jsopBuilder2.array();
      jsopBuilder2.value(false);
      jsopBuilder1.encodedValue("{}");
      boolean boolean1 = true;
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(true);
      jsopBuilder4.array();
      jsonObject1.toJson(jsopBuilder4);
      // Undeclared exception!
      try { 
        JsonObject.fromJson("b!#Wd>O6", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // b[*]!#Wd>O6 expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("Dvqov^1u!", 0);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // D[*]vqov^1u! expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        JsonObject.fromJson("U", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // U[*] expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonObject.fromJson("gXW.xl)KZBi: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // g[*]XW.xl)KZBi:  expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("");
      Map<String, JsonObject> map0 = jsonObject0.getChildren();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endObject();
      jsopBuilder1.append(jsopBuilder0);
      String string0 = ":.V:C!LZq";
      StringBuilder stringBuilder0 = new StringBuilder("org.apache.jackrabbit.oak.commons.json.JsonObject");
      StringBuilder stringBuilder1 = stringBuilder0.append(0);
      StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0);
      int int0 = 1475;
      // Undeclared exception!
      try { 
        stringBuilder2.replace(1475, 1475, "67ce>M?q%`,F");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = null;
      try {
        jsopTokenizer0 = new JsopTokenizer("j:>3aV'/ICE8k<r", (-1746));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.endArray();
      // Undeclared exception!
      try { 
        JsonObject.fromJson("", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      // Undeclared exception!
      try { 
        JsonObject.create((JsopTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsonObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonObject.fromJson("*6", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // *[*]6 expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(false);
      JsopBuilder jsopBuilder2 = jsopBuilder1.endArray();
      JsopBuilder jsopBuilder3 = jsopBuilder2.array();
      JsopBuilder jsopBuilder4 = jsopBuilder3.key("org.apache.jackrabbit.oak.commons.json.JsonObject");
      jsonObject0.toJson(jsopBuilder4);
      assertEquals("false],[\"org.apache.jackrabbit.oak.commons.json.JsonObject\":{}", jsopBuilder4.toString());
      assertEquals("false],[\"org.apache.jackrabbit.oak.commons.json.JsonObject\":{}", jsopBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonObject.fromJson("}", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // }[*] expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonObject.fromJson("", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("", 0);
      boolean boolean0 = false;
      JsopTokenizer.decode("");
      // Undeclared exception!
      try { 
        JsopTokenizer.decodeQuoted("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*]
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("B{R");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // B[*]{R expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonObject.fromJson("string", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string[*] expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.array();
      String string0 = JsopBuilder.prettyPrint("U_XwA(y|;*XC/r%");
      assertEquals("U[*]_XwA(y|;*XC/r%U_[*]XwA(y|;*XC/r%U_X[*]wA(y|;*XC/r%wU_XwA[*](y|;*XC/r%U_XwA([*]y|;*XC/r%yU_XwA(y|[*];*XC/r%; * U_XwA(y|;*X[*]C/r%U_XwA(y|;*XC[*]/r%/ rU_XwA(y|;*XC/r%[*]", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject(false);
      jsonObject0.getProperties();
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.array();
      StringBuilder stringBuilder0 = new StringBuilder();
      jsopBuilder1.value(1912L);
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("org.apache.jackrabbit.oak.commons.json.JsonObject");
      JsopBuilder jsopBuilder2 = jsopBuilder1.tag(']');
      jsonObject0.toJson(jsopBuilder2);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org[*].apache.jackrabbit.oak.commons.json.JsonObject expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      String string0 = "org.apache.jackrabbit.oak.commons.json.JsonObject";
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("org.apache.jackrabbit.oak.commons.json.JsonObject");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org[*].apache.jackrabbit.oak.commons.json.JsonObject expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      String string0 = ")[sc{TK?N";
      JsopTokenizer jsopTokenizer0 = null;
      try {
        jsopTokenizer0 = new JsopTokenizer(")[sc{TK?N", (-1396));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.getChildren();
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      String string0 = "@Zf";
      JsopBuilder.prettyPrint("@Zf");
      jsopBuilder0.value("x7UrgqZBrGbYE");
      JsopBuilder.encode((String) null);
      // Undeclared exception!
      try { 
        JsopBuilder.prettyPrint((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("b>kmX)", 1296);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // b>kmX)[*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonObject.create((JsopTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsonObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = false;
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = new JsopBuilder();
      jsopBuilder1.encodedValue((String) null);
      jsopBuilder1.value(0L);
      // Undeclared exception!
      try { 
        JsonObject.fromJson("9jNBF?Ql#>Bg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9[*]jNBF?Ql#>Bg expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "HGA~/{>l8t_\"";
      JsopTokenizer jsopTokenizer0 = null;
      try {
        jsopTokenizer0 = new JsopTokenizer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("");
      boolean boolean0 = true;
      jsopTokenizer0.getToken();
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "";
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream0);
      JsopBuilder jsopBuilder2 = jsopBuilder1.object();
      JsopBuilder jsopBuilder3 = jsopBuilder2.endObject();
      jsopBuilder3.encodedValue("");
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(2885L);
      assertSame(jsopBuilder4, jsopBuilder2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("L(ff");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // L[*](ff expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("\"\"");
      jsopTokenizer0.setPos(0);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \"\"[*] expected: ':'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        JsonObject.fromJson("", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.encodedValue("UX$U*fb>Q,j@|v5[:t");
      JsopBuilder jsopBuilder2 = jsopBuilder1.object();
      JsopBuilder jsopBuilder3 = jsopBuilder2.append(jsopBuilder0);
      JsopBuilder jsopBuilder4 = jsopBuilder3.endArray();
      assertSame(jsopBuilder4, jsopBuilder0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        JsonObject.fromJson("", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonObject.fromJson("", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject(true);
      // Undeclared exception!
      try { 
        JsonObject.fromJson("gZDI}6yyH7Y}", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // g[*]ZDI}6yyH7Y} expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append((float) 0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.tag('{');
      JsopBuilder jsopBuilder2 = jsopBuilder1.value("");
      jsopBuilder2.value(false);
      JsopBuilder jsopBuilder3 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder4 = jsopBuilder3.append(jsopStream0);
      JsopBuilder jsopBuilder5 = jsopBuilder4.endObject();
      JsopBuilder jsopBuilder6 = jsopBuilder5.tag('{');
      assertSame(jsopBuilder3, jsopBuilder6);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        JsonObject.fromJson("#-DH-wB3<|~~T", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // #[*]-DH-wB3<|~~T expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.key(".sg>eprJ^l@(jV3~^R/");
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      jsopBuilder2.tag('5');
      JsopBuilder jsopBuilder3 = jsopBuilder2.value(false);
      jsopBuilder1.array();
      JsopBuilder jsopBuilder4 = jsopBuilder3.endArray();
      jsopBuilder1.resetWriter();
      jsopBuilder4.append(jsopBuilder3);
      jsonObject0.toJson(jsopBuilder4);
      jsonObject0.toString();
      // Undeclared exception!
      try { 
        JsonObject.fromJson("<i#Qa<(xOq4", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // <[*]i#Qa<(xOq4 expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject(true);
      jsonObject0.toString();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("aBU");
      jsopTokenizer0.getToken();
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a[*]BU expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = true;
      JsonObject jsonObject0 = new JsonObject(true);
      String string0 = "L7";
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("L7");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // L[*]7 expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "{BkNQ?dn<VV|k+h9c8";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        JsonObject.fromJson("{BkNQ?dn<VV|k+h9c8", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {B[*]kNQ?dn<VV|k+h9c8 expected: end
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.setLineLength(0);
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(638L);
      assertEquals("638", jsopBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        JsopTokenizer.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream0);
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      JsopBuilder jsopBuilder3 = jsopBuilder2.newline();
      JsopBuilder.prettyPrint(" z);Fg");
      jsopBuilder3.object();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) " [*]z);Fgz z)[*];Fg;  z);F[*]gg");
      StringBuilder stringBuilder2 = new StringBuilder();
      JsopBuilder.escape("Id4sC:gu=6E", stringBuilder2);
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("error");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error[*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = ";O([PEPq^W[%~";
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer(";O([PEPq^W[%~");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ;[*]O([PEPq^W[%~ expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "K\\.bAwm3OzA)JJ";
      boolean boolean0 = true;
      JsonObject jsonObject0 = new JsonObject(true);
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      // Undeclared exception!
      try { 
        JsonObject.fromJson("K.bAwm3OzA)JJ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // K[*].bAwm3OzA)JJ expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.encodedValue("");
      JsopBuilder jsopBuilder2 = jsopBuilder1.endObject();
      JsopBuilder jsopBuilder3 = jsopBuilder2.append(jsopBuilder0);
      JsopBuilder jsopBuilder4 = jsopBuilder3.key("");
      assertSame(jsopBuilder1, jsopBuilder4);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject(false);
      String string0 = "";
      jsonObject0.getProperties();
      // Undeclared exception!
      try { 
        JsonObject.fromJson("", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("oH<3ZtHZ");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // o[*]H<3ZtHZ expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject(true);
      int int0 = 0;
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("", 0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = null;
      try {
        jsopTokenizer0 = new JsopTokenizer("", (-469));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("MW6");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // M[*]W6 expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endArray();
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      JsopBuilder jsopBuilder3 = jsopBuilder2.endObject();
      JsopBuilder jsopBuilder4 = jsopBuilder3.object();
      assertSame(jsopBuilder4, jsopBuilder0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Map<String, String> map0 = jsonObject0.getProperties();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream0);
      JsopBuilder jsopBuilder2 = jsopBuilder1.value("Q_bxmVl");
      jsopBuilder2.endArray();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer(" 1<Qy(", 2290);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  1<Qy([*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "";
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      String string0 = "~rj";
      // Undeclared exception!
      try { 
        JsonObject.fromJson("~rj", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ~[*]rj expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.object();
      JsopBuilder jsopBuilder2 = new JsopBuilder();
      JsopBuilder jsopBuilder3 = jsopBuilder1.value("Jg{a$pNeD~9");
      jsopBuilder3.resetWriter();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("Jg{a$pNeD~9", 91);
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Jg{a$pNeD~9[*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("Mmf1p\"Uab%mJH");
      JsopBuilder jsopBuilder2 = jsopBuilder1.newline();
      assertEquals("\"Mmf1p\\\"Uab%mJH\":\n", jsopBuilder2.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endArray();
      JsopBuilder jsopBuilder2 = jsopBuilder1.value(false);
      jsopBuilder1.value(false);
      JsopBuilder jsopBuilder3 = jsopBuilder2.endObject();
      assertSame(jsopBuilder3, jsopBuilder2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = true;
      JsonObject jsonObject0 = new JsonObject(true);
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endArray();
      jsopBuilder1.append(jsopBuilder0);
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      jsonObject0.toJson(jsopBuilder2);
      String string0 = "$P/pwZ)M`YPeaG";
      JsopTokenizer jsopTokenizer0 = null;
      try {
        jsopTokenizer0 = new JsopTokenizer("$P/pwZ)M`YPeaG", (-4053));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonObject.fromJson("ER?%/-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // E[*]R?%/- expected: '{'
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject(true);
      jsonObject0.getChildren();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("|`whj$'c9B");
      // Undeclared exception!
      try { 
        JsonObject.create(jsopTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // |[*]`whj$'c9B expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.encodedValue("6D4(YH>3>+x.V");
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      assertSame(jsopBuilder2, jsopBuilder1);
  }
}
