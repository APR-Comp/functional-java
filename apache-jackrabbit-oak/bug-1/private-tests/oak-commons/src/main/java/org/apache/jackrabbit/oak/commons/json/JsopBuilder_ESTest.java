/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 04:08:04 GMT 2023
 */

package org.apache.jackrabbit.oak.commons.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.jackrabbit.oak.commons.json.JsopBuilder;
import org.apache.jackrabbit.oak.commons.json.JsopStream;
import org.apache.jackrabbit.oak.commons.json.JsopTokenizer;
import org.apache.jackrabbit.oak.commons.json.JsopWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsopBuilder_ESTest extends JsopBuilder_ESTest_scaffolding {

  // @Test(timeout = 4000)
  // public void test000()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     assertEquals("", jsopBuilder0.toString());
  //     
  //     JsopStream jsopStream0 = new JsopStream();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream0);
  //     JsopBuilder jsopBuilder2 = jsopBuilder1.array();
  //     JsopBuilder jsopBuilder3 = jsopBuilder2.value((String) null);
  //     JsopBuilder jsopBuilder4 = jsopBuilder3.value(false);
  //     JsopBuilder.encode((String) null);
  //     JsopBuilder jsopBuilder5 = jsopBuilder4.tag('5');
  //     jsopStream0.read(0);
  //     jsopBuilder5.resetWriter();
  //     jsopBuilder4.value(true);
  //     jsopBuilder2.setLineLength(0);
  //     jsopBuilder5.value((String) null);
  //     jsopStream0.value(false);
  //     JsopBuilder.encode("\u0000");
  //     JsopBuilder.prettyPrint("\"\u0000\"");
  //     StringBuilder stringBuilder0 = new StringBuilder(0);
  //     StringBuilder stringBuilder1 = stringBuilder0.append(0);
  //     StringBuilder stringBuilder2 = stringBuilder1.append(0.0F);
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder2.insert((-281), (-1L));
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: -281
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.encodedValue("?npvtvYiH3-");
      jsopBuilder1.newline();
      jsopBuilder0.value(false);
      jsopBuilder0.endObject();
      JsopBuilder jsopBuilder2 = jsopBuilder0.endArray();
      JsopBuilder.prettyPrint("?npvtvYiH3-");
      JsopBuilder.encode("");
      JsopBuilder jsopBuilder3 = jsopBuilder1.value(false);
      JsopBuilder jsopBuilder4 = jsopBuilder3.endArray();
      JsopBuilder jsopBuilder5 = jsopBuilder4.array();
      jsopBuilder5.tag('T');
      JsopBuilder jsopBuilder6 = jsopBuilder0.object();
      jsopBuilder6.endObject();
      jsopBuilder2.value(210L);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.delete(0, 0);
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      StringBuilder stringBuilder3 = stringBuilder2.append((CharSequence) "");
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("{}svp+(NH");
      JsopBuilder.prettyPrint(stringBuilder3, jsopTokenizer0, "tLVe4'!L[1`+yG");
      String string0 = JsopBuilder.prettyPrint(stringBuilder1, jsopTokenizer0, "");
      assertEquals("false{}svp+ {}svp+([*]NH{}svp+(N[*]H{}svp+(NH[*]", stringBuilder0.toString());
      assertEquals("false{}svp+ {}svp+([*]NH{}svp+(N[*]H{}svp+(NH[*]", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.newline();
      jsopBuilder0.length();
      jsopBuilder0.tag('P');
      JsopBuilder jsopBuilder1 = jsopBuilder0.object();
      jsopBuilder0.length();
      JsopBuilder jsopBuilder2 = jsopBuilder1.value("");
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(1, (float) 1);
      StringBuilder stringBuilder2 = stringBuilder1.append((-1.0));
      JsopBuilder.prettyPrint("D7#M8lf!Hg3\"jO!'G0'");
      StringBuilder stringBuilder3 = stringBuilder2.append(']');
      StringBuilder stringBuilder4 = stringBuilder3.replace(1, 404, "");
      stringBuilder1.delete(1, 69);
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("true");
      JsopBuilder.prettyPrint(stringBuilder4, jsopTokenizer0, "");
      jsopBuilder2.length();
      jsopBuilder1.object();
      JsopBuilder.encode("");
      jsopBuilder2.endArray();
      assertEquals("\nP{\"\",{]", jsopBuilder2.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value((-2385L));
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      JsopBuilder jsopBuilder3 = jsopBuilder2.object();
      JsopBuilder jsopBuilder4 = jsopBuilder3.newline();
      JsopBuilder jsopBuilder5 = jsopBuilder4.key("");
      jsopBuilder5.array();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) jsopBuilder3);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder1);
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      StringBuilder stringBuilder3 = stringBuilder2.append((-2385L));
      StringBuilder stringBuilder4 = stringBuilder3.append((-970));
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("]");
      JsopBuilder.prettyPrint(stringBuilder4, jsopTokenizer0, "");
      jsopBuilder3.encodedValue("");
      jsopBuilder4.value(0L);
      JsopBuilder jsopBuilder6 = jsopBuilder4.encodedValue(">d*rgX");
      jsopBuilder6.encodedValue("");
      jsopBuilder2.encodedValue("");
      assertEquals("-2385,[{\n\"\":[,0,>d*rgX,,", jsopBuilder2.toString());
  }

  // @Test(timeout = 4000)
  // public void test004()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.newline();
  //     jsopBuilder1.newline();
  //     jsopBuilder0.toString();
  //     JsopBuilder jsopBuilder2 = jsopBuilder0.endObject();
  //     jsopBuilder0.setLineLength((-1206));
  //     JsopBuilder jsopBuilder3 = jsopBuilder2.value(55L);
  //     JsopBuilder.encode("\n\n");
  //     jsopBuilder3.tag('-');
  //     jsopBuilder2.resetWriter();
  //     String string0 = ";!";
  //     StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ";!");
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.insert((-1206), (double) 55L);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: -1206
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("false");
      String string0 = JsopBuilder.prettyPrint(stringBuilder0, jsopTokenizer0, "false");
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(0L);
      JsopBuilder jsopBuilder2 = jsopBuilder1.object();
      JsopBuilder jsopBuilder3 = jsopBuilder2.append(jsopBuilder0);
      JsopBuilder jsopBuilder4 = jsopBuilder3.tag('-');
      String string1 = jsopBuilder4.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsopBuilder.encode((String) null);
      JsopBuilder.encode((String) null);
      JsopBuilder.encode("K.$");
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\"K.$\"");
      StringBuilder stringBuilder1 = stringBuilder0.append((-1L));
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("null", 0);
      String string0 = JsopBuilder.prettyPrint(stringBuilder1, jsopTokenizer0, "null");
      assertEquals("\"K.$\"-1null", stringBuilder1.toString());
      assertEquals("\"K.$\"-1null", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(1L);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.insert(0, "R9w?-}%R(mh[xObj{?");
      JsopBuilder.escape("r==Y|9.<0w", stringBuilder0);
      JsopBuilder jsopBuilder2 = jsopBuilder1.encodedValue("  ");
      JsopBuilder jsopBuilder3 = jsopBuilder2.value("");
      JsopBuilder jsopBuilder4 = jsopBuilder3.endObject();
      JsopBuilder jsopBuilder5 = jsopBuilder0.object();
      JsopBuilder jsopBuilder6 = jsopBuilder4.append(jsopBuilder0);
      jsopBuilder6.value("");
      jsopBuilder5.length();
      JsopBuilder jsopBuilder7 = jsopBuilder0.key("");
      jsopBuilder7.tag('p');
      jsopBuilder1.toString();
      jsopBuilder5.endArray();
      String string0 = jsopBuilder4.toString();
      jsopBuilder4.value("r==Y|9.<0w");
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("1,  ,\"\"},{org.apache.jackrabbit.oak.commons.json.JsopBuilder@0000000001\"\",\"\":p");
      String string1 = JsopBuilder.prettyPrint(stringBuilder0, jsopTokenizer0, "");
      assertFalse(string1.equals((Object)string0));
  }

  // @Test(timeout = 4000)
  // public void test008()  throws Throwable  {
  //     StringBuilder stringBuilder0 = new StringBuilder("");
  //     StringBuilder stringBuilder1 = stringBuilder0.insert(0, (CharSequence) "");
  //     StringBuilder stringBuilder2 = stringBuilder1.insert(0, 0);
  //     StringBuilder stringBuilder3 = stringBuilder2.delete(0, 0);
  //     stringBuilder3.delete(0, 0);
  //     stringBuilder0.reverse();
  //     StringBuilder stringBuilder4 = stringBuilder3.deleteCharAt(0);
  //     JsopTokenizer jsopTokenizer0 = new JsopTokenizer("");
  //     String string0 = "* s|";
  //     JsopBuilder.prettyPrint(stringBuilder4, jsopTokenizer0, "* s|");
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     jsopBuilder0.value((long) 0);
  //     char char0 = '0';
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.insert((-1), 0L);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: -1
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("null");
      jsopBuilder1.resetWriter();
      JsopBuilder.encode("");
      JsopBuilder jsopBuilder2 = jsopBuilder1.value(513L);
      JsopBuilder jsopBuilder3 = jsopBuilder2.newline();
      JsopBuilder jsopBuilder4 = jsopBuilder3.newline();
      jsopBuilder4.append(jsopBuilder3);
      jsopBuilder4.encodedValue("");
      jsopBuilder3.setLineLength(7);
      JsopBuilder jsopBuilder5 = jsopBuilder2.object();
      JsopBuilder jsopBuilder6 = jsopBuilder3.endArray();
      JsopBuilder jsopBuilder7 = jsopBuilder1.endArray();
      jsopBuilder7.endObject();
      jsopBuilder0.endArray();
      jsopBuilder3.setLineLength(7);
      JsopBuilder jsopBuilder8 = jsopBuilder1.encodedValue("");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\"\"");
      JsopBuilder.escape("", stringBuilder0);
      jsopBuilder8.toString();
      jsopBuilder2.endArray();
      JsopBuilder jsopBuilder9 = jsopBuilder6.append(jsopBuilder1);
      assertSame(jsopBuilder9, jsopBuilder5);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      String string0 = "U{e&s<";
      JsopBuilder jsopBuilder1 = jsopBuilder0.newline();
      jsopBuilder1.encodedValue("0mS|>?`FvAdI0%x");
      jsopBuilder1.endArray();
      JsopBuilder jsopBuilder2 = jsopBuilder0.encodedValue("U{e&s<");
      JsopBuilder jsopBuilder3 = jsopBuilder2.append(jsopBuilder0);
      JsopBuilder jsopBuilder4 = jsopBuilder3.endObject();
      jsopBuilder4.endObject();
      JsopBuilder jsopBuilder5 = jsopBuilder4.newline();
      JsopBuilder jsopBuilder6 = jsopBuilder5.array();
      StringBuilder stringBuilder0 = new StringBuilder();
      JsopBuilder.escape("U{e&s<", stringBuilder0);
      JsopBuilder jsopBuilder7 = jsopBuilder6.value(true);
      jsopBuilder7.key("0mS|>?`FvAdI0%x");
      jsopBuilder3.endObject();
      // Undeclared exception!
      try { 
        JsopBuilder.prettyPrint("n&8_@}+,t8#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'E';
      charArray0[2] = 'f';
      stringBuilder0.append(charArray0);
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("ZnM,_R");
      String string0 = JsopBuilder.prettyPrint(stringBuilder0, jsopTokenizer0, "ZnM,_R");
      assertEquals("REfZ[*]nM,_RnZnM[*],_R,\nZnM,_[*]RZnM,_R[*]", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.encodedValue("error");
      jsopBuilder1.object();
      JsopBuilder jsopBuilder2 = jsopBuilder1.value((-1388L));
      JsopStream jsopStream0 = new JsopStream();
      JsopStream jsopStream1 = jsopStream0.value(true);
      JsopStream jsopStream2 = jsopStream1.key("error");
      jsopBuilder2.append(jsopStream2);
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("{=)*DE");
      // Undeclared exception!
      try { 
        JsopBuilder.prettyPrint((StringBuilder) null, jsopTokenizer0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  // @Test(timeout = 4000)
  // public void test013()  throws Throwable  {
  //     JsopBuilder.encode("\f");
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     jsopBuilder0.endArray();
  //     jsopBuilder0.array();
  //     StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\f");
  //     int int0 = (-2282);
  //     Object object0 = new Object();
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.insert((-2282), object0);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: -2282
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.encodedValue("Q*pf2W");
      JsopBuilder jsopBuilder2 = jsopBuilder1.newline();
      JsopBuilder.encode("Q*pf2W");
      JsopBuilder jsopBuilder3 = jsopBuilder2.key("Q*pf2W");
      JsopBuilder jsopBuilder4 = jsopBuilder3.endArray();
      JsopBuilder jsopBuilder5 = jsopBuilder4.value("");
      JsopBuilder jsopBuilder6 = jsopBuilder5.tag('');
      jsopBuilder6.newline();
      StringBuilder stringBuilder0 = new StringBuilder("Q*pf2W");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "Q*pf2W", 0, 0);
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("Hcy[',guD>K_ff");
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      stringBuilder1.append(charArray0, 0, 0);
      JsopBuilder.prettyPrint(stringBuilder1, jsopTokenizer0, "");
      jsopBuilder4.tag('');
      String string0 = JsopBuilder.encode("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsopBuilder.encode("/8?F");
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value("&z; vu8.)cy~~=P");
      JsopBuilder jsopBuilder2 = jsopBuilder1.endObject();
      JsopBuilder jsopBuilder3 = jsopBuilder0.append(jsopBuilder2);
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(1L);
      JsopBuilder jsopBuilder5 = jsopBuilder0.endObject();
      JsopBuilder jsopBuilder6 = jsopBuilder5.object();
      JsopBuilder jsopBuilder7 = jsopBuilder6.value(false);
      jsopBuilder7.value(true);
      jsopBuilder5.encodedValue("]");
      jsopBuilder5.toString();
      JsopBuilder.prettyPrint("&z; vu8.)cy~~=P");
      jsopBuilder0.toString();
      jsopBuilder5.setLineLength((-370));
      JsopBuilder jsopBuilder8 = jsopBuilder0.encodedValue("\"&z; vu8.)cy~~=P\"}org.apache.jackrabbit.oak.commons.json.JsopBuilder@00000000011},{false,true,]");
      jsopBuilder8.resetWriter();
      jsopBuilder5.length();
      jsopBuilder2.setLineLength(0);
      JsopBuilder jsopBuilder9 = jsopBuilder2.key("");
      jsopBuilder2.endObject();
      jsopBuilder4.endObject();
      jsopBuilder9.array();
      assertEquals("\"\":}},[", jsopBuilder2.toString());
      assertEquals("\"\":}},[", jsopBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder.prettyPrint("nY-Qr[c");
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("nY-Qr[c");
      JsopBuilder jsopBuilder2 = jsopBuilder1.value(true);
      jsopBuilder1.value("nY-Qr[c");
      char char0 = '#';
      jsopBuilder1.tag('#');
      JsopBuilder.encode("nnY[*]-Qr[c- nY-Q[*]r[cr[c");
      JsopBuilder jsopBuilder3 = jsopBuilder1.newline();
      jsopBuilder3.endArray();
      JsopBuilder jsopBuilder4 = jsopBuilder2.endObject();
      jsopBuilder4.resetWriter();
      jsopBuilder1.toString();
      JsopBuilder.encode("");
      jsopBuilder4.value(false);
      jsopBuilder1.endArray();
      int int0 = (-2241);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-2241));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      String string0 = ",MIloDz";
      JsopBuilder.encode(",MIloDz");
      JsopBuilder jsopBuilder1 = jsopBuilder0.object();
      jsopBuilder0.resetWriter();
      jsopBuilder0.endArray();
      JsopBuilder jsopBuilder2 = jsopBuilder1.append(jsopBuilder0);
      JsopBuilder jsopBuilder3 = jsopBuilder2.endObject();
      jsopBuilder1.append(jsopBuilder0);
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(false);
      JsopBuilder jsopBuilder5 = jsopBuilder4.array();
      // Undeclared exception!
      try { 
        jsopBuilder5.key((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endObject();
      JsopBuilder.encode((String) null);
      JsopBuilder.encode("error");
      jsopBuilder0.key("error");
      jsopBuilder0.key("\\");
      jsopBuilder1.tag('M');
      // Undeclared exception!
      try { 
        JsopBuilder.prettyPrint((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.resetWriter();
      char char0 = '!';
      JsopBuilder jsopBuilder1 = jsopBuilder0.tag('!');
      JsopWriter jsopWriter0 = null;
      // Undeclared exception!
      try { 
        jsopBuilder1.append((JsopWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.encodedValue("");
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      jsopBuilder0.encodedValue("");
      jsopBuilder2.object();
      JsopBuilder jsopBuilder3 = jsopBuilder1.endObject();
      JsopBuilder.encode("aV4)N?<7Gw0Itao");
      JsopBuilder jsopBuilder4 = jsopBuilder0.value(true);
      JsopBuilder jsopBuilder5 = jsopBuilder0.object();
      StringBuilder stringBuilder0 = new StringBuilder("o$wcay.;Dc>`f");
      JsopBuilder.encode("");
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("o$wcay.;Dc>`f", 2421);
      JsopBuilder.prettyPrint(stringBuilder1, jsopTokenizer0, ", ");
      jsopBuilder4.encodedValue(", ");
      JsopBuilder.encode(", ");
      JsopBuilder jsopBuilder6 = jsopBuilder0.value("o$wcay.;Dc>`ftrue");
      jsopBuilder6.length();
      jsopBuilder3.newline();
      JsopBuilder.encode("\"\"");
      JsopBuilder jsopBuilder7 = jsopBuilder2.append(jsopBuilder5);
      JsopBuilder jsopBuilder8 = jsopBuilder7.endObject();
      jsopBuilder2.setLineLength(0);
      jsopBuilder8.tag('l');
      jsopBuilder0.tag('G');
      jsopBuilder4.append(jsopBuilder5);
      jsopBuilder8.key("\"aV4)N?<7Gw0Itao\"");
      jsopBuilder7.tag('G');
      // Undeclared exception!
      try { 
        JsopBuilder.escape((String) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endArray();
      JsopBuilder jsopBuilder2 = jsopBuilder1.newline();
      jsopBuilder1.value(false);
      jsopBuilder2.value("]");
      JsopBuilder jsopBuilder3 = jsopBuilder2.value(true);
      jsopBuilder3.value(true);
      jsopBuilder2.value(false);
      jsopBuilder2.toString();
      jsopBuilder0.object();
      JsopBuilder jsopBuilder4 = jsopBuilder0.endObject();
      jsopBuilder4.array();
      JsopBuilder.prettyPrint("]\n,false,\"]\",true,true,false");
      jsopBuilder2.newline();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        JsopBuilder.prettyPrint(stringBuilder0, (JsopTokenizer) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.newline();
      JsopBuilder jsopBuilder2 = jsopBuilder1.value(484L);
      JsopBuilder jsopBuilder3 = jsopBuilder2.object();
      JsopBuilder jsopBuilder4 = jsopBuilder3.endObject();
      JsopBuilder jsopBuilder5 = jsopBuilder4.append(jsopBuilder3);
      jsopBuilder1.endObject();
      jsopBuilder4.array();
      jsopBuilder5.endArray();
      JsopBuilder jsopBuilder6 = jsopBuilder5.value(0L);
      jsopBuilder2.resetWriter();
      jsopBuilder6.endArray();
      jsopBuilder6.value((String) null);
      jsopBuilder2.length();
      jsopBuilder0.encodedValue("");
      assertEquals("],null,", jsopBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value("Q*F\"k");
      JsopBuilder jsopBuilder2 = jsopBuilder1.endArray();
      JsopBuilder jsopBuilder3 = jsopBuilder2.key("1");
      JsopBuilder jsopBuilder4 = jsopBuilder3.endObject();
      JsopBuilder jsopBuilder5 = jsopBuilder4.value(true);
      JsopBuilder jsopBuilder6 = jsopBuilder3.append(jsopBuilder0);
      jsopBuilder6.array();
      jsopBuilder5.endArray();
      jsopBuilder4.endObject();
      jsopBuilder1.length();
      jsopBuilder1.key("");
      jsopBuilder4.resetWriter();
      JsopBuilder jsopBuilder7 = jsopBuilder3.object();
      jsopBuilder5.value("");
      jsopBuilder7.setLineLength(84);
      JsopBuilder.encode("Q*F\"k");
      jsopBuilder6.resetWriter();
      String string0 = JsopBuilder.prettyPrint("Q*F\"k");
      assertEquals("Q[*]*F\"k* Q*F[*]\"kQ*F\"k[*]", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.array();
      JsopBuilder jsopBuilder2 = jsopBuilder1.object();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, true);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (float) 0);
      StringBuilder stringBuilder3 = stringBuilder2.deleteCharAt(0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      stringBuffer0.insert(0, (CharSequence) stringBuilder2, 0, 0);
      StringBuilder stringBuilder4 = stringBuilder3.append(stringBuffer0);
      JsopBuilder.escape("a[sU.xi]|VYrQl", stringBuilder4);
      JsopBuilder jsopBuilder3 = jsopBuilder2.value(3247L);
      JsopBuilder jsopBuilder4 = jsopBuilder3.key("");
      JsopBuilder jsopBuilder5 = jsopBuilder4.encodedValue("");
      jsopBuilder5.encodedValue("");
      jsopBuilder0.object();
      JsopBuilder.escape("KQ#.", stringBuilder3);
      assertEquals(".0true.0truea[sU.xi]|VYrQlKQ#.", stringBuilder3.toString());
      assertEquals(".0true.0truea[sU.xi]|VYrQlKQ#.", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.tag('.');
      jsopBuilder1.value((-1860L));
      jsopBuilder1.array();
      // Undeclared exception!
      try { 
        jsopBuilder1.key((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("}");
      JsopBuilder jsopBuilder2 = jsopBuilder1.value("}");
      JsopBuilder jsopBuilder3 = jsopBuilder2.value(true);
      JsopBuilder jsopBuilder4 = jsopBuilder3.array();
      JsopBuilder jsopBuilder5 = jsopBuilder4.append(jsopBuilder2);
      JsopBuilder jsopBuilder6 = jsopBuilder5.endArray();
      assertSame(jsopBuilder6, jsopBuilder4);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endObject();
      JsopBuilder jsopBuilder2 = jsopBuilder1.value((-1L));
      JsopBuilder.encode("]");
      jsopBuilder2.length();
      JsopBuilder jsopBuilder3 = jsopBuilder1.newline();
      JsopBuilder jsopBuilder4 = jsopBuilder3.endArray();
      JsopBuilder jsopBuilder5 = jsopBuilder0.encodedValue("number");
      JsopBuilder jsopBuilder6 = jsopBuilder4.tag('/');
      JsopBuilder jsopBuilder7 = jsopBuilder0.newline();
      jsopBuilder6.object();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder8 = jsopBuilder4.append(jsopStream0);
      JsopBuilder jsopBuilder9 = jsopBuilder8.value("\b");
      JsopBuilder.prettyPrint("Ci5Qd{p/n^");
      JsopBuilder jsopBuilder10 = jsopBuilder3.newline();
      JsopBuilder.encode("");
      jsopBuilder10.length();
      jsopBuilder7.endObject();
      jsopBuilder4.resetWriter();
      JsopBuilder jsopBuilder11 = jsopBuilder7.endObject();
      JsopBuilder jsopBuilder12 = jsopBuilder5.value((-1771L));
      jsopBuilder12.endArray();
      jsopBuilder0.key("\"]\"");
      JsopBuilder jsopBuilder13 = jsopBuilder11.newline();
      jsopBuilder1.newline();
      jsopBuilder13.endArray();
      jsopBuilder8.newline();
      jsopBuilder9.setLineLength((-577));
      assertEquals("},-1771],\"\\\"]\\\"\":\n\n]\n", jsopBuilder4.toString());
      assertEquals("},-1771],\"\\\"]\\\"\":\n\n]\n", jsopBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(1L);
      String string0 = null;
      // Undeclared exception!
      try { 
        jsopBuilder1.key((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  // @Test(timeout = 4000)
  // public void test029()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.endArray();
  //     String string0 = "!=^A<%DcJq'g!!e}jMZ";
  //     JsopBuilder jsopBuilder2 = jsopBuilder1.encodedValue("!=^A<%DcJq'g!!e}jMZ");
  //     JsopBuilder jsopBuilder3 = jsopBuilder2.endObject();
  //     JsopBuilder jsopBuilder4 = jsopBuilder3.object();
  //     JsopBuilder jsopBuilder5 = jsopBuilder4.newline();
  //     jsopBuilder5.array();
  //     StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "!=^A<%DcJq'g!!e}jMZ");
  //     JsopBuilder jsopBuilder6 = jsopBuilder2.value(false);
  //     jsopBuilder6.encodedValue("!=^A<%DcJq'g!!e}jMZ");
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.insert(125, (CharSequence) "!=^A<%DcJq'g!!e}jMZ", 0, 0);
  //       fail("Expecting exception: IndexOutOfBoundsException");
  //     
  //     } catch(IndexOutOfBoundsException e) {
  //        //
  //        // dstOffset 125
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endArray();
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      JsopBuilder jsopBuilder3 = jsopBuilder2.object();
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(true);
      JsopBuilder jsopBuilder5 = jsopBuilder4.append(jsopBuilder2);
      jsopBuilder5.setLineLength(12);
      assertSame(jsopBuilder5, jsopBuilder2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(true);
      JsopBuilder jsopBuilder2 = jsopBuilder0.append(jsopBuilder1);
      JsopBuilder.encode("");
      jsopBuilder0.newline();
      JsopBuilder jsopBuilder3 = jsopBuilder2.encodedValue("0");
      assertSame(jsopBuilder3, jsopBuilder2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsopBuilder.prettyPrint("null");
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endObject();
      JsopBuilder jsopBuilder2 = jsopBuilder1.value("t-)");
      JsopBuilder jsopBuilder3 = jsopBuilder2.array();
      jsopBuilder3.object();
      jsopBuilder2.setLineLength(55296);
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(true);
      jsopBuilder4.object();
      JsopBuilder jsopBuilder5 = jsopBuilder4.object();
      jsopBuilder5.resetWriter();
      jsopBuilder2.key("null");
      JsopBuilder jsopBuilder6 = jsopBuilder1.value(false);
      JsopBuilder jsopBuilder7 = jsopBuilder2.value((-1497L));
      jsopBuilder7.value(true);
      jsopBuilder2.value(false);
      JsopBuilder.encode("null");
      jsopBuilder0.endObject();
      jsopBuilder6.value(0L);
      jsopBuilder7.value(true);
      assertEquals("\"null\":false,-1497,true,false},0,true", jsopBuilder7.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(0L);
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      JsopBuilder jsopBuilder3 = jsopBuilder2.key("");
      jsopBuilder3.endObject();
      assertEquals("0,[\"\":}", jsopBuilder3.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value("{}");
      JsopBuilder jsopBuilder2 = jsopBuilder1.newline();
      JsopBuilder jsopBuilder3 = jsopBuilder2.value((-534L));
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(false);
      JsopBuilder jsopBuilder5 = jsopBuilder4.endArray();
      int int0 = jsopBuilder5.length();
      assertEquals("\"{}\"\n,-534,false]", jsopBuilder4.toString());
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.array();
      JsopBuilder jsopBuilder2 = jsopBuilder1.endArray();
      JsopBuilder jsopBuilder3 = jsopBuilder0.value(false);
      jsopBuilder3.resetWriter();
      JsopBuilder jsopBuilder4 = jsopBuilder0.encodedValue("#@N99f");
      JsopBuilder jsopBuilder5 = jsopBuilder4.endObject();
      JsopBuilder jsopBuilder6 = jsopBuilder2.tag('l');
      jsopBuilder6.object();
      jsopBuilder6.value(false);
      jsopBuilder6.resetWriter();
      JsopBuilder.encode("#@N99f");
      JsopBuilder jsopBuilder7 = jsopBuilder1.value(false);
      jsopBuilder7.toString();
      assertEquals("false", jsopBuilder1.toString());
      
      JsopBuilder.encode("false");
      jsopBuilder6.append(jsopBuilder5);
      String string0 = JsopBuilder.encode("1&DQ7E[eyMIsq");
      assertEquals("\"1&DQ7E[eyMIsq\"", string0);
  }

  // @Test(timeout = 4000)
  // public void test036()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.value(".YRK$>~-T");
  //     JsopBuilder jsopBuilder2 = jsopBuilder1.key(".YRK$>~-T");
  //     JsopBuilder jsopBuilder3 = jsopBuilder2.append(jsopBuilder0);
  //     jsopBuilder2.append(jsopBuilder3);
  //     JsopBuilder jsopBuilder4 = jsopBuilder3.value(false);
  //     JsopBuilder jsopBuilder5 = jsopBuilder4.endObject();
  //     jsopBuilder5.value("S]\u0007");
  //     jsopBuilder0.endArray();
  //     StringBuilder stringBuilder0 = new StringBuilder("S]\u0007");
  //     int int0 = (-42);
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.insert((-42), "");
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: -42
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  // @Test(timeout = 4000)
  // public void test037()  throws Throwable  {
  //     String string0 = "{\n";
  //     StringBuilder stringBuilder0 = new StringBuilder("{\n");
  //     int int0 = 0;
  //     int int1 = 2518;
  //     int int2 = 4024;
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.insert(2518, 4024);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: 2518
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream0);
      JsopBuilder jsopBuilder2 = jsopBuilder1.value("$Q:;@JDPi Ct})Dxs/");
      JsopBuilder jsopBuilder3 = jsopBuilder2.array();
      JsopBuilder jsopBuilder4 = jsopBuilder3.newline();
      JsopBuilder jsopBuilder5 = jsopBuilder4.encodedValue("");
      jsopStream0.resetWriter();
      jsopBuilder5.value((-3386L));
      jsopBuilder1.toString();
      JsopBuilder jsopBuilder6 = jsopBuilder1.array();
      JsopBuilder.prettyPrint("org.apache.jackrabbit.oak.commons.json.JsopStream@0000000002\"$Q:;@JDPi Ct})Dxs/\",[\n,-3386");
      JsopBuilder jsopBuilder7 = jsopBuilder5.value("org.apache.jackrabbit.oak.commons.json.JsopStream@0000000002\"$Q:;@JDPi Ct})Dxs/\",[\n,-3386");
      jsopBuilder5.tag('`');
      jsopBuilder4.key("[");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, "\\");
      stringBuilder1.insert(0, "$Q:;@JDPi Ct})Dxs/");
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("", 93);
      JsopBuilder.prettyPrint(stringBuilder1, jsopTokenizer0, "org.apache.jackrabbit.oak.commons.json.JsopStream@0000000002\"$Q:;@JDPi Ct})Dxs/\",[\n,-3386");
      JsopBuilder jsopBuilder8 = jsopBuilder0.newline();
      jsopBuilder2.tag('`');
      jsopBuilder3.key("org.apache.jackrabbit.oak.commons.json.JsopStream@0000000002\"$Q:;@JDPi Ct})Dxs/\",[\n,-3386");
      jsopBuilder6.endObject();
      jsopBuilder8.encodedValue("$Q:;@JDPi Ct})Dxs/");
      JsopBuilder jsopBuilder9 = jsopBuilder4.value(true);
      assertSame(jsopBuilder9, jsopBuilder7);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endArray();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder2 = jsopBuilder0.append(jsopStream0);
      JsopBuilder jsopBuilder3 = jsopBuilder2.newline();
      jsopBuilder2.object();
      JsopBuilder jsopBuilder4 = jsopBuilder3.key("\\");
      JsopBuilder jsopBuilder5 = jsopBuilder4.value(false);
      jsopBuilder2.length();
      jsopStream0.read();
      JsopBuilder jsopBuilder6 = jsopBuilder5.tag('U');
      jsopBuilder6.key("");
      jsopBuilder6.endObject();
      jsopBuilder6.resetWriter();
      jsopBuilder6.value(":$jMvJB(z 0$akqY");
      JsopBuilder.prettyPrint("");
      JsopBuilder jsopBuilder7 = jsopBuilder1.object();
      int int0 = jsopBuilder7.length();
      assertEquals("\":$jMvJB(z 0$akqY\",{", jsopBuilder1.toString());
      assertEquals(20, int0);
  }

  // @Test(timeout = 4000)
  // public void test040()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.encodedValue("0)6");
  //     jsopBuilder1.length();
  //     JsopBuilder jsopBuilder2 = jsopBuilder1.endArray();
  //     JsopBuilder jsopBuilder3 = jsopBuilder2.array();
  //     JsopBuilder jsopBuilder4 = jsopBuilder3.endObject();
  //     jsopBuilder2.value(false);
  //     jsopBuilder4.resetWriter();
  //     JsopBuilder jsopBuilder5 = jsopBuilder4.append(jsopBuilder0);
  //     JsopBuilder jsopBuilder6 = jsopBuilder5.tag('-');
  //     boolean boolean0 = false;
  //     jsopBuilder6.value(false);
  //     JsopBuilder jsopBuilder7 = jsopBuilder2.value("");
  //     jsopBuilder7.array();
  //     jsopBuilder5.append(jsopBuilder3);
  //     jsopBuilder4.value(0L);
  //     jsopBuilder3.toString();
  //     jsopBuilder3.key("");
  //     StringBuilder stringBuilder0 = new StringBuilder("org.apache.jackrabbit.oak.commons.json.JsopBuilder@0000000001-false,\"\",[org.apache.jackrabbit.oak.commons.json.JsopBuilder@00000000010");
  //     char[] charArray0 = new char[3];
  //     charArray0[0] = '-';
  //     charArray0[1] = '-';
  //     charArray0[2] = '-';
  //     StringBuilder stringBuilder1 = stringBuilder0.insert(0, charArray0);
  //     StringBuilder stringBuilder2 = stringBuilder1.append("");
  //     StringBuilder stringBuilder3 = stringBuilder2.append((float) 3);
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder3.insert(55296, '-');
  //       fail("Expecting exception: ArrayIndexOutOfBoundsException");
  //     
  //     } catch(ArrayIndexOutOfBoundsException e) {
  //        //
  //        // no message in exception (getMessage() returned null)
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value("5t=t]p88B!Yc");
      JsopBuilder jsopBuilder2 = jsopBuilder1.append(jsopBuilder0);
      JsopBuilder jsopBuilder3 = jsopBuilder2.value(0L);
      JsopBuilder jsopBuilder4 = jsopBuilder3.object();
      JsopBuilder.encode("5t=t]p88B!Yc");
      jsopBuilder4.setLineLength(34);
      jsopBuilder1.endObject();
      jsopBuilder0.tag('2');
      JsopBuilder jsopBuilder5 = jsopBuilder2.tag('I');
      JsopBuilder jsopBuilder6 = jsopBuilder5.key("5t=t]p88B!Yc");
      jsopBuilder6.newline();
      jsopBuilder5.object();
      JsopBuilder jsopBuilder7 = jsopBuilder1.value(0L);
      jsopBuilder7.append(jsopBuilder2);
      jsopBuilder1.value(0L);
      jsopBuilder1.newline();
      JsopBuilder jsopBuilder8 = jsopBuilder6.endObject();
      assertSame(jsopBuilder8, jsopBuilder0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopStream jsopStream1 = jsopStream0.value(0L);
      JsopStream jsopStream2 = jsopStream1.value(false);
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream2);
      JsopBuilder jsopBuilder2 = jsopBuilder0.key("");
      jsopBuilder2.tag(':');
      jsopBuilder2.resetWriter();
      jsopBuilder2.resetWriter();
      jsopBuilder2.tag('d');
      jsopBuilder1.tag('+');
      jsopBuilder1.value((-776L));
      JsopBuilder.prettyPrint("{}");
      StringBuilder stringBuilder0 = null;
      String string0 = "";
      JsopTokenizer jsopTokenizer0 = null;
      try {
        jsopTokenizer0 = new JsopTokenizer("", (-3995));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.object();
      JsopBuilder jsopBuilder2 = jsopBuilder1.endObject();
      JsopBuilder jsopBuilder3 = jsopBuilder2.encodedValue("AL#UFJ5s");
      JsopBuilder jsopBuilder4 = jsopBuilder3.value((-1L));
      JsopBuilder jsopBuilder5 = jsopBuilder4.value(false);
      int int0 = jsopBuilder5.length();
      assertEquals("{},AL#UFJ5s,-1,false", jsopBuilder4.toString());
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endArray();
      JsopBuilder jsopBuilder2 = jsopBuilder1.key(">3>z|=h");
      JsopBuilder jsopBuilder3 = jsopBuilder2.value(false);
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(377L);
      JsopBuilder jsopBuilder5 = jsopBuilder4.value(">3>z|=h");
      int int0 = jsopBuilder5.length();
      assertEquals("],\">3>z|=h\":false,377,\">3>z|=h\"", jsopBuilder4.toString());
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("~&ke{JrIK");
      JsopBuilder jsopBuilder2 = jsopBuilder1.endObject();
      JsopBuilder jsopBuilder3 = jsopBuilder2.tag('b');
      JsopBuilder jsopBuilder4 = jsopBuilder3.newline();
      JsopBuilder.encode("+)d>(CYkHnkurQ_wy");
      JsopBuilder jsopBuilder5 = jsopBuilder4.array();
      jsopBuilder5.value((-1759L));
      jsopBuilder5.endArray();
      jsopBuilder0.value("~&ke{JrIK");
      JsopStream jsopStream0 = new JsopStream();
      JsopStream jsopStream1 = jsopStream0.encodedValue("");
      JsopBuilder jsopBuilder6 = jsopBuilder1.append(jsopStream1);
      jsopBuilder4.length();
      JsopBuilder jsopBuilder7 = jsopBuilder6.endArray();
      assertSame(jsopBuilder7, jsopBuilder1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.tag('g');
      JsopBuilder jsopBuilder2 = jsopBuilder1.endArray();
      JsopBuilder jsopBuilder3 = jsopBuilder2.object();
      JsopBuilder jsopBuilder4 = jsopBuilder3.array();
      JsopBuilder jsopBuilder5 = jsopBuilder4.newline();
      JsopBuilder jsopBuilder6 = jsopBuilder5.array();
      String string0 = "[*]";
      JsopBuilder.encode("[*]");
      jsopBuilder6.newline();
      jsopBuilder5.value(";Z$I)A-`kV/}Z");
      jsopBuilder2.tag('>');
      String string1 = " expected: ";
      String string2 = "\\r";
      int int0 = (-3100);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-3100));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream0);
      JsopBuilder jsopBuilder2 = jsopBuilder1.key("<_,W8c5nA&");
      JsopBuilder jsopBuilder3 = jsopBuilder2.tag('T');
      JsopBuilder jsopBuilder4 = jsopBuilder3.endArray();
      JsopBuilder jsopBuilder5 = jsopBuilder4.endObject();
      JsopBuilder jsopBuilder6 = jsopBuilder5.append(jsopBuilder1);
      assertSame(jsopBuilder6, jsopBuilder0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.tag('#');
      JsopBuilder jsopBuilder2 = jsopBuilder1.value(false);
      JsopBuilder jsopBuilder3 = jsopBuilder2.object();
      JsopBuilder jsopBuilder4 = jsopBuilder3.endObject();
      JsopBuilder jsopBuilder5 = jsopBuilder4.newline();
      jsopBuilder5.tag('x');
      assertEquals("#false,{}\nx", jsopBuilder5.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 0;
      char char0 = 'Z';
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 'Z');
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (float) 0);
      stringBuilder1.insert(0, (CharSequence) stringBuilder2);
      stringBuilder2.reverse();
      StringBuilder stringBuilder3 = stringBuilder2.appendCodePoint(0);
      StringBuilder stringBuilder4 = stringBuilder3.append(0);
      stringBuilder4.append((CharSequence) stringBuilder2, 0, 0);
      String string0 = "\\u%04x";
      stringBuilder4.append(string0);
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer(string0);
      // Undeclared exception!
      try { 
        stringBuilder3.insert(0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopStream jsopStream1 = jsopStream0.value("KI;");
      JsopStream jsopStream2 = jsopStream1.value(false);
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream2);
      JsopBuilder jsopBuilder2 = jsopBuilder1.encodedValue("KI;");
      JsopBuilder jsopBuilder3 = jsopBuilder2.endArray();
      assertSame(jsopBuilder2, jsopBuilder3);
  }

  // @Test(timeout = 4000)
  // public void test051()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     jsopBuilder0.endArray();
  //     String string0 = "  ";
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.value("  ");
  //     jsopBuilder1.value(false);
  //     jsopBuilder1.value(true);
  //     jsopBuilder1.value(true);
  //     jsopBuilder1.length();
  //     jsopBuilder0.length();
  //     String string1 = null;
  //     String string2 = "";
  //     StringBuilder stringBuilder0 = new StringBuilder(0);
  //     StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "", 0, 0);
  //     char[] charArray0 = new char[3];
  //     charArray0[0] = 'B';
  //     charArray0[1] = 'P';
  //     charArray0[2] = 'p';
  //     StringBuilder stringBuilder2 = stringBuilder1.insert(0, charArray0);
  //     StringBuilder stringBuilder3 = stringBuilder2.append('B');
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder3.insert(125, 'p');
  //       fail("Expecting exception: ArrayIndexOutOfBoundsException");
  //     
  //     } catch(ArrayIndexOutOfBoundsException e) {
  //        //
  //        // no message in exception (getMessage() returned null)
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  // @Test(timeout = 4000)
  // public void test052()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.tag('O');
  //     JsopBuilder jsopBuilder2 = jsopBuilder1.array();
  //     long long0 = (-2745L);
  //     JsopBuilder jsopBuilder3 = jsopBuilder2.value((-2745L));
  //     jsopBuilder3.setLineLength((-1274));
  //     jsopBuilder3.array();
  //     String string0 = "<19!7S vqh^_A_l3K";
  //     JsopBuilder.encode("<19!7S vqh^_A_l3K");
  //     StringBuilder stringBuilder0 = new StringBuilder();
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.insert((-1274), (-1274));
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: -1274
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.encodedValue("lP,n>-d");
      JsopBuilder jsopBuilder2 = jsopBuilder1.object();
      JsopBuilder jsopBuilder3 = jsopBuilder2.key("lP,n>-d");
      JsopBuilder jsopBuilder4 = jsopBuilder3.endArray();
      jsopBuilder4.endArray();
      JsopBuilder jsopBuilder5 = jsopBuilder4.tag('}');
      JsopBuilder jsopBuilder6 = jsopBuilder5.endObject();
      JsopBuilder jsopBuilder7 = jsopBuilder3.encodedValue("NN");
      jsopBuilder0.key("");
      jsopBuilder7.endObject();
      jsopBuilder7.array();
      jsopBuilder6.resetWriter();
      jsopBuilder6.object();
      jsopBuilder5.array();
      StringBuilder stringBuilder0 = new StringBuilder("");
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      charArray0[6] = '}';
      charArray0[7] = '}';
      charArray0[8] = 'U';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("NN", 2141);
      String string0 = JsopBuilder.prettyPrint(stringBuilder1, jsopTokenizer0, "");
      assertEquals("}}}}}}}}U", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream0);
      JsopBuilder jsopBuilder2 = jsopBuilder1.value(false);
      JsopBuilder jsopBuilder3 = jsopBuilder2.encodedValue("");
      JsopBuilder jsopBuilder4 = jsopBuilder3.key("b|fu");
      JsopBuilder jsopBuilder5 = jsopBuilder4.value("");
      jsopBuilder5.toString();
      JsopBuilder.prettyPrint("org.apache.jackrabbit.oak.commons.json.JsopStream@0000000002false,,\"b|fu\":\"\"");
      JsopBuilder jsopBuilder6 = jsopBuilder4.value("<B$ %M(v?vL*48)jM8o");
      jsopBuilder6.endObject();
      String string0 = JsopBuilder.encode("@iLsMx/Hx");
      assertEquals("\"@iLsMx/Hx\"", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value((-1990L));
      JsopBuilder jsopBuilder2 = jsopBuilder1.append(jsopBuilder0);
      JsopBuilder jsopBuilder3 = jsopBuilder2.value((-1990L));
      JsopBuilder jsopBuilder4 = jsopBuilder2.endObject();
      JsopBuilder jsopBuilder5 = jsopBuilder4.encodedValue("{}");
      JsopBuilder jsopBuilder6 = jsopBuilder5.endArray();
      JsopBuilder jsopBuilder7 = jsopBuilder6.newline();
      StringBuilder stringBuilder0 = new StringBuilder(93);
      StringBuilder stringBuilder1 = stringBuilder0.append(1L);
      stringBuilder1.delete(0, 0);
      JsopBuilder.escape("{}", stringBuilder1);
      jsopBuilder1.value((long) 93);
      JsopBuilder jsopBuilder8 = jsopBuilder6.endObject();
      JsopBuilder jsopBuilder9 = jsopBuilder8.value(false);
      jsopBuilder3.append(jsopBuilder0);
      jsopBuilder7.value(0L);
      JsopBuilder jsopBuilder10 = jsopBuilder1.append(jsopBuilder3);
      assertSame(jsopBuilder10, jsopBuilder9);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value("");
      jsopBuilder1.setLineLength(0);
      jsopBuilder0.setLineLength(513);
      JsopBuilder jsopBuilder2 = jsopBuilder1.endObject();
      JsopBuilder jsopBuilder3 = jsopBuilder0.endArray();
      jsopBuilder3.length();
      JsopBuilder jsopBuilder4 = jsopBuilder0.key("q,yl,WaQ");
      jsopBuilder4.toString();
      jsopBuilder1.endObject();
      JsopBuilder.encode("\"\"}],\"q,yl,WaQ\":");
      jsopBuilder4.tag('z');
      jsopBuilder3.value(true);
      jsopBuilder2.array();
      jsopBuilder0.value((String) null);
      assertEquals("\"\"}],\"q,yl,WaQ\":}ztrue,[null", jsopBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.tag('n');
      JsopBuilder jsopBuilder2 = jsopBuilder1.append(jsopBuilder0);
      JsopBuilder jsopBuilder3 = jsopBuilder2.value(549L);
      JsopBuilder jsopBuilder4 = jsopBuilder3.object();
      JsopBuilder jsopBuilder5 = jsopBuilder4.endArray();
      jsopBuilder5.resetWriter();
      assertEquals("", jsopBuilder1.toString());
      assertEquals("", jsopBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endObject();
      String string0 = "";
      JsopBuilder jsopBuilder2 = jsopBuilder1.key("");
      jsopBuilder2.endArray();
      JsopStream jsopStream0 = new JsopStream();
      // Undeclared exception!
      try { 
        jsopStream0.append(jsopBuilder0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.jackrabbit.oak.commons.json.JsopBuilder cannot be cast to org.apache.jackrabbit.oak.commons.json.JsopStream
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsopBuilder.encode("yx!PA)',[`A");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      Object object0 = new Object();
      stringBuilder0.append(object0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (CharSequence) null);
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, 5788L);
      StringBuilder stringBuilder4 = stringBuilder3.append((double) 5788L);
      // Undeclared exception!
      try { 
        JsopBuilder.escape((String) null, stringBuilder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopBuilder", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test060()  throws Throwable  {
  //     StringBuilder stringBuilder0 = new StringBuilder(712);
  //     int int0 = 2284;
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.deleteCharAt(2284);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: 2284
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endObject();
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      JsopBuilder jsopBuilder3 = jsopBuilder2.object();
      JsopBuilder jsopBuilder4 = jsopBuilder2.newline();
      JsopBuilder jsopBuilder5 = jsopBuilder4.value("9`< Z )L4");
      JsopBuilder jsopBuilder6 = jsopBuilder5.value(72L);
      jsopBuilder2.value(0L);
      jsopBuilder6.setLineLength(0);
      jsopBuilder6.setLineLength(5);
      jsopBuilder6.array();
      jsopBuilder3.value(72L);
      assertEquals("},[{\n\"9`< Z )L4\",72,0,\n[72", jsopBuilder3.toString());
  }

  // @Test(timeout = 4000)
  // public void test062()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.value((-1L));
  //     JsopBuilder jsopBuilder2 = jsopBuilder1.value(true);
  //     jsopBuilder2.value(true);
  //     JsopBuilder jsopBuilder3 = jsopBuilder2.newline();
  //     String string0 = "B";
  //     jsopBuilder3.encodedValue("B");
  //     StringBuilder stringBuilder0 = new StringBuilder();
  //     int int0 = 358;
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.insert(358, (Object) jsopBuilder3);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: 358
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.encodedValue("Qdw!0l");
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      JsopBuilder jsopBuilder3 = jsopBuilder2.endObject();
      JsopBuilder jsopBuilder4 = jsopBuilder3.endObject();
      jsopBuilder3.length();
      jsopBuilder1.resetWriter();
      JsopBuilder jsopBuilder5 = jsopBuilder3.newline();
      jsopBuilder1.resetWriter();
      JsopBuilder jsopBuilder6 = jsopBuilder5.append(jsopBuilder0);
      jsopBuilder2.length();
      JsopBuilder jsopBuilder7 = jsopBuilder5.object();
      jsopBuilder7.append(jsopBuilder6);
      JsopBuilder jsopBuilder8 = jsopBuilder5.value(true);
      jsopBuilder8.endObject();
      jsopBuilder2.endArray();
      jsopBuilder6.key("null");
      jsopBuilder6.encodedValue("[#Z\"JD7z~?FRO");
      jsopBuilder6.setLineLength(10);
      JsopBuilder jsopBuilder9 = jsopBuilder1.value((long) 61);
      assertSame(jsopBuilder9, jsopBuilder4);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = null;
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.key(" {[quc");
      jsopBuilder0.resetWriter();
      JsopBuilder jsopBuilder2 = jsopBuilder1.encodedValue(" {[quc");
      JsopBuilder jsopBuilder3 = jsopBuilder2.endArray();
      JsopBuilder jsopBuilder4 = jsopBuilder3.append(jsopBuilder2);
      JsopBuilder jsopBuilder5 = jsopBuilder4.tag('4');
      jsopBuilder5.length();
      jsopBuilder4.toString();
      jsopBuilder3.append(jsopBuilder0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-205));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.newline();
      String string0 = "4Y@QHrya}jt#pw";
      jsopBuilder1.key("4Y@QHrya}jt#pw");
      long long0 = (-3825L);
      StringBuilder stringBuilder0 = new StringBuilder();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("4Y@QHrya}jt#pw");
      jsopBuilder1.length();
      // Undeclared exception!
      try { 
        JsopBuilder.prettyPrint(stringBuilder0, jsopTokenizer0, " expected: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.newline();
      jsopBuilder1.length();
      jsopBuilder0.length();
      JsopBuilder jsopBuilder2 = jsopBuilder0.endArray();
      JsopBuilder jsopBuilder3 = jsopBuilder2.array();
      JsopBuilder jsopBuilder4 = jsopBuilder3.object();
      jsopBuilder2.tag('t');
      jsopBuilder1.append(jsopBuilder1);
      String string0 = jsopBuilder4.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(false);
      JsopBuilder jsopBuilder2 = jsopBuilder1.encodedValue("");
      jsopBuilder0.setLineLength(0);
      JsopBuilder jsopBuilder3 = jsopBuilder2.value(671L);
      JsopBuilder jsopBuilder4 = jsopBuilder3.key("");
      JsopBuilder jsopBuilder5 = jsopBuilder4.endArray();
      jsopBuilder0.value("Fm");
      jsopBuilder5.endArray();
      jsopBuilder5.value(false);
      jsopBuilder3.value(false);
      jsopBuilder2.endObject();
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("");
      // Undeclared exception!
      try { 
        JsopBuilder.prettyPrint((StringBuilder) null, jsopTokenizer0, "aAW3>b*|m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.newline();
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        JsopBuilder.escape("ooP< =$3Y=*&Hh}", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.length();
      jsopBuilder0.endArray();
      jsopBuilder0.newline();
      assertEquals("]\n", jsopBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.setLineLength((-641));
      JsopBuilder jsopBuilder1 = jsopBuilder0.array();
      JsopBuilder jsopBuilder2 = jsopBuilder1.tag('h');
      JsopBuilder jsopBuilder3 = jsopBuilder2.object();
      jsopBuilder2.encodedValue("0-&6*2o<");
      JsopBuilder jsopBuilder4 = jsopBuilder3.object();
      jsopBuilder3.length();
      JsopBuilder jsopBuilder5 = jsopBuilder3.tag('/');
      JsopBuilder jsopBuilder6 = jsopBuilder5.value("0-&6*2o<");
      jsopBuilder6.value("0-&6*2o<");
      // Undeclared exception!
      try { 
        jsopBuilder4.key((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  // @Test(timeout = 4000)
  // public void test072()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.endObject();
  //     JsopBuilder jsopBuilder2 = jsopBuilder1.value((-612L));
  //     String string0 = "M";
  //     jsopBuilder2.encodedValue("M");
  //     String string1 = ">;3C*xw\"qe0";
  //     jsopBuilder2.encodedValue(">;3C*xw\"qe0");
  //     String string2 = null;
  //     StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ">;3C*xw\"qe0");
  //     int int0 = (-677);
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.insert((-677), 2327L);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: -677
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endObject();
      JsopBuilder jsopBuilder2 = jsopBuilder1.endArray();
      JsopBuilder jsopBuilder3 = jsopBuilder2.array();
      jsopBuilder3.object();
      jsopBuilder1.resetWriter();
      JsopBuilder jsopBuilder4 = jsopBuilder3.encodedValue("G7bdbfU61b9&X");
      jsopBuilder4.endObject();
      jsopBuilder3.value(true);
      JsopBuilder jsopBuilder5 = jsopBuilder4.append(jsopBuilder1);
      jsopBuilder5.endObject();
      jsopBuilder2.length();
      jsopBuilder1.encodedValue("G7bdbfU61b9&X");
      JsopBuilder jsopBuilder6 = jsopBuilder2.endArray();
      jsopBuilder4.setLineLength(81);
      JsopBuilder jsopBuilder7 = jsopBuilder5.append(jsopBuilder6);
      assertSame(jsopBuilder1, jsopBuilder7);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endObject();
      JsopBuilder jsopBuilder2 = jsopBuilder1.tag('x');
      JsopBuilder jsopBuilder3 = jsopBuilder2.encodedValue("dZ@M");
      JsopBuilder.prettyPrint("\f");
      JsopBuilder jsopBuilder4 = jsopBuilder3.value((-2526L));
      JsopBuilder jsopBuilder5 = jsopBuilder4.key("dZ@M");
      JsopBuilder jsopBuilder6 = jsopBuilder5.array();
      jsopBuilder6.append(jsopBuilder2);
      jsopBuilder6.key("[*]ff");
      jsopBuilder6.append(jsopBuilder4);
      StringBuilder stringBuilder0 = new StringBuilder(514);
      StringBuilder stringBuilder1 = stringBuilder0.append('<');
      // Undeclared exception!
      try { 
        stringBuilder1.delete((-540), 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -540
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream0);
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      int int0 = 0;
      jsopBuilder0.setLineLength(0);
      String string0 = "{s4.)";
      JsopBuilder jsopBuilder3 = jsopBuilder2.encodedValue("{s4.)");
      JsopBuilder jsopBuilder4 = jsopBuilder3.key("{s4.)");
      JsopBuilder jsopBuilder5 = jsopBuilder4.endObject();
      jsopBuilder5.key("{s4.)");
      jsopBuilder3.tag('C');
      jsopBuilder4.newline();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.append((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsopBuilder.encode("");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(44);
      stringBuilder0.append(true);
      StringBuilder stringBuilder2 = stringBuilder1.append((float) 44);
      stringBuilder2.append((CharSequence) "");
      JsopBuilder.escape("", stringBuilder2);
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endObject();
      JsopBuilder jsopBuilder2 = jsopBuilder1.value((long) 44);
      JsopBuilder.prettyPrint("\"\"");
      jsopBuilder2.setLineLength(44);
      JsopBuilder jsopBuilder3 = jsopBuilder2.newline();
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(true);
      JsopBuilder jsopBuilder5 = jsopBuilder4.encodedValue("");
      jsopBuilder5.tag('5');
      assertEquals("},44\n,true,5", jsopBuilder5.toString());
      
      JsopBuilder.prettyPrint("xAh9");
      JsopBuilder.prettyPrint("");
      String string0 = JsopBuilder.encode((String) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      String string0 = "\\n";
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("\n");
      jsopBuilder1.endObject();
      JsopBuilder jsopBuilder2 = jsopBuilder1.object();
      jsopBuilder0.resetWriter();
      JsopBuilder jsopBuilder3 = jsopBuilder2.array();
      JsopBuilder jsopBuilder4 = jsopBuilder3.append(jsopBuilder2);
      JsopBuilder jsopBuilder5 = jsopBuilder4.newline();
      JsopBuilder jsopBuilder6 = jsopBuilder5.value(true);
      jsopBuilder0.value("\n");
      jsopBuilder5.length();
      jsopBuilder5.key("cuai$2}8e~Uh");
      JsopBuilder jsopBuilder7 = jsopBuilder6.endObject();
      jsopBuilder4.setLineLength(0);
      jsopBuilder4.object();
      JsopBuilder.prettyPrint("\n");
      jsopBuilder6.resetWriter();
      char char0 = 'w';
      jsopBuilder7.tag('w');
      jsopBuilder5.array();
      String string1 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.replace(73, 0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        JsopBuilder.prettyPrint((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value((-669L));
      JsopBuilder jsopBuilder2 = jsopBuilder1.newline();
      JsopBuilder jsopBuilder3 = jsopBuilder2.append(jsopBuilder0);
      JsopBuilder jsopBuilder4 = jsopBuilder3.endObject();
      jsopBuilder3.object();
      JsopBuilder jsopBuilder5 = jsopBuilder4.object();
      JsopBuilder jsopBuilder6 = jsopBuilder5.newline();
      jsopBuilder2.setLineLength(6);
      assertSame(jsopBuilder2, jsopBuilder6);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      char char0 = 'e';
      JsopBuilder jsopBuilder1 = jsopBuilder0.tag('e');
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      JsopBuilder jsopBuilder3 = jsopBuilder2.endObject();
      jsopBuilder3.append(jsopBuilder0);
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("", 116);
      JsopTokenizer.decode("");
      // Undeclared exception!
      try { 
        JsopBuilder.prettyPrint((StringBuilder) null, jsopTokenizer0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(false);
      JsopBuilder jsopBuilder2 = jsopBuilder1.array();
      JsopBuilder jsopBuilder3 = jsopBuilder2.value((-1L));
      JsopBuilder jsopBuilder4 = jsopBuilder3.tag('{');
      JsopBuilder jsopBuilder5 = jsopBuilder4.append(jsopBuilder1);
      jsopBuilder5.endArray();
      JsopBuilder jsopBuilder6 = jsopBuilder4.append(jsopBuilder2);
      String string0 = jsopBuilder6.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value("I7Xih0");
      JsopBuilder jsopBuilder2 = jsopBuilder1.endObject();
      JsopBuilder jsopBuilder3 = jsopBuilder2.endArray();
      JsopBuilder jsopBuilder4 = jsopBuilder3.object();
      JsopBuilder jsopBuilder5 = jsopBuilder4.encodedValue("I7Xih0");
      jsopBuilder5.value(820L);
      assertEquals("\"I7Xih0\"}],{I7Xih0,820", jsopBuilder5.toString());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(3290L);
      JsopBuilder jsopBuilder2 = jsopBuilder1.endObject();
      JsopBuilder jsopBuilder3 = jsopBuilder2.newline();
      JsopBuilder jsopBuilder4 = jsopBuilder3.encodedValue("");
      JsopBuilder jsopBuilder5 = jsopBuilder4.tag('+');
      jsopBuilder5.object();
      assertEquals("3290}\n,+{", jsopBuilder5.toString());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " y74J8y=6");
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(0);
      StringBuilder stringBuilder2 = stringBuilder1.append("@ih`ru");
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, '%');
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, (-1.0));
      JsopBuilder.escape(" y74J8y=6", stringBuilder4);
      JsopBuilder.escape("@ih`ru", stringBuilder0);
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value("@ih`ru");
      JsopBuilder jsopBuilder2 = jsopBuilder1.object();
      jsopBuilder1.resetWriter();
      jsopBuilder1.value((-2572L));
      JsopBuilder jsopBuilder3 = jsopBuilder2.encodedValue((String) null);
      JsopBuilder jsopBuilder4 = jsopBuilder3.array();
      jsopBuilder4.setLineLength(0);
      JsopBuilder jsopBuilder5 = jsopBuilder4.endObject();
      jsopBuilder5.value((long) 0);
      String string0 = null;
      StringBuilder stringBuilder5 = null;
      try {
        stringBuilder5 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  // @Test(timeout = 4000)
  // public void test085()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.newline();
  //     jsopBuilder1.resetWriter();
  //     jsopBuilder0.array();
  //     JsopBuilder jsopBuilder2 = jsopBuilder0.append(jsopBuilder1);
  //     jsopBuilder2.array();
  //     JsopBuilder.prettyPrint("{}");
  //     jsopBuilder1.endArray();
  //     JsopBuilder jsopBuilder3 = jsopBuilder0.newline();
  //     int int0 = (-307);
  //     jsopBuilder1.setLineLength((-307));
  //     jsopBuilder3.endArray();
  //     jsopBuilder0.tag('F');
  //     String string0 = "fXG#4/-TC1*<Z DmI\\";
  //     StringBuilder stringBuilder0 = new StringBuilder();
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.deleteCharAt((-307));
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: -307
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("value");
      JsopBuilder jsopBuilder2 = jsopBuilder1.object();
      JsopBuilder jsopBuilder3 = jsopBuilder2.encodedValue("5%)FK4@M:");
      JsopBuilder jsopBuilder4 = jsopBuilder3.append(jsopBuilder0);
      jsopBuilder2.value("org.apache.jackrabbit.oak.commons.json.JsopTokenizer");
      JsopBuilder.encode("null");
      JsopBuilder jsopBuilder5 = jsopBuilder4.value((-1245L));
      jsopBuilder5.object();
      JsopBuilder.encode("CP%bMN;Dj");
      jsopBuilder5.value(true);
      jsopBuilder5.key("P&^Y\"N<^");
      jsopBuilder4.toString();
      jsopBuilder4.toString();
      JsopBuilder.prettyPrint("null");
      JsopBuilder jsopBuilder6 = jsopBuilder2.newline();
      jsopBuilder6.value("");
      jsopBuilder1.setLineLength(0);
      assertSame(jsopBuilder1, jsopBuilder3);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("^bW*Xh");
      JsopBuilder jsopBuilder2 = jsopBuilder1.value("^bW*Xh");
      JsopBuilder jsopBuilder3 = jsopBuilder2.tag('J');
      JsopBuilder jsopBuilder4 = jsopBuilder3.encodedValue((String) null);
      jsopBuilder4.resetWriter();
      assertEquals("", jsopBuilder3.toString());
      assertEquals("", jsopBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsopBuilder.encode((String) null);
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopStream jsopStream1 = jsopStream0.value((String) null);
      JsopStream jsopStream2 = jsopStream1.newline();
      JsopStream jsopStream3 = jsopStream2.array();
      jsopStream0.matches((-2154));
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream3);
      JsopBuilder jsopBuilder2 = jsopBuilder1.append(jsopStream2);
      assertSame(jsopBuilder2, jsopBuilder0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsopBuilder.prettyPrint(",rk['EXIM$d{F;F");
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.array();
      // Undeclared exception!
      try { 
        jsopBuilder1.key((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  // @Test(timeout = 4000)
  // public void test090()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.newline();
  //     JsopBuilder jsopBuilder2 = jsopBuilder1.endObject();
  //     JsopBuilder jsopBuilder3 = jsopBuilder2.object();
  //     jsopBuilder3.newline();
  //     int int0 = 909;
  //     StringBuilder stringBuilder0 = new StringBuilder(909);
  //     StringBuilder stringBuilder1 = stringBuilder0.append("");
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder1.insert(909, false);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: 909
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  // @Test(timeout = 4000)
  // public void test091()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.object();
  //     String string0 = "3v0sjDYgfpOAF`sZ";
  //     JsopBuilder jsopBuilder2 = jsopBuilder1.key("3v0sjDYgfpOAF`sZ");
  //     JsopBuilder jsopBuilder3 = jsopBuilder2.tag('}');
  //     JsopBuilder jsopBuilder4 = jsopBuilder3.value("3v0sjDYgfpOAF`sZ");
  //     jsopBuilder4.append(jsopBuilder3);
  //     StringBuilder stringBuilder0 = new StringBuilder("3v0sjDYgfpOAF`sZ");
  //     StringBuilder stringBuilder1 = stringBuilder0.append(true);
  //     int int0 = 2907;
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder1.insert(2907, true);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: 2907
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.setLineLength(0);
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("/G1L-to");
      JsopBuilder jsopBuilder2 = jsopBuilder1.value("/G1L-to");
      JsopBuilder.prettyPrint("/G1L-to");
      JsopBuilder jsopBuilder3 = jsopBuilder2.object();
      jsopBuilder1.setLineLength(0);
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(true);
      StringBuilder stringBuilder0 = new StringBuilder("/ /G[*]1L-to1/G1L[*]-to- to");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 'd');
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (float) 0);
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("4gTwu#", 0);
      JsopBuilder.prettyPrint(stringBuilder2, jsopTokenizer0, " expected: ");
      jsopBuilder0.encodedValue("?z1d");
      JsopBuilder jsopBuilder5 = jsopBuilder4.append(jsopBuilder3);
      jsopBuilder5.endObject();
      String string0 = JsopBuilder.prettyPrint("org.apache.jackrabbit.oak.commons.json.JsopTokenizer");
      assertEquals("orgorg.[*]apache.jackrabbit.oak.commons.json.JsopTokenizerapacheorg.apache.[*]jackrabbit.oak.commons.json.JsopTokenizerjackrabbitorg.apache.jackrabbit.[*]oak.commons.json.JsopTokenizeroakorg.apache.jackrabbit.oak.[*]commons.json.JsopTokenizercommonsorg.apache.jackrabbit.oak.commons.[*]json.JsopTokenizerjsonorg.apache.jackrabbit.oak.commons.json.[*]JsopTokenizerorg.apache.jackrabbit.oak.commons.json.J[*]sopTokenizersoporg.apache.jackrabbit.oak.commons.json.JsopT[*]okenizerokenizer", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsopBuilder.prettyPrint("");
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.tag('^');
      JsopBuilder jsopBuilder2 = jsopBuilder1.append(jsopBuilder0);
      JsopBuilder jsopBuilder3 = jsopBuilder2.endObject();
      jsopBuilder3.value("{\n");
      int int0 = (-1088);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1088));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value("n1");
      JsopBuilder jsopBuilder2 = jsopBuilder0.value(false);
      JsopBuilder jsopBuilder3 = jsopBuilder1.append(jsopBuilder2);
      jsopBuilder3.key("org.apache.jackrabbit.oak.commons.json.JsopTokenizer");
      jsopBuilder2.encodedValue("");
      JsopBuilder jsopBuilder4 = jsopBuilder0.value(true);
      JsopBuilder jsopBuilder5 = jsopBuilder3.value(true);
      jsopBuilder2.length();
      JsopBuilder jsopBuilder6 = jsopBuilder5.array();
      assertSame(jsopBuilder6, jsopBuilder4);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.object();
      JsopBuilder jsopBuilder2 = jsopBuilder1.endArray();
      JsopBuilder jsopBuilder3 = jsopBuilder2.key("");
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(0L);
      JsopBuilder jsopBuilder5 = jsopBuilder4.encodedValue("");
      StringBuilder stringBuilder0 = new StringBuilder("");
      JsopBuilder.escape("", stringBuilder0);
      jsopBuilder5.newline();
      assertEquals("{],\"\":0,\n", jsopBuilder5.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      String string0 = "";
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("");
      JsopBuilder jsopBuilder2 = jsopBuilder1.value(true);
      jsopBuilder1.array();
      JsopBuilder jsopBuilder3 = jsopBuilder2.newline();
      jsopBuilder3.array();
      long long0 = 0L;
      int int0 = (-554);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-554));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      jsopStream0.tag('S');
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream0);
      jsopBuilder1.length();
      String string0 = null;
      // Undeclared exception!
      try { 
        jsopBuilder1.key((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  // @Test(timeout = 4000)
  // public void test098()  throws Throwable  {
  //     JsopBuilder.prettyPrint("#*aV2S? H~l9l7h^Y");
  //     JsopBuilder.encode("#*aV2S? H~l9l7h^Y");
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.newline();
  //     JsopBuilder jsopBuilder2 = jsopBuilder1.tag('h');
  //     long long0 = 1388L;
  //     JsopBuilder jsopBuilder3 = jsopBuilder2.value(1388L);
  //     JsopBuilder jsopBuilder4 = jsopBuilder3.key("#*aV2S? H~l9l7h^Y");
  //     jsopBuilder4.encodedValue("");
  //     JsopBuilder jsopBuilder5 = jsopBuilder4.append(jsopBuilder1);
  //     jsopBuilder5.array();
  //     jsopBuilder3.endObject();
  //     jsopBuilder2.key("#*aV2S? H~l9l7h^Y");
  //     StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "#*aV2S? H~l9l7h^Y");
  //     int int0 = 41;
  //     char[] charArray0 = new char[4];
  //     charArray0[0] = 'h';
  //     charArray0[1] = 'h';
  //     charArray0[2] = 'h';
  //     charArray0[3] = 'h';
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.insert(41, charArray0, 41, 41);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: 41
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.resetWriter();
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("xN(#r;P~<~DjNFEw");
      jsopBuilder0.append(jsopBuilder1);
      JsopBuilder.encode("xN(#r;P~<~DjNFEw");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "\"xN(#r;P~<~DjNFEw\"");
      stringBuilder0.append('[');
      // Undeclared exception!
      try { 
        stringBuilder1.replace(2353, 4404, "\"xN(#r;P~<~DjNFEw\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("~fn%Wi.jtO#");
      JsopBuilder jsopBuilder2 = jsopBuilder1.value((String) null);
      JsopBuilder.prettyPrint("~fn%Wi.jtO#");
      JsopBuilder jsopBuilder3 = jsopBuilder2.value(true);
      JsopBuilder jsopBuilder4 = jsopBuilder3.append(jsopBuilder0);
      jsopBuilder4.setLineLength(4);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "~fn%Wi.jtO#");
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = '0';
      charArray0[2] = '{';
      charArray0[3] = 'j';
      charArray0[4] = '<';
      charArray0[5] = 'O';
      charArray0[6] = '0';
      StringBuilder stringBuilder1 = stringBuilder0.insert(4, charArray0);
      JsopBuilder.prettyPrint("");
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "", (-1680), 3473);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -1680, end 3473, s.length() 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "^${";
      StringBuilder stringBuilder0 = new StringBuilder(";(uM;C]1=-o+p");
      Object object0 = new Object();
      StringBuilder stringBuilder1 = stringBuilder0.append(object0);
      // Undeclared exception!
      try { 
        stringBuilder1.delete((-949), (-949));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -949
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.setLineLength((-490));
      JsopBuilder jsopBuilder1 = jsopBuilder0.value(0L);
      jsopBuilder1.value(false);
      JsopBuilder.encode("g*6i7oN&<jWe(U");
      jsopBuilder0.setLineLength(562);
      assertEquals("0,false", jsopBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.newline();
      JsopBuilder jsopBuilder2 = jsopBuilder1.append(jsopBuilder0);
      JsopBuilder jsopBuilder3 = jsopBuilder2.array();
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(0L);
      JsopBuilder jsopBuilder5 = jsopBuilder4.value("");
      JsopBuilder jsopBuilder6 = jsopBuilder5.value(false);
      jsopBuilder2.length();
      jsopBuilder6.endArray();
      jsopBuilder0.append(jsopBuilder5);
      JsopBuilder.encode("");
      jsopBuilder4.setLineLength(0);
      jsopBuilder4.key("^+L");
      jsopBuilder5.resetWriter();
      JsopBuilder.encode((String) null);
      JsopBuilder.prettyPrint("\"\"");
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream0);
      char char0 = 'm';
      JsopBuilder jsopBuilder2 = jsopBuilder1.tag('m');
      jsopBuilder2.endArray();
      // Undeclared exception!
      try { 
        jsopStream0.readString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected: 1 got: 0
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopStream", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test105()  throws Throwable  {
  //     JsopBuilder.prettyPrint("\b");
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.array();
  //     JsopBuilder jsopBuilder2 = jsopBuilder1.endObject();
  //     JsopBuilder jsopBuilder3 = jsopBuilder2.tag('g');
  //     JsopBuilder jsopBuilder4 = jsopBuilder3.object();
  //     String string0 = "c mT";
  //     JsopBuilder jsopBuilder5 = jsopBuilder4.value("c mT");
  //     JsopBuilder jsopBuilder6 = jsopBuilder5.value("\b");
  //     jsopBuilder6.object();
  //     JsopBuilder jsopBuilder7 = jsopBuilder5.tag('g');
  //     JsopBuilder jsopBuilder8 = jsopBuilder0.endObject();
  //     jsopBuilder8.key("}");
  //     jsopBuilder0.toString();
  //     jsopBuilder0.endObject();
  //     jsopBuilder5.value("[}g{\"c mT\",\"\\b\",{g},\"}\":");
  //     jsopBuilder1.value(true);
  //     jsopBuilder5.value(true);
  //     jsopBuilder1.setLineLength((-915));
  //     jsopBuilder5.endObject();
  //     jsopBuilder7.object();
  //     StringBuilder stringBuilder0 = new StringBuilder();
  //     StringBuilder stringBuilder1 = stringBuilder0.append((-1.0));
  //     int int0 = 93;
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder1.insert(93, (float) (-915));
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: 93
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  // @Test(timeout = 4000)
  // public void test106()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder.prettyPrint("");
  //     StringBuilder stringBuilder0 = new StringBuilder();
  //     StringBuilder stringBuilder1 = stringBuilder0.append("Y11Q;\"Be>$$E*U");
  //     char[] charArray0 = new char[3];
  //     charArray0[0] = '5';
  //     charArray0[1] = '5';
  //     charArray0[2] = '5';
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder1.insert(42, charArray0);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: 42
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.endArray();
      JsopBuilder jsopBuilder1 = jsopBuilder0.newline();
      JsopStream jsopStream0 = new JsopStream();
      jsopStream0.endObject();
      JsopStream jsopStream1 = jsopStream0.value(724L);
      JsopStream jsopStream2 = jsopStream1.value("c<q");
      JsopStream jsopStream3 = jsopStream2.object();
      JsopStream jsopStream4 = jsopStream3.array();
      jsopBuilder0.append(jsopStream4);
      JsopBuilder jsopBuilder2 = jsopBuilder1.value("{Xt)}");
      JsopBuilder jsopBuilder3 = jsopBuilder1.key("c<q");
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(0L);
      assertSame(jsopBuilder4, jsopBuilder2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value((String) null);
      JsopBuilder jsopBuilder2 = jsopBuilder1.value(0L);
      JsopBuilder jsopBuilder3 = jsopBuilder2.key("");
      jsopBuilder3.array();
      JsopBuilder jsopBuilder4 = jsopBuilder3.endObject();
      JsopBuilder jsopBuilder5 = jsopBuilder4.newline();
      JsopBuilder jsopBuilder6 = jsopBuilder5.endArray();
      JsopBuilder.encode("");
      JsopBuilder jsopBuilder7 = jsopBuilder5.value(701L);
      jsopBuilder7.length();
      JsopBuilder.encode((String) null);
      jsopBuilder3.toString();
      JsopBuilder jsopBuilder8 = jsopBuilder1.key("");
      jsopBuilder8.setLineLength(1248);
      jsopBuilder5.key("");
      StringBuilder stringBuilder0 = new StringBuilder("[");
      JsopBuilder.escape("null,0,\"\":[}\n],701", stringBuilder0);
      JsopBuilder jsopBuilder9 = jsopBuilder2.endObject();
      jsopBuilder9.value(true);
      jsopBuilder9.toString();
      JsopBuilder jsopBuilder10 = jsopBuilder0.value((long) 1248);
      jsopBuilder10.setLineLength(1248);
      jsopBuilder6.setLineLength(1248);
      JsopBuilder.encode((String) null);
      JsopBuilder jsopBuilder11 = jsopBuilder8.value("null");
      jsopBuilder11.value("\"\"");
      jsopBuilder5.object();
      assertEquals("null,0,\"\":[}\n],701,\"\":\"\":},true,1248,\"null\",\"\\\"\\\"\",{", jsopBuilder5.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.value((-1717L));
      JsopBuilder jsopBuilder2 = jsopBuilder1.tag(']');
      JsopBuilder jsopBuilder3 = jsopBuilder2.object();
      JsopBuilder.encode("8k2MeDw!N");
      JsopBuilder jsopBuilder4 = jsopBuilder3.endArray();
      jsopBuilder4.key("");
      JsopBuilder jsopBuilder5 = jsopBuilder0.value((-1717L));
      JsopBuilder jsopBuilder6 = jsopBuilder3.endArray();
      jsopBuilder6.length();
      jsopBuilder6.toString();
      jsopBuilder0.encodedValue("]");
      jsopBuilder3.setLineLength((-5152));
      jsopBuilder0.newline();
      JsopBuilder.prettyPrint("]");
      jsopBuilder2.append(jsopBuilder5);
      // Undeclared exception!
      try { 
        JsopBuilder.escape("wf1>67=~w}?CE4+D", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopBuilder", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test110()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.endArray();
  //     String string0 = "\\f";
  //     JsopBuilder jsopBuilder2 = jsopBuilder1.encodedValue("\f");
  //     JsopBuilder jsopBuilder3 = jsopBuilder2.object();
  //     JsopBuilder jsopBuilder4 = jsopBuilder1.value(1L);
  //     jsopBuilder4.endObject();
  //     JsopBuilder jsopBuilder5 = jsopBuilder3.tag('*');
  //     JsopBuilder jsopBuilder6 = jsopBuilder5.value(true);
  //     jsopBuilder6.array();
  //     StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\f");
  //     int int0 = 0;
  //     StringBuilder stringBuilder1 = stringBuilder0.insert(0, (Object) jsopBuilder0);
  //     StringBuilder stringBuilder2 = stringBuilder1.insert(0, 0.0F);
  //     stringBuilder2.append((CharSequence) stringBuilder1);
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder2.insert(91, (double) 0.0F);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: 91
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.encodedValue("f'jk8Ns1?Ge");
      JsopBuilder jsopBuilder2 = jsopBuilder1.endObject();
      jsopBuilder2.key("f'jk8Ns1?Ge");
      jsopBuilder1.append(jsopBuilder1);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("");
      stringBuilder0.append(stringBuffer0);
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("");
      assertEquals("", jsopTokenizer0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.object();
      JsopBuilder jsopBuilder2 = jsopBuilder1.endArray();
      JsopBuilder jsopBuilder3 = jsopBuilder2.value(1013L);
      // Undeclared exception!
      try { 
        jsopBuilder3.key((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.resetWriter();
      JsopBuilder jsopBuilder1 = jsopBuilder0.array();
      jsopBuilder1.array();
      JsopBuilder jsopBuilder2 = jsopBuilder1.value((-583L));
      String string0 = "rt";
      JsopBuilder jsopBuilder3 = jsopBuilder2.value("rt");
      jsopBuilder3.length();
      jsopBuilder3.newline();
      StringBuilder stringBuilder0 = new StringBuilder("rt");
      // Undeclared exception!
      try { 
        JsopBuilder.escape((String) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.object();
      JsopBuilder jsopBuilder2 = jsopBuilder1.append(jsopBuilder0);
      assertSame(jsopBuilder2, jsopBuilder1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.newline();
      JsopBuilder jsopBuilder2 = jsopBuilder1.value(833L);
      String string0 = "";
      JsopBuilder jsopBuilder3 = jsopBuilder2.encodedValue("");
      JsopBuilder jsopBuilder4 = jsopBuilder3.object();
      JsopBuilder jsopBuilder5 = jsopBuilder3.endArray();
      JsopBuilder jsopBuilder6 = jsopBuilder4.endArray();
      String string1 = "'";
      jsopBuilder2.encodedValue("'");
      jsopBuilder6.array();
      jsopBuilder1.value(833L);
      jsopBuilder3.array();
      jsopBuilder3.resetWriter();
      JsopBuilder jsopBuilder7 = jsopBuilder5.value(3241L);
      jsopBuilder7.array();
      jsopBuilder3.array();
      JsopBuilder jsopBuilder8 = jsopBuilder6.tag('Q');
      jsopBuilder8.tag('b');
      jsopBuilder0.tag('z');
      StringBuilder stringBuilder0 = new StringBuilder("");
      int int0 = 57;
      // Undeclared exception!
      try { 
        stringBuilder0.replace(57, 57, "5w8X\"\"h KF*o^B5");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      // Undeclared exception!
      try { 
        jsopBuilder0.key((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopWriter jsopWriter0 = null;
      // Undeclared exception!
      try { 
        jsopBuilder0.append((JsopWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test118()  throws Throwable  {
  //     JsopBuilder jsopBuilder0 = new JsopBuilder();
  //     JsopBuilder jsopBuilder1 = jsopBuilder0.value(0L);
  //     jsopBuilder1.value(0L);
  //     StringBuilder stringBuilder0 = new StringBuilder();
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.insert(1040, (char[]) null);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: 1040
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopStream jsopStream0 = new JsopStream();
      JsopBuilder jsopBuilder1 = jsopBuilder0.append(jsopStream0);
      JsopBuilder jsopBuilder2 = jsopBuilder1.object();
      JsopBuilder jsopBuilder3 = jsopBuilder2.value(3896L);
      JsopStream jsopStream1 = jsopStream0.endArray();
      JsopBuilder jsopBuilder4 = jsopBuilder1.append(jsopStream1);
      JsopBuilder jsopBuilder5 = jsopBuilder1.value(true);
      jsopBuilder5.value(true);
      JsopBuilder jsopBuilder6 = jsopBuilder3.value(true);
      jsopBuilder6.value(216L);
      JsopBuilder jsopBuilder7 = jsopBuilder4.value(true);
      jsopBuilder2.endObject();
      jsopBuilder0.object();
      String string0 = "";
      JsopBuilder jsopBuilder8 = jsopBuilder2.value("");
      jsopBuilder7.array();
      JsopBuilder jsopBuilder9 = jsopBuilder2.object();
      jsopBuilder8.endArray();
      JsopBuilder jsopBuilder10 = jsopBuilder8.endObject();
      jsopBuilder6.endObject();
      jsopBuilder10.setLineLength(0);
      jsopBuilder7.key("");
      jsopBuilder9.newline();
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-5155));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test120()  throws Throwable  {
  //     StringBuilder stringBuilder0 = new StringBuilder();
  //     // Undeclared exception!
  //     try { 
  //       stringBuilder0.insert(116, (double) 116);
  //       fail("Expecting exception: StringIndexOutOfBoundsException");
  //     
  //     } catch(StringIndexOutOfBoundsException e) {
  //        //
  //        // String index out of range: 116
  //        //
  //        verifyException("java.lang.AbstractStringBuilder", e);
  //     }
  // }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'a';
      charArray0[2] = 'K';
      stringBuilder0.insert(0, 97);
      charArray0[3] = '\\';
      charArray0[4] = 'P';
      charArray0[5] = ' ';
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, charArray0);
      stringBuilder1.append("|GqQO");
      String string0 = "{\n";
      JsopTokenizer jsopTokenizer0 = new JsopTokenizer("{\n");
      // Undeclared exception!
      try { 
        jsopTokenizer0.readRawValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {
         // [*] expected: string
         //
         verifyException("org.apache.jackrabbit.oak.commons.json.JsopTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.setLineLength((-2084));
      jsopBuilder0.endArray();
      jsopBuilder0.setLineLength(0);
      // Undeclared exception!
      try { 
        jsopBuilder0.key((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.key("Q2;o+");
      JsopBuilder jsopBuilder2 = jsopBuilder0.append(jsopBuilder1);
      JsopBuilder jsopBuilder3 = jsopBuilder2.endObject();
      jsopBuilder3.append(jsopBuilder2);
      int int0 = (-390);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-390));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.array();
      JsopBuilder jsopBuilder2 = jsopBuilder1.object();
      JsopBuilder jsopBuilder3 = jsopBuilder2.append(jsopBuilder0);
      JsopBuilder jsopBuilder4 = jsopBuilder3.key("OGgwQCK!'6wjK");
      JsopBuilder jsopBuilder5 = jsopBuilder4.encodedValue("OGgwQCK!'6wjK");
      jsopBuilder5.append(jsopBuilder2);
      JsopBuilder jsopBuilder6 = jsopBuilder2.endObject();
      String string0 = jsopBuilder2.toString();
      String string1 = jsopBuilder6.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JsopBuilder.prettyPrint("YO31LTn,y{1M7 k}n");
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      String string0 = ", ";
      jsopBuilder0.value(", ");
      int int0 = (-1351);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1351));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "/x)sv6<'\\H7QF";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "/x)sv6<'H7QF");
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = '3';
      charArray0[2] = 'T';
      charArray0[3] = 'h';
      charArray0[4] = 'x';
      charArray0[5] = 'm';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder1.delete((-251), (-1264));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -251
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      jsopBuilder0.endObject();
      JsopBuilder jsopBuilder1 = jsopBuilder0.array();
      JsopBuilder jsopBuilder2 = jsopBuilder1.tag('+');
      JsopBuilder.encode("(S(qdiD");
      jsopBuilder0.endObject();
      JsopBuilder.prettyPrint("");
      JsopBuilder jsopBuilder3 = jsopBuilder0.append(jsopBuilder1);
      JsopBuilder jsopBuilder4 = jsopBuilder1.newline();
      jsopBuilder4.length();
      JsopBuilder jsopBuilder5 = jsopBuilder2.append(jsopBuilder1);
      jsopBuilder5.object();
      jsopBuilder5.newline();
      jsopBuilder3.endArray();
      jsopBuilder3.value(true);
      jsopBuilder1.endArray();
      String string0 = JsopBuilder.prettyPrint("]");
      assertEquals("]", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.endArray();
      JsopBuilder jsopBuilder2 = jsopBuilder1.append(jsopBuilder0);
      JsopBuilder jsopBuilder3 = jsopBuilder2.endObject();
      jsopBuilder2.object();
      JsopBuilder.prettyPrint("");
      JsopBuilder jsopBuilder4 = jsopBuilder3.tag('8');
      JsopBuilder jsopBuilder5 = jsopBuilder2.key("");
      jsopBuilder5.tag('a');
      jsopBuilder5.value("null");
      JsopBuilder jsopBuilder6 = jsopBuilder4.value("\n");
      jsopBuilder4.array();
      jsopBuilder6.setLineLength(45);
      JsopBuilder jsopBuilder7 = jsopBuilder6.newline();
      JsopBuilder jsopBuilder8 = jsopBuilder3.object();
      JsopBuilder.prettyPrint("");
      JsopBuilder jsopBuilder9 = jsopBuilder0.value((long) 45);
      jsopBuilder9.append(jsopBuilder8);
      jsopBuilder7.resetWriter();
      jsopBuilder4.key("\n");
      JsopBuilder.prettyPrint("");
      jsopBuilder2.toString();
      jsopBuilder8.value(false);
      jsopBuilder9.setLineLength((-1));
      assertEquals("\"\\n\":false", jsopBuilder0.toString());
      assertEquals("\"\\n\":false", jsopBuilder9.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JsopBuilder jsopBuilder0 = new JsopBuilder();
      JsopBuilder jsopBuilder1 = jsopBuilder0.tag('.');
      JsopBuilder jsopBuilder2 = jsopBuilder1.value(false);
      JsopBuilder jsopBuilder3 = jsopBuilder2.array();
      JsopBuilder jsopBuilder4 = jsopBuilder3.value(0L);
      jsopBuilder4.length();
      JsopBuilder jsopBuilder5 = jsopBuilder4.value("");
      jsopBuilder5.value("");
      jsopBuilder5.resetWriter();
      jsopBuilder3.endArray();
      jsopBuilder3.array();
      jsopBuilder0.encodedValue("");
      assertEquals("],[", jsopBuilder0.toString());
      
      String string0 = JsopBuilder.encode("");
      assertEquals("\"\"", string0);
  }
}
