/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 13:50:03 GMT 2023
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.FormattingStyle;
import com.google.gson.Strictness;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.nio.CharBuffer;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      boolean boolean0 = true;
      jsonWriter0.setHtmlSafe(true);
      JsonWriter jsonWriter1 = jsonWriter0.value((-1188.4));
      stringWriter0.append('[');
      // Undeclared exception!
      try { 
        jsonWriter1.value((-108L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      JsonWriter jsonWriter2 = jsonWriter1.name("[P%T+?=\"To=(t");
      // Undeclared exception!
      try { 
        jsonWriter2.name("[P%T+?=\"To=(t");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already wrote a name, expecting a value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = '2';
      charArray0[2] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      jsonWriter1.beginObject();
      jsonWriter1.setIndent("");
      FormattingStyle formattingStyle0 = FormattingStyle.PRETTY;
      FormattingStyle formattingStyle1 = formattingStyle0.withNewline("");
      jsonWriter0.setFormattingStyle(formattingStyle1);
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setSerializeNulls(false);
      JsonWriter jsonWriter1 = jsonWriter0.value((double) 0);
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "End!MPfbKM8A4vo ";
      jsonWriter0.jsonValue("End!MPfbKM8A4vo ");
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter0.setStrictness(strictness0);
      JsonWriter jsonWriter1 = jsonWriter0.value(2653.55F);
      JsonWriter jsonWriter2 = jsonWriter1.beginArray();
      jsonWriter2.value((double) 2653.55F);
      Short short0 = new Short((short) (-452));
      JsonWriter jsonWriter3 = jsonWriter0.value((float) (short) (-452));
      jsonWriter3.flush();
      jsonWriter1.value((Number) short0);
      JsonWriter jsonWriter4 = jsonWriter2.value((Number) short0);
      JsonWriter jsonWriter5 = jsonWriter4.value(1L);
      JsonWriter jsonWriter6 = jsonWriter5.beginObject();
      jsonWriter6.endObject();
      jsonWriter1.value((double) (short) (-452));
      jsonWriter2.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter2.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      stringWriter0.close();
      JsonWriter jsonWriter2 = jsonWriter1.value(1.0F);
      JsonWriter jsonWriter3 = jsonWriter2.nullValue();
      jsonWriter3.setHtmlSafe(true);
      jsonWriter3.setIndent("  ");
      JsonWriter jsonWriter4 = jsonWriter3.value(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JsonWriter jsonWriter5 = jsonWriter4.value((Number) bigInteger0);
      jsonWriter4.setIndent("  ");
      JsonWriter jsonWriter6 = jsonWriter5.value((Number) bigInteger0);
      jsonWriter4.nullValue();
      jsonWriter4.isLenient();
      jsonWriter6.setHtmlSafe(false);
      jsonWriter1.value((Boolean) null);
      // Undeclared exception!
      try { 
        jsonWriter2.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '3';
      stringWriter0.write(charArray0, 0, 0);
      stringWriter0.write("", 0, 0);
      stringWriter0.flush();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setHtmlSafe(true);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      Strictness strictness0 = Strictness.STRICT;
      jsonWriter0.setStrictness(strictness0);
      Strictness strictness1 = Strictness.LENIENT;
      jsonWriter1.setStrictness(strictness1);
      jsonWriter0.setHtmlSafe(true);
      JsonWriter jsonWriter2 = jsonWriter0.jsonValue("fXjF~Nfc?]@");
      JsonWriter jsonWriter3 = jsonWriter0.beginArray();
      jsonWriter3.setHtmlSafe(true);
      jsonWriter0.setStrictness(strictness1);
      jsonWriter2.flush();
      jsonWriter3.value(1035L);
      // Undeclared exception!
      try { 
        jsonWriter3.setIndent("+-F:H{,*Z-aMna;l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of spaces and tabs are allowed in indent.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('W');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      AtomicInteger atomicInteger0 = new AtomicInteger();
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) atomicInteger0);
      jsonWriter0.close();
      // Undeclared exception!
      try { 
        jsonWriter1.flush();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonWriter is closed.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2166);
      StringWriter stringWriter1 = stringWriter0.append('q');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      stringWriter0.write(2166);
      jsonWriter1.setSerializeNulls(false);
      JsonWriter jsonWriter2 = jsonWriter1.value(746.97144F);
      jsonWriter2.getSerializeNulls();
      jsonWriter0.flush();
      jsonWriter0.setHtmlSafe(true);
      jsonWriter2.nullValue();
      jsonWriter2.getFormattingStyle();
      assertTrue(jsonWriter1.isHtmlSafe());
      assertEquals("q[\u0876746.97144,null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      Boolean boolean0 = Boolean.TRUE;
      JsonWriter jsonWriter2 = jsonWriter1.value(boolean0);
      JsonWriter jsonWriter3 = jsonWriter2.value((String) null);
      JsonWriter jsonWriter4 = jsonWriter3.value(false);
      jsonWriter3.setHtmlSafe(true);
      assertEquals("[true,null,false", stringWriter0.toString());
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      JsonWriter jsonWriter5 = jsonWriter4.value((Number) bigDecimal0);
      jsonWriter5.jsonValue("r~3)");
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      String string0 = null;
      // Undeclared exception!
      try { 
        jsonWriter1.setIndent((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('*');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      jsonWriter0.beginArray();
      JsonWriter jsonWriter1 = jsonWriter0.value((-1.0F));
      FormattingStyle formattingStyle0 = FormattingStyle.PRETTY;
      jsonWriter1.setFormattingStyle(formattingStyle0);
      JsonWriter jsonWriter2 = jsonWriter0.value(1.0);
      JsonWriter jsonWriter3 = jsonWriter2.value(false);
      JsonWriter jsonWriter4 = jsonWriter3.beginArray();
      jsonWriter4.value((-1L));
      jsonWriter3.beginArray();
      assertEquals("*[-1.0,\n  1.0,\n  false,\n  [\n    -1,\n    [", stringWriter1.toString());
      assertEquals("*[-1.0,\n  1.0,\n  false,\n  [\n    -1,\n    [", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      boolean boolean0 = true;
      jsonWriter1.setHtmlSafe(true);
      JsonWriter jsonWriter2 = jsonWriter1.jsonValue("\n");
      jsonWriter2.beginObject();
      String string0 = null;
      // Undeclared exception!
      try { 
        jsonWriter0.value(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3473);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter0.setStrictness(strictness0);
      JsonWriter jsonWriter2 = jsonWriter1.value("");
      JsonWriter jsonWriter3 = jsonWriter2.nullValue();
      boolean boolean0 = false;
      jsonWriter1.setSerializeNulls(false);
      JsonWriter jsonWriter4 = jsonWriter3.endArray();
      Strictness strictness1 = Strictness.STRICT;
      jsonWriter3.setStrictness(strictness1);
      // Undeclared exception!
      try { 
        jsonWriter4.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      JsonWriter jsonWriter2 = jsonWriter1.name("1de6uCZ.,'");
      JsonWriter jsonWriter3 = jsonWriter2.beginArray();
      jsonWriter3.setHtmlSafe(true);
      JsonWriter jsonWriter4 = jsonWriter3.value((-1L));
      JsonWriter jsonWriter5 = jsonWriter4.endArray();
      // Undeclared exception!
      try { 
        jsonWriter5.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.nullValue();
      JsonWriter jsonWriter3 = jsonWriter2.value((-490L));
      jsonWriter0.endArray();
      String string0 = "";
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter1.setStrictness(strictness0);
      jsonWriter1.jsonValue((String) null);
      Integer integer0 = new Integer(0);
      Integer integer1 = Integer.getInteger("", integer0);
      JsonWriter jsonWriter4 = jsonWriter3.value((Number) integer1);
      jsonWriter3.beginArray();
      JsonWriter jsonWriter5 = jsonWriter4.value("");
      jsonWriter5.value((float) 0);
      jsonWriter0.beginObject();
      jsonWriter1.isHtmlSafe();
      // Undeclared exception!
      try { 
        jsonWriter0.jsonValue("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      Boolean boolean0 = new Boolean((String) null);
      JsonWriter jsonWriter2 = jsonWriter1.value(boolean0);
      JsonWriter jsonWriter3 = jsonWriter2.jsonValue("M");
      JsonWriter jsonWriter4 = jsonWriter3.nullValue();
      assertEquals("[false,M,null", stringWriter0.toString());
      
      Integer integer0 = new Integer((-1070));
      JsonWriter jsonWriter5 = jsonWriter4.value((Number) integer0);
      FormattingStyle formattingStyle0 = FormattingStyle.COMPACT;
      FormattingStyle formattingStyle1 = formattingStyle0.withSpaceAfterSeparators(true);
      jsonWriter5.setFormattingStyle(formattingStyle1);
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value(true);
      Boolean boolean0 = new Boolean(true);
      JsonWriter jsonWriter3 = jsonWriter2.value(boolean0);
      jsonWriter2.setLenient(true);
      Double double0 = Double.valueOf(812.77330872626);
      jsonWriter2.setLenient(true);
      JsonWriter jsonWriter4 = jsonWriter3.value((Number) double0);
      float float0 = (-2043.8732F);
      String string0 = "";
      jsonWriter2.setIndent("");
      jsonWriter3.value((Number) double0);
      jsonWriter4.setSerializeNulls(false);
      JsonWriter jsonWriter5 = jsonWriter4.value((-2043.8732F));
      try { 
        jsonWriter5.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.jsonValue("name == null");
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter1.setStrictness(strictness0);
      JsonWriter jsonWriter3 = jsonWriter2.value("u35O.wSN-");
      jsonWriter2.nullValue();
      stringWriter0.write("u35O.wSN-");
      Boolean boolean0 = Boolean.valueOf(true);
      JsonWriter jsonWriter4 = jsonWriter3.value(boolean0);
      JsonWriter jsonWriter5 = jsonWriter4.endArray();
      Strictness strictness1 = Strictness.LEGACY_STRICT;
      jsonWriter5.setStrictness(strictness1);
      // Undeclared exception!
      try { 
        jsonWriter5.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      long long0 = (-1L);
      jsonWriter0.setHtmlSafe(true);
      JsonWriter jsonWriter2 = jsonWriter1.value((-1L));
      JsonWriter jsonWriter3 = jsonWriter2.nullValue();
      // Undeclared exception!
      try { 
        jsonWriter3.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      stringWriter0.close();
      Boolean boolean0 = new Boolean("\"");
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter0.setStrictness(strictness0);
      JsonWriter jsonWriter2 = jsonWriter1.beginArray();
      JsonWriter jsonWriter3 = jsonWriter2.value("\"");
      JsonWriter jsonWriter4 = jsonWriter3.nullValue();
      jsonWriter3.setSerializeNulls(false);
      jsonWriter4.jsonValue("");
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        jsonWriter4.setIndent("ex6*aXQ}7fAU@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of spaces and tabs are allowed in indent.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(32);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter1.setSerializeNulls(false);
      Short short0 = new Short((short)39);
      jsonWriter1.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) short0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = '.';
      charArray0[2] = '/';
      charArray0[3] = '8';
      charArray0[4] = 'r';
      charArray0[5] = 'S';
      stringWriter0.write(charArray0, 0, 3);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setHtmlSafe(true);
      Strictness strictness0 = Strictness.STRICT;
      jsonWriter0.setStrictness(strictness0);
      JsonWriter jsonWriter1 = jsonWriter0.value("");
      jsonWriter1.setHtmlSafe(false);
      // Undeclared exception!
      try { 
        jsonWriter1.value(0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      JsonWriter jsonWriter2 = jsonWriter1.name(" is not a valid JSON number: ");
      JsonWriter jsonWriter3 = jsonWriter2.nullValue();
      // Undeclared exception!
      try { 
        jsonWriter3.value(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(38);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      String string0 = "t#Na`\"r";
      JsonWriter jsonWriter2 = jsonWriter1.name("t#Na`\"r");
      // Undeclared exception!
      try { 
        jsonWriter2.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Dangling name: t#Na`\"r
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2047);
      stringWriter0.close();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.nullValue();
      jsonWriter1.value((-1491.731F));
      jsonWriter2.setSerializeNulls(false);
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter2.setStrictness(strictness0);
      JsonWriter jsonWriter3 = jsonWriter1.value((long) 2047);
      jsonWriter3.flush();
      JsonWriter jsonWriter4 = jsonWriter1.value((float) 2047);
      jsonWriter4.setHtmlSafe(false);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) stringBuffer0);
      jsonWriter0.setLenient(true);
      jsonWriter1.getSerializeNulls();
      Boolean boolean0 = Boolean.valueOf(true);
      jsonWriter0.value(boolean0);
      try { 
        jsonWriter2.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "ZbjE.tNu";
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("ZbjE.tNu");
      Byte byte0 = new Byte((byte) (-71));
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) byte0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.jsonValue("JSON must have only one top-level value.");
      stringWriter0.close();
      jsonWriter2.setSerializeNulls(true);
      jsonWriter0.setLenient(true);
      JsonWriter jsonWriter3 = jsonWriter2.value((-335.357610274427));
      JsonWriter jsonWriter4 = jsonWriter3.value(true);
      jsonWriter4.isHtmlSafe();
      Boolean boolean0 = new Boolean(true);
      jsonWriter4.value(boolean0);
      jsonWriter1.setIndent("");
      jsonWriter4.setSerializeNulls(false);
      // Undeclared exception!
      try { 
        jsonWriter2.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('X');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      jsonWriter0.beginArray();
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0F);
      double double0 = (-1033.86);
      JsonWriter jsonWriter2 = jsonWriter1.value((-1033.86));
      jsonWriter2.isLenient();
      jsonWriter0.beginArray();
      // Undeclared exception!
      try { 
        jsonWriter0.setFormattingStyle((FormattingStyle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((-1607.5127F));
      FormattingStyle formattingStyle0 = FormattingStyle.PRETTY;
      jsonWriter0.setFormattingStyle(formattingStyle0);
      FormattingStyle formattingStyle1 = jsonWriter1.getFormattingStyle();
      boolean boolean0 = false;
      FormattingStyle formattingStyle2 = formattingStyle1.withSpaceAfterSeparators(false);
      String string0 = "LEGACY_STRICT";
      // Undeclared exception!
      try { 
        formattingStyle2.withNewline("LEGACY_STRICT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of \\n and \\r are allowed in newline.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      boolean boolean0 = true;
      try { 
        jsonWriter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value(false);
      jsonWriter0.setHtmlSafe(false);
      jsonWriter0.setLenient(true);
      jsonWriter0.value((-1513.7347538));
      FormattingStyle formattingStyle0 = FormattingStyle.COMPACT;
      String string0 = "\\u0027";
      // Undeclared exception!
      try { 
        formattingStyle0.withNewline("'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of \\n and \\r are allowed in newline.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setSerializeNulls(false);
      JsonWriter jsonWriter1 = jsonWriter0.value(1153.1597F);
      // Undeclared exception!
      try { 
        jsonWriter1.value("F%o]jFg=$dO%['-^f");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value(959.2926);
      String string0 = "";
      Boolean boolean0 = Boolean.valueOf("");
      jsonWriter2.setSerializeNulls(false);
      JsonWriter jsonWriter3 = jsonWriter2.value(boolean0);
      // Undeclared exception!
      try { 
        jsonWriter3.name("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before writing a name.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.name((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("");
      jsonWriter1.setLenient(true);
      jsonWriter1.getFormattingStyle();
      jsonWriter0.getFormattingStyle();
      String string0 = "";
      jsonWriter0.value("");
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = ";[W%,S>\\!vA{#O\\";
      JsonWriter jsonWriter1 = jsonWriter0.value(";[W%,S>!vA{#O");
      // Undeclared exception!
      try { 
        jsonWriter1.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1353);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter1.setLenient(false);
      JsonWriter jsonWriter2 = jsonWriter1.value("[\r\n]*");
      BigDecimal bigDecimal0 = new BigDecimal(1443.207120730585);
      JsonWriter jsonWriter3 = jsonWriter2.value((Number) bigDecimal0);
      boolean boolean0 = false;
      JsonWriter jsonWriter4 = jsonWriter3.value(false);
      JsonWriter jsonWriter5 = jsonWriter4.beginObject();
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      FormattingStyle formattingStyle0 = FormattingStyle.PRETTY;
      jsonWriter5.setFormattingStyle(formattingStyle0);
      mathContext0.getRoundingMode();
      // Undeclared exception!
      try { 
        jsonWriter3.value("ASl!M?Jmt$");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0F);
      FormattingStyle formattingStyle0 = jsonWriter1.getFormattingStyle();
      // Undeclared exception!
      try { 
        formattingStyle0.withIndent("|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of spaces and tabs are allowed in indent.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Boolean boolean0 = Boolean.FALSE;
      jsonWriter0.value(boolean0);
      boolean boolean1 = true;
      long long0 = 0L;
      Long long1 = new Long(0L);
      // Undeclared exception!
      try { 
        jsonWriter0.value((Number) long1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'h';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      jsonWriter0.setLenient(true);
      assertEquals(Strictness.LENIENT, jsonWriter0.getStrictness());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2254);
      StringWriter stringWriter1 = stringWriter0.append('5');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      stringWriter1.append((CharSequence) charBuffer1, 0, 0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      jsonWriter1.endObject();
      String string0 = "iZ$)g0-Sj!T?)";
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      // Undeclared exception!
      try { 
        stringWriter1.write(charArray0, 2254, 2254);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(850);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      AtomicInteger atomicInteger0 = new AtomicInteger(850);
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) atomicInteger0);
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      float float0 = 0.0F;
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0F);
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("$VALUES");
      // Undeclared exception!
      try { 
        jsonWriter1.value(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      long long0 = 2461L;
      jsonWriter0.beginObject();
      try { 
        jsonWriter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      stringWriter0.append('k');
      JsonWriter jsonWriter1 = jsonWriter0.value((long) 0);
      // Undeclared exception!
      try { 
        jsonWriter1.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 2107;
      StringWriter stringWriter0 = new StringWriter(2107);
      StringWriter stringWriter1 = stringWriter0.append('V');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      stringWriter1.flush();
      JsonWriter jsonWriter2 = jsonWriter1.nullValue();
      String string0 = "]8P)x2D=*(";
      // Undeclared exception!
      try { 
        jsonWriter2.setIndent("]8P)x2D=*(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of spaces and tabs are allowed in indent.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 125;
      StringWriter stringWriter0 = new StringWriter(125);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(0L);
      AtomicLong atomicLong0 = new AtomicLong(0L);
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) atomicLong0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1525);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "";
      // Undeclared exception!
      try { 
        jsonWriter0.name("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before writing a name.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1912);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Boolean boolean0 = Boolean.valueOf("]C]v2?-lk_)");
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      // Undeclared exception!
      try { 
        jsonWriter1.value((long) 1912);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        jsonWriter1.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0);
      // Undeclared exception!
      try { 
        jsonWriter1.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonWriter jsonWriter0 = null;
      try {
        jsonWriter0 = new JsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      float float0 = (-678.00397F);
      JsonWriter jsonWriter1 = jsonWriter0.value((-678.00397F));
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      stringWriter0.append('I');
      jsonWriter0.setHtmlSafe(true);
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0F);
      stringWriter0.append('|');
      // Undeclared exception!
      try { 
        jsonWriter1.value(5328.990158466348);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "";
      Boolean boolean0 = Boolean.valueOf("");
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      // Undeclared exception!
      try { 
        jsonWriter1.value(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Boolean boolean0 = Boolean.FALSE;
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = ')';
      charArray0[2] = 'g';
      charArray0[3] = '@';
      charArray0[4] = '\\';
      charArray0[5] = '6';
      stringWriter0.write(charArray0);
      jsonWriter0.flush();
      jsonWriter0.value(boolean0);
      // Undeclared exception!
      try { 
        jsonWriter0.value("x{77cH6H^/jJE+r5YE");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Double double0 = new Double((-876.61));
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) double0);
      stringWriter0.close();
      // Undeclared exception!
      try { 
        jsonWriter1.value((-876.61));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "}'=VZ}b9]Np";
      // Undeclared exception!
      try { 
        jsonWriter0.name("}'=VZ}b9]Np");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before writing a name.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-191);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      stringWriter0.flush();
      // Undeclared exception!
      try { 
        jsonWriter0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 2;
      StringWriter stringWriter0 = new StringWriter(2);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setHtmlSafe(false);
      Boolean boolean0 = new Boolean("");
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) bigDecimal0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('p');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.value("mnfl?vCT+ JjvFF_8*>");
      // Undeclared exception!
      try { 
        jsonWriter1.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1557);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter1.value((float) 1557);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = null;
      jsonWriter0.jsonValue((String) null);
      String string1 = "J-?^-R";
      // Undeclared exception!
      try { 
        jsonWriter0.jsonValue("J-?^-R");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Boolean boolean0 = Boolean.FALSE;
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      // Undeclared exception!
      try { 
        jsonWriter1.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Integer integer0 = new Integer(0);
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) integer0);
      // Undeclared exception!
      try { 
        jsonWriter1.value(2358.3723F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      String string0 = "':T_8!Q gw9`Zj>r";
      // Undeclared exception!
      try { 
        jsonWriter1.name("':T_8!Q gw9`Zj>r");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before writing a name.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      int int0 = 1849;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 0, 1849);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter0.setHtmlSafe(false);
      JsonWriter jsonWriter2 = jsonWriter1.value((-4108.361));
      JsonWriter jsonWriter3 = jsonWriter1.beginObject();
      jsonWriter3.setHtmlSafe(false);
      jsonWriter0.getSerializeNulls();
      jsonWriter2.isLenient();
      jsonWriter2.getStrictness();
      try { 
        jsonWriter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1291);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Boolean boolean0 = Boolean.FALSE;
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      // Undeclared exception!
      try { 
        jsonWriter1.value(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      char char0 = '&';
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuffer0, 0, 2068);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2068
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-343);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-343));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      JsonWriter jsonWriter2 = jsonWriter1.name("[P%T+?=\"To=(t");
      JsonWriter jsonWriter3 = jsonWriter2.value((-1L));
      jsonWriter3.setHtmlSafe(true);
      assertEquals("{\"[P%T+?=\\\"To=(t\":-1", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = 'Y';
      stringWriter0.close();
      charArray0[2] = 'a';
      int int0 = 695;
      int int1 = 1299;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 695, 1299);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1084);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 61;
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = (-4090);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-4090));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      jsonWriter0.value(0.0);
      assertEquals("0.0", stringWriter1.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      Number number0 = null;
      JsonWriter jsonWriter2 = jsonWriter1.value((Number) null);
      try { 
        jsonWriter2.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 9;
      StringWriter stringWriter0 = new StringWriter(9);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      boolean boolean0 = false;
      jsonWriter0.value(false);
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(1033.35F);
      // Undeclared exception!
      try { 
        jsonWriter1.value(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("MPAk");
      AtomicInteger atomicInteger0 = new AtomicInteger((-1303));
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) atomicInteger0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 92;
      StringWriter stringWriter0 = new StringWriter(92);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 938;
      StringWriter stringWriter0 = new StringWriter(938);
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 'J';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 938, 125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Boolean boolean0 = Boolean.FALSE;
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      jsonWriter1.close();
      // Undeclared exception!
      try { 
        jsonWriter1.value(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonWriter is closed.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      StringWriter stringWriter0 = new StringWriter(4276);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      JsonWriter jsonWriter2 = jsonWriter1.name("zA_)<3#0");
      Float float0 = new Float((float) 4276);
      JsonWriter jsonWriter3 = jsonWriter2.value((Number) float0);
      // Undeclared exception!
      try { 
        jsonWriter3.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = (-246);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Boolean.valueOf("java.math.BigDecimal@0000000004");
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = stringWriter0.append('j');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter1.flush();
      StringWriter stringWriter2 = null;
      try {
        stringWriter2 = new StringWriter((-310));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2071);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      // Undeclared exception!
      try { 
        jsonWriter1.value((-1.0));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'a';
      charArray0[2] = '[';
      charArray0[3] = 'h';
      charArray0[4] = 'p';
      charArray0[5] = 'X';
      charArray0[6] = '.';
      charArray0[7] = '@';
      stringWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 449, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Boolean boolean0 = Boolean.FALSE;
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      // Undeclared exception!
      try { 
        jsonWriter1.name(">");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before writing a name.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-30));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        jsonWriter1.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-2875);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value("");
      // Undeclared exception!
      try { 
        jsonWriter1.value((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(930L);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      assertEquals((byte)1, bigInteger2.byteValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      stringWriter0.flush();
      JsonWriter jsonWriter1 = jsonWriter0.value(1366.338);
      FormattingStyle formattingStyle0 = jsonWriter1.getFormattingStyle();
      jsonWriter1.setFormattingStyle(formattingStyle0);
      jsonWriter1.setSerializeNulls(true);
      jsonWriter0.getFormattingStyle();
      jsonWriter0.isLenient();
      jsonWriter0.close();
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter1.setStrictness(strictness0);
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonWriter is closed.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      long long0 = 1L;
      JsonWriter jsonWriter1 = jsonWriter0.value(1L);
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      float float0 = 1.0F;
      JsonWriter jsonWriter1 = jsonWriter0.value(1.0F);
      // Undeclared exception!
      try { 
        jsonWriter1.value(0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = (-1635);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.setIndent("#Omu^8T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of spaces and tabs are allowed in indent.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter1.value(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      // Undeclared exception!
      try { 
        jsonWriter1.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Boolean boolean0 = Boolean.FALSE;
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      // Undeclared exception!
      try { 
        jsonWriter1.value((-1729.928F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      // Undeclared exception!
      try { 
        jsonWriter1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      long long0 = 0L;
      JsonWriter jsonWriter1 = jsonWriter0.value(0L);
      Boolean boolean0 = Boolean.valueOf(true);
      // Undeclared exception!
      try { 
        jsonWriter1.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.nullValue();
      String string0 = "QW@jC( f";
      // Undeclared exception!
      try { 
        jsonWriter0.name("QW@jC( f");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before writing a name.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter0.value((-3995.3042F));
      jsonWriter1.value((double) (-3995.3042F));
      JsonWriter jsonWriter2 = jsonWriter1.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter2.value(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value(false);
      jsonWriter0.setHtmlSafe(false);
      jsonWriter0.setLenient(true);
      jsonWriter0.value((-1513.7347538));
      FormattingStyle formattingStyle0 = FormattingStyle.COMPACT;
      // Undeclared exception!
      try { 
        formattingStyle0.withNewline("'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of \\n and \\r are allowed in newline.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('b');
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer2, 0, 0);
      charBuffer2.mark();
      stringWriter1.write("String created by ");
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter2);
      stringWriter1.append((CharSequence) charBuffer1, 0, 0);
      stringWriter1.write("String created by ", 1, 1);
      String string0 = "GaF^%6GQ>%V2{";
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("GaF^%6GQ>%V2{");
      jsonWriter1.isHtmlSafe();
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      // Undeclared exception!
      try { 
        jsonWriter0.value((Number) bigDecimal0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.endArray();
      // Undeclared exception!
      try { 
        jsonWriter2.value(0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.beginArray();
      Boolean boolean0 = Boolean.valueOf("");
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0);
      assertEquals("[0.0", stringWriter0.toString());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = '$';
      charArray0[2] = 'o';
      charArray0[3] = 'Q';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      charArray0[6] = 'b';
      charArray0[7] = '$';
      charArray0[8] = '6';
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jsonWriter1.value((Number) bigDecimal0);
      JsonWriter jsonWriter2 = jsonWriter0.value(boolean0);
      JsonWriter jsonWriter3 = jsonWriter2.endArray();
      jsonWriter2.setLenient(false);
      jsonWriter3.setHtmlSafe(false);
      FormattingStyle formattingStyle0 = FormattingStyle.PRETTY;
      formattingStyle0.withNewline("");
      jsonWriter0.setFormattingStyle(formattingStyle0);
      assertEquals(Strictness.LEGACY_STRICT, jsonWriter0.getStrictness());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = 0L;
      float float0 = (-564.48F);
      Random.setNextRandom(1252);
      StringWriter stringWriter0 = new StringWriter(1252);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 8233;
      StringWriter stringWriter0 = new StringWriter(8233);
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      stringWriter0.append((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, 2, (-574));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 1724;
      StringWriter stringWriter0 = new StringWriter(1724);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(1L);
      String string0 = "xi-]8sG4q@,T(YSw";
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue("xi-]8sG4q@,T(YSw");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = (-125);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = (-2364);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Float float0 = new Float(0.0);
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) float0);
      // Undeclared exception!
      try { 
        jsonWriter1.value((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-92);
      byte byte0 = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-52);
      byteArray0[8] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) bigDecimal0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      String string0 = "\\t";
      // Undeclared exception!
      try { 
        jsonWriter1.value("\t");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 34;
      StringWriter stringWriter0 = new StringWriter(34);
      stringWriter0.append('u');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((long) 34);
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue("null");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((long) 0);
      // Undeclared exception!
      try { 
        jsonWriter1.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = (-1620);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1620));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-4306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setIndent("");
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      short short0 = (short)3;
      Short short1 = new Short((short)3);
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) short1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((long) 0);
      String string0 = "c{&}krw";
      // Undeclared exception!
      try { 
        jsonWriter1.name("c{&}krw");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before writing a name.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 12;
      StringWriter stringWriter0 = new StringWriter(12);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.name("Only combinations of spaces and tabs are allowed in indent.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before writing a name.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(123);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((Boolean) null);
      // Undeclared exception!
      try { 
        jsonWriter1.value(0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 2227;
      StringWriter stringWriter0 = new StringWriter(2227);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((double) 2227);
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        jsonWriter1.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.jsonValue("81D{7%Q7[nhe\"z ex");
      JsonWriter jsonWriter3 = jsonWriter2.value(true);
      JsonWriter jsonWriter4 = jsonWriter3.endArray();
      boolean boolean0 = jsonWriter4.isLenient();
      assertEquals("[81D{7%Q7[nhe\"z ex,true]", stringWriter0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(93);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("");
      // Undeclared exception!
      try { 
        jsonWriter1.name("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before writing a name.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      // Undeclared exception!
      try { 
        jsonWriter1.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(683);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      StringWriter stringWriter2 = stringWriter1.append('0');
      charBuffer1.slice();
      stringWriter2.flush();
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) charBuffer0, 22, 22);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter3);
      CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        stringWriter3.append((CharSequence) charBuffer0, (-1311), 683);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FormattingStyle formattingStyle0 = FormattingStyle.PRETTY;
      Boolean.valueOf("Please begin an object before writing a name.");
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Byte byte0 = new Byte((byte) (-25));
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) byte0);
      // Undeclared exception!
      try { 
        jsonWriter1.value(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "e_;<9";
      // Undeclared exception!
      try { 
        jsonWriter0.name("e_;<9");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before writing a name.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(0L);
      Boolean boolean0 = Boolean.valueOf(false);
      // Undeclared exception!
      try { 
        jsonWriter1.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = '*';
      charArray0[2] = '4';
      charArray0[3] = 'V';
      charArray0[4] = 'q';
      charArray0[5] = '*';
      charArray0[6] = '+';
      charArray0[7] = ';';
      charArray0[8] = '<';
      bigInteger0.signum();
      stringWriter0.write(charArray0);
      stringWriter0.write("");
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) bigInteger0);
      // Undeclared exception!
      try { 
        jsonWriter1.value(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      stringWriter0.flush();
      jsonWriter0.name("");
      JsonWriter jsonWriter2 = jsonWriter1.value(0.0F);
      // Undeclared exception!
      try { 
        jsonWriter2.value((-1722L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      long long0 = (-2151L);
      JsonWriter jsonWriter1 = jsonWriter0.value(0L);
      // Undeclared exception!
      try { 
        jsonWriter1.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(38);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "McTIs6";
      JsonWriter jsonWriter1 = jsonWriter0.value("McTIs6");
      // Undeclared exception!
      try { 
        jsonWriter1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      // Undeclared exception!
      try { 
        jsonWriter1.value((-52.37582));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((float) 2);
      AtomicLong atomicLong0 = new AtomicLong();
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) atomicLong0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter1.value((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 608;
      StringWriter stringWriter0 = new StringWriter(608);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuffer0, 132, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -132
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(8);
      Boolean.valueOf("A.@(u)B`Wj|:Af");
      Boolean.valueOf("d*nq]Z");
      Boolean boolean0 = Boolean.valueOf("}^0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = (-1380);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1380));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = null;
      MathContext mathContext0 = MathContext.DECIMAL128;
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter1.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.name("{oSO[s");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before writing a name.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      jsonWriter0.setLenient(true);
      String string0 = "TY";
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("TY");
      jsonWriter1.setIndent("");
      jsonWriter0.close();
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonWriter is closed.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 1101;
      StringWriter stringWriter0 = new StringWriter(1101);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setSerializeNulls(false);
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) null);
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(32);
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '0';
      charArray0[2] = 'q';
      charArray0[3] = 'N';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'L';
      charArray0[7] = '8';
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 4;
      StringWriter stringWriter0 = new StringWriter(4);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      double double0 = (-260.0);
      JsonWriter jsonWriter1 = jsonWriter0.value((-260.0));
      jsonWriter0.flush();
      String string0 = "";
      jsonWriter0.setIndent("");
      // Undeclared exception!
      try { 
        jsonWriter1.value("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value("");
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "\n";
      JsonWriter jsonWriter1 = jsonWriter0.value("\n");
      // Undeclared exception!
      try { 
        jsonWriter1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((-1514.834F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) bigInteger0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      boolean boolean0 = true;
      jsonWriter0.setHtmlSafe(true);
      double double0 = (-1188.4);
      Boolean boolean1 = Boolean.TRUE;
      jsonWriter0.value(boolean1);
      Number number0 = null;
      // Undeclared exception!
      try { 
        jsonWriter0.value((Number) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(1009.1665F);
      Boolean boolean0 = Boolean.valueOf(true);
      // Undeclared exception!
      try { 
        jsonWriter1.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(1.0);
      AtomicLong atomicLong0 = new AtomicLong(0);
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) atomicLong0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }
}
