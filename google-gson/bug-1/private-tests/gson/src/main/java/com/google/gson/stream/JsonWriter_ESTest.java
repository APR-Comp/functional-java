/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 25 13:50:25 GMT 2023
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.FormattingStyle;
import com.google.gson.Strictness;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.nio.CharBuffer;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      jsonWriter0.setSerializeNulls(false);
      jsonWriter0.beginObject();
      jsonWriter0.isHtmlSafe();
      jsonWriter0.setLenient(false);
      // Undeclared exception!
      try { 
        jsonWriter0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      jsonWriter0.setLenient(true);
      JsonWriter jsonWriter1 = jsonWriter0.value((String) null);
      JsonWriter jsonWriter2 = jsonWriter1.value(0.0);
      Boolean boolean0 = Boolean.FALSE;
      FormattingStyle formattingStyle0 = FormattingStyle.PRETTY;
      String string0 = "";
      formattingStyle0.withNewline("");
      jsonWriter1.setFormattingStyle(formattingStyle0);
      jsonWriter2.nullValue();
      JsonWriter jsonWriter3 = jsonWriter2.value(boolean0);
      JsonWriter jsonWriter4 = jsonWriter3.beginObject();
      jsonWriter2.endObject();
      jsonWriter4.beginArray();
      // Undeclared exception!
      try { 
        jsonWriter4.name((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter1.setHtmlSafe(false);
      jsonWriter0.setHtmlSafe(true);
      AtomicLong atomicLong0 = new AtomicLong(900L);
      jsonWriter1.value((Number) atomicLong0);
      int int0 = (-21);
      jsonWriter0.flush();
      stringWriter0.write((-21));
      // Undeclared exception!
      try { 
        jsonWriter1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value("");
      JsonWriter jsonWriter3 = jsonWriter2.value(true);
      JsonWriter jsonWriter4 = jsonWriter3.nullValue();
      JsonWriter jsonWriter5 = jsonWriter4.value(0.0);
      assertTrue(jsonWriter5.getSerializeNulls());
      
      jsonWriter5.setSerializeNulls(false);
      jsonWriter0.name("\n");
      assertFalse(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "&NBR)N@";
      stringWriter0.write("&NBR)N@", 0, 0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value(1.0);
      Strictness strictness0 = Strictness.STRICT;
      Strictness strictness1 = Strictness.STRICT;
      jsonWriter2.setStrictness(strictness1);
      JsonWriter jsonWriter3 = jsonWriter0.beginArray();
      jsonWriter3.name("&NBR)N@");
      jsonWriter2.setStrictness(strictness0);
      jsonWriter1.isHtmlSafe();
      // Undeclared exception!
      try { 
        jsonWriter3.name("&NBR)N@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already wrote a name, expecting a value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.nullValue();
      JsonWriter jsonWriter3 = jsonWriter2.value(true);
      JsonWriter jsonWriter4 = jsonWriter3.value(true);
      jsonWriter3.setHtmlSafe(true);
      Boolean boolean0 = Boolean.TRUE;
      JsonWriter jsonWriter5 = jsonWriter2.value(boolean0);
      JsonWriter jsonWriter6 = jsonWriter5.value((float) 0);
      jsonWriter6.setHtmlSafe(true);
      JsonWriter jsonWriter7 = jsonWriter6.value(true);
      jsonWriter7.getFormattingStyle();
      jsonWriter4.endArray();
      jsonWriter1.close();
      assertTrue(jsonWriter1.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      long long0 = (-1491L);
      Long long1 = Long.valueOf((-1491L));
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) long1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value(true);
      JsonWriter jsonWriter3 = jsonWriter2.nullValue();
      jsonWriter2.nullValue();
      jsonWriter3.setLenient(true);
      JsonWriter jsonWriter4 = jsonWriter3.jsonValue("c");
      Boolean boolean0 = Boolean.TRUE;
      JsonWriter jsonWriter5 = jsonWriter4.value(boolean0);
      boolean boolean1 = true;
      jsonWriter2.setLenient(true);
      jsonWriter3.value(0.0);
      JsonWriter jsonWriter6 = jsonWriter5.value(false);
      jsonWriter6.value(1.0);
      jsonWriter3.endArray();
      FormattingStyle formattingStyle0 = FormattingStyle.PRETTY;
      String string0 = "USV{rf";
      // Undeclared exception!
      try { 
        formattingStyle0.withNewline("USV{rf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of \\n and \\r are allowed in newline.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(38);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("c");
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter0.setStrictness(strictness0);
      jsonWriter1.isLenient();
      jsonWriter0.getStrictness();
      stringWriter0.append('B');
      jsonWriter1.getSerializeNulls();
      jsonWriter0.value((float) 38);
      Strictness strictness1 = Strictness.LENIENT;
      jsonWriter0.setStrictness(strictness1);
      assertEquals("cB38.0", stringWriter0.toString());
      assertTrue(jsonWriter0.isLenient());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      long long0 = 1044L;
      jsonWriter0.setSerializeNulls(false);
      double double0 = (-1107.605003);
      JsonWriter jsonWriter1 = jsonWriter0.value((-1107.605003));
      // Undeclared exception!
      try { 
        jsonWriter1.value(1L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      float float0 = (-4183.8457F);
      jsonWriter0.setHtmlSafe(true);
      JsonWriter jsonWriter1 = jsonWriter0.value((-4183.8457F));
      jsonWriter1.setSerializeNulls(true);
      jsonWriter1.getSerializeNulls();
      // Undeclared exception!
      try { 
        jsonWriter1.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      boolean boolean0 = true;
      jsonWriter0.setSerializeNulls(true);
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("{dqITXWV/I=JOYP?v");
      FormattingStyle formattingStyle0 = FormattingStyle.COMPACT;
      FormattingStyle formattingStyle1 = formattingStyle0.withSpaceAfterSeparators(true);
      formattingStyle1.withSpaceAfterSeparators(true);
      jsonWriter1.setFormattingStyle(formattingStyle1);
      Strictness strictness0 = Strictness.STRICT;
      jsonWriter1.setStrictness(strictness0);
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      boolean boolean0 = false;
      jsonWriter0.setSerializeNulls(false);
      JsonWriter jsonWriter1 = jsonWriter0.value((-1622.6127F));
      jsonWriter1.flush();
      String string0 = "$B";
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue("$B");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.nullValue();
      String string0 = "";
      JsonWriter jsonWriter3 = jsonWriter2.jsonValue("");
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter2.setStrictness(strictness0);
      boolean boolean0 = true;
      jsonWriter1.setHtmlSafe(true);
      JsonWriter jsonWriter4 = jsonWriter3.value(true);
      Boolean boolean1 = Boolean.valueOf(true);
      JsonWriter jsonWriter5 = jsonWriter4.value(boolean1);
      jsonWriter5.isHtmlSafe();
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(3, roundingMode0);
      bigDecimal0.abs(mathContext0);
      jsonWriter2.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter0.value((Number) bigDecimal0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      stringWriter0.flush();
      JsonWriter jsonWriter2 = jsonWriter1.value("Q");
      jsonWriter2.setHtmlSafe(true);
      stringWriter0.flush();
      JsonWriter jsonWriter3 = jsonWriter2.value(0.0);
      Boolean boolean0 = Boolean.FALSE;
      JsonWriter jsonWriter4 = jsonWriter3.value(boolean0);
      Strictness strictness0 = Strictness.LEGACY_STRICT;
      jsonWriter2.setLenient(true);
      jsonWriter4.value(0L);
      jsonWriter4.setStrictness(strictness0);
      JsonWriter jsonWriter5 = jsonWriter4.name("Q");
      try { 
        jsonWriter5.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setSerializeNulls(false);
      jsonWriter0.getSerializeNulls();
      jsonWriter0.getStrictness();
      jsonWriter0.value(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        jsonWriter0.value((Number) bigInteger0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      jsonWriter0.setHtmlSafe(true);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue("cWKlj{JkL]D?H|z2GQ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter0.setStrictness(strictness0);
      JsonWriter jsonWriter1 = jsonWriter0.value((-1728.1386));
      Boolean boolean0 = Boolean.valueOf((String) null);
      JsonWriter jsonWriter2 = jsonWriter1.value(boolean0);
      jsonWriter2.jsonValue((String) null);
      long long0 = (-4907L);
      // Undeclared exception!
      try { 
        jsonWriter2.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(8233);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value(true);
      JsonWriter jsonWriter3 = jsonWriter2.value(false);
      jsonWriter3.value("GCsx.1gPE^;u");
      JsonWriter jsonWriter4 = jsonWriter2.value((float) 8233);
      Boolean boolean0 = Boolean.TRUE;
      JsonWriter jsonWriter5 = jsonWriter4.value(boolean0);
      JsonWriter jsonWriter6 = jsonWriter5.value((double) 8233);
      jsonWriter5.flush();
      jsonWriter1.value(0L);
      jsonWriter6.setHtmlSafe(true);
      JsonWriter jsonWriter7 = jsonWriter4.value(boolean0);
      jsonWriter7.setSerializeNulls(false);
      // Undeclared exception!
      try { 
        jsonWriter5.setIndent("<u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of spaces and tabs are allowed in indent.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      jsonWriter0.setLenient(true);
      jsonWriter0.value((String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JsonWriter jsonWriter2 = jsonWriter1.value((Number) bigInteger0);
      JsonWriter jsonWriter3 = jsonWriter2.value(0L);
      JsonWriter jsonWriter4 = jsonWriter3.value((double) 0L);
      // Undeclared exception!
      try { 
        jsonWriter4.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value(0.0F);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      jsonWriter0.value((Number) (byte)0);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)42;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      JsonWriter jsonWriter3 = jsonWriter2.value((Number) bigDecimal0);
      // Undeclared exception!
      try { 
        jsonWriter3.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 245;
      StringWriter stringWriter0 = new StringWriter(245);
      StringWriter stringWriter1 = stringWriter0.append('c');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.value((long) 245);
      String string0 = "  ";
      jsonWriter1.close();
      // Undeclared exception!
      try { 
        jsonWriter1.name("  ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonWriter is closed.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter1.setLenient(true);
      JsonWriter jsonWriter2 = jsonWriter0.nullValue();
      JsonWriter jsonWriter3 = jsonWriter0.value(false);
      jsonWriter3.value((-1546.0F));
      boolean boolean0 = false;
      jsonWriter3.setLenient(false);
      jsonWriter2.value(false);
      jsonWriter1.isLenient();
      FormattingStyle formattingStyle0 = FormattingStyle.PRETTY;
      // Undeclared exception!
      try { 
        formattingStyle0.withNewline("DZl_3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of \\n and \\r are allowed in newline.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "(_q3A,r>n%eq/I$@mbK";
      stringWriter0.write("(_q3A,r>n%eq/I$@mbK");
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string1 = null;
      // Undeclared exception!
      try { 
        jsonWriter0.setIndent((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      jsonWriter0.setSerializeNulls(true);
      JsonWriter jsonWriter1 = jsonWriter0.value((-1647.2046));
      jsonWriter0.close();
      jsonWriter0.isHtmlSafe();
      jsonWriter0.getStrictness();
      // Undeclared exception!
      try { 
        jsonWriter1.flush();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonWriter is closed.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2035);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter0.setStrictness(strictness0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      JsonWriter jsonWriter2 = jsonWriter1.value("");
      JsonWriter jsonWriter3 = jsonWriter2.value((-749.2656F));
      JsonWriter jsonWriter4 = jsonWriter3.beginArray();
      Strictness strictness1 = Strictness.LEGACY_STRICT;
      jsonWriter1.setStrictness(strictness1);
      JsonWriter jsonWriter5 = jsonWriter4.jsonValue("[");
      FormattingStyle formattingStyle0 = jsonWriter3.getFormattingStyle();
      FormattingStyle formattingStyle1 = formattingStyle0.withNewline("");
      formattingStyle0.withSpaceAfterSeparators(true);
      FormattingStyle formattingStyle2 = formattingStyle1.withIndent("");
      formattingStyle2.withIndent("");
      FormattingStyle formattingStyle3 = formattingStyle2.withSpaceAfterSeparators(false);
      jsonWriter5.setFormattingStyle(formattingStyle3);
      Strictness strictness2 = jsonWriter5.getStrictness();
      JsonWriter jsonWriter6 = jsonWriter2.jsonValue("");
      jsonWriter3.setLenient(true);
      jsonWriter6.setStrictness(strictness2);
      formattingStyle3.withSpaceAfterSeparators(true);
      JsonWriter jsonWriter7 = jsonWriter0.value(581.9337);
      jsonWriter3.setFormattingStyle(formattingStyle3);
      jsonWriter7.getSerializeNulls();
      jsonWriter4.value("");
      assertEquals("null\"\"-749.2656[[,,581.9337,\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value(false);
      jsonWriter2.setHtmlSafe(true);
      jsonWriter2.beginArray();
      jsonWriter0.value(2925.3);
      jsonWriter0.getSerializeNulls();
      jsonWriter0.setHtmlSafe(true);
      jsonWriter1.value("zyH!Lu;");
      assertTrue(jsonWriter1.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value(0L);
      JsonWriter jsonWriter3 = jsonWriter2.value(0.0);
      JsonWriter jsonWriter4 = jsonWriter3.beginObject();
      JsonWriter jsonWriter5 = jsonWriter4.name("j7/VZ%G");
      jsonWriter5.nullValue();
      Strictness strictness0 = Strictness.STRICT;
      jsonWriter0.setStrictness(strictness0);
      assertEquals("[0,0.0,{\"j7/VZ%G\":null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      JsonWriter jsonWriter2 = jsonWriter1.name("(\t*#4Mb~b");
      JsonWriter jsonWriter3 = jsonWriter2.value(":");
      // Undeclared exception!
      try { 
        jsonWriter3.jsonValue("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.value(3061.2593353);
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter0.setStrictness(strictness0);
      jsonWriter1.beginObject();
      jsonWriter1.setLenient(false);
      try { 
        jsonWriter1.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      float float0 = 3950.059F;
      JsonWriter jsonWriter1 = jsonWriter0.value(3950.059F);
      jsonWriter1.setHtmlSafe(false);
      Strictness strictness0 = Strictness.LEGACY_STRICT;
      // Undeclared exception!
      try { 
        jsonWriter0.setFormattingStyle((FormattingStyle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3900);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      JsonWriter jsonWriter2 = jsonWriter1.name("HNX)TR5\"Dd [Mv-[L^d");
      // Undeclared exception!
      try { 
        jsonWriter2.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Dangling name: HNX)TR5\"Dd [Mv-[L^d
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.value("Only combinations of \n and \r are allowed in newline.");
      jsonWriter1.flush();
      assertTrue(jsonWriter1.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(true);
      jsonWriter1.setLenient(true);
      JsonWriter jsonWriter2 = jsonWriter1.value(0.0);
      JsonWriter jsonWriter3 = jsonWriter2.beginArray();
      Boolean boolean0 = Boolean.valueOf(true);
      JsonWriter jsonWriter4 = jsonWriter3.value(boolean0);
      assertEquals("true0.0[true", stringWriter0.toString());
      
      BigInteger bigInteger0 = BigInteger.TWO;
      JsonWriter jsonWriter5 = jsonWriter4.value((Number) bigInteger0);
      jsonWriter5.nullValue();
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setIndent("");
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter0.setStrictness(strictness0);
      Strictness strictness1 = Strictness.LEGACY_STRICT;
      jsonWriter0.setStrictness(strictness1);
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 2;
      StringWriter stringWriter0 = new StringWriter(2);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "+1II]20D60^`~9V";
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("+1II]20D60^`~9V");
      // Undeclared exception!
      try { 
        jsonWriter1.setIndent("+1II]20D60^`~9V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of spaces and tabs are allowed in indent.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      String string0 = "$2hq|";
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("$2hq|");
      float float0 = 0.0F;
      Float float1 = Float.valueOf(0.0F);
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) float1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      try { 
        jsonWriter1.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      JsonWriter jsonWriter2 = jsonWriter1.value((Number) atomicInteger0);
      JsonWriter jsonWriter3 = jsonWriter2.jsonValue("Only combinations of \n and \r are allowed in newline.");
      JsonWriter jsonWriter4 = jsonWriter3.value((double) 0);
      jsonWriter1.setSerializeNulls(false);
      Boolean boolean0 = Boolean.valueOf(true);
      JsonWriter jsonWriter5 = jsonWriter4.value(boolean0);
      jsonWriter5.getSerializeNulls();
      jsonWriter3.endArray();
      assertFalse(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      String string0 = "p/IA";
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("p/IA");
      jsonWriter1.setHtmlSafe(false);
      // Undeclared exception!
      try { 
        jsonWriter1.value((-1729.918533797235));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Integer integer0 = Integer.valueOf(0);
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) integer0);
      // Undeclared exception!
      try { 
        jsonWriter1.value("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      String string0 = "";
      jsonWriter0.setSerializeNulls(false);
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("");
      // Undeclared exception!
      try { 
        jsonWriter1.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      JsonWriter jsonWriter2 = jsonWriter1.endObject();
      Boolean boolean0 = Boolean.valueOf(true);
      // Undeclared exception!
      try { 
        jsonWriter2.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      jsonWriter0.setSerializeNulls(false);
      JsonWriter jsonWriter1 = jsonWriter0.value(true);
      Boolean boolean0 = Boolean.valueOf("]~U-0SO;If");
      // Undeclared exception!
      try { 
        jsonWriter1.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "r@+Tg@pj]TGxo9Gx";
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("r@+Tg@pj]TGxo9Gx");
      // Undeclared exception!
      try { 
        jsonWriter1.value((double) 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.name("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before this.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((-2067.9F));
      Number number0 = null;
      stringWriter0.append('$');
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((-777.0932304));
      // Undeclared exception!
      try { 
        jsonWriter1.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.value((Boolean) null);
      Strictness strictness0 = Strictness.STRICT;
      jsonWriter1.setStrictness(strictness0);
      String string0 = "";
      // Undeclared exception!
      try { 
        jsonWriter0.jsonValue("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(false);
      float float0 = (-513.13F);
      // Undeclared exception!
      try { 
        jsonWriter1.value((-513.13F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      long long0 = 12L;
      AtomicLong atomicLong0 = new AtomicLong(12L);
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) atomicLong0);
      // Undeclared exception!
      try { 
        jsonWriter1.value("fZRqt.hJ!");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Boolean boolean0 = Boolean.TRUE;
      jsonWriter0.value(556.831921895789);
      // Undeclared exception!
      try { 
        jsonWriter0.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0F);
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "8 NeTR3zV";
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("8 NeTR3zV");
      // Undeclared exception!
      try { 
        jsonWriter1.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((double) 0);
      // Undeclared exception!
      try { 
        jsonWriter1.value((long) 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonWriter jsonWriter0 = null;
      try {
        jsonWriter0 = new JsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[3];
      char char0 = 'a';
      charArray0[0] = 'a';
      char char1 = 'g';
      charArray0[1] = 'g';
      char char2 = '#';
      charArray0[2] = '#';
      stringWriter1.write(charArray0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter0.value(true);
      jsonWriter1.getStrictness();
      jsonWriter1.setSerializeNulls(false);
      jsonWriter1.getFormattingStyle();
      jsonWriter1.nullValue();
      JsonWriter jsonWriter2 = jsonWriter1.endArray();
      Boolean boolean0 = Boolean.valueOf(false);
      // Undeclared exception!
      try { 
        jsonWriter2.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(66);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 0;
      int int1 = 0;
      stringWriter0.append((CharSequence) stringBuffer0, 0, 0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.flush();
      jsonWriter0.flush();
      jsonWriter0.setLenient(true);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter1.setLenient(true);
      jsonWriter0.name(":");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jsonWriter0.value(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      jsonWriter0.beginArray();
      String string0 = null;
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue((String) null);
      jsonWriter1.flush();
      jsonWriter0.flush();
      jsonWriter0.isLenient();
      JsonWriter jsonWriter2 = jsonWriter1.beginArray();
      jsonWriter2.nullValue();
      jsonWriter1.isLenient();
      BigDecimal bigDecimal0 = new BigDecimal((-2303.93108));
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      MathContext mathContext0 = MathContext.DECIMAL128;
      bigDecimal0.divideToIntegralValue(bigDecimal1, mathContext0);
      MathContext mathContext1 = new MathContext(0);
      bigDecimal0.multiply(bigDecimal1, mathContext1);
      jsonWriter1.value((Number) bigDecimal0);
      // Undeclared exception!
      try { 
        jsonWriter0.name((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-750);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-750));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setHtmlSafe(false);
      long long0 = 1019L;
      JsonWriter jsonWriter1 = jsonWriter0.value(1019L);
      FormattingStyle formattingStyle0 = FormattingStyle.PRETTY;
      formattingStyle0.withSpaceAfterSeparators(false);
      Writer.nullWriter();
      String string0 = "name == null";
      // Undeclared exception!
      try { 
        jsonWriter1.value("name == null");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal((-945.5651));
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) bigDecimal0);
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        jsonWriter1.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue("42AF*)\"(^kUMq~ov");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value("newline == null");
      jsonWriter1.setSerializeNulls(false);
      assertEquals("\"newline == null\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      stringWriter0.append('8');
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      stringWriter0.write("|2at5wZ>D+^m0B:");
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      float float0 = (-931.6655F);
      // Undeclared exception!
      try { 
        stringWriter0.write((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Writer.nullWriter();
      Boolean boolean0 = Boolean.TRUE;
      FormattingStyle formattingStyle0 = FormattingStyle.COMPACT;
      Long long0 = Long.getLong("EzsUSg=U;<9", 0L);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 13;
      StringWriter stringWriter0 = new StringWriter(13);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = null;
      JsonWriter jsonWriter1 = jsonWriter0.value((String) null);
      Writer.nullWriter();
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 361;
      CharBuffer charBuffer0 = CharBuffer.allocate(361);
      String string0 = "8bB_|(UIr!7o0";
      stringWriter0.write("8bB_|(UIr!7o0");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      try { 
        jsonWriter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((-94.19556));
      // Undeclared exception!
      try { 
        jsonWriter1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter1.value(3501.1414F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2494));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value((-1001L));
      JsonWriter jsonWriter3 = jsonWriter2.value(false);
      JsonWriter jsonWriter4 = jsonWriter3.nullValue();
      JsonWriter jsonWriter5 = jsonWriter4.value((-4060.0F));
      jsonWriter5.value(false);
      assertEquals("[-1001,false,null,-4060.0,false", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append(')');
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-2422);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2422));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1943);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value((long) 1943);
      JsonWriter jsonWriter3 = jsonWriter2.value(0.0);
      // Undeclared exception!
      try { 
        jsonWriter3.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1455);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      // Undeclared exception!
      try { 
        jsonWriter1.value((Boolean) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      float float0 = 0.0F;
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0F);
      // Undeclared exception!
      try { 
        jsonWriter1.value(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 668;
      StringWriter stringWriter0 = new StringWriter(668);
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'I';
      charArray0[2] = 't';
      charArray0[3] = 'T';
      charArray0[4] = 'C';
      charArray0[5] = '';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int1 = (-146);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, 668, (-146));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3117);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      String string0 = "fk`U?InM/";
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue("fk`U?InM/");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value(0.0);
      String string0 = "\\u0027";
      // Undeclared exception!
      try { 
        jsonWriter0.value(465L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      // Undeclared exception!
      try { 
        jsonWriter0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      jsonWriter1.name("xX");
      jsonWriter0.value((String) null);
      boolean boolean0 = true;
      try { 
        jsonWriter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("");
      // Undeclared exception!
      try { 
        jsonWriter1.value(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      long long0 = 2119L;
      JsonWriter jsonWriter1 = jsonWriter0.value(2119L);
      // Undeclared exception!
      try { 
        jsonWriter1.value("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 0;
      int int1 = 2099;
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(true);
      // Undeclared exception!
      try { 
        jsonWriter1.value((double) 2099);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.flush();
      String string0 = "9H8 ` AmO;2G,E4-";
      JsonWriter jsonWriter1 = jsonWriter0.value("9H8 ` AmO;2G,E4-");
      Random.setNextRandom((-210));
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      boolean boolean0 = false;
      JsonWriter jsonWriter1 = jsonWriter0.value(false);
      // Undeclared exception!
      try { 
        jsonWriter1.value(1500L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = (-4704);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-4704));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      Strictness strictness0 = Strictness.STRICT;
      jsonWriter0.setStrictness(strictness0);
      jsonWriter0.jsonValue("\"cN(Jt)j3NEaj&nA");
      // Undeclared exception!
      try { 
        jsonWriter0.value("\"cN(Jt)j3NEaj&nA");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      stringWriter0.write("6&6-\"@lg^qA?<G", 0, 0);
      jsonWriter1.setSerializeNulls(false);
      jsonWriter1.endArray();
      // Undeclared exception!
      try { 
        jsonWriter1.value("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value("\n");
      // Undeclared exception!
      try { 
        jsonWriter1.value(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal((-2283.981108675));
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) bigDecimal0);
      // Undeclared exception!
      try { 
        jsonWriter1.value((-1055.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 93;
      StringWriter stringWriter0 = new StringWriter(93);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      String string0 = "OU";
      jsonWriter1.jsonValue("OU");
      float float0 = (-1091.8248F);
      try { 
        jsonWriter1.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      jsonWriter1.name("  ");
      JsonWriter jsonWriter2 = jsonWriter1.value(0.0F);
      JsonWriter jsonWriter3 = jsonWriter2.name("");
      Strictness strictness0 = Strictness.LEGACY_STRICT;
      jsonWriter2.setStrictness(strictness0);
      jsonWriter3.value(0.0F);
      // Undeclared exception!
      try { 
        jsonWriter2.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      String string0 = ";$kO'6H";
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue(";$kO'6H");
      // Undeclared exception!
      try { 
        jsonWriter1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 2428;
      StringWriter stringWriter0 = new StringWriter(2428);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(false);
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1985));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1654);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(false);
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 'g';
      charArray0[2] = 'V';
      charArray0[3] = 'Q';
      charArray0[4] = 'h';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 2, 2);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      StringWriter stringWriter2 = stringWriter1.append('V');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter2);
      Boolean boolean0 = Boolean.valueOf("A@zs,;");
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      // Undeclared exception!
      try { 
        jsonWriter1.value((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal((-1603L), mathContext0);
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) bigDecimal0);
      String string0 = "";
      // Undeclared exception!
      try { 
        jsonWriter1.name("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before this.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(16);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "";
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("");
      // Undeclared exception!
      try { 
        jsonWriter1.value((double) 16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(false);
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(632);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-496);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-496));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = null;
      JsonWriter jsonWriter1 = jsonWriter0.value((String) null);
      // Undeclared exception!
      try { 
        jsonWriter1.value(2192.185F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 1;
      StringWriter stringWriter0 = new StringWriter(1);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((float) 1);
      String string0 = "w91hI";
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue("w91hI");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(461);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value(0.0F);
      assertEquals("0.0", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter1.endArray();
      Boolean boolean0 = null;
      // Undeclared exception!
      try { 
        jsonWriter1.value((-59.54331));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      String string0 = "JSON must have only one top-level value.";
      JsonWriter jsonWriter1 = jsonWriter0.value("JSON must have only one top-level value.");
      // Undeclared exception!
      try { 
        jsonWriter1.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      String string0 = "indent == null";
      Boolean boolean0 = Boolean.valueOf("indent == null");
      // Undeclared exception!
      try { 
        jsonWriter1.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(579);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value((long) 579);
      JsonWriter jsonWriter3 = jsonWriter2.beginArray();
      jsonWriter3.jsonValue("");
      Strictness strictness0 = Strictness.LENIENT;
      jsonWriter0.setStrictness(strictness0);
      FormattingStyle formattingStyle0 = jsonWriter1.getFormattingStyle();
      jsonWriter0.getStrictness();
      jsonWriter2.value((float) 579);
      jsonWriter1.setFormattingStyle(formattingStyle0);
      assertEquals("[579,[,579.0", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3717);
      stringWriter0.flush();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "Y";
      // Undeclared exception!
      try { 
        jsonWriter0.name("Y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before this.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = "TT\"B2MYUDV";
      JsonWriter jsonWriter1 = jsonWriter0.value("TT\"B2MYUDV");
      Writer.nullWriter();
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      String string0 = "";
      jsonWriter1.close();
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonWriter is closed.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter1.value(3870L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('6');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean1);
      String string0 = "o),r3R6H'BiuZ";
      // Undeclared exception!
      try { 
        jsonWriter1.name("o),r3R6H'BiuZ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before this.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      // Undeclared exception!
      try { 
        jsonWriter1.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1495);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value("");
      // Undeclared exception!
      try { 
        jsonWriter1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 2;
      StringWriter stringWriter0 = new StringWriter(2);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TWO;
      bigInteger0.shortValueExact();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Writer.nullWriter();
      StringWriter stringWriter1 = stringWriter0.append('S');
      Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      boolean boolean0 = true;
      int int0 = (-3398);
      stringWriter0.write((-3398));
      String string0 = "LEGACY_STRICT";
      // Undeclared exception!
      try { 
        jsonWriter0.setIndent("LEGACY_STRICT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only combinations of spaces and tabs are allowed in indent.
         //
         verifyException("com.google.gson.FormattingStyle", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 123;
      StringWriter stringWriter0 = new StringWriter(123);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((-309.1));
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(1037.22278324);
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      long long0 = 0L;
      JsonWriter jsonWriter1 = jsonWriter0.value(0L);
      // Undeclared exception!
      try { 
        jsonWriter1.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0);
      // Undeclared exception!
      try { 
        jsonWriter1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((double) 0);
      // Undeclared exception!
      try { 
        jsonWriter1.value(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.value(384L);
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0F);
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1447));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value((-625L));
      JsonWriter jsonWriter3 = jsonWriter2.name("8\"J'");
      String string0 = "]pIA";
      // Undeclared exception!
      try { 
        jsonWriter3.value("]pIA");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      AtomicLong atomicLong0 = new AtomicLong(4483L);
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) atomicLong0);
      // Undeclared exception!
      try { 
        jsonWriter1.value(1.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      long long0 = 450L;
      // Undeclared exception!
      try { 
        jsonWriter1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('M');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      String string0 = "com.google.gson.stream.JsonWriter";
      // Undeclared exception!
      try { 
        jsonWriter0.name("com.google.gson.stream.JsonWriter");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before this.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.flush();
      jsonWriter0.nullValue();
      String string0 = "";
      jsonWriter0.setLenient(false);
      // Undeclared exception!
      try { 
        jsonWriter0.value("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      long long0 = 2782L;
      JsonWriter jsonWriter1 = jsonWriter0.value(2782L);
      // Undeclared exception!
      try { 
        jsonWriter1.value(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      long long0 = 1L;
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) bigDecimal0);
      // Undeclared exception!
      try { 
        jsonWriter1.value((float) 1L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      BigInteger bigInteger0 = BigInteger.TWO;
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) bigInteger0);
      Boolean boolean0 = Boolean.valueOf("");
      // Undeclared exception!
      try { 
        jsonWriter1.value(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      Boolean boolean0 = Boolean.valueOf(true);
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      // Undeclared exception!
      try { 
        jsonWriter1.value(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((String) null);
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2895));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jsonWriter1.value((Number) bigInteger0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) bigDecimal0);
      Boolean.valueOf(true);
      // Undeclared exception!
      try { 
        jsonWriter1.value((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.value((-1226L));
      String string0 = "LENIENT";
      // Undeclared exception!
      try { 
        jsonWriter1.name("LENIENT");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please begin an object before this.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      JsonWriter jsonWriter1 = jsonWriter0.value(1.0);
      // Undeclared exception!
      try { 
        jsonWriter1.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      double double0 = 0.0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) bigDecimal0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jsonWriter1.value((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      // Undeclared exception!
      try { 
        jsonWriter1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value((Number) null);
      jsonWriter2.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter2.value(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1781));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      Boolean boolean0 = Boolean.valueOf(false);
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      // Undeclared exception!
      try { 
        jsonWriter1.value(1.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2785));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      jsonWriter0.setLenient(true);
      JsonWriter jsonWriter1 = jsonWriter0.value((String) null);
      FormattingStyle formattingStyle0 = FormattingStyle.PRETTY;
      formattingStyle0.withNewline("");
      jsonWriter1.setFormattingStyle(formattingStyle0);
      JsonWriter jsonWriter2 = jsonWriter1.nullValue();
      JsonWriter jsonWriter3 = jsonWriter1.value((-954L));
      jsonWriter3.isLenient();
      jsonWriter1.setSerializeNulls(true);
      boolean boolean0 = jsonWriter2.getSerializeNulls();
      assertTrue(jsonWriter0.isLenient());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((float) 31);
      // Undeclared exception!
      try { 
        jsonWriter1.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      assertTrue(jsonWriter0.getSerializeNulls());
      
      jsonWriter0.setSerializeNulls(false);
      jsonWriter0.isHtmlSafe();
      jsonWriter0.setLenient(false);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      Boolean boolean0 = Boolean.valueOf(false);
      JsonWriter jsonWriter2 = jsonWriter1.value(boolean0);
      FormattingStyle formattingStyle0 = FormattingStyle.PRETTY;
      jsonWriter0.setFormattingStyle(formattingStyle0);
      jsonWriter2.value("Rdy1.yr");
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = (-241);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-241));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("_pK||");
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = '*';
      charArray0[2] = 'h';
      charArray0[3] = 'l';
      charArray0[4] = 'i';
      stringWriter0.write(charArray0);
      stringWriter0.write(1);
      stringWriter0.flush();
      Writer.nullWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.getSerializeNulls();
      jsonWriter0.nullValue();
      assertEquals("_pK|| *hli\u0001null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 10;
      StringWriter stringWriter0 = new StringWriter(10);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      String string0 = null;
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue((String) null);
      // Undeclared exception!
      try { 
        jsonWriter1.value((float) 10);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }
}
